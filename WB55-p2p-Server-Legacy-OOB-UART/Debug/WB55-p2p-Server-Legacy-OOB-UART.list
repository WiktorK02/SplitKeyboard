
WB55-p2p-Server-Legacy-OOB-UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014d70  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019ac  08014eb0  08014eb0  00015eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801685c  0801685c  0001785c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016864  08016864  00017864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08016868  08016868  00017868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001b8  20000008  0801686c  00018008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  200001c0  08016a24  000181c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001f8  08016a59  000181f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f54  2000020c  08016a6a  0001820c  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  20002160  08016a6a  00019160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0001a000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0001a000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08016a6a  000191e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0003d29c  00000000  00000000  00019a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000862d  00000000  00000000  00056d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000035a0  00000000  00000000  0005f360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002925  00000000  00000000  00062900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00031c02  00000000  00000000  00065225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003ecba  00000000  00000000  00096e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001097e8  00000000  00000000  000d5ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001df2c9  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000eb24  00000000  00000000  001df30c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000007a  00000000  00000000  001ede30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000020c 	.word	0x2000020c
 800015c:	00000000 	.word	0x00000000
 8000160:	08014e98 	.word	0x08014e98

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000210 	.word	0x20000210
 800017c:	08014e98 	.word	0x08014e98

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	@ 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800080c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000810:	f000 b96a 	b.w	8000ae8 <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9d08      	ldr	r5, [sp, #32]
 8000832:	460c      	mov	r4, r1
 8000834:	2b00      	cmp	r3, #0
 8000836:	d14e      	bne.n	80008d6 <__udivmoddi4+0xaa>
 8000838:	4694      	mov	ip, r2
 800083a:	458c      	cmp	ip, r1
 800083c:	4686      	mov	lr, r0
 800083e:	fab2 f282 	clz	r2, r2
 8000842:	d962      	bls.n	800090a <__udivmoddi4+0xde>
 8000844:	b14a      	cbz	r2, 800085a <__udivmoddi4+0x2e>
 8000846:	f1c2 0320 	rsb	r3, r2, #32
 800084a:	4091      	lsls	r1, r2
 800084c:	fa20 f303 	lsr.w	r3, r0, r3
 8000850:	fa0c fc02 	lsl.w	ip, ip, r2
 8000854:	4319      	orrs	r1, r3
 8000856:	fa00 fe02 	lsl.w	lr, r0, r2
 800085a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800085e:	fa1f f68c 	uxth.w	r6, ip
 8000862:	fbb1 f4f7 	udiv	r4, r1, r7
 8000866:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800086a:	fb07 1114 	mls	r1, r7, r4, r1
 800086e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000872:	fb04 f106 	mul.w	r1, r4, r6
 8000876:	4299      	cmp	r1, r3
 8000878:	d90a      	bls.n	8000890 <__udivmoddi4+0x64>
 800087a:	eb1c 0303 	adds.w	r3, ip, r3
 800087e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000882:	f080 8112 	bcs.w	8000aaa <__udivmoddi4+0x27e>
 8000886:	4299      	cmp	r1, r3
 8000888:	f240 810f 	bls.w	8000aaa <__udivmoddi4+0x27e>
 800088c:	3c02      	subs	r4, #2
 800088e:	4463      	add	r3, ip
 8000890:	1a59      	subs	r1, r3, r1
 8000892:	fa1f f38e 	uxth.w	r3, lr
 8000896:	fbb1 f0f7 	udiv	r0, r1, r7
 800089a:	fb07 1110 	mls	r1, r7, r0, r1
 800089e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a2:	fb00 f606 	mul.w	r6, r0, r6
 80008a6:	429e      	cmp	r6, r3
 80008a8:	d90a      	bls.n	80008c0 <__udivmoddi4+0x94>
 80008aa:	eb1c 0303 	adds.w	r3, ip, r3
 80008ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80008b2:	f080 80fc 	bcs.w	8000aae <__udivmoddi4+0x282>
 80008b6:	429e      	cmp	r6, r3
 80008b8:	f240 80f9 	bls.w	8000aae <__udivmoddi4+0x282>
 80008bc:	4463      	add	r3, ip
 80008be:	3802      	subs	r0, #2
 80008c0:	1b9b      	subs	r3, r3, r6
 80008c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008c6:	2100      	movs	r1, #0
 80008c8:	b11d      	cbz	r5, 80008d2 <__udivmoddi4+0xa6>
 80008ca:	40d3      	lsrs	r3, r2
 80008cc:	2200      	movs	r2, #0
 80008ce:	e9c5 3200 	strd	r3, r2, [r5]
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d905      	bls.n	80008e6 <__udivmoddi4+0xba>
 80008da:	b10d      	cbz	r5, 80008e0 <__udivmoddi4+0xb4>
 80008dc:	e9c5 0100 	strd	r0, r1, [r5]
 80008e0:	2100      	movs	r1, #0
 80008e2:	4608      	mov	r0, r1
 80008e4:	e7f5      	b.n	80008d2 <__udivmoddi4+0xa6>
 80008e6:	fab3 f183 	clz	r1, r3
 80008ea:	2900      	cmp	r1, #0
 80008ec:	d146      	bne.n	800097c <__udivmoddi4+0x150>
 80008ee:	42a3      	cmp	r3, r4
 80008f0:	d302      	bcc.n	80008f8 <__udivmoddi4+0xcc>
 80008f2:	4290      	cmp	r0, r2
 80008f4:	f0c0 80f0 	bcc.w	8000ad8 <__udivmoddi4+0x2ac>
 80008f8:	1a86      	subs	r6, r0, r2
 80008fa:	eb64 0303 	sbc.w	r3, r4, r3
 80008fe:	2001      	movs	r0, #1
 8000900:	2d00      	cmp	r5, #0
 8000902:	d0e6      	beq.n	80008d2 <__udivmoddi4+0xa6>
 8000904:	e9c5 6300 	strd	r6, r3, [r5]
 8000908:	e7e3      	b.n	80008d2 <__udivmoddi4+0xa6>
 800090a:	2a00      	cmp	r2, #0
 800090c:	f040 8090 	bne.w	8000a30 <__udivmoddi4+0x204>
 8000910:	eba1 040c 	sub.w	r4, r1, ip
 8000914:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000918:	fa1f f78c 	uxth.w	r7, ip
 800091c:	2101      	movs	r1, #1
 800091e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000922:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000926:	fb08 4416 	mls	r4, r8, r6, r4
 800092a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800092e:	fb07 f006 	mul.w	r0, r7, r6
 8000932:	4298      	cmp	r0, r3
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x11c>
 8000936:	eb1c 0303 	adds.w	r3, ip, r3
 800093a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0x11a>
 8000940:	4298      	cmp	r0, r3
 8000942:	f200 80cd 	bhi.w	8000ae0 <__udivmoddi4+0x2b4>
 8000946:	4626      	mov	r6, r4
 8000948:	1a1c      	subs	r4, r3, r0
 800094a:	fa1f f38e 	uxth.w	r3, lr
 800094e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000952:	fb08 4410 	mls	r4, r8, r0, r4
 8000956:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800095a:	fb00 f707 	mul.w	r7, r0, r7
 800095e:	429f      	cmp	r7, r3
 8000960:	d908      	bls.n	8000974 <__udivmoddi4+0x148>
 8000962:	eb1c 0303 	adds.w	r3, ip, r3
 8000966:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800096a:	d202      	bcs.n	8000972 <__udivmoddi4+0x146>
 800096c:	429f      	cmp	r7, r3
 800096e:	f200 80b0 	bhi.w	8000ad2 <__udivmoddi4+0x2a6>
 8000972:	4620      	mov	r0, r4
 8000974:	1bdb      	subs	r3, r3, r7
 8000976:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800097a:	e7a5      	b.n	80008c8 <__udivmoddi4+0x9c>
 800097c:	f1c1 0620 	rsb	r6, r1, #32
 8000980:	408b      	lsls	r3, r1
 8000982:	fa22 f706 	lsr.w	r7, r2, r6
 8000986:	431f      	orrs	r7, r3
 8000988:	fa20 fc06 	lsr.w	ip, r0, r6
 800098c:	fa04 f301 	lsl.w	r3, r4, r1
 8000990:	ea43 030c 	orr.w	r3, r3, ip
 8000994:	40f4      	lsrs	r4, r6
 8000996:	fa00 f801 	lsl.w	r8, r0, r1
 800099a:	0c38      	lsrs	r0, r7, #16
 800099c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009a0:	fbb4 fef0 	udiv	lr, r4, r0
 80009a4:	fa1f fc87 	uxth.w	ip, r7
 80009a8:	fb00 441e 	mls	r4, r0, lr, r4
 80009ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b0:	fb0e f90c 	mul.w	r9, lr, ip
 80009b4:	45a1      	cmp	r9, r4
 80009b6:	fa02 f201 	lsl.w	r2, r2, r1
 80009ba:	d90a      	bls.n	80009d2 <__udivmoddi4+0x1a6>
 80009bc:	193c      	adds	r4, r7, r4
 80009be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80009c2:	f080 8084 	bcs.w	8000ace <__udivmoddi4+0x2a2>
 80009c6:	45a1      	cmp	r9, r4
 80009c8:	f240 8081 	bls.w	8000ace <__udivmoddi4+0x2a2>
 80009cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80009d0:	443c      	add	r4, r7
 80009d2:	eba4 0409 	sub.w	r4, r4, r9
 80009d6:	fa1f f983 	uxth.w	r9, r3
 80009da:	fbb4 f3f0 	udiv	r3, r4, r0
 80009de:	fb00 4413 	mls	r4, r0, r3, r4
 80009e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80009ea:	45a4      	cmp	ip, r4
 80009ec:	d907      	bls.n	80009fe <__udivmoddi4+0x1d2>
 80009ee:	193c      	adds	r4, r7, r4
 80009f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80009f4:	d267      	bcs.n	8000ac6 <__udivmoddi4+0x29a>
 80009f6:	45a4      	cmp	ip, r4
 80009f8:	d965      	bls.n	8000ac6 <__udivmoddi4+0x29a>
 80009fa:	3b02      	subs	r3, #2
 80009fc:	443c      	add	r4, r7
 80009fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a02:	fba0 9302 	umull	r9, r3, r0, r2
 8000a06:	eba4 040c 	sub.w	r4, r4, ip
 8000a0a:	429c      	cmp	r4, r3
 8000a0c:	46ce      	mov	lr, r9
 8000a0e:	469c      	mov	ip, r3
 8000a10:	d351      	bcc.n	8000ab6 <__udivmoddi4+0x28a>
 8000a12:	d04e      	beq.n	8000ab2 <__udivmoddi4+0x286>
 8000a14:	b155      	cbz	r5, 8000a2c <__udivmoddi4+0x200>
 8000a16:	ebb8 030e 	subs.w	r3, r8, lr
 8000a1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000a22:	40cb      	lsrs	r3, r1
 8000a24:	431e      	orrs	r6, r3
 8000a26:	40cc      	lsrs	r4, r1
 8000a28:	e9c5 6400 	strd	r6, r4, [r5]
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	e750      	b.n	80008d2 <__udivmoddi4+0xa6>
 8000a30:	f1c2 0320 	rsb	r3, r2, #32
 8000a34:	fa20 f103 	lsr.w	r1, r0, r3
 8000a38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000a40:	4094      	lsls	r4, r2
 8000a42:	430c      	orrs	r4, r1
 8000a44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a4c:	fa1f f78c 	uxth.w	r7, ip
 8000a50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a54:	fb08 3110 	mls	r1, r8, r0, r3
 8000a58:	0c23      	lsrs	r3, r4, #16
 8000a5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a5e:	fb00 f107 	mul.w	r1, r0, r7
 8000a62:	4299      	cmp	r1, r3
 8000a64:	d908      	bls.n	8000a78 <__udivmoddi4+0x24c>
 8000a66:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000a6e:	d22c      	bcs.n	8000aca <__udivmoddi4+0x29e>
 8000a70:	4299      	cmp	r1, r3
 8000a72:	d92a      	bls.n	8000aca <__udivmoddi4+0x29e>
 8000a74:	3802      	subs	r0, #2
 8000a76:	4463      	add	r3, ip
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b2a4      	uxth	r4, r4
 8000a7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a80:	fb08 3311 	mls	r3, r8, r1, r3
 8000a84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a88:	fb01 f307 	mul.w	r3, r1, r7
 8000a8c:	42a3      	cmp	r3, r4
 8000a8e:	d908      	bls.n	8000aa2 <__udivmoddi4+0x276>
 8000a90:	eb1c 0404 	adds.w	r4, ip, r4
 8000a94:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000a98:	d213      	bcs.n	8000ac2 <__udivmoddi4+0x296>
 8000a9a:	42a3      	cmp	r3, r4
 8000a9c:	d911      	bls.n	8000ac2 <__udivmoddi4+0x296>
 8000a9e:	3902      	subs	r1, #2
 8000aa0:	4464      	add	r4, ip
 8000aa2:	1ae4      	subs	r4, r4, r3
 8000aa4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000aa8:	e739      	b.n	800091e <__udivmoddi4+0xf2>
 8000aaa:	4604      	mov	r4, r0
 8000aac:	e6f0      	b.n	8000890 <__udivmoddi4+0x64>
 8000aae:	4608      	mov	r0, r1
 8000ab0:	e706      	b.n	80008c0 <__udivmoddi4+0x94>
 8000ab2:	45c8      	cmp	r8, r9
 8000ab4:	d2ae      	bcs.n	8000a14 <__udivmoddi4+0x1e8>
 8000ab6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000aba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000abe:	3801      	subs	r0, #1
 8000ac0:	e7a8      	b.n	8000a14 <__udivmoddi4+0x1e8>
 8000ac2:	4631      	mov	r1, r6
 8000ac4:	e7ed      	b.n	8000aa2 <__udivmoddi4+0x276>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	e799      	b.n	80009fe <__udivmoddi4+0x1d2>
 8000aca:	4630      	mov	r0, r6
 8000acc:	e7d4      	b.n	8000a78 <__udivmoddi4+0x24c>
 8000ace:	46d6      	mov	lr, sl
 8000ad0:	e77f      	b.n	80009d2 <__udivmoddi4+0x1a6>
 8000ad2:	4463      	add	r3, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	e74d      	b.n	8000974 <__udivmoddi4+0x148>
 8000ad8:	4606      	mov	r6, r0
 8000ada:	4623      	mov	r3, r4
 8000adc:	4608      	mov	r0, r1
 8000ade:	e70f      	b.n	8000900 <__udivmoddi4+0xd4>
 8000ae0:	3e02      	subs	r6, #2
 8000ae2:	4463      	add	r3, ip
 8000ae4:	e730      	b.n	8000948 <__udivmoddi4+0x11c>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_idiv0>:
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <LL_EXTI_EnableIT_32_63+0x24>)
 8000af6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000afa:	4905      	ldr	r1, [pc, #20]	@ (8000b10 <LL_EXTI_EnableIT_32_63+0x24>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	58000800 	.word	0x58000800

08000b14 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b20:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b30:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4013      	ands	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b38:	68fb      	ldr	r3, [r7, #12]
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b085      	sub	sp, #20
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000b4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b52:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000b56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000b62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b66:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b70:	68fb      	ldr	r3, [r7, #12]
}
 8000b72:	bf00      	nop
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000b82:	f002 fb77 	bl	8003274 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000b86:	f002 fb7b 	bl	8003280 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000b8a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000b8e:	f7ff ffad 	bl	8000aec <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000b92:	f00f ffef 	bl	8010b74 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000b96:	f000 f821 	bl	8000bdc <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000b9a:	f000 f8c1 	bl	8000d20 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000b9e:	bf00      	nop
}
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000ba4:	b5b0      	push	{r4, r5, r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000baa:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd8 <APPD_EnableCPU2+0x34>)
 8000bac:	1d3c      	adds	r4, r7, #4
 8000bae:	461d      	mov	r5, r3
 8000bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bb8:	c403      	stmia	r4!, {r0, r1}
 8000bba:	8022      	strh	r2, [r4, #0]
 8000bbc:	3402      	adds	r4, #2
 8000bbe:	0c13      	lsrs	r3, r2, #16
 8000bc0:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000bc2:	f00f ff13 	bl	80109ec <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f00f f9ae 	bl	800ff2a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000bce:	bf00      	nop
}
 8000bd0:	3720      	adds	r7, #32
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	08014eb0 	.word	0x08014eb0

08000bdc <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	77fb      	strb	r3, [r7, #31]
 8000c00:	e036      	b.n	8000c70 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000c02:	7ffb      	ldrb	r3, [r7, #31]
 8000c04:	4a43      	ldr	r2, [pc, #268]	@ (8000d14 <APPD_SetCPU2GpioConfig+0x138>)
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	4413      	add	r3, r2
 8000c0a:	799b      	ldrb	r3, [r3, #6]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d02c      	beq.n	8000c6a <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000c10:	7ffb      	ldrb	r3, [r7, #31]
 8000c12:	4a40      	ldr	r2, [pc, #256]	@ (8000d14 <APPD_SetCPU2GpioConfig+0x138>)
 8000c14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c18:	4a3f      	ldr	r2, [pc, #252]	@ (8000d18 <APPD_SetCPU2GpioConfig+0x13c>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d01b      	beq.n	8000c56 <APPD_SetCPU2GpioConfig+0x7a>
 8000c1e:	4a3e      	ldr	r2, [pc, #248]	@ (8000d18 <APPD_SetCPU2GpioConfig+0x13c>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d821      	bhi.n	8000c68 <APPD_SetCPU2GpioConfig+0x8c>
 8000c24:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c28:	d003      	beq.n	8000c32 <APPD_SetCPU2GpioConfig+0x56>
 8000c2a:	4a3c      	ldr	r2, [pc, #240]	@ (8000d1c <APPD_SetCPU2GpioConfig+0x140>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d009      	beq.n	8000c44 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8000c30:	e01a      	b.n	8000c68 <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000c32:	7ffb      	ldrb	r3, [r7, #31]
 8000c34:	4a37      	ldr	r2, [pc, #220]	@ (8000d14 <APPD_SetCPU2GpioConfig+0x138>)
 8000c36:	00db      	lsls	r3, r3, #3
 8000c38:	4413      	add	r3, r2
 8000c3a:	889a      	ldrh	r2, [r3, #4]
 8000c3c:	8bbb      	ldrh	r3, [r7, #28]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	83bb      	strh	r3, [r7, #28]
          break;
 8000c42:	e012      	b.n	8000c6a <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000c44:	7ffb      	ldrb	r3, [r7, #31]
 8000c46:	4a33      	ldr	r2, [pc, #204]	@ (8000d14 <APPD_SetCPU2GpioConfig+0x138>)
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	4413      	add	r3, r2
 8000c4c:	889a      	ldrh	r2, [r3, #4]
 8000c4e:	8b7b      	ldrh	r3, [r7, #26]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	837b      	strh	r3, [r7, #26]
          break;
 8000c54:	e009      	b.n	8000c6a <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000c56:	7ffb      	ldrb	r3, [r7, #31]
 8000c58:	4a2e      	ldr	r2, [pc, #184]	@ (8000d14 <APPD_SetCPU2GpioConfig+0x138>)
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	4413      	add	r3, r2
 8000c5e:	889a      	ldrh	r2, [r3, #4]
 8000c60:	8b3b      	ldrh	r3, [r7, #24]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	833b      	strh	r3, [r7, #24]
          break;
 8000c66:	e000      	b.n	8000c6a <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8000c68:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c6a:	7ffb      	ldrb	r3, [r7, #31]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	77fb      	strb	r3, [r7, #31]
 8000c70:	7ffb      	ldrb	r3, [r7, #31]
 8000c72:	2b25      	cmp	r3, #37	@ 0x25
 8000c74:	d9c5      	bls.n	8000c02 <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000c82:	8bbb      	ldrh	r3, [r7, #28]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d014      	beq.n	8000cb2 <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000c88:	8bbb      	ldrh	r3, [r7, #28]
 8000c8a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	f7ff ff41 	bl	8000b14 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000c92:	2001      	movs	r0, #1
 8000c94:	f7ff ff57 	bl	8000b46 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca0:	f002 ffc0 	bl	8003c24 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000ca4:	8bbb      	ldrh	r3, [r7, #28]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cae:	f003 f941 	bl	8003f34 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000cb2:	8b7b      	ldrh	r3, [r7, #26]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d012      	beq.n	8000cde <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000cb8:	8b7b      	ldrh	r3, [r7, #26]
 8000cba:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbc:	2002      	movs	r0, #2
 8000cbe:	f7ff ff29 	bl	8000b14 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000cc2:	2002      	movs	r0, #2
 8000cc4:	f7ff ff3f 	bl	8000b46 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4813      	ldr	r0, [pc, #76]	@ (8000d1c <APPD_SetCPU2GpioConfig+0x140>)
 8000cce:	f002 ffa9 	bl	8003c24 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000cd2:	8b7b      	ldrh	r3, [r7, #26]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4810      	ldr	r0, [pc, #64]	@ (8000d1c <APPD_SetCPU2GpioConfig+0x140>)
 8000cda:	f003 f92b 	bl	8003f34 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000cde:	8b3b      	ldrh	r3, [r7, #24]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d013      	beq.n	8000d0c <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000ce4:	8b3b      	ldrh	r3, [r7, #24]
 8000ce6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce8:	2004      	movs	r0, #4
 8000cea:	f7ff ff13 	bl	8000b14 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000cee:	2004      	movs	r0, #4
 8000cf0:	f7ff ff29 	bl	8000b46 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4807      	ldr	r0, [pc, #28]	@ (8000d18 <APPD_SetCPU2GpioConfig+0x13c>)
 8000cfa:	f002 ff93 	bl	8003c24 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000cfe:	8b3b      	ldrh	r3, [r7, #24]
 8000d00:	2200      	movs	r2, #0
 8000d02:	4619      	mov	r1, r3
 8000d04:	4804      	ldr	r0, [pc, #16]	@ (8000d18 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d06:	f003 f915 	bl	8003f34 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000d0a:	bf00      	nop
 8000d0c:	bf00      	nop
}
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	080165f8 	.word	0x080165f8
 8000d18:	48000800 	.word	0x48000800
 8000d1c:	48000400 	.word	0x48000400

08000d20 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000d24:	bf00      	nop
}
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000d32:	f001 fd35 	bl	80027a0 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000d36:	bf00      	nop
}
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b084      	sub	sp, #16
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	60f8      	str	r0, [r7, #12]
 8000d42:	460b      	mov	r3, r1
 8000d44:	607a      	str	r2, [r7, #4]
 8000d46:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000d48:	897a      	ldrh	r2, [r7, #10]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	68f9      	ldr	r1, [r7, #12]
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f001 f9f2 	bl	8002138 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000d54:	bf00      	nop
}
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000d64:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d6a:	f023 0207 	bic.w	r2, r3, #7
 8000d6e:	4905      	ldr	r1, [pc, #20]	@ (8000d84 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	58000400 	.word	0x58000400

08000d88 <LL_EXTI_EnableIT_32_63>:
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <LL_EXTI_EnableIT_32_63+0x24>)
 8000d92:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000d96:	4905      	ldr	r1, [pc, #20]	@ (8000dac <LL_EXTI_EnableIT_32_63+0x24>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	58000800 	.word	0x58000800

08000db0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000de8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000dbe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000dca:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	021b      	lsls	r3, r3, #8
 8000dd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	cafecafe 	.word	0xcafecafe

08000dec <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000df4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000dfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	608b      	str	r3, [r1, #8]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000e18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000e20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000e3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000e42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000e5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8000e6c:	d101      	bne.n	8000e72 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e000      	b.n	8000e74 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000e82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000e92:	d101      	bne.n	8000e98 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000e94:	2301      	movs	r3, #1
 8000e96:	e000      	b.n	8000e9a <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <LL_AHB3_GRP1_EnableClock>:
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000eac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000eb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000ebc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ec0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000edc:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <LL_DBGMCU_GetDeviceID+0x18>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e0042000 	.word	0xe0042000

08000ef4 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000ef8:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <LL_DBGMCU_GetRevisionID+0x18>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	0c1b      	lsrs	r3, r3, #16
 8000efe:	b29b      	uxth	r3, r3
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e0042000 	.word	0xe0042000

08000f10 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	041b      	lsls	r3, r3, #16
 8000f22:	431a      	orrs	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	605a      	str	r2, [r3, #4]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	431a      	orrs	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	605a      	str	r2, [r3, #4]
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	695a      	ldr	r2, [r3, #20]
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	041b      	lsls	r3, r3, #16
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	615a      	str	r2, [r3, #20]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	695a      	ldr	r2, [r3, #20]
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	615a      	str	r2, [r3, #20]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	683a      	ldr	r2, [r7, #0]
 8000faa:	609a      	str	r2, [r3, #8]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	619a      	str	r2, [r3, #24]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	22ff      	movs	r2, #255	@ 0xff
 8000fe0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	22ca      	movs	r2, #202	@ 0xca
 8000ffa:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2253      	movs	r2, #83	@ 0x53
 8001000:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f023 0207 	bic.w	r2, r3, #7
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	431a      	orrs	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	609a      	str	r2, [r3, #8]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001038:	4b04      	ldr	r3, [pc, #16]	@ (800104c <MX_APPE_Config+0x18>)
 800103a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800103e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001040:	f000 f82a 	bl	8001098 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001044:	f000 f86a 	bl	800111c <Config_HSE>

  return;
 8001048:	bf00      	nop
}
 800104a:	bd80      	pop	{r7, pc}
 800104c:	58004000 	.word	0x58004000

08001050 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001054:	f000 f876 	bl	8001144 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001058:	f000 f88e 	bl	8001178 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800105c:	4906      	ldr	r1, [pc, #24]	@ (8001078 <MX_APPE_Init+0x28>)
 800105e:	2000      	movs	r0, #0
 8001060:	f000 fe3e 	bl	8001ce0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8001064:	f7ff fd8b 	bl	8000b7e <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001068:	2101      	movs	r1, #1
 800106a:	2001      	movs	r0, #1
 800106c:	f012 fb0c 	bl	8013688 <UTIL_LPM_SetOffMode>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001070:	f000 f890 	bl	8001194 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001074:	bf00      	nop
}
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200004b0 	.word	0x200004b0

0800107c <Init_Smps>:

void Init_Smps(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001080:	bf00      	nop
}
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <Init_Exti>:

void Init_Exti(void)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800108e:	2050      	movs	r0, #80	@ 0x50
 8001090:	f7ff fe7a 	bl	8000d88 <LL_EXTI_EnableIT_32_63>

  return;
 8001094:	bf00      	nop
}
 8001096:	bd80      	pop	{r7, pc}

08001098 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 800109c:	f000 f804 	bl	80010a8 <Reset_BackupDomain>

  Reset_IPCC();
 80010a0:	f000 f81a 	bl	80010d8 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80010a4:	bf00      	nop
}
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80010ac:	f7ff fed4 	bl	8000e58 <LL_RCC_IsActiveFlag_PINRST>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00d      	beq.n	80010d2 <Reset_BackupDomain+0x2a>
 80010b6:	f7ff fee2 	bl	8000e7e <LL_RCC_IsActiveFlag_SFTRST>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d108      	bne.n	80010d2 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80010c0:	f004 fd3e 	bl	8005b40 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80010c4:	f004 fd3c 	bl	8005b40 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80010c8:	f7ff fea4 	bl	8000e14 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80010cc:	f7ff feb3 	bl	8000e36 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
}
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80010dc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80010e0:	f7ff fee0 	bl	8000ea4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80010e4:	213f      	movs	r1, #63	@ 0x3f
 80010e6:	480c      	ldr	r0, [pc, #48]	@ (8001118 <Reset_IPCC+0x40>)
 80010e8:	f7ff ff58 	bl	8000f9c <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80010ec:	213f      	movs	r1, #63	@ 0x3f
 80010ee:	480a      	ldr	r0, [pc, #40]	@ (8001118 <Reset_IPCC+0x40>)
 80010f0:	f7ff ff62 	bl	8000fb8 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80010f4:	213f      	movs	r1, #63	@ 0x3f
 80010f6:	4808      	ldr	r0, [pc, #32]	@ (8001118 <Reset_IPCC+0x40>)
 80010f8:	f7ff ff0a 	bl	8000f10 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80010fc:	213f      	movs	r1, #63	@ 0x3f
 80010fe:	4806      	ldr	r0, [pc, #24]	@ (8001118 <Reset_IPCC+0x40>)
 8001100:	f7ff ff29 	bl	8000f56 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8001104:	213f      	movs	r1, #63	@ 0x3f
 8001106:	4804      	ldr	r0, [pc, #16]	@ (8001118 <Reset_IPCC+0x40>)
 8001108:	f7ff ff14 	bl	8000f34 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 800110c:	213f      	movs	r1, #63	@ 0x3f
 800110e:	4802      	ldr	r0, [pc, #8]	@ (8001118 <Reset_IPCC+0x40>)
 8001110:	f7ff ff33 	bl	8000f7a <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001114:	bf00      	nop
}
 8001116:	bd80      	pop	{r7, pc}
 8001118:	58000c00 	.word	0x58000c00

0800111c <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001122:	2000      	movs	r0, #0
 8001124:	f00f fda4 	bl	8010c70 <OTP_Read>
 8001128:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d005      	beq.n	800113c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	799b      	ldrb	r3, [r3, #6]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fe3b 	bl	8000db0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800113a:	bf00      	nop
 800113c:	bf00      	nop
}
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <System_Init>:

static void System_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  Init_Smps();
 8001148:	f7ff ff98 	bl	800107c <Init_Smps>

  Init_Exti();
 800114c:	f7ff ff9d 	bl	800108a <Init_Exti>

  Init_Rtc();
 8001150:	f000 f802 	bl	8001158 <Init_Rtc>

  return;
 8001154:	bf00      	nop
}
 8001156:	bd80      	pop	{r7, pc}

08001158 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800115c:	4805      	ldr	r0, [pc, #20]	@ (8001174 <Init_Rtc+0x1c>)
 800115e:	f7ff ff46 	bl	8000fee <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001162:	2100      	movs	r1, #0
 8001164:	4803      	ldr	r0, [pc, #12]	@ (8001174 <Init_Rtc+0x1c>)
 8001166:	f7ff ff52 	bl	800100e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800116a:	4802      	ldr	r0, [pc, #8]	@ (8001174 <Init_Rtc+0x1c>)
 800116c:	f7ff ff32 	bl	8000fd4 <LL_RTC_EnableWriteProtection>

  return;
 8001170:	bf00      	nop
}
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40002800 	.word	0x40002800

08001178 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800117c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001180:	f7ff fe34 	bl	8000dec <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001184:	f012 fa6e 	bl	8013664 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001188:	2004      	movs	r0, #4
 800118a:	f7ff fde7 	bl	8000d5c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800118e:	bf00      	nop
}
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800119a:	f00f fa71 	bl	8010680 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800119e:	4a11      	ldr	r2, [pc, #68]	@ (80011e4 <appe_Tl_Init+0x50>)
 80011a0:	2100      	movs	r1, #0
 80011a2:	2080      	movs	r0, #128	@ 0x80
 80011a4:	f012 fb9c 	bl	80138e0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <appe_Tl_Init+0x54>)
 80011aa:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80011ac:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <appe_Tl_Init+0x58>)
 80011ae:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80011b0:	463b      	mov	r3, r7
 80011b2:	4619      	mov	r1, r3
 80011b4:	480e      	ldr	r0, [pc, #56]	@ (80011f0 <appe_Tl_Init+0x5c>)
 80011b6:	f00f f929 	bl	801040c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <appe_Tl_Init+0x60>)
 80011bc:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80011be:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <appe_Tl_Init+0x64>)
 80011c0:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <appe_Tl_Init+0x68>)
 80011c4:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80011c6:	f240 533c 	movw	r3, #1340	@ 0x53c
 80011ca:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	4618      	mov	r0, r3
 80011d2:	f00f fb97 	bl	8010904 <TL_MM_Init>

  TL_Enable();
 80011d6:	f00f fa4d 	bl	8010674 <TL_Enable>

  return;
 80011da:	bf00      	nop
}
 80011dc:	3720      	adds	r7, #32
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	08010445 	.word	0x08010445
 80011e8:	20030734 	.word	0x20030734
 80011ec:	08001201 	.word	0x08001201
 80011f0:	08001219 	.word	0x08001219
 80011f4:	2003094c 	.word	0x2003094c
 80011f8:	20030840 	.word	0x20030840
 80011fc:	200301f8 	.word	0x200301f8

08001200 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800120a:	bf00      	nop
}
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	330b      	adds	r3, #11
 8001226:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	b29b      	uxth	r3, r3
 800122e:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8001232:	2b07      	cmp	r3, #7
 8001234:	d860      	bhi.n	80012f8 <APPE_SysUserEvtRx+0xe0>
 8001236:	a201      	add	r2, pc, #4	@ (adr r2, 800123c <APPE_SysUserEvtRx+0x24>)
 8001238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123c:	0800125d 	.word	0x0800125d
 8001240:	0800129f 	.word	0x0800129f
 8001244:	080012ad 	.word	0x080012ad
 8001248:	080012f9 	.word	0x080012f9
 800124c:	080012c9 	.word	0x080012c9
 8001250:	080012d9 	.word	0x080012d9
 8001254:	080012e1 	.word	0x080012e1
 8001258:	080012f1 	.word	0x080012f1
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	4618      	mov	r0, r3
 8001262:	f00e fe8f 	bl	800ff84 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8001266:	7b3b      	ldrb	r3, [r7, #12]
 8001268:	4619      	mov	r1, r3
 800126a:	7b7b      	ldrb	r3, [r7, #13]
 800126c:	461a      	mov	r2, r3
 800126e:	7bbb      	ldrb	r3, [r7, #14]
 8001270:	4824      	ldr	r0, [pc, #144]	@ (8001304 <APPE_SysUserEvtRx+0xec>)
 8001272:	f012 fd55 	bl	8013d20 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8001276:	7c3b      	ldrb	r3, [r7, #16]
 8001278:	4619      	mov	r1, r3
 800127a:	4823      	ldr	r0, [pc, #140]	@ (8001308 <APPE_SysUserEvtRx+0xf0>)
 800127c:	f012 fd50 	bl	8013d20 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8001280:	7dbb      	ldrb	r3, [r7, #22]
 8001282:	4619      	mov	r1, r3
 8001284:	7dfb      	ldrb	r3, [r7, #23]
 8001286:	461a      	mov	r2, r3
 8001288:	7e3b      	ldrb	r3, [r7, #24]
 800128a:	4820      	ldr	r0, [pc, #128]	@ (800130c <APPE_SysUserEvtRx+0xf4>)
 800128c:	f012 fd48 	bl	8013d20 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8001290:	481f      	ldr	r0, [pc, #124]	@ (8001310 <APPE_SysUserEvtRx+0xf8>)
 8001292:	f012 fd45 	bl	8013d20 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f000 f870 	bl	800137c <APPE_SysEvtReadyProcessing>
    break;
 800129c:	e02d      	b.n	80012fa <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 800129e:	481d      	ldr	r0, [pc, #116]	@ (8001314 <APPE_SysUserEvtRx+0xfc>)
 80012a0:	f012 fd3e 	bl	8013d20 <iprintf>
    APPE_SysEvtError(pPayload);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 f843 	bl	8001330 <APPE_SysEvtError>
    break;
 80012aa:	e026      	b.n	80012fa <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 80012ac:	481a      	ldr	r0, [pc, #104]	@ (8001318 <APPE_SysUserEvtRx+0x100>)
 80012ae:	f012 fda7 	bl	8013e00 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80012b6:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	461a      	mov	r2, r3
 80012c0:	4816      	ldr	r0, [pc, #88]	@ (800131c <APPE_SysUserEvtRx+0x104>)
 80012c2:	f012 fd2d 	bl	8013d20 <iprintf>
    break;
 80012c6:	e018      	b.n	80012fa <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4619      	mov	r1, r3
 80012d0:	4813      	ldr	r0, [pc, #76]	@ (8001320 <APPE_SysUserEvtRx+0x108>)
 80012d2:	f012 fd25 	bl	8013d20 <iprintf>
    break;
 80012d6:	e010      	b.n	80012fa <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 80012d8:	4812      	ldr	r0, [pc, #72]	@ (8001324 <APPE_SysUserEvtRx+0x10c>)
 80012da:	f012 fd21 	bl	8013d20 <iprintf>
    break;
 80012de:	e00c      	b.n	80012fa <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4619      	mov	r1, r3
 80012e8:	480f      	ldr	r0, [pc, #60]	@ (8001328 <APPE_SysUserEvtRx+0x110>)
 80012ea:	f012 fd19 	bl	8013d20 <iprintf>
    break;
 80012ee:	e004      	b.n	80012fa <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80012f0:	480e      	ldr	r0, [pc, #56]	@ (800132c <APPE_SysUserEvtRx+0x114>)
 80012f2:	f012 fd15 	bl	8013d20 <iprintf>
    break;
 80012f6:	e000      	b.n	80012fa <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 80012f8:	bf00      	nop
  }

  return;
 80012fa:	bf00      	nop
}
 80012fc:	3720      	adds	r7, #32
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	08014ecc 	.word	0x08014ecc
 8001308:	08014ef0 	.word	0x08014ef0
 800130c:	08014f0c 	.word	0x08014f0c
 8001310:	08014f24 	.word	0x08014f24
 8001314:	08014f44 	.word	0x08014f44
 8001318:	08014f68 	.word	0x08014f68
 800131c:	08014fb8 	.word	0x08014fb8
 8001320:	08014fe0 	.word	0x08014fe0
 8001324:	0801501c 	.word	0x0801501c
 8001328:	08015040 	.word	0x08015040
 800132c:	0801507c 	.word	0x0801507c

08001330 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	330b      	adds	r3, #11
 800133e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	3302      	adds	r3, #2
 8001344:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	4619      	mov	r1, r3
 800134c:	4808      	ldr	r0, [pc, #32]	@ (8001370 <APPE_SysEvtError+0x40>)
 800134e:	f012 fce7 	bl	8013d20 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d103      	bne.n	8001362 <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 800135a:	4806      	ldr	r0, [pc, #24]	@ (8001374 <APPE_SysEvtError+0x44>)
 800135c:	f012 fd50 	bl	8013e00 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001360:	e003      	b.n	800136a <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001362:	4805      	ldr	r0, [pc, #20]	@ (8001378 <APPE_SysEvtError+0x48>)
 8001364:	f012 fd4c 	bl	8013e00 <puts>
  return;
 8001368:	bf00      	nop
}
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	080150a0 	.word	0x080150a0
 8001374:	080150d0 	.word	0x080150d0
 8001378:	0801510c 	.word	0x0801510c

0800137c <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	@ 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001384:	f107 0308 	add.w	r3, r7, #8
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	330b      	adds	r3, #11
 80013a0:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3302      	adds	r3, #2
 80013a6:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d128      	bne.n	8001402 <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80013b0:	481d      	ldr	r0, [pc, #116]	@ (8001428 <APPE_SysEvtReadyProcessing+0xac>)
 80013b2:	f012 fd25 	bl	8013e00 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80013b6:	f7ff fbf5 	bl	8000ba4 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80013ba:	230f      	movs	r3, #15
 80013bc:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80013be:	237f      	movs	r3, #127	@ 0x7f
 80013c0:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80013c2:	f7ff fd97 	bl	8000ef4 <LL_DBGMCU_GetRevisionID>
 80013c6:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 80013c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013ca:	4818      	ldr	r0, [pc, #96]	@ (800142c <APPE_SysEvtReadyProcessing+0xb0>)
 80013cc:	f012 fca8 	bl	8013d20 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 80013d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80013d6:	f7ff fd7f 	bl	8000ed8 <LL_DBGMCU_GetDeviceID>
 80013da:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 80013dc:	6a39      	ldr	r1, [r7, #32]
 80013de:	4814      	ldr	r0, [pc, #80]	@ (8001430 <APPE_SysEvtReadyProcessing+0xb4>)
 80013e0:	f012 fc9e 	bl	8013d20 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 80013e4:	6a3b      	ldr	r3, [r7, #32]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	4618      	mov	r0, r3
 80013f0:	f00e fdb2 	bl	800ff58 <SHCI_C2_Config>

    APP_BLE_Init();
 80013f4:	f010 f942 	bl	801167c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80013f8:	2100      	movs	r1, #0
 80013fa:	2001      	movs	r0, #1
 80013fc:	f012 f944 	bl	8013688 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001400:	e00e      	b.n	8001420 <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d106      	bne.n	8001418 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 800140a:	480a      	ldr	r0, [pc, #40]	@ (8001434 <APPE_SysEvtReadyProcessing+0xb8>)
 800140c:	f012 fc88 	bl	8013d20 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
  return;
 8001416:	e003      	b.n	8001420 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001418:	4807      	ldr	r0, [pc, #28]	@ (8001438 <APPE_SysEvtReadyProcessing+0xbc>)
 800141a:	f012 fc81 	bl	8013d20 <iprintf>
  return;
 800141e:	bf00      	nop
}
 8001420:	3728      	adds	r7, #40	@ 0x28
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	08015144 	.word	0x08015144
 800142c:	08015160 	.word	0x08015160
 8001430:	08015184 	.word	0x08015184
 8001434:	080151a4 	.word	0x080151a4
 8001438:	080151d8 	.word	0x080151d8

0800143c <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001440:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001444:	f012 f950 	bl	80136e8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}

0800144c <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001450:	bf00      	nop
}
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001464:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001468:	f012 f93e 	bl	80136e8 <UTIL_SEQ_Run>

  return;
 800146c:	bf00      	nop
}
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800147c:	2100      	movs	r1, #0
 800147e:	2080      	movs	r0, #128	@ 0x80
 8001480:	f012 fa50 	bl	8013924 <UTIL_SEQ_SetTask>
  return;
 8001484:	bf00      	nop
}
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001494:	2002      	movs	r0, #2
 8001496:	f012 fab1 	bl	80139fc <UTIL_SEQ_SetEvt>
  return;
 800149a:	bf00      	nop
}
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80014aa:	2002      	movs	r0, #2
 80014ac:	f012 fac6 	bl	8013a3c <UTIL_SEQ_WaitEvt>
  return;
 80014b0:	bf00      	nop
}
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <LL_EXTI_EnableIT_0_31>:
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80014c0:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <LL_EXTI_EnableIT_0_31+0x24>)
 80014c2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80014c6:	4905      	ldr	r1, [pc, #20]	@ (80014dc <LL_EXTI_EnableIT_0_31+0x24>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	58000800 	.word	0x58000800

080014e0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80014e8:	4b05      	ldr	r3, [pc, #20]	@ (8001500 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4904      	ldr	r1, [pc, #16]	@ (8001500 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]

}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	58000800 	.word	0x58000800

08001504 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800150a:	4b0d      	ldr	r3, [pc, #52]	@ (8001540 <ReadRtcSsrValue+0x3c>)
 800150c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800150e:	b29b      	uxth	r3, r3
 8001510:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001512:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <ReadRtcSsrValue+0x3c>)
 8001514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001516:	b29b      	uxth	r3, r3
 8001518:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800151a:	e005      	b.n	8001528 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001520:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <ReadRtcSsrValue+0x3c>)
 8001522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001524:	b29b      	uxth	r3, r3
 8001526:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d1f5      	bne.n	800151c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001530:	683b      	ldr	r3, [r7, #0]
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40002800 	.word	0x40002800

08001544 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	460a      	mov	r2, r1
 800154e:	71fb      	strb	r3, [r7, #7]
 8001550:	4613      	mov	r3, r2
 8001552:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001554:	79ba      	ldrb	r2, [r7, #6]
 8001556:	491d      	ldr	r1, [pc, #116]	@ (80015cc <LinkTimerAfter+0x88>)
 8001558:	4613      	mov	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4413      	add	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	440b      	add	r3, r1
 8001562:	3315      	adds	r3, #21
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	2b06      	cmp	r3, #6
 800156c:	d009      	beq.n	8001582 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800156e:	7bfa      	ldrb	r2, [r7, #15]
 8001570:	4916      	ldr	r1, [pc, #88]	@ (80015cc <LinkTimerAfter+0x88>)
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	440b      	add	r3, r1
 800157c:	3314      	adds	r3, #20
 800157e:	79fa      	ldrb	r2, [r7, #7]
 8001580:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001582:	79fa      	ldrb	r2, [r7, #7]
 8001584:	4911      	ldr	r1, [pc, #68]	@ (80015cc <LinkTimerAfter+0x88>)
 8001586:	4613      	mov	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	440b      	add	r3, r1
 8001590:	3315      	adds	r3, #21
 8001592:	7bfa      	ldrb	r2, [r7, #15]
 8001594:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001596:	79fa      	ldrb	r2, [r7, #7]
 8001598:	490c      	ldr	r1, [pc, #48]	@ (80015cc <LinkTimerAfter+0x88>)
 800159a:	4613      	mov	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	440b      	add	r3, r1
 80015a4:	3314      	adds	r3, #20
 80015a6:	79ba      	ldrb	r2, [r7, #6]
 80015a8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80015aa:	79ba      	ldrb	r2, [r7, #6]
 80015ac:	4907      	ldr	r1, [pc, #28]	@ (80015cc <LinkTimerAfter+0x88>)
 80015ae:	4613      	mov	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	440b      	add	r3, r1
 80015b8:	3315      	adds	r3, #21
 80015ba:	79fa      	ldrb	r2, [r7, #7]
 80015bc:	701a      	strb	r2, [r3, #0]

  return;
 80015be:	bf00      	nop
}
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000228 	.word	0x20000228

080015d0 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	460a      	mov	r2, r1
 80015da:	71fb      	strb	r3, [r7, #7]
 80015dc:	4613      	mov	r3, r2
 80015de:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80015e0:	4b29      	ldr	r3, [pc, #164]	@ (8001688 <LinkTimerBefore+0xb8>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	79ba      	ldrb	r2, [r7, #6]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d032      	beq.n	8001652 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80015ec:	79ba      	ldrb	r2, [r7, #6]
 80015ee:	4927      	ldr	r1, [pc, #156]	@ (800168c <LinkTimerBefore+0xbc>)
 80015f0:	4613      	mov	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	4413      	add	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	440b      	add	r3, r1
 80015fa:	3314      	adds	r3, #20
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001600:	7bfa      	ldrb	r2, [r7, #15]
 8001602:	4922      	ldr	r1, [pc, #136]	@ (800168c <LinkTimerBefore+0xbc>)
 8001604:	4613      	mov	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	440b      	add	r3, r1
 800160e:	3315      	adds	r3, #21
 8001610:	79fa      	ldrb	r2, [r7, #7]
 8001612:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001614:	79fa      	ldrb	r2, [r7, #7]
 8001616:	491d      	ldr	r1, [pc, #116]	@ (800168c <LinkTimerBefore+0xbc>)
 8001618:	4613      	mov	r3, r2
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4413      	add	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	440b      	add	r3, r1
 8001622:	3315      	adds	r3, #21
 8001624:	79ba      	ldrb	r2, [r7, #6]
 8001626:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001628:	79fa      	ldrb	r2, [r7, #7]
 800162a:	4918      	ldr	r1, [pc, #96]	@ (800168c <LinkTimerBefore+0xbc>)
 800162c:	4613      	mov	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4413      	add	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	440b      	add	r3, r1
 8001636:	3314      	adds	r3, #20
 8001638:	7bfa      	ldrb	r2, [r7, #15]
 800163a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800163c:	79ba      	ldrb	r2, [r7, #6]
 800163e:	4913      	ldr	r1, [pc, #76]	@ (800168c <LinkTimerBefore+0xbc>)
 8001640:	4613      	mov	r3, r2
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	4413      	add	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	440b      	add	r3, r1
 800164a:	3314      	adds	r3, #20
 800164c:	79fa      	ldrb	r2, [r7, #7]
 800164e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001650:	e014      	b.n	800167c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001652:	79fa      	ldrb	r2, [r7, #7]
 8001654:	490d      	ldr	r1, [pc, #52]	@ (800168c <LinkTimerBefore+0xbc>)
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	440b      	add	r3, r1
 8001660:	3315      	adds	r3, #21
 8001662:	79ba      	ldrb	r2, [r7, #6]
 8001664:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001666:	79ba      	ldrb	r2, [r7, #6]
 8001668:	4908      	ldr	r1, [pc, #32]	@ (800168c <LinkTimerBefore+0xbc>)
 800166a:	4613      	mov	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4413      	add	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	440b      	add	r3, r1
 8001674:	3314      	adds	r3, #20
 8001676:	79fa      	ldrb	r2, [r7, #7]
 8001678:	701a      	strb	r2, [r3, #0]
  return;
 800167a:	bf00      	nop
}
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	200002b8 	.word	0x200002b8
 800168c:	20000228 	.word	0x20000228

08001690 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800169a:	4b4e      	ldr	r3, [pc, #312]	@ (80017d4 <linkTimer+0x144>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b06      	cmp	r3, #6
 80016a2:	d118      	bne.n	80016d6 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80016a4:	4b4b      	ldr	r3, [pc, #300]	@ (80017d4 <linkTimer+0x144>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4b4b      	ldr	r3, [pc, #300]	@ (80017d8 <linkTimer+0x148>)
 80016ac:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80016ae:	4a49      	ldr	r2, [pc, #292]	@ (80017d4 <linkTimer+0x144>)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80016b4:	79fa      	ldrb	r2, [r7, #7]
 80016b6:	4949      	ldr	r1, [pc, #292]	@ (80017dc <linkTimer+0x14c>)
 80016b8:	4613      	mov	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	440b      	add	r3, r1
 80016c2:	3315      	adds	r3, #21
 80016c4:	2206      	movs	r2, #6
 80016c6:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80016c8:	4b45      	ldr	r3, [pc, #276]	@ (80017e0 <linkTimer+0x150>)
 80016ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016ce:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	81fb      	strh	r3, [r7, #14]
 80016d4:	e078      	b.n	80017c8 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80016d6:	f000 f909 	bl	80018ec <ReturnTimeElapsed>
 80016da:	4603      	mov	r3, r0
 80016dc:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80016de:	79fa      	ldrb	r2, [r7, #7]
 80016e0:	493e      	ldr	r1, [pc, #248]	@ (80017dc <linkTimer+0x14c>)
 80016e2:	4613      	mov	r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4413      	add	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	440b      	add	r3, r1
 80016ec:	3308      	adds	r3, #8
 80016ee:	6819      	ldr	r1, [r3, #0]
 80016f0:	89fb      	ldrh	r3, [r7, #14]
 80016f2:	79fa      	ldrb	r2, [r7, #7]
 80016f4:	4419      	add	r1, r3
 80016f6:	4839      	ldr	r0, [pc, #228]	@ (80017dc <linkTimer+0x14c>)
 80016f8:	4613      	mov	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	4403      	add	r3, r0
 8001702:	3308      	adds	r3, #8
 8001704:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001706:	79fa      	ldrb	r2, [r7, #7]
 8001708:	4934      	ldr	r1, [pc, #208]	@ (80017dc <linkTimer+0x14c>)
 800170a:	4613      	mov	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	440b      	add	r3, r1
 8001714:	3308      	adds	r3, #8
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800171a:	4b2e      	ldr	r3, [pc, #184]	@ (80017d4 <linkTimer+0x144>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	b2db      	uxtb	r3, r3
 8001720:	4619      	mov	r1, r3
 8001722:	4a2e      	ldr	r2, [pc, #184]	@ (80017dc <linkTimer+0x14c>)
 8001724:	460b      	mov	r3, r1
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	440b      	add	r3, r1
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	4413      	add	r3, r2
 800172e:	3308      	adds	r3, #8
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	429a      	cmp	r2, r3
 8001736:	d337      	bcc.n	80017a8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001738:	4b26      	ldr	r3, [pc, #152]	@ (80017d4 <linkTimer+0x144>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800173e:	7b7a      	ldrb	r2, [r7, #13]
 8001740:	4926      	ldr	r1, [pc, #152]	@ (80017dc <linkTimer+0x14c>)
 8001742:	4613      	mov	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	440b      	add	r3, r1
 800174c:	3315      	adds	r3, #21
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001752:	e013      	b.n	800177c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001754:	7b7a      	ldrb	r2, [r7, #13]
 8001756:	4921      	ldr	r1, [pc, #132]	@ (80017dc <linkTimer+0x14c>)
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	440b      	add	r3, r1
 8001762:	3315      	adds	r3, #21
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001768:	7b7a      	ldrb	r2, [r7, #13]
 800176a:	491c      	ldr	r1, [pc, #112]	@ (80017dc <linkTimer+0x14c>)
 800176c:	4613      	mov	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4413      	add	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	440b      	add	r3, r1
 8001776:	3315      	adds	r3, #21
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800177c:	7b3b      	ldrb	r3, [r7, #12]
 800177e:	2b06      	cmp	r3, #6
 8001780:	d00b      	beq.n	800179a <linkTimer+0x10a>
 8001782:	7b3a      	ldrb	r2, [r7, #12]
 8001784:	4915      	ldr	r1, [pc, #84]	@ (80017dc <linkTimer+0x14c>)
 8001786:	4613      	mov	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4413      	add	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	440b      	add	r3, r1
 8001790:	3308      	adds	r3, #8
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	429a      	cmp	r2, r3
 8001798:	d2dc      	bcs.n	8001754 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800179a:	7b7a      	ldrb	r2, [r7, #13]
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fecf 	bl	8001544 <LinkTimerAfter>
 80017a6:	e00f      	b.n	80017c8 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80017a8:	4b0a      	ldr	r3, [pc, #40]	@ (80017d4 <linkTimer+0x144>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ff0c 	bl	80015d0 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80017b8:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <linkTimer+0x144>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <linkTimer+0x148>)
 80017c0:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80017c2:	4a04      	ldr	r2, [pc, #16]	@ (80017d4 <linkTimer+0x144>)
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80017c8:	89fb      	ldrh	r3, [r7, #14]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200002b8 	.word	0x200002b8
 80017d8:	200002b9 	.word	0x200002b9
 80017dc:	20000228 	.word	0x20000228
 80017e0:	200002bc 	.word	0x200002bc

080017e4 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	460a      	mov	r2, r1
 80017ee:	71fb      	strb	r3, [r7, #7]
 80017f0:	4613      	mov	r3, r2
 80017f2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80017f4:	4b39      	ldr	r3, [pc, #228]	@ (80018dc <UnlinkTimer+0xf8>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	79fa      	ldrb	r2, [r7, #7]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d111      	bne.n	8001824 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001800:	4b36      	ldr	r3, [pc, #216]	@ (80018dc <UnlinkTimer+0xf8>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	b2da      	uxtb	r2, r3
 8001806:	4b36      	ldr	r3, [pc, #216]	@ (80018e0 <UnlinkTimer+0xfc>)
 8001808:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800180a:	79fa      	ldrb	r2, [r7, #7]
 800180c:	4935      	ldr	r1, [pc, #212]	@ (80018e4 <UnlinkTimer+0x100>)
 800180e:	4613      	mov	r3, r2
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	4413      	add	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	440b      	add	r3, r1
 8001818:	3315      	adds	r3, #21
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4b2f      	ldr	r3, [pc, #188]	@ (80018dc <UnlinkTimer+0xf8>)
 8001820:	701a      	strb	r2, [r3, #0]
 8001822:	e03e      	b.n	80018a2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001824:	79fa      	ldrb	r2, [r7, #7]
 8001826:	492f      	ldr	r1, [pc, #188]	@ (80018e4 <UnlinkTimer+0x100>)
 8001828:	4613      	mov	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4413      	add	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	440b      	add	r3, r1
 8001832:	3314      	adds	r3, #20
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001838:	79fa      	ldrb	r2, [r7, #7]
 800183a:	492a      	ldr	r1, [pc, #168]	@ (80018e4 <UnlinkTimer+0x100>)
 800183c:	4613      	mov	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	440b      	add	r3, r1
 8001846:	3315      	adds	r3, #21
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800184c:	79f9      	ldrb	r1, [r7, #7]
 800184e:	7bfa      	ldrb	r2, [r7, #15]
 8001850:	4824      	ldr	r0, [pc, #144]	@ (80018e4 <UnlinkTimer+0x100>)
 8001852:	460b      	mov	r3, r1
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	440b      	add	r3, r1
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	4403      	add	r3, r0
 800185c:	3315      	adds	r3, #21
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	b2d8      	uxtb	r0, r3
 8001862:	4920      	ldr	r1, [pc, #128]	@ (80018e4 <UnlinkTimer+0x100>)
 8001864:	4613      	mov	r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4413      	add	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	440b      	add	r3, r1
 800186e:	3315      	adds	r3, #21
 8001870:	4602      	mov	r2, r0
 8001872:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001874:	7bbb      	ldrb	r3, [r7, #14]
 8001876:	2b06      	cmp	r3, #6
 8001878:	d013      	beq.n	80018a2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800187a:	79f9      	ldrb	r1, [r7, #7]
 800187c:	7bba      	ldrb	r2, [r7, #14]
 800187e:	4819      	ldr	r0, [pc, #100]	@ (80018e4 <UnlinkTimer+0x100>)
 8001880:	460b      	mov	r3, r1
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	440b      	add	r3, r1
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	4403      	add	r3, r0
 800188a:	3314      	adds	r3, #20
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	b2d8      	uxtb	r0, r3
 8001890:	4914      	ldr	r1, [pc, #80]	@ (80018e4 <UnlinkTimer+0x100>)
 8001892:	4613      	mov	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	440b      	add	r3, r1
 800189c:	3314      	adds	r3, #20
 800189e:	4602      	mov	r2, r0
 80018a0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80018a2:	79fa      	ldrb	r2, [r7, #7]
 80018a4:	490f      	ldr	r1, [pc, #60]	@ (80018e4 <UnlinkTimer+0x100>)
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	440b      	add	r3, r1
 80018b0:	330c      	adds	r3, #12
 80018b2:	2201      	movs	r2, #1
 80018b4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80018b6:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <UnlinkTimer+0xf8>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b06      	cmp	r3, #6
 80018be:	d107      	bne.n	80018d0 <UnlinkTimer+0xec>
 80018c0:	79bb      	ldrb	r3, [r7, #6]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d104      	bne.n	80018d0 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80018c6:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <UnlinkTimer+0x104>)
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80018cc:	601a      	str	r2, [r3, #0]
  }

  return;
 80018ce:	bf00      	nop
 80018d0:	bf00      	nop
}
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	200002b8 	.word	0x200002b8
 80018e0:	200002b9 	.word	0x200002b9
 80018e4:	20000228 	.word	0x20000228
 80018e8:	200002bc 	.word	0x200002bc

080018ec <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80018f2:	4b1a      	ldr	r3, [pc, #104]	@ (800195c <ReturnTimeElapsed+0x70>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018fa:	d026      	beq.n	800194a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80018fc:	f7ff fe02 	bl	8001504 <ReadRtcSsrValue>
 8001900:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001902:	4b16      	ldr	r3, [pc, #88]	@ (800195c <ReturnTimeElapsed+0x70>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	429a      	cmp	r2, r3
 800190a:	d805      	bhi.n	8001918 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 800190c:	4b13      	ldr	r3, [pc, #76]	@ (800195c <ReturnTimeElapsed+0x70>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	e00a      	b.n	800192e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001918:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <ReturnTimeElapsed+0x74>)
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001924:	4b0d      	ldr	r3, [pc, #52]	@ (800195c <ReturnTimeElapsed+0x70>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	4413      	add	r3, r2
 800192c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800192e:	4b0d      	ldr	r3, [pc, #52]	@ (8001964 <ReturnTimeElapsed+0x78>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	fb02 f303 	mul.w	r3, r2, r3
 800193a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 800193c:	4b0a      	ldr	r3, [pc, #40]	@ (8001968 <ReturnTimeElapsed+0x7c>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	40d3      	lsrs	r3, r2
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	e001      	b.n	800194e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	b29b      	uxth	r3, r3
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200002bc 	.word	0x200002bc
 8001960:	200002c4 	.word	0x200002c4
 8001964:	200002c2 	.word	0x200002c2
 8001968:	200002c1 	.word	0x200002c1

0800196c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d108      	bne.n	800198e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800197c:	f7ff fdc2 	bl	8001504 <ReadRtcSsrValue>
 8001980:	4603      	mov	r3, r0
 8001982:	4a21      	ldr	r2, [pc, #132]	@ (8001a08 <RestartWakeupCounter+0x9c>)
 8001984:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001986:	2003      	movs	r0, #3
 8001988:	f001 fdfd 	bl	8003586 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 800198c:	e039      	b.n	8001a02 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d803      	bhi.n	800199c <RestartWakeupCounter+0x30>
 8001994:	4b1d      	ldr	r3, [pc, #116]	@ (8001a0c <RestartWakeupCounter+0xa0>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d002      	beq.n	80019a2 <RestartWakeupCounter+0x36>
      Value -= 1;
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	3b01      	subs	r3, #1
 80019a0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80019a2:	bf00      	nop
 80019a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a10 <RestartWakeupCounter+0xa4>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f8      	beq.n	80019a4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80019b2:	4b17      	ldr	r3, [pc, #92]	@ (8001a10 <RestartWakeupCounter+0xa4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <RestartWakeupCounter+0xa4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80019c2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80019c4:	4b13      	ldr	r3, [pc, #76]	@ (8001a14 <RestartWakeupCounter+0xa8>)
 80019c6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80019ca:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80019cc:	2003      	movs	r0, #3
 80019ce:	f001 fde8 	bl	80035a2 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80019d2:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <RestartWakeupCounter+0xac>)
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	0c1b      	lsrs	r3, r3, #16
 80019d8:	041b      	lsls	r3, r3, #16
 80019da:	88fa      	ldrh	r2, [r7, #6]
 80019dc:	490e      	ldr	r1, [pc, #56]	@ (8001a18 <RestartWakeupCounter+0xac>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80019e2:	f7ff fd8f 	bl	8001504 <ReadRtcSsrValue>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4a07      	ldr	r2, [pc, #28]	@ (8001a08 <RestartWakeupCounter+0x9c>)
 80019ea:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80019ec:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <RestartWakeupCounter+0xa4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <RestartWakeupCounter+0xa4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80019fa:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80019fc:	f3af 8000 	nop.w
  return ;
 8001a00:	bf00      	nop
}
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	200002bc 	.word	0x200002bc
 8001a0c:	200002c1 	.word	0x200002c1
 8001a10:	200004b0 	.word	0x200004b0
 8001a14:	58000800 	.word	0x58000800
 8001a18:	40002800 	.word	0x40002800

08001a1c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001a22:	4b45      	ldr	r3, [pc, #276]	@ (8001b38 <RescheduleTimerList+0x11c>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a2e:	d107      	bne.n	8001a40 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001a30:	bf00      	nop
 8001a32:	4b42      	ldr	r3, [pc, #264]	@ (8001b3c <RescheduleTimerList+0x120>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f8      	bne.n	8001a32 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001a40:	4b3e      	ldr	r3, [pc, #248]	@ (8001b3c <RescheduleTimerList+0x120>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	4b3d      	ldr	r3, [pc, #244]	@ (8001b3c <RescheduleTimerList+0x120>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a4e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001a50:	4b3b      	ldr	r3, [pc, #236]	@ (8001b40 <RescheduleTimerList+0x124>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001a56:	7bfa      	ldrb	r2, [r7, #15]
 8001a58:	493a      	ldr	r1, [pc, #232]	@ (8001b44 <RescheduleTimerList+0x128>)
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	440b      	add	r3, r1
 8001a64:	3308      	adds	r3, #8
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001a6a:	f7ff ff3f 	bl	80018ec <ReturnTimeElapsed>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d205      	bcs.n	8001a86 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001a7e:	4b32      	ldr	r3, [pc, #200]	@ (8001b48 <RescheduleTimerList+0x12c>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]
 8001a84:	e04d      	b.n	8001b22 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	4a30      	ldr	r2, [pc, #192]	@ (8001b4c <RescheduleTimerList+0x130>)
 8001a8a:	8812      	ldrh	r2, [r2, #0]
 8001a8c:	b292      	uxth	r2, r2
 8001a8e:	4413      	add	r3, r2
 8001a90:	461a      	mov	r2, r3
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d906      	bls.n	8001aa6 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001a98:	4b2c      	ldr	r3, [pc, #176]	@ (8001b4c <RescheduleTimerList+0x130>)
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001a9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b48 <RescheduleTimerList+0x12c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
 8001aa4:	e03d      	b.n	8001b22 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001ab0:	4b25      	ldr	r3, [pc, #148]	@ (8001b48 <RescheduleTimerList+0x12c>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001ab6:	e034      	b.n	8001b22 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001ab8:	7bfa      	ldrb	r2, [r7, #15]
 8001aba:	4922      	ldr	r1, [pc, #136]	@ (8001b44 <RescheduleTimerList+0x128>)
 8001abc:	4613      	mov	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	440b      	add	r3, r1
 8001ac6:	3308      	adds	r3, #8
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	88fb      	ldrh	r3, [r7, #6]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d20a      	bcs.n	8001ae6 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001ad0:	7bfa      	ldrb	r2, [r7, #15]
 8001ad2:	491c      	ldr	r1, [pc, #112]	@ (8001b44 <RescheduleTimerList+0x128>)
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4413      	add	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	440b      	add	r3, r1
 8001ade:	3308      	adds	r3, #8
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	e013      	b.n	8001b0e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001ae6:	7bfa      	ldrb	r2, [r7, #15]
 8001ae8:	4916      	ldr	r1, [pc, #88]	@ (8001b44 <RescheduleTimerList+0x128>)
 8001aea:	4613      	mov	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4413      	add	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	440b      	add	r3, r1
 8001af4:	3308      	adds	r3, #8
 8001af6:	6819      	ldr	r1, [r3, #0]
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	7bfa      	ldrb	r2, [r7, #15]
 8001afc:	1ac9      	subs	r1, r1, r3
 8001afe:	4811      	ldr	r0, [pc, #68]	@ (8001b44 <RescheduleTimerList+0x128>)
 8001b00:	4613      	mov	r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	4413      	add	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4403      	add	r3, r0
 8001b0a:	3308      	adds	r3, #8
 8001b0c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001b0e:	7bfa      	ldrb	r2, [r7, #15]
 8001b10:	490c      	ldr	r1, [pc, #48]	@ (8001b44 <RescheduleTimerList+0x128>)
 8001b12:	4613      	mov	r3, r2
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	4413      	add	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	440b      	add	r3, r1
 8001b1c:	3315      	adds	r3, #21
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	2b06      	cmp	r3, #6
 8001b26:	d1c7      	bne.n	8001ab8 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001b28:	89bb      	ldrh	r3, [r7, #12]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff ff1e 	bl	800196c <RestartWakeupCounter>

  return ;
 8001b30:	bf00      	nop
}
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40002800 	.word	0x40002800
 8001b3c:	200004b0 	.word	0x200004b0
 8001b40:	200002b8 	.word	0x200002b8
 8001b44:	20000228 	.word	0x20000228
 8001b48:	200002c0 	.word	0x200002c0
 8001b4c:	200002c6 	.word	0x200002c6

08001b50 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	@ 0x28
 8001b54:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b56:	f3ef 8310 	mrs	r3, PRIMASK
 8001b5a:	617b      	str	r3, [r7, #20]
  return(result);
 8001b5c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001b60:	b672      	cpsid	i
}
 8001b62:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001b64:	4b59      	ldr	r3, [pc, #356]	@ (8001ccc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	22ca      	movs	r2, #202	@ 0xca
 8001b6a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b6c:	4b57      	ldr	r3, [pc, #348]	@ (8001ccc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2253      	movs	r2, #83	@ 0x53
 8001b72:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001b74:	4b55      	ldr	r3, [pc, #340]	@ (8001ccc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	4b54      	ldr	r3, [pc, #336]	@ (8001ccc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b82:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001b84:	4b52      	ldr	r3, [pc, #328]	@ (8001cd0 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001b8c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001b90:	4950      	ldr	r1, [pc, #320]	@ (8001cd4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	440b      	add	r3, r1
 8001b9c:	330c      	adds	r3, #12
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d16e      	bne.n	8001c84 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001ba6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001baa:	494a      	ldr	r1, [pc, #296]	@ (8001cd4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001bba:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001bbe:	4945      	ldr	r1, [pc, #276]	@ (8001cd4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	440b      	add	r3, r1
 8001bca:	3310      	adds	r3, #16
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001bd0:	4b41      	ldr	r3, [pc, #260]	@ (8001cd8 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d04c      	beq.n	8001c74 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001bda:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001bde:	493d      	ldr	r1, [pc, #244]	@ (8001cd4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001be0:	4613      	mov	r3, r2
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	4413      	add	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	440b      	add	r3, r1
 8001bea:	330d      	adds	r3, #13
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d124      	bne.n	8001c3e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001bf4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fdf2 	bl	80017e4 <UnlinkTimer>
 8001c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c02:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	f383 8810 	msr	PRIMASK, r3
}
 8001c0a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001c0c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001c10:	4930      	ldr	r1, [pc, #192]	@ (8001cd4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c12:	4613      	mov	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	440b      	add	r3, r1
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c24:	4611      	mov	r1, r2
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f9b8 	bl	8001f9c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c2c:	4b27      	ldr	r3, [pc, #156]	@ (8001ccc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	22ca      	movs	r2, #202	@ 0xca
 8001c32:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c34:	4b25      	ldr	r3, [pc, #148]	@ (8001ccc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2253      	movs	r2, #83	@ 0x53
 8001c3a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c3c:	e012      	b.n	8001c64 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f383 8810 	msr	PRIMASK, r3
}
 8001c48:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001c4a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f920 	bl	8001e94 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c54:	4b1d      	ldr	r3, [pc, #116]	@ (8001ccc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	22ca      	movs	r2, #202	@ 0xca
 8001c5a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2253      	movs	r2, #83	@ 0x53
 8001c62:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001c64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	69b8      	ldr	r0, [r7, #24]
 8001c6e:	f000 fa1b 	bl	80020a8 <HW_TS_RTC_Int_AppNot>
 8001c72:	e022      	b.n	8001cba <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001c74:	f7ff fed2 	bl	8001a1c <RescheduleTimerList>
 8001c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f383 8810 	msr	PRIMASK, r3
}
 8001c82:	e01a      	b.n	8001cba <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001c84:	bf00      	nop
 8001c86:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f8      	beq.n	8001c86 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001c94:	4b0d      	ldr	r3, [pc, #52]	@ (8001ccc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ccc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001ca4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8001cdc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001ca8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f383 8810 	msr	PRIMASK, r3
}
 8001cb8:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001cba:	4b04      	ldr	r3, [pc, #16]	@ (8001ccc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	22ff      	movs	r2, #255	@ 0xff
 8001cc0:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8001cc2:	bf00      	nop
}
 8001cc4:	3728      	adds	r7, #40	@ 0x28
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	200004b0 	.word	0x200004b0
 8001cd0:	200002b8 	.word	0x200002b8
 8001cd4:	20000228 	.word	0x20000228
 8001cd8:	200002c0 	.word	0x200002c0
 8001cdc:	58000800 	.word	0x58000800

08001ce0 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001cec:	4b5e      	ldr	r3, [pc, #376]	@ (8001e68 <HW_TS_Init+0x188>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	22ca      	movs	r2, #202	@ 0xca
 8001cf2:	625a      	str	r2, [r3, #36]	@ 0x24
 8001cf4:	4b5c      	ldr	r3, [pc, #368]	@ (8001e68 <HW_TS_Init+0x188>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2253      	movs	r2, #83	@ 0x53
 8001cfa:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001cfc:	4b5b      	ldr	r3, [pc, #364]	@ (8001e6c <HW_TS_Init+0x18c>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	4a5a      	ldr	r2, [pc, #360]	@ (8001e6c <HW_TS_Init+0x18c>)
 8001d02:	f043 0320 	orr.w	r3, r3, #32
 8001d06:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001d08:	4b58      	ldr	r3, [pc, #352]	@ (8001e6c <HW_TS_Init+0x18c>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	f1c3 0304 	rsb	r3, r3, #4
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4b55      	ldr	r3, [pc, #340]	@ (8001e70 <HW_TS_Init+0x190>)
 8001d1c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001d1e:	4b53      	ldr	r3, [pc, #332]	@ (8001e6c <HW_TS_Init+0x18c>)
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001d26:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8001d2a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	fa92 f2a2 	rbit	r2, r2
 8001d32:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	2a00      	cmp	r2, #0
 8001d3c:	d101      	bne.n	8001d42 <HW_TS_Init+0x62>
  {
    return 32U;
 8001d3e:	2220      	movs	r2, #32
 8001d40:	e003      	b.n	8001d4a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	fab2 f282 	clz	r2, r2
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	40d3      	lsrs	r3, r2
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	4b48      	ldr	r3, [pc, #288]	@ (8001e74 <HW_TS_Init+0x194>)
 8001d54:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001d56:	4b45      	ldr	r3, [pc, #276]	@ (8001e6c <HW_TS_Init+0x18c>)
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	3301      	adds	r3, #1
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	4b44      	ldr	r3, [pc, #272]	@ (8001e78 <HW_TS_Init+0x198>)
 8001d68:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001d6a:	4b43      	ldr	r3, [pc, #268]	@ (8001e78 <HW_TS_Init+0x198>)
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	4a40      	ldr	r2, [pc, #256]	@ (8001e74 <HW_TS_Init+0x194>)
 8001d72:	7812      	ldrb	r2, [r2, #0]
 8001d74:	fb02 f303 	mul.w	r3, r2, r3
 8001d78:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001d7c:	4a3c      	ldr	r2, [pc, #240]	@ (8001e70 <HW_TS_Init+0x190>)
 8001d7e:	7812      	ldrb	r2, [r2, #0]
 8001d80:	40d3      	lsrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d904      	bls.n	8001d98 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001d8e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e7c <HW_TS_Init+0x19c>)
 8001d90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d94:	801a      	strh	r2, [r3, #0]
 8001d96:	e003      	b.n	8001da0 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	4b37      	ldr	r3, [pc, #220]	@ (8001e7c <HW_TS_Init+0x19c>)
 8001d9e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001da0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001da4:	f7ff fb9c 	bl	80014e0 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001da8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001dac:	f7ff fb84 	bl	80014b8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d13d      	bne.n	8001e32 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001db6:	4b32      	ldr	r3, [pc, #200]	@ (8001e80 <HW_TS_Init+0x1a0>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001dbc:	4b31      	ldr	r3, [pc, #196]	@ (8001e84 <HW_TS_Init+0x1a4>)
 8001dbe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001dc2:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	77fb      	strb	r3, [r7, #31]
 8001dc8:	e00c      	b.n	8001de4 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001dca:	7ffa      	ldrb	r2, [r7, #31]
 8001dcc:	492e      	ldr	r1, [pc, #184]	@ (8001e88 <HW_TS_Init+0x1a8>)
 8001dce:	4613      	mov	r3, r2
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4413      	add	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	440b      	add	r3, r1
 8001dd8:	330c      	adds	r3, #12
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001dde:	7ffb      	ldrb	r3, [r7, #31]
 8001de0:	3301      	adds	r3, #1
 8001de2:	77fb      	strb	r3, [r7, #31]
 8001de4:	7ffb      	ldrb	r3, [r7, #31]
 8001de6:	2b05      	cmp	r3, #5
 8001de8:	d9ef      	bls.n	8001dca <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001dea:	4b28      	ldr	r3, [pc, #160]	@ (8001e8c <HW_TS_Init+0x1ac>)
 8001dec:	2206      	movs	r2, #6
 8001dee:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001df0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e68 <HW_TS_Init+0x188>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e68 <HW_TS_Init+0x188>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dfe:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001e00:	4b19      	ldr	r3, [pc, #100]	@ (8001e68 <HW_TS_Init+0x188>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	4b17      	ldr	r3, [pc, #92]	@ (8001e68 <HW_TS_Init+0x188>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001e10:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001e12:	4b1f      	ldr	r3, [pc, #124]	@ (8001e90 <HW_TS_Init+0x1b0>)
 8001e14:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001e18:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001e1a:	2003      	movs	r0, #3
 8001e1c:	f001 fbc1 	bl	80035a2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001e20:	4b11      	ldr	r3, [pc, #68]	@ (8001e68 <HW_TS_Init+0x188>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	4b10      	ldr	r3, [pc, #64]	@ (8001e68 <HW_TS_Init+0x188>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	e009      	b.n	8001e46 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001e32:	4b0d      	ldr	r3, [pc, #52]	@ (8001e68 <HW_TS_Init+0x188>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001e40:	2003      	movs	r0, #3
 8001e42:	f001 fba0 	bl	8003586 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001e46:	4b08      	ldr	r3, [pc, #32]	@ (8001e68 <HW_TS_Init+0x188>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	22ff      	movs	r2, #255	@ 0xff
 8001e4c:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2103      	movs	r1, #3
 8001e52:	2003      	movs	r0, #3
 8001e54:	f001 fb55 	bl	8003502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001e58:	2003      	movs	r0, #3
 8001e5a:	f001 fb6c 	bl	8003536 <HAL_NVIC_EnableIRQ>

  return;
 8001e5e:	bf00      	nop
}
 8001e60:	3720      	adds	r7, #32
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	200004b0 	.word	0x200004b0
 8001e6c:	40002800 	.word	0x40002800
 8001e70:	200002c1 	.word	0x200002c1
 8001e74:	200002c2 	.word	0x200002c2
 8001e78:	200002c4 	.word	0x200002c4
 8001e7c:	200002c6 	.word	0x200002c6
 8001e80:	200002c0 	.word	0x200002c0
 8001e84:	200002bc 	.word	0x200002bc
 8001e88:	20000228 	.word	0x20000228
 8001e8c:	200002b8 	.word	0x200002b8
 8001e90:	58000800 	.word	0x58000800

08001e94 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8001ea2:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ea6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea8:	b672      	cpsid	i
}
 8001eaa:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001eac:	2003      	movs	r0, #3
 8001eae:	f001 fb50 	bl	8003552 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001eb2:	4b34      	ldr	r3, [pc, #208]	@ (8001f84 <HW_TS_Stop+0xf0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	22ca      	movs	r2, #202	@ 0xca
 8001eb8:	625a      	str	r2, [r3, #36]	@ 0x24
 8001eba:	4b32      	ldr	r3, [pc, #200]	@ (8001f84 <HW_TS_Stop+0xf0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2253      	movs	r2, #83	@ 0x53
 8001ec0:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001ec2:	79fa      	ldrb	r2, [r7, #7]
 8001ec4:	4930      	ldr	r1, [pc, #192]	@ (8001f88 <HW_TS_Stop+0xf4>)
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	440b      	add	r3, r1
 8001ed0:	330c      	adds	r3, #12
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d142      	bne.n	8001f60 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	2100      	movs	r1, #0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fc80 	bl	80017e4 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001ee4:	4b29      	ldr	r3, [pc, #164]	@ (8001f8c <HW_TS_Stop+0xf8>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001eea:	7cfb      	ldrb	r3, [r7, #19]
 8001eec:	2b06      	cmp	r3, #6
 8001eee:	d12f      	bne.n	8001f50 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001ef0:	4b27      	ldr	r3, [pc, #156]	@ (8001f90 <HW_TS_Stop+0xfc>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001efc:	d107      	bne.n	8001f0e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001efe:	bf00      	nop
 8001f00:	4b20      	ldr	r3, [pc, #128]	@ (8001f84 <HW_TS_Stop+0xf0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f8      	bne.n	8001f00 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f84 <HW_TS_Stop+0xf0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	4b1b      	ldr	r3, [pc, #108]	@ (8001f84 <HW_TS_Stop+0xf0>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f1c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001f1e:	bf00      	nop
 8001f20:	4b18      	ldr	r3, [pc, #96]	@ (8001f84 <HW_TS_Stop+0xf0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f8      	beq.n	8001f20 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001f2e:	4b15      	ldr	r3, [pc, #84]	@ (8001f84 <HW_TS_Stop+0xf0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	4b13      	ldr	r3, [pc, #76]	@ (8001f84 <HW_TS_Stop+0xf0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001f3e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001f40:	4b14      	ldr	r3, [pc, #80]	@ (8001f94 <HW_TS_Stop+0x100>)
 8001f42:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001f46:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001f48:	2003      	movs	r0, #3
 8001f4a:	f001 fb2a 	bl	80035a2 <HAL_NVIC_ClearPendingIRQ>
 8001f4e:	e007      	b.n	8001f60 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001f50:	4b11      	ldr	r3, [pc, #68]	@ (8001f98 <HW_TS_Stop+0x104>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	7cfa      	ldrb	r2, [r7, #19]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d001      	beq.n	8001f60 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001f5c:	f7ff fd5e 	bl	8001a1c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001f60:	4b08      	ldr	r3, [pc, #32]	@ (8001f84 <HW_TS_Stop+0xf0>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	22ff      	movs	r2, #255	@ 0xff
 8001f66:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001f68:	2003      	movs	r0, #3
 8001f6a:	f001 fae4 	bl	8003536 <HAL_NVIC_EnableIRQ>
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	f383 8810 	msr	PRIMASK, r3
}
 8001f78:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001f7a:	bf00      	nop
}
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200004b0 	.word	0x200004b0
 8001f88:	20000228 	.word	0x20000228
 8001f8c:	200002b8 	.word	0x200002b8
 8001f90:	40002800 	.word	0x40002800
 8001f94:	58000800 	.word	0x58000800
 8001f98:	200002b9 	.word	0x200002b9

08001f9c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	6039      	str	r1, [r7, #0]
 8001fa6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001fa8:	79fa      	ldrb	r2, [r7, #7]
 8001faa:	493b      	ldr	r1, [pc, #236]	@ (8002098 <HW_TS_Start+0xfc>)
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	440b      	add	r3, r1
 8001fb6:	330c      	adds	r3, #12
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d103      	bne.n	8001fc8 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff ff66 	bl	8001e94 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8001fcc:	60fb      	str	r3, [r7, #12]
  return(result);
 8001fce:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001fd0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd2:	b672      	cpsid	i
}
 8001fd4:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001fd6:	2003      	movs	r0, #3
 8001fd8:	f001 fabb 	bl	8003552 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001fdc:	4b2f      	ldr	r3, [pc, #188]	@ (800209c <HW_TS_Start+0x100>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	22ca      	movs	r2, #202	@ 0xca
 8001fe2:	625a      	str	r2, [r3, #36]	@ 0x24
 8001fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800209c <HW_TS_Start+0x100>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2253      	movs	r2, #83	@ 0x53
 8001fea:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001fec:	79fa      	ldrb	r2, [r7, #7]
 8001fee:	492a      	ldr	r1, [pc, #168]	@ (8002098 <HW_TS_Start+0xfc>)
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	440b      	add	r3, r1
 8001ffa:	330c      	adds	r3, #12
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002000:	79fa      	ldrb	r2, [r7, #7]
 8002002:	4925      	ldr	r1, [pc, #148]	@ (8002098 <HW_TS_Start+0xfc>)
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	440b      	add	r3, r1
 800200e:	3308      	adds	r3, #8
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002014:	79fa      	ldrb	r2, [r7, #7]
 8002016:	4920      	ldr	r1, [pc, #128]	@ (8002098 <HW_TS_Start+0xfc>)
 8002018:	4613      	mov	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4413      	add	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	440b      	add	r3, r1
 8002022:	3304      	adds	r3, #4
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fb30 	bl	8001690 <linkTimer>
 8002030:	4603      	mov	r3, r0
 8002032:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002034:	4b1a      	ldr	r3, [pc, #104]	@ (80020a0 <HW_TS_Start+0x104>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800203a:	4b1a      	ldr	r3, [pc, #104]	@ (80020a4 <HW_TS_Start+0x108>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	b2db      	uxtb	r3, r3
 8002040:	7c7a      	ldrb	r2, [r7, #17]
 8002042:	429a      	cmp	r2, r3
 8002044:	d002      	beq.n	800204c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002046:	f7ff fce9 	bl	8001a1c <RescheduleTimerList>
 800204a:	e013      	b.n	8002074 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800204c:	79fa      	ldrb	r2, [r7, #7]
 800204e:	4912      	ldr	r1, [pc, #72]	@ (8002098 <HW_TS_Start+0xfc>)
 8002050:	4613      	mov	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	440b      	add	r3, r1
 800205a:	3308      	adds	r3, #8
 800205c:	6819      	ldr	r1, [r3, #0]
 800205e:	8a7b      	ldrh	r3, [r7, #18]
 8002060:	79fa      	ldrb	r2, [r7, #7]
 8002062:	1ac9      	subs	r1, r1, r3
 8002064:	480c      	ldr	r0, [pc, #48]	@ (8002098 <HW_TS_Start+0xfc>)
 8002066:	4613      	mov	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4413      	add	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	4403      	add	r3, r0
 8002070:	3308      	adds	r3, #8
 8002072:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002074:	4b09      	ldr	r3, [pc, #36]	@ (800209c <HW_TS_Start+0x100>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	22ff      	movs	r2, #255	@ 0xff
 800207a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800207c:	2003      	movs	r0, #3
 800207e:	f001 fa5a 	bl	8003536 <HAL_NVIC_EnableIRQ>
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	f383 8810 	msr	PRIMASK, r3
}
 800208c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800208e:	bf00      	nop
}
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000228 	.word	0x20000228
 800209c:	200004b0 	.word	0x200004b0
 80020a0:	200002b8 	.word	0x200002b8
 80020a4:	200002b9 	.word	0x200002b9

080020a8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	460b      	mov	r3, r1
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4798      	blx	r3

  return;
 80020ba:	bf00      	nop
}
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607b      	str	r3, [r7, #4]
 80020ce:	4603      	mov	r3, r0
 80020d0:	73fb      	strb	r3, [r7, #15]
 80020d2:	4613      	mov	r3, r2
 80020d4:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d002      	beq.n	80020e2 <HW_UART_Receive_IT+0x1e>
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d00d      	beq.n	80020fc <HW_UART_Receive_IT+0x38>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 80020e0:	e019      	b.n	8002116 <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(huart1, USART1);
 80020e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002120 <HW_UART_Receive_IT+0x5c>)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6013      	str	r3, [r2, #0]
 80020e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002124 <HW_UART_Receive_IT+0x60>)
 80020ea:	4a0f      	ldr	r2, [pc, #60]	@ (8002128 <HW_UART_Receive_IT+0x64>)
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	89bb      	ldrh	r3, [r7, #12]
 80020f0:	461a      	mov	r2, r3
 80020f2:	68b9      	ldr	r1, [r7, #8]
 80020f4:	480b      	ldr	r0, [pc, #44]	@ (8002124 <HW_UART_Receive_IT+0x60>)
 80020f6:	f006 fa23 	bl	8008540 <HAL_UART_Receive_IT>
            break;
 80020fa:	e00c      	b.n	8002116 <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(hlpuart1, LPUART1);
 80020fc:	4a0b      	ldr	r2, [pc, #44]	@ (800212c <HW_UART_Receive_IT+0x68>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	4b0b      	ldr	r3, [pc, #44]	@ (8002130 <HW_UART_Receive_IT+0x6c>)
 8002104:	4a0b      	ldr	r2, [pc, #44]	@ (8002134 <HW_UART_Receive_IT+0x70>)
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	89bb      	ldrh	r3, [r7, #12]
 800210a:	461a      	mov	r2, r3
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	4808      	ldr	r0, [pc, #32]	@ (8002130 <HW_UART_Receive_IT+0x6c>)
 8002110:	f006 fa16 	bl	8008540 <HAL_UART_Receive_IT>
            break;
 8002114:	bf00      	nop
    }

    return;
 8002116:	bf00      	nop
}
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200002c8 	.word	0x200002c8
 8002124:	200003a8 	.word	0x200003a8
 8002128:	40013800 	.word	0x40013800
 800212c:	200002d0 	.word	0x200002d0
 8002130:	20000314 	.word	0x20000314
 8002134:	40008000 	.word	0x40008000

08002138 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607b      	str	r3, [r7, #4]
 8002142:	4603      	mov	r3, r0
 8002144:	73fb      	strb	r3, [r7, #15]
 8002146:	4613      	mov	r3, r2
 8002148:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800214e:	2300      	movs	r3, #0
 8002150:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <HW_UART_Transmit_DMA+0x26>
 8002158:	2b02      	cmp	r3, #2
 800215a:	d00f      	beq.n	800217c <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 800215c:	e01d      	b.n	800219a <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 800215e:	4a1f      	ldr	r2, [pc, #124]	@ (80021dc <HW_UART_Transmit_DMA+0xa4>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8002164:	4b1e      	ldr	r3, [pc, #120]	@ (80021e0 <HW_UART_Transmit_DMA+0xa8>)
 8002166:	4a1f      	ldr	r2, [pc, #124]	@ (80021e4 <HW_UART_Transmit_DMA+0xac>)
 8002168:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 800216a:	89bb      	ldrh	r3, [r7, #12]
 800216c:	461a      	mov	r2, r3
 800216e:	68b9      	ldr	r1, [r7, #8]
 8002170:	481b      	ldr	r0, [pc, #108]	@ (80021e0 <HW_UART_Transmit_DMA+0xa8>)
 8002172:	f006 fa31 	bl	80085d8 <HAL_UART_Transmit_DMA>
 8002176:	4603      	mov	r3, r0
 8002178:	75fb      	strb	r3, [r7, #23]
            break;
 800217a:	e00e      	b.n	800219a <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 800217c:	4a1a      	ldr	r2, [pc, #104]	@ (80021e8 <HW_UART_Transmit_DMA+0xb0>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 8002182:	4b1a      	ldr	r3, [pc, #104]	@ (80021ec <HW_UART_Transmit_DMA+0xb4>)
 8002184:	4a1a      	ldr	r2, [pc, #104]	@ (80021f0 <HW_UART_Transmit_DMA+0xb8>)
 8002186:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8002188:	89bb      	ldrh	r3, [r7, #12]
 800218a:	461a      	mov	r2, r3
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	4817      	ldr	r0, [pc, #92]	@ (80021ec <HW_UART_Transmit_DMA+0xb4>)
 8002190:	f006 fa22 	bl	80085d8 <HAL_UART_Transmit_DMA>
 8002194:	4603      	mov	r3, r0
 8002196:	75fb      	strb	r3, [r7, #23]
            break;
 8002198:	bf00      	nop
    }

    switch (hal_status)
 800219a:	7dfb      	ldrb	r3, [r7, #23]
 800219c:	2b03      	cmp	r3, #3
 800219e:	d817      	bhi.n	80021d0 <HW_UART_Transmit_DMA+0x98>
 80021a0:	a201      	add	r2, pc, #4	@ (adr r2, 80021a8 <HW_UART_Transmit_DMA+0x70>)
 80021a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a6:	bf00      	nop
 80021a8:	080021b9 	.word	0x080021b9
 80021ac:	080021bf 	.word	0x080021bf
 80021b0:	080021c5 	.word	0x080021c5
 80021b4:	080021cb 	.word	0x080021cb
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80021b8:	2300      	movs	r3, #0
 80021ba:	75bb      	strb	r3, [r7, #22]
            break;
 80021bc:	e009      	b.n	80021d2 <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80021be:	2301      	movs	r3, #1
 80021c0:	75bb      	strb	r3, [r7, #22]
            break;
 80021c2:	e006      	b.n	80021d2 <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80021c4:	2302      	movs	r3, #2
 80021c6:	75bb      	strb	r3, [r7, #22]
            break;
 80021c8:	e003      	b.n	80021d2 <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80021ca:	2303      	movs	r3, #3
 80021cc:	75bb      	strb	r3, [r7, #22]
            break;
 80021ce:	e000      	b.n	80021d2 <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 80021d0:	bf00      	nop
    }

    return hw_status;
 80021d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	200002cc 	.word	0x200002cc
 80021e0:	200003a8 	.word	0x200003a8
 80021e4:	40013800 	.word	0x40013800
 80021e8:	200002d4 	.word	0x200002d4
 80021ec:	20000314 	.word	0x20000314
 80021f0:	40008000 	.word	0x40008000

080021f4 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0f      	ldr	r2, [pc, #60]	@ (8002240 <HAL_UART_RxCpltCallback+0x4c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00a      	beq.n	800221c <HAL_UART_RxCpltCallback+0x28>
 8002206:	4a0f      	ldr	r2, [pc, #60]	@ (8002244 <HAL_UART_RxCpltCallback+0x50>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d10f      	bne.n	800222c <HAL_UART_RxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 800220c:	4b0e      	ldr	r3, [pc, #56]	@ (8002248 <HAL_UART_RxCpltCallback+0x54>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00d      	beq.n	8002230 <HAL_UART_RxCpltCallback+0x3c>
            {
                HW_huart1RxCb();
 8002214:	4b0c      	ldr	r3, [pc, #48]	@ (8002248 <HAL_UART_RxCpltCallback+0x54>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4798      	blx	r3
            }
            break;
 800221a:	e009      	b.n	8002230 <HAL_UART_RxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1RxCb)
 800221c:	4b0b      	ldr	r3, [pc, #44]	@ (800224c <HAL_UART_RxCpltCallback+0x58>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d007      	beq.n	8002234 <HAL_UART_RxCpltCallback+0x40>
            {
                HW_hlpuart1RxCb();
 8002224:	4b09      	ldr	r3, [pc, #36]	@ (800224c <HAL_UART_RxCpltCallback+0x58>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4798      	blx	r3
            }
            break;
 800222a:	e003      	b.n	8002234 <HAL_UART_RxCpltCallback+0x40>
#endif

        default:
            break;
 800222c:	bf00      	nop
 800222e:	e002      	b.n	8002236 <HAL_UART_RxCpltCallback+0x42>
            break;
 8002230:	bf00      	nop
 8002232:	e000      	b.n	8002236 <HAL_UART_RxCpltCallback+0x42>
            break;
 8002234:	bf00      	nop
    }

    return;
 8002236:	bf00      	nop
}
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40008000 	.word	0x40008000
 8002244:	40013800 	.word	0x40013800
 8002248:	200002c8 	.word	0x200002c8
 800224c:	200002d0 	.word	0x200002d0

08002250 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0f      	ldr	r2, [pc, #60]	@ (800229c <HAL_UART_TxCpltCallback+0x4c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d00a      	beq.n	8002278 <HAL_UART_TxCpltCallback+0x28>
 8002262:	4a0f      	ldr	r2, [pc, #60]	@ (80022a0 <HAL_UART_TxCpltCallback+0x50>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d10f      	bne.n	8002288 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8002268:	4b0e      	ldr	r3, [pc, #56]	@ (80022a4 <HAL_UART_TxCpltCallback+0x54>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00d      	beq.n	800228c <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 8002270:	4b0c      	ldr	r3, [pc, #48]	@ (80022a4 <HAL_UART_TxCpltCallback+0x54>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4798      	blx	r3
            }
            break;
 8002276:	e009      	b.n	800228c <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8002278:	4b0b      	ldr	r3, [pc, #44]	@ (80022a8 <HAL_UART_TxCpltCallback+0x58>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d007      	beq.n	8002290 <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 8002280:	4b09      	ldr	r3, [pc, #36]	@ (80022a8 <HAL_UART_TxCpltCallback+0x58>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4798      	blx	r3
            }
            break;
 8002286:	e003      	b.n	8002290 <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 8002288:	bf00      	nop
 800228a:	e002      	b.n	8002292 <HAL_UART_TxCpltCallback+0x42>
            break;
 800228c:	bf00      	nop
 800228e:	e000      	b.n	8002292 <HAL_UART_TxCpltCallback+0x42>
            break;
 8002290:	bf00      	nop
    }

    return;
 8002292:	bf00      	nop
}
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40008000 	.word	0x40008000
 80022a0:	40013800 	.word	0x40013800
 80022a4:	200002cc 	.word	0x200002cc
 80022a8:	200002d4 	.word	0x200002d4

080022ac <LL_RCC_LSE_SetDriveCapability>:
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80022b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022bc:	f023 0218 	bic.w	r2, r3, #24
 80022c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <LL_AHB1_GRP1_EnableClock>:
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80022e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80022e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80022f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4013      	ands	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022fc:	68fb      	ldr	r3, [r7, #12]
}
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <LL_AHB2_GRP1_EnableClock>:
{
 800230a:	b480      	push	{r7}
 800230c:	b085      	sub	sp, #20
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002312:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002316:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002318:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4313      	orrs	r3, r2
 8002320:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002322:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002326:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4013      	ands	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800232e:	68fb      	ldr	r3, [r7, #12]
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	3220      	adds	r2, #32
 800234c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002350:	4a05      	ldr	r2, [pc, #20]	@ (8002368 <LL_HSEM_1StepLock+0x2c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d001      	beq.n	800235a <LL_HSEM_1StepLock+0x1e>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <LL_HSEM_1StepLock+0x20>
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	80000400 	.word	0x80000400

0800236c <HAL_TIM_PeriodElapsedCallback>:

GPIO_PinState lastButtonStates[NUM_BUTTONS] = {GPIO_PIN_SET, GPIO_PIN_SET};

/* USER CODE BEGIN PV */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
    if (htim->Instance != TIM2) return;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800237c:	f040 80e2 	bne.w	8002544 <HAL_TIM_PeriodElapsedCallback+0x1d8>

    uint32_t currentTime = HAL_GetTick();
 8002380:	f000 ff60 	bl	8003244 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]
    static uint32_t lastBleKeyPressTime = 0;
    static bool bleKeyPressed = false;

    for (int i = 0; i < NUM_BUTTONS; i++) {
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	e08c      	b.n	80024a6 <HAL_TIM_PeriodElapsedCallback+0x13a>
        GPIO_PinState currentState = HAL_GPIO_ReadPin(buttons[i].port, buttons[i].pin);
 800238c:	496f      	ldr	r1, [pc, #444]	@ (800254c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4613      	mov	r3, r2
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	496b      	ldr	r1, [pc, #428]	@ (800254c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	4613      	mov	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	3304      	adds	r3, #4
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	4619      	mov	r1, r3
 80023b0:	f001 fda8 	bl	8003f04 <HAL_GPIO_ReadPin>
 80023b4:	4603      	mov	r3, r0
 80023b6:	73bb      	strb	r3, [r7, #14]

        if (currentState != buttons[i].pressed) {
 80023b8:	4964      	ldr	r1, [pc, #400]	@ (800254c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	4613      	mov	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4413      	add	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	3307      	adds	r3, #7
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	7bbb      	ldrb	r3, [r7, #14]
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d009      	beq.n	80023e6 <HAL_TIM_PeriodElapsedCallback+0x7a>
            buttons[i].lastDebounceTime = currentTime;
 80023d2:	495e      	ldr	r1, [pc, #376]	@ (800254c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	4613      	mov	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	4413      	add	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	440b      	add	r3, r1
 80023e0:	3308      	adds	r3, #8
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	601a      	str	r2, [r3, #0]
        }

        if ((currentTime - buttons[i].lastDebounceTime) > debounceDelay) {
 80023e6:	4959      	ldr	r1, [pc, #356]	@ (800254c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	4613      	mov	r3, r2
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	4413      	add	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	3308      	adds	r3, #8
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2214      	movs	r2, #20
 80023fe:	4293      	cmp	r3, r2
 8002400:	d94e      	bls.n	80024a0 <HAL_TIM_PeriodElapsedCallback+0x134>
            if (currentState == GPIO_PIN_RESET && !buttons[i].pressed) {
 8002402:	7bbb      	ldrb	r3, [r7, #14]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d12b      	bne.n	8002460 <HAL_TIM_PeriodElapsedCallback+0xf4>
 8002408:	4950      	ldr	r1, [pc, #320]	@ (800254c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4613      	mov	r3, r2
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	4413      	add	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	3307      	adds	r3, #7
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	f083 0301 	eor.w	r3, r3, #1
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d01d      	beq.n	8002460 <HAL_TIM_PeriodElapsedCallback+0xf4>
                keyBoardHIDsub.MODIFIER = 0x00;
 8002424:	4b4a      	ldr	r3, [pc, #296]	@ (8002550 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002426:	2200      	movs	r2, #0
 8002428:	701a      	strb	r2, [r3, #0]
                keyBoardHIDsub.KEYCODE1 = buttons[i].hidCode;
 800242a:	4948      	ldr	r1, [pc, #288]	@ (800254c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	4613      	mov	r3, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	4413      	add	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	3306      	adds	r3, #6
 800243a:	781a      	ldrb	r2, [r3, #0]
 800243c:	4b44      	ldr	r3, [pc, #272]	@ (8002550 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800243e:	709a      	strb	r2, [r3, #2]
                USBD_HID_SendReport(&hUsbDeviceFS, &keyBoardHIDsub, sizeof(keyBoardHIDsub));
 8002440:	2208      	movs	r2, #8
 8002442:	4943      	ldr	r1, [pc, #268]	@ (8002550 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002444:	4843      	ldr	r0, [pc, #268]	@ (8002554 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002446:	f00a fe7f 	bl	800d148 <USBD_HID_SendReport>
                buttons[i].pressed = true;
 800244a:	4940      	ldr	r1, [pc, #256]	@ (800254c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	3307      	adds	r3, #7
 800245a:	2201      	movs	r2, #1
 800245c:	701a      	strb	r2, [r3, #0]
 800245e:	e01f      	b.n	80024a0 <HAL_TIM_PeriodElapsedCallback+0x134>
            } else if (currentState == GPIO_PIN_SET && buttons[i].pressed) {
 8002460:	7bbb      	ldrb	r3, [r7, #14]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d11c      	bne.n	80024a0 <HAL_TIM_PeriodElapsedCallback+0x134>
 8002466:	4939      	ldr	r1, [pc, #228]	@ (800254c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	4613      	mov	r3, r2
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	440b      	add	r3, r1
 8002474:	3307      	adds	r3, #7
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d011      	beq.n	80024a0 <HAL_TIM_PeriodElapsedCallback+0x134>
                keyBoardHIDsub.KEYCODE1 = 0x00;
 800247c:	4b34      	ldr	r3, [pc, #208]	@ (8002550 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800247e:	2200      	movs	r2, #0
 8002480:	709a      	strb	r2, [r3, #2]
                USBD_HID_SendReport(&hUsbDeviceFS, &keyBoardHIDsub, sizeof(keyBoardHIDsub));
 8002482:	2208      	movs	r2, #8
 8002484:	4932      	ldr	r1, [pc, #200]	@ (8002550 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002486:	4833      	ldr	r0, [pc, #204]	@ (8002554 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002488:	f00a fe5e 	bl	800d148 <USBD_HID_SendReport>
                buttons[i].pressed = false;
 800248c:	492f      	ldr	r1, [pc, #188]	@ (800254c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	4613      	mov	r3, r2
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	4413      	add	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	3307      	adds	r3, #7
 800249c:	2200      	movs	r2, #0
 800249e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_BUTTONS; i++) {
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	3301      	adds	r3, #1
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	f77f af6f 	ble.w	800238c <HAL_TIM_PeriodElapsedCallback+0x20>
            }
        }
    }

    // Obsługa otrzymywanych danych z BLE bez użycia delay
    if (bleHidKeyCode != 0x00) {
 80024ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002558 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d02b      	beq.n	8002510 <HAL_TIM_PeriodElapsedCallback+0x1a4>
        uint8_t convertedKeyCode = (bleHidKeyCode == 0x01) ? 0x06 : (bleHidKeyCode == 0x02) ? 0x07 : 0x00;
 80024b8:	4b27      	ldr	r3, [pc, #156]	@ (8002558 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d008      	beq.n	80024d4 <HAL_TIM_PeriodElapsedCallback+0x168>
 80024c2:	4b25      	ldr	r3, [pc, #148]	@ (8002558 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d101      	bne.n	80024d0 <HAL_TIM_PeriodElapsedCallback+0x164>
 80024cc:	2307      	movs	r3, #7
 80024ce:	e002      	b.n	80024d6 <HAL_TIM_PeriodElapsedCallback+0x16a>
 80024d0:	2300      	movs	r3, #0
 80024d2:	e000      	b.n	80024d6 <HAL_TIM_PeriodElapsedCallback+0x16a>
 80024d4:	2306      	movs	r3, #6
 80024d6:	73fb      	strb	r3, [r7, #15]

        if (!bleKeyPressed) {
 80024d8:	4b20      	ldr	r3, [pc, #128]	@ (800255c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	f083 0301 	eor.w	r3, r3, #1
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d014      	beq.n	8002510 <HAL_TIM_PeriodElapsedCallback+0x1a4>
            keyBoardHIDsub.MODIFIER = 0x00;
 80024e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002550 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]
            keyBoardHIDsub.KEYCODE1 = convertedKeyCode;
 80024ec:	4a18      	ldr	r2, [pc, #96]	@ (8002550 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	7093      	strb	r3, [r2, #2]
            USBD_HID_SendReport(&hUsbDeviceFS, &keyBoardHIDsub, sizeof(keyBoardHIDsub));
 80024f2:	2208      	movs	r2, #8
 80024f4:	4916      	ldr	r1, [pc, #88]	@ (8002550 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80024f6:	4817      	ldr	r0, [pc, #92]	@ (8002554 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80024f8:	f00a fe26 	bl	800d148 <USBD_HID_SendReport>
            bleKeyPressed = true;
 80024fc:	4b17      	ldr	r3, [pc, #92]	@ (800255c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80024fe:	2201      	movs	r2, #1
 8002500:	701a      	strb	r2, [r3, #0]
            lastBleKeyPressTime = currentTime;
 8002502:	4a17      	ldr	r2, [pc, #92]	@ (8002560 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	6013      	str	r3, [r2, #0]
            HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8002508:	2120      	movs	r1, #32
 800250a:	4816      	ldr	r0, [pc, #88]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800250c:	f001 fd2a 	bl	8003f64 <HAL_GPIO_TogglePin>
        }
    }

    if (bleKeyPressed && (currentTime - lastBleKeyPressTime) > debounceDelay) {
 8002510:	4b12      	ldr	r3, [pc, #72]	@ (800255c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d016      	beq.n	8002546 <HAL_TIM_PeriodElapsedCallback+0x1da>
 8002518:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2214      	movs	r2, #20
 8002522:	4293      	cmp	r3, r2
 8002524:	d90f      	bls.n	8002546 <HAL_TIM_PeriodElapsedCallback+0x1da>
        keyBoardHIDsub.KEYCODE1 = 0x00;
 8002526:	4b0a      	ldr	r3, [pc, #40]	@ (8002550 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002528:	2200      	movs	r2, #0
 800252a:	709a      	strb	r2, [r3, #2]
        USBD_HID_SendReport(&hUsbDeviceFS, &keyBoardHIDsub, sizeof(keyBoardHIDsub));
 800252c:	2208      	movs	r2, #8
 800252e:	4908      	ldr	r1, [pc, #32]	@ (8002550 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002530:	4808      	ldr	r0, [pc, #32]	@ (8002554 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002532:	f00a fe09 	bl	800d148 <USBD_HID_SendReport>
        bleHidKeyCode = 0x00;
 8002536:	4b08      	ldr	r3, [pc, #32]	@ (8002558 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]
        bleKeyPressed = false;
 800253c:	4b07      	ldr	r3, [pc, #28]	@ (800255c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800253e:	2200      	movs	r2, #0
 8002540:	701a      	strb	r2, [r3, #0]
 8002542:	e000      	b.n	8002546 <HAL_TIM_PeriodElapsedCallback+0x1da>
    if (htim->Instance != TIM2) return;
 8002544:	bf00      	nop
    }
}
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000008 	.word	0x20000008
 8002550:	20000524 	.word	0x20000524
 8002554:	20001788 	.word	0x20001788
 8002558:	20000520 	.word	0x20000520
 800255c:	2000052c 	.word	0x2000052c
 8002560:	20000530 	.word	0x20000530
 8002564:	48000400 	.word	0x48000400

08002568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800256c:	f000 fdfc 	bl	8003168 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002570:	f7fe fd60 	bl	8001034 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002574:	f000 f81e 	bl	80025b4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002578:	f000 f892 	bl	80026a0 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800257c:	f000 f8b0 	bl	80026e0 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 8002580:	f000 f95c 	bl	800283c <MX_RF_Init>
  MX_GPIO_Init();
 8002584:	f000 fa0c 	bl	80029a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002588:	f000 f9f8 	bl	800297c <MX_DMA_Init>
  MX_USB_Device_Init();
 800258c:	f010 fc0e 	bl	8012dac <MX_USB_Device_Init>
  MX_RTC_Init();
 8002590:	f000 f972 	bl	8002878 <MX_RTC_Init>
  MX_RNG_Init();
 8002594:	f000 f95a 	bl	800284c <MX_RNG_Init>
  MX_LPUART1_UART_Init();
 8002598:	f000 f8b6 	bl	8002708 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 800259c:	f000 f9a0 	bl	80028e0 <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80025a0:	4803      	ldr	r0, [pc, #12]	@ (80025b0 <main+0x48>)
 80025a2:	f005 faf3 	bl	8007b8c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80025a6:	f7fe fd53 	bl	8001050 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80025aa:	f7fe ff47 	bl	800143c <MX_APPE_Process>
 80025ae:	e7fc      	b.n	80025aa <main+0x42>
 80025b0:	200004d4 	.word	0x200004d4

080025b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b0ac      	sub	sp, #176	@ 0xb0
 80025b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ba:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80025be:	2248      	movs	r2, #72	@ 0x48
 80025c0:	2100      	movs	r1, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f011 fc24 	bl	8013e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025c8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
 80025d8:	615a      	str	r2, [r3, #20]
 80025da:	619a      	str	r2, [r3, #24]
  RCC_OscInitTypeDef st_oscInit = {0};
 80025dc:	1d3b      	adds	r3, r7, #4
 80025de:	2248      	movs	r2, #72	@ 0x48
 80025e0:	2100      	movs	r1, #0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f011 fc14 	bl	8013e10 <memset>

  /* Get mutex */
  LL_HSEM_1StepLock(HSEM, 5);
 80025e8:	2105      	movs	r1, #5
 80025ea:	482b      	ldr	r0, [pc, #172]	@ (8002698 <SystemClock_Config+0xe4>)
 80025ec:	f7ff fea6 	bl	800233c <LL_HSEM_1StepLock>

  st_oscInit.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80025f0:	2340      	movs	r3, #64	@ 0x40
 80025f2:	607b      	str	r3, [r7, #4]
  st_oscInit.HSI48State     = RCC_HSI48_ON; /* Used by USB */
 80025f4:	2301      	movs	r3, #1
 80025f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_RCC_OscConfig(&st_oscInit);
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	4618      	mov	r0, r3
 80025fc:	f003 fe44 	bl	8006288 <HAL_RCC_OscConfig>

  /** Configure LSE Drive Capability */
  HAL_PWR_EnableBkUpAccess();
 8002600:	f003 fa9e 	bl	8005b40 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002604:	2000      	movs	r0, #0
 8002606:	f7ff fe51 	bl	80022ac <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800260a:	4b24      	ldr	r3, [pc, #144]	@ (800269c <SystemClock_Config+0xe8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002612:	4a22      	ldr	r2, [pc, #136]	@ (800269c <SystemClock_Config+0xe8>)
 8002614:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	4b20      	ldr	r3, [pc, #128]	@ (800269c <SystemClock_Config+0xe8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8002626:	2347      	movs	r3, #71	@ 0x47
 8002628:	66bb      	str	r3, [r7, #104]	@ 0x68
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800262a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800262e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002630:	2301      	movs	r3, #1
 8002632:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002634:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002638:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800263a:	2301      	movs	r3, #1
 800263c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002640:	2340      	movs	r3, #64	@ 0x40
 8002642:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002644:	2300      	movs	r3, #0
 8002646:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800264a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800264e:	4618      	mov	r0, r3
 8002650:	f003 fe1a 	bl	8006288 <HAL_RCC_OscConfig>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800265a:	f000 f9e5 	bl	8002a28 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800265e:	236f      	movs	r3, #111	@ 0x6f
 8002660:	64fb      	str	r3, [r7, #76]	@ 0x4c
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002662:	2302      	movs	r3, #2
 8002664:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002666:	2300      	movs	r3, #0
 8002668:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800266a:	2300      	movs	r3, #0
 800266c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800266e:	2300      	movs	r3, #0
 8002670:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002672:	2300      	movs	r3, #0
 8002674:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002676:	2300      	movs	r3, #0
 8002678:	667b      	str	r3, [r7, #100]	@ 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800267a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800267e:	2101      	movs	r1, #1
 8002680:	4618      	mov	r0, r3
 8002682:	f004 f975 	bl	8006970 <HAL_RCC_ClockConfig>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800268c:	f000 f9cc 	bl	8002a28 <Error_Handler>
  }
}
 8002690:	bf00      	nop
 8002692:	37b0      	adds	r7, #176	@ 0xb0
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	58001400 	.word	0x58001400
 800269c:	58000400 	.word	0x58000400

080026a0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b094      	sub	sp, #80	@ 0x50
 80026a4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026a6:	463b      	mov	r3, r7
 80026a8:	2250      	movs	r2, #80	@ 0x50
 80026aa:	2100      	movs	r1, #0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f011 fbaf 	bl	8013e10 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80026b2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80026b6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80026b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80026bc:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80026be:	2302      	movs	r3, #2
 80026c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80026c2:	2310      	movs	r3, #16
 80026c4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026c6:	463b      	mov	r3, r7
 80026c8:	4618      	mov	r0, r3
 80026ca:	f004 fd8e 	bl	80071ea <HAL_RCCEx_PeriphCLKConfig>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80026d4:	f000 f9a8 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80026d8:	bf00      	nop
 80026da:	3750      	adds	r7, #80	@ 0x50
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80026e4:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <MX_IPCC_Init+0x20>)
 80026e6:	4a07      	ldr	r2, [pc, #28]	@ (8002704 <MX_IPCC_Init+0x24>)
 80026e8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80026ea:	4805      	ldr	r0, [pc, #20]	@ (8002700 <MX_IPCC_Init+0x20>)
 80026ec:	f001 fc78 	bl	8003fe0 <HAL_IPCC_Init>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80026f6:	f000 f997 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	200002d8 	.word	0x200002d8
 8002704:	58000c00 	.word	0x58000c00

08002708 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800270c:	4b22      	ldr	r3, [pc, #136]	@ (8002798 <MX_LPUART1_UART_Init+0x90>)
 800270e:	4a23      	ldr	r2, [pc, #140]	@ (800279c <MX_LPUART1_UART_Init+0x94>)
 8002710:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002712:	4b21      	ldr	r3, [pc, #132]	@ (8002798 <MX_LPUART1_UART_Init+0x90>)
 8002714:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002718:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800271a:	4b1f      	ldr	r3, [pc, #124]	@ (8002798 <MX_LPUART1_UART_Init+0x90>)
 800271c:	2200      	movs	r2, #0
 800271e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002720:	4b1d      	ldr	r3, [pc, #116]	@ (8002798 <MX_LPUART1_UART_Init+0x90>)
 8002722:	2200      	movs	r2, #0
 8002724:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002726:	4b1c      	ldr	r3, [pc, #112]	@ (8002798 <MX_LPUART1_UART_Init+0x90>)
 8002728:	2200      	movs	r2, #0
 800272a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800272c:	4b1a      	ldr	r3, [pc, #104]	@ (8002798 <MX_LPUART1_UART_Init+0x90>)
 800272e:	220c      	movs	r2, #12
 8002730:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002732:	4b19      	ldr	r3, [pc, #100]	@ (8002798 <MX_LPUART1_UART_Init+0x90>)
 8002734:	2200      	movs	r2, #0
 8002736:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002738:	4b17      	ldr	r3, [pc, #92]	@ (8002798 <MX_LPUART1_UART_Init+0x90>)
 800273a:	2200      	movs	r2, #0
 800273c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800273e:	4b16      	ldr	r3, [pc, #88]	@ (8002798 <MX_LPUART1_UART_Init+0x90>)
 8002740:	2200      	movs	r2, #0
 8002742:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002744:	4b14      	ldr	r3, [pc, #80]	@ (8002798 <MX_LPUART1_UART_Init+0x90>)
 8002746:	2200      	movs	r2, #0
 8002748:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800274a:	4b13      	ldr	r3, [pc, #76]	@ (8002798 <MX_LPUART1_UART_Init+0x90>)
 800274c:	2200      	movs	r2, #0
 800274e:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002750:	4811      	ldr	r0, [pc, #68]	@ (8002798 <MX_LPUART1_UART_Init+0x90>)
 8002752:	f005 fe17 	bl	8008384 <HAL_UART_Init>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800275c:	f000 f964 	bl	8002a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002760:	2100      	movs	r1, #0
 8002762:	480d      	ldr	r0, [pc, #52]	@ (8002798 <MX_LPUART1_UART_Init+0x90>)
 8002764:	f007 fef1 	bl	800a54a <HAL_UARTEx_SetTxFifoThreshold>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800276e:	f000 f95b 	bl	8002a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002772:	2100      	movs	r1, #0
 8002774:	4808      	ldr	r0, [pc, #32]	@ (8002798 <MX_LPUART1_UART_Init+0x90>)
 8002776:	f007 ff26 	bl	800a5c6 <HAL_UARTEx_SetRxFifoThreshold>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002780:	f000 f952 	bl	8002a28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002784:	4804      	ldr	r0, [pc, #16]	@ (8002798 <MX_LPUART1_UART_Init+0x90>)
 8002786:	f007 fea7 	bl	800a4d8 <HAL_UARTEx_DisableFifoMode>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002790:	f000 f94a 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002794:	bf00      	nop
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20000314 	.word	0x20000314
 800279c:	40008000 	.word	0x40008000

080027a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027a4:	4b23      	ldr	r3, [pc, #140]	@ (8002834 <MX_USART1_UART_Init+0x94>)
 80027a6:	4a24      	ldr	r2, [pc, #144]	@ (8002838 <MX_USART1_UART_Init+0x98>)
 80027a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027aa:	4b22      	ldr	r3, [pc, #136]	@ (8002834 <MX_USART1_UART_Init+0x94>)
 80027ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027b2:	4b20      	ldr	r3, [pc, #128]	@ (8002834 <MX_USART1_UART_Init+0x94>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002834 <MX_USART1_UART_Init+0x94>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027be:	4b1d      	ldr	r3, [pc, #116]	@ (8002834 <MX_USART1_UART_Init+0x94>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002834 <MX_USART1_UART_Init+0x94>)
 80027c6:	220c      	movs	r2, #12
 80027c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002834 <MX_USART1_UART_Init+0x94>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80027d0:	4b18      	ldr	r3, [pc, #96]	@ (8002834 <MX_USART1_UART_Init+0x94>)
 80027d2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80027d6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027d8:	4b16      	ldr	r3, [pc, #88]	@ (8002834 <MX_USART1_UART_Init+0x94>)
 80027da:	2200      	movs	r2, #0
 80027dc:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027de:	4b15      	ldr	r3, [pc, #84]	@ (8002834 <MX_USART1_UART_Init+0x94>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027e4:	4b13      	ldr	r3, [pc, #76]	@ (8002834 <MX_USART1_UART_Init+0x94>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027ea:	4812      	ldr	r0, [pc, #72]	@ (8002834 <MX_USART1_UART_Init+0x94>)
 80027ec:	f005 fdca 	bl	8008384 <HAL_UART_Init>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80027f6:	f000 f917 	bl	8002a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027fa:	2100      	movs	r1, #0
 80027fc:	480d      	ldr	r0, [pc, #52]	@ (8002834 <MX_USART1_UART_Init+0x94>)
 80027fe:	f007 fea4 	bl	800a54a <HAL_UARTEx_SetTxFifoThreshold>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002808:	f000 f90e 	bl	8002a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800280c:	2100      	movs	r1, #0
 800280e:	4809      	ldr	r0, [pc, #36]	@ (8002834 <MX_USART1_UART_Init+0x94>)
 8002810:	f007 fed9 	bl	800a5c6 <HAL_UARTEx_SetRxFifoThreshold>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800281a:	f000 f905 	bl	8002a28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800281e:	4805      	ldr	r0, [pc, #20]	@ (8002834 <MX_USART1_UART_Init+0x94>)
 8002820:	f007 fe5a 	bl	800a4d8 <HAL_UARTEx_DisableFifoMode>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800282a:	f000 f8fd 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	200003a8 	.word	0x200003a8
 8002838:	40013800 	.word	0x40013800

0800283c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
	...

0800284c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002850:	4b07      	ldr	r3, [pc, #28]	@ (8002870 <MX_RNG_Init+0x24>)
 8002852:	4a08      	ldr	r2, [pc, #32]	@ (8002874 <MX_RNG_Init+0x28>)
 8002854:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002856:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <MX_RNG_Init+0x24>)
 8002858:	2200      	movs	r2, #0
 800285a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800285c:	4804      	ldr	r0, [pc, #16]	@ (8002870 <MX_RNG_Init+0x24>)
 800285e:	f004 ff4b 	bl	80076f8 <HAL_RNG_Init>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002868:	f000 f8de 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800286c:	bf00      	nop
 800286e:	bd80      	pop	{r7, pc}
 8002870:	2000049c 	.word	0x2000049c
 8002874:	58001000 	.word	0x58001000

08002878 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800287c:	4b16      	ldr	r3, [pc, #88]	@ (80028d8 <MX_RTC_Init+0x60>)
 800287e:	4a17      	ldr	r2, [pc, #92]	@ (80028dc <MX_RTC_Init+0x64>)
 8002880:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002882:	4b15      	ldr	r3, [pc, #84]	@ (80028d8 <MX_RTC_Init+0x60>)
 8002884:	2200      	movs	r2, #0
 8002886:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002888:	4b13      	ldr	r3, [pc, #76]	@ (80028d8 <MX_RTC_Init+0x60>)
 800288a:	220f      	movs	r2, #15
 800288c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800288e:	4b12      	ldr	r3, [pc, #72]	@ (80028d8 <MX_RTC_Init+0x60>)
 8002890:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002894:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002896:	4b10      	ldr	r3, [pc, #64]	@ (80028d8 <MX_RTC_Init+0x60>)
 8002898:	2200      	movs	r2, #0
 800289a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800289c:	4b0e      	ldr	r3, [pc, #56]	@ (80028d8 <MX_RTC_Init+0x60>)
 800289e:	2200      	movs	r2, #0
 80028a0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028a2:	4b0d      	ldr	r3, [pc, #52]	@ (80028d8 <MX_RTC_Init+0x60>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80028a8:	4b0b      	ldr	r3, [pc, #44]	@ (80028d8 <MX_RTC_Init+0x60>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028ae:	480a      	ldr	r0, [pc, #40]	@ (80028d8 <MX_RTC_Init+0x60>)
 80028b0:	f004 ff58 	bl	8007764 <HAL_RTC_Init>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80028ba:	f000 f8b5 	bl	8002a28 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xFFFF, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80028be:	2200      	movs	r2, #0
 80028c0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80028c4:	4804      	ldr	r0, [pc, #16]	@ (80028d8 <MX_RTC_Init+0x60>)
 80028c6:	f005 f84d 	bl	8007964 <HAL_RTCEx_SetWakeUpTimer_IT>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 80028d0:	f000 f8aa 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80028d4:	bf00      	nop
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	200004b0 	.word	0x200004b0
 80028dc:	40002800 	.word	0x40002800

080028e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028e6:	f107 0310 	add.w	r3, r7, #16
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	605a      	str	r2, [r3, #4]
 80028f0:	609a      	str	r2, [r3, #8]
 80028f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028f4:	1d3b      	adds	r3, r7, #4
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	605a      	str	r2, [r3, #4]
 80028fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002978 <MX_TIM2_Init+0x98>)
 8002900:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002904:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 8002906:	4b1c      	ldr	r3, [pc, #112]	@ (8002978 <MX_TIM2_Init+0x98>)
 8002908:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 800290c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800290e:	4b1a      	ldr	r3, [pc, #104]	@ (8002978 <MX_TIM2_Init+0x98>)
 8002910:	2200      	movs	r2, #0
 8002912:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8002914:	4b18      	ldr	r3, [pc, #96]	@ (8002978 <MX_TIM2_Init+0x98>)
 8002916:	2264      	movs	r2, #100	@ 0x64
 8002918:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800291a:	4b17      	ldr	r3, [pc, #92]	@ (8002978 <MX_TIM2_Init+0x98>)
 800291c:	2200      	movs	r2, #0
 800291e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002920:	4b15      	ldr	r3, [pc, #84]	@ (8002978 <MX_TIM2_Init+0x98>)
 8002922:	2200      	movs	r2, #0
 8002924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002926:	4814      	ldr	r0, [pc, #80]	@ (8002978 <MX_TIM2_Init+0x98>)
 8002928:	f005 f8d8 	bl	8007adc <HAL_TIM_Base_Init>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002932:	f000 f879 	bl	8002a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002936:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800293a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800293c:	f107 0310 	add.w	r3, r7, #16
 8002940:	4619      	mov	r1, r3
 8002942:	480d      	ldr	r0, [pc, #52]	@ (8002978 <MX_TIM2_Init+0x98>)
 8002944:	f005 fa8f 	bl	8007e66 <HAL_TIM_ConfigClockSource>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800294e:	f000 f86b 	bl	8002a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002952:	2300      	movs	r3, #0
 8002954:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800295a:	1d3b      	adds	r3, r7, #4
 800295c:	4619      	mov	r1, r3
 800295e:	4806      	ldr	r0, [pc, #24]	@ (8002978 <MX_TIM2_Init+0x98>)
 8002960:	f005 fc72 	bl	8008248 <HAL_TIMEx_MasterConfigSynchronization>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800296a:	f000 f85d 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800296e:	bf00      	nop
 8002970:	3720      	adds	r7, #32
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	200004d4 	.word	0x200004d4

0800297c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002980:	2004      	movs	r0, #4
 8002982:	f7ff fca9 	bl	80022d8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002986:	2002      	movs	r0, #2
 8002988:	f7ff fca6 	bl	80022d8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 800298c:	2200      	movs	r2, #0
 800298e:	210f      	movs	r1, #15
 8002990:	203a      	movs	r0, #58	@ 0x3a
 8002992:	f000 fdb6 	bl	8003502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002996:	203a      	movs	r0, #58	@ 0x3a
 8002998:	f000 fdcd 	bl	8003536 <HAL_NVIC_EnableIRQ>

}
 800299c:	bf00      	nop
 800299e:	bd80      	pop	{r7, pc}

080029a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a6:	1d3b      	adds	r3, r7, #4
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029b4:	2004      	movs	r0, #4
 80029b6:	f7ff fca8 	bl	800230a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ba:	2001      	movs	r0, #1
 80029bc:	f7ff fca5 	bl	800230a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c0:	2002      	movs	r0, #2
 80029c2:	f7ff fca2 	bl	800230a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80029c6:	2200      	movs	r2, #0
 80029c8:	2123      	movs	r1, #35	@ 0x23
 80029ca:	4816      	ldr	r0, [pc, #88]	@ (8002a24 <MX_GPIO_Init+0x84>)
 80029cc:	f001 fab2 	bl	8003f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 80029d0:	2313      	movs	r3, #19
 80029d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029d8:	2301      	movs	r3, #1
 80029da:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029dc:	1d3b      	adds	r3, r7, #4
 80029de:	4619      	mov	r1, r3
 80029e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029e4:	f001 f91e 	bl	8003c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80029e8:	2303      	movs	r3, #3
 80029ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ec:	2301      	movs	r3, #1
 80029ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f4:	2300      	movs	r3, #0
 80029f6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f8:	1d3b      	adds	r3, r7, #4
 80029fa:	4619      	mov	r1, r3
 80029fc:	4809      	ldr	r0, [pc, #36]	@ (8002a24 <MX_GPIO_Init+0x84>)
 80029fe:	f001 f911 	bl	8003c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8002a02:	2320      	movs	r3, #32
 8002a04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a06:	2301      	movs	r3, #1
 8002a08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	4619      	mov	r1, r3
 8002a16:	4803      	ldr	r0, [pc, #12]	@ (8002a24 <MX_GPIO_Init+0x84>)
 8002a18:	f001 f904 	bl	8003c24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a1c:	bf00      	nop
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	48000400 	.word	0x48000400

08002a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002a2c:	b672      	cpsid	i
}
 8002a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a30:	bf00      	nop
 8002a32:	e7fd      	b.n	8002a30 <Error_Handler+0x8>

08002a34 <LL_RCC_EnableRTC>:
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002a38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <LL_AHB2_GRP1_EnableClock>:
{
 8002a56:	b480      	push	{r7}
 8002a58:	b085      	sub	sp, #20
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4013      	ands	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
}
 8002a7c:	bf00      	nop
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <LL_AHB3_GRP1_EnableClock>:
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002aa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aa4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002aac:	68fb      	ldr	r3, [r7, #12]
}
 8002aae:	bf00      	nop
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <LL_APB1_GRP1_EnableClock>:
{
 8002aba:	b480      	push	{r7}
 8002abc:	b085      	sub	sp, #20
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002ac2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ac6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002ac8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002ad2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ad6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4013      	ands	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ade:	68fb      	ldr	r3, [r7, #12]
}
 8002ae0:	bf00      	nop
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <LL_APB1_GRP2_EnableClock>:
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002af4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002af8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002afa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002b04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b08:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b10:	68fb      	ldr	r3, [r7, #12]
}
 8002b12:	bf00      	nop
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <LL_APB2_GRP1_EnableClock>:
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b085      	sub	sp, #20
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b2a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002b36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b3a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b42:	68fb      	ldr	r3, [r7, #12]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002b54:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002b58:	f7ff ff96 	bl	8002a88 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2100      	movs	r1, #0
 8002b60:	202e      	movs	r0, #46	@ 0x2e
 8002b62:	f000 fcce 	bl	8003502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002b66:	202e      	movs	r0, #46	@ 0x2e
 8002b68:	f000 fce5 	bl	8003536 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b6c:	bf00      	nop
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb4 <HAL_IPCC_MspInit+0x44>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d113      	bne.n	8002baa <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002b82:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002b86:	f7ff ff7f 	bl	8002a88 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	202c      	movs	r0, #44	@ 0x2c
 8002b90:	f000 fcb7 	bl	8003502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002b94:	202c      	movs	r0, #44	@ 0x2c
 8002b96:	f000 fcce 	bl	8003536 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	202d      	movs	r0, #45	@ 0x2d
 8002ba0:	f000 fcaf 	bl	8003502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002ba4:	202d      	movs	r0, #45	@ 0x2d
 8002ba6:	f000 fcc6 	bl	8003536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	58000c00 	.word	0x58000c00

08002bb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b09c      	sub	sp, #112	@ 0x70
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bd0:	f107 030c 	add.w	r3, r7, #12
 8002bd4:	2250      	movs	r2, #80	@ 0x50
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f011 f919 	bl	8013e10 <memset>
  if(huart->Instance==LPUART1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a48      	ldr	r2, [pc, #288]	@ (8002d04 <HAL_UART_MspInit+0x14c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d12e      	bne.n	8002c46 <HAL_UART_MspInit+0x8e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002be8:	2302      	movs	r3, #2
 8002bea:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
 8002bec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bf2:	f107 030c 	add.w	r3, r7, #12
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f004 faf7 	bl	80071ea <HAL_RCCEx_PeriphCLKConfig>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002c02:	f7ff ff11 	bl	8002a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002c06:	2001      	movs	r0, #1
 8002c08:	f7ff ff70 	bl	8002aec <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	f7ff ff22 	bl	8002a56 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c12:	230c      	movs	r3, #12
 8002c14:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c16:	2302      	movs	r3, #2
 8002c18:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002c22:	2308      	movs	r3, #8
 8002c24:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c26:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c30:	f000 fff8 	bl	8003c24 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 12, 0);
 8002c34:	2200      	movs	r2, #0
 8002c36:	210c      	movs	r1, #12
 8002c38:	2025      	movs	r0, #37	@ 0x25
 8002c3a:	f000 fc62 	bl	8003502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002c3e:	2025      	movs	r0, #37	@ 0x25
 8002c40:	f000 fc79 	bl	8003536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c44:	e05a      	b.n	8002cfc <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a2f      	ldr	r2, [pc, #188]	@ (8002d08 <HAL_UART_MspInit+0x150>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d155      	bne.n	8002cfc <HAL_UART_MspInit+0x144>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c50:	2301      	movs	r3, #1
 8002c52:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c54:	2300      	movs	r3, #0
 8002c56:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c58:	f107 030c 	add.w	r3, r7, #12
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f004 fac4 	bl	80071ea <HAL_RCCEx_PeriphCLKConfig>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <HAL_UART_MspInit+0xb4>
      Error_Handler();
 8002c68:	f7ff fede 	bl	8002a28 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c6c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002c70:	f7ff ff55 	bl	8002b1e <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c74:	2002      	movs	r0, #2
 8002c76:	f7ff feee 	bl	8002a56 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c7a:	23c0      	movs	r3, #192	@ 0xc0
 8002c7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c82:	2301      	movs	r3, #1
 8002c84:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c86:	2303      	movs	r3, #3
 8002c88:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c8a:	2307      	movs	r3, #7
 8002c8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002c92:	4619      	mov	r1, r3
 8002c94:	481d      	ldr	r0, [pc, #116]	@ (8002d0c <HAL_UART_MspInit+0x154>)
 8002c96:	f000 ffc5 	bl	8003c24 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8002c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002d10 <HAL_UART_MspInit+0x158>)
 8002c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002d14 <HAL_UART_MspInit+0x15c>)
 8002c9e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d10 <HAL_UART_MspInit+0x158>)
 8002ca2:	220f      	movs	r2, #15
 8002ca4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d10 <HAL_UART_MspInit+0x158>)
 8002ca8:	2210      	movs	r2, #16
 8002caa:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cac:	4b18      	ldr	r3, [pc, #96]	@ (8002d10 <HAL_UART_MspInit+0x158>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cb2:	4b17      	ldr	r3, [pc, #92]	@ (8002d10 <HAL_UART_MspInit+0x158>)
 8002cb4:	2280      	movs	r2, #128	@ 0x80
 8002cb6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cb8:	4b15      	ldr	r3, [pc, #84]	@ (8002d10 <HAL_UART_MspInit+0x158>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cbe:	4b14      	ldr	r3, [pc, #80]	@ (8002d10 <HAL_UART_MspInit+0x158>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002cc4:	4b12      	ldr	r3, [pc, #72]	@ (8002d10 <HAL_UART_MspInit+0x158>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cca:	4b11      	ldr	r3, [pc, #68]	@ (8002d10 <HAL_UART_MspInit+0x158>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002cd0:	480f      	ldr	r0, [pc, #60]	@ (8002d10 <HAL_UART_MspInit+0x158>)
 8002cd2:	f000 fc75 	bl	80035c0 <HAL_DMA_Init>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_UART_MspInit+0x128>
      Error_Handler();
 8002cdc:	f7ff fea4 	bl	8002a28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a0b      	ldr	r2, [pc, #44]	@ (8002d10 <HAL_UART_MspInit+0x158>)
 8002ce4:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8002d10 <HAL_UART_MspInit+0x158>)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 13, 0);
 8002cec:	2200      	movs	r2, #0
 8002cee:	210d      	movs	r1, #13
 8002cf0:	2024      	movs	r0, #36	@ 0x24
 8002cf2:	f000 fc06 	bl	8003502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cf6:	2024      	movs	r0, #36	@ 0x24
 8002cf8:	f000 fc1d 	bl	8003536 <HAL_NVIC_EnableIRQ>
}
 8002cfc:	bf00      	nop
 8002cfe:	3770      	adds	r7, #112	@ 0x70
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40008000 	.word	0x40008000
 8002d08:	40013800 	.word	0x40013800
 8002d0c:	48000400 	.word	0x48000400
 8002d10:	2000043c 	.word	0x2000043c
 8002d14:	40020444 	.word	0x40020444

08002d18 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b096      	sub	sp, #88	@ 0x58
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d20:	f107 0308 	add.w	r3, r7, #8
 8002d24:	2250      	movs	r2, #80	@ 0x50
 8002d26:	2100      	movs	r1, #0
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f011 f871 	bl	8013e10 <memset>
  if(hrng->Instance==RNG)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a0d      	ldr	r2, [pc, #52]	@ (8002d68 <HAL_RNG_MspInit+0x50>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d113      	bne.n	8002d60 <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002d38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d3c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002d3e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002d42:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d44:	f107 0308 	add.w	r3, r7, #8
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f004 fa4e 	bl	80071ea <HAL_RCCEx_PeriphCLKConfig>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8002d54:	f7ff fe68 	bl	8002a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002d58:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8002d5c:	f7ff fe94 	bl	8002a88 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002d60:	bf00      	nop
 8002d62:	3758      	adds	r7, #88	@ 0x58
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	58001000 	.word	0x58001000

08002d6c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b096      	sub	sp, #88	@ 0x58
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d74:	f107 0308 	add.w	r3, r7, #8
 8002d78:	2250      	movs	r2, #80	@ 0x50
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f011 f847 	bl	8013e10 <memset>
  if(hrtc->Instance==RTC)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a12      	ldr	r2, [pc, #72]	@ (8002dd0 <HAL_RTC_MspInit+0x64>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d11d      	bne.n	8002dc8 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002d8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d90:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002d92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d96:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d98:	f107 0308 	add.w	r3, r7, #8
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f004 fa24 	bl	80071ea <HAL_RCCEx_PeriphCLKConfig>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002da8:	f7ff fe3e 	bl	8002a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002dac:	f7ff fe42 	bl	8002a34 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002db0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002db4:	f7ff fe81 	bl	8002aba <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 7, 0);
 8002db8:	2200      	movs	r2, #0
 8002dba:	2107      	movs	r1, #7
 8002dbc:	2003      	movs	r0, #3
 8002dbe:	f000 fba0 	bl	8003502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002dc2:	2003      	movs	r0, #3
 8002dc4:	f000 fbb7 	bl	8003536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002dc8:	bf00      	nop
 8002dca:	3758      	adds	r7, #88	@ 0x58
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40002800 	.word	0x40002800

08002dd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002de4:	d10a      	bne.n	8002dfc <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002de6:	2001      	movs	r0, #1
 8002de8:	f7ff fe67 	bl	8002aba <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002dec:	2200      	movs	r2, #0
 8002dee:	2100      	movs	r1, #0
 8002df0:	201c      	movs	r0, #28
 8002df2:	f000 fb86 	bl	8003502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002df6:	201c      	movs	r0, #28
 8002df8:	f000 fb9d 	bl	8003536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002dfc:	bf00      	nop
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e08:	bf00      	nop
 8002e0a:	e7fd      	b.n	8002e08 <NMI_Handler+0x4>

08002e0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e10:	bf00      	nop
 8002e12:	e7fd      	b.n	8002e10 <HardFault_Handler+0x4>

08002e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e18:	bf00      	nop
 8002e1a:	e7fd      	b.n	8002e18 <MemManage_Handler+0x4>

08002e1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e20:	bf00      	nop
 8002e22:	e7fd      	b.n	8002e20 <BusFault_Handler+0x4>

08002e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e28:	bf00      	nop
 8002e2a:	e7fd      	b.n	8002e28 <UsageFault_Handler+0x4>

08002e2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e30:	bf00      	nop
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e5a:	f000 f9df 	bl	800321c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002e66:	f7fe fe73 	bl	8001b50 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002e74:	4802      	ldr	r0, [pc, #8]	@ (8002e80 <USB_LP_IRQHandler+0x10>)
 8002e76:	f001 fa34 	bl	80042e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20001c64 	.word	0x20001c64

08002e84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e88:	4802      	ldr	r0, [pc, #8]	@ (8002e94 <TIM2_IRQHandler+0x10>)
 8002e8a:	f004 fecd 	bl	8007c28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	200004d4 	.word	0x200004d4

08002e98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e9c:	4802      	ldr	r0, [pc, #8]	@ (8002ea8 <USART1_IRQHandler+0x10>)
 8002e9e:	f005 fc1b 	bl	80086d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	200003a8 	.word	0x200003a8

08002eac <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002eb0:	4802      	ldr	r0, [pc, #8]	@ (8002ebc <LPUART1_IRQHandler+0x10>)
 8002eb2:	f005 fc11 	bl	80086d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000314 	.word	0x20000314

08002ec0 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002ec4:	f00f fe34 	bl	8012b30 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002ec8:	bf00      	nop
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002ed0:	f00f fe64 	bl	8012b9c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002ed4:	bf00      	nop
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002edc:	f001 f85c 	bl	8003f98 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002ee0:	bf00      	nop
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002ee8:	4802      	ldr	r0, [pc, #8]	@ (8002ef4 <DMA2_Channel4_IRQHandler+0x10>)
 8002eea:	f000 fd4a 	bl	8003982 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	2000043c 	.word	0x2000043c

08002ef8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	e00a      	b.n	8002f20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f0a:	f3af 8000 	nop.w
 8002f0e:	4601      	mov	r1, r0
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	60ba      	str	r2, [r7, #8]
 8002f16:	b2ca      	uxtb	r2, r1
 8002f18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	dbf0      	blt.n	8002f0a <_read+0x12>
  }

  return len;
 8002f28:	687b      	ldr	r3, [r7, #4]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f5a:	605a      	str	r2, [r3, #4]
  return 0;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <_isatty>:

int _isatty(int file)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f72:	2301      	movs	r3, #1
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
	...

08002f9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fa4:	4a14      	ldr	r2, [pc, #80]	@ (8002ff8 <_sbrk+0x5c>)
 8002fa6:	4b15      	ldr	r3, [pc, #84]	@ (8002ffc <_sbrk+0x60>)
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fb0:	4b13      	ldr	r3, [pc, #76]	@ (8003000 <_sbrk+0x64>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d102      	bne.n	8002fbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fb8:	4b11      	ldr	r3, [pc, #68]	@ (8003000 <_sbrk+0x64>)
 8002fba:	4a12      	ldr	r2, [pc, #72]	@ (8003004 <_sbrk+0x68>)
 8002fbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fbe:	4b10      	ldr	r3, [pc, #64]	@ (8003000 <_sbrk+0x64>)
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d207      	bcs.n	8002fdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fcc:	f010 ff28 	bl	8013e20 <__errno>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	220c      	movs	r2, #12
 8002fd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002fda:	e009      	b.n	8002ff0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fdc:	4b08      	ldr	r3, [pc, #32]	@ (8003000 <_sbrk+0x64>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fe2:	4b07      	ldr	r3, [pc, #28]	@ (8003000 <_sbrk+0x64>)
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4413      	add	r3, r2
 8002fea:	4a05      	ldr	r2, [pc, #20]	@ (8003000 <_sbrk+0x64>)
 8002fec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fee:	68fb      	ldr	r3, [r7, #12]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	20030000 	.word	0x20030000
 8002ffc:	00001000 	.word	0x00001000
 8003000:	20000534 	.word	0x20000534
 8003004:	20002160 	.word	0x20002160

08003008 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800300c:	4b26      	ldr	r3, [pc, #152]	@ (80030a8 <SystemInit+0xa0>)
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003012:	4b25      	ldr	r3, [pc, #148]	@ (80030a8 <SystemInit+0xa0>)
 8003014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003018:	4a23      	ldr	r2, [pc, #140]	@ (80030a8 <SystemInit+0xa0>)
 800301a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800301e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003022:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003032:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003036:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800303a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800303c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003046:	4b19      	ldr	r3, [pc, #100]	@ (80030ac <SystemInit+0xa4>)
 8003048:	4013      	ands	r3, r2
 800304a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800304c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003050:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003054:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003058:	f023 0305 	bic.w	r3, r3, #5
 800305c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003060:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003064:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003068:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800306c:	f023 0301 	bic.w	r3, r3, #1
 8003070:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003074:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003078:	4a0d      	ldr	r2, [pc, #52]	@ (80030b0 <SystemInit+0xa8>)
 800307a:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800307c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003080:	4a0b      	ldr	r2, [pc, #44]	@ (80030b0 <SystemInit+0xa8>)
 8003082:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003084:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800308e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003092:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003094:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003098:	2200      	movs	r2, #0
 800309a:	619a      	str	r2, [r3, #24]
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	e000ed00 	.word	0xe000ed00
 80030ac:	faf6fefb 	.word	0xfaf6fefb
 80030b0:	22041000 	.word	0x22041000

080030b4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80030b4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030b6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030b8:	3304      	adds	r3, #4

080030ba <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030ba:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030bc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80030be:	d3f9      	bcc.n	80030b4 <CopyDataInit>
  bx lr
 80030c0:	4770      	bx	lr

080030c2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80030c2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80030c4:	3004      	adds	r0, #4

080030c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80030c6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80030c8:	d3fb      	bcc.n	80030c2 <FillZerobss>
  bx lr
 80030ca:	4770      	bx	lr

080030cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80030cc:	480c      	ldr	r0, [pc, #48]	@ (8003100 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80030ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80030d0:	f7ff ff9a 	bl	8003008 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80030d4:	480b      	ldr	r0, [pc, #44]	@ (8003104 <LoopForever+0x6>)
 80030d6:	490c      	ldr	r1, [pc, #48]	@ (8003108 <LoopForever+0xa>)
 80030d8:	4a0c      	ldr	r2, [pc, #48]	@ (800310c <LoopForever+0xe>)
 80030da:	2300      	movs	r3, #0
 80030dc:	f7ff ffed 	bl	80030ba <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80030e0:	480b      	ldr	r0, [pc, #44]	@ (8003110 <LoopForever+0x12>)
 80030e2:	490c      	ldr	r1, [pc, #48]	@ (8003114 <LoopForever+0x16>)
 80030e4:	4a0c      	ldr	r2, [pc, #48]	@ (8003118 <LoopForever+0x1a>)
 80030e6:	2300      	movs	r3, #0
 80030e8:	f7ff ffe7 	bl	80030ba <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80030ec:	480b      	ldr	r0, [pc, #44]	@ (800311c <LoopForever+0x1e>)
 80030ee:	490c      	ldr	r1, [pc, #48]	@ (8003120 <LoopForever+0x22>)
 80030f0:	2300      	movs	r3, #0
 80030f2:	f7ff ffe8 	bl	80030c6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80030f6:	f010 fe99 	bl	8013e2c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80030fa:	f7ff fa35 	bl	8002568 <main>

080030fe <LoopForever>:

LoopForever:
  b LoopForever
 80030fe:	e7fe      	b.n	80030fe <LoopForever>
  ldr   r0, =_estack
 8003100:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003104:	20000008 	.word	0x20000008
 8003108:	200001c0 	.word	0x200001c0
 800310c:	0801686c 	.word	0x0801686c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003110:	200301e4 	.word	0x200301e4
 8003114:	20030a67 	.word	0x20030a67
 8003118:	08016a6a 	.word	0x08016a6a
  INIT_BSS _sbss, _ebss
 800311c:	2000020c 	.word	0x2000020c
 8003120:	20002160 	.word	0x20002160

08003124 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003124:	e7fe      	b.n	8003124 <ADC1_IRQHandler>
	...

08003128 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800312c:	4b05      	ldr	r3, [pc, #20]	@ (8003144 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4a04      	ldr	r2, [pc, #16]	@ (8003144 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003132:	f043 0301 	orr.w	r3, r3, #1
 8003136:	6053      	str	r3, [r2, #4]
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	e0042000 	.word	0xe0042000

08003148 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800314c:	4b05      	ldr	r3, [pc, #20]	@ (8003164 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	4a04      	ldr	r2, [pc, #16]	@ (8003164 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003152:	f043 0302 	orr.w	r3, r3, #2
 8003156:	6053      	str	r3, [r2, #4]
}
 8003158:	bf00      	nop
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	e0042000 	.word	0xe0042000

08003168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003172:	4b0c      	ldr	r3, [pc, #48]	@ (80031a4 <HAL_Init+0x3c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a0b      	ldr	r2, [pc, #44]	@ (80031a4 <HAL_Init+0x3c>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800317c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800317e:	2003      	movs	r0, #3
 8003180:	f000 f9b4 	bl	80034ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003184:	200f      	movs	r0, #15
 8003186:	f000 f80f 	bl	80031a8 <HAL_InitTick>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d002      	beq.n	8003196 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	71fb      	strb	r3, [r7, #7]
 8003194:	e001      	b.n	800319a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003196:	f7ff fcdb 	bl	8002b50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800319a:	79fb      	ldrb	r3, [r7, #7]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	58004000 	.word	0x58004000

080031a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80031b4:	4b17      	ldr	r3, [pc, #92]	@ (8003214 <HAL_InitTick+0x6c>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d024      	beq.n	8003206 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80031bc:	f003 fd84 	bl	8006cc8 <HAL_RCC_GetHCLKFreq>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b14      	ldr	r3, [pc, #80]	@ (8003214 <HAL_InitTick+0x6c>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	4619      	mov	r1, r3
 80031c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80031d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 f9ca 	bl	800356e <HAL_SYSTICK_Config>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10f      	bne.n	8003200 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b0f      	cmp	r3, #15
 80031e4:	d809      	bhi.n	80031fa <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031e6:	2200      	movs	r2, #0
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80031ee:	f000 f988 	bl	8003502 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031f2:	4a09      	ldr	r2, [pc, #36]	@ (8003218 <HAL_InitTick+0x70>)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	e007      	b.n	800320a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	73fb      	strb	r3, [r7, #15]
 80031fe:	e004      	b.n	800320a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	73fb      	strb	r3, [r7, #15]
 8003204:	e001      	b.n	800320a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800320a:	7bfb      	ldrb	r3, [r7, #15]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	20000028 	.word	0x20000028
 8003218:	20000024 	.word	0x20000024

0800321c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003220:	4b06      	ldr	r3, [pc, #24]	@ (800323c <HAL_IncTick+0x20>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	461a      	mov	r2, r3
 8003226:	4b06      	ldr	r3, [pc, #24]	@ (8003240 <HAL_IncTick+0x24>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4413      	add	r3, r2
 800322c:	4a04      	ldr	r2, [pc, #16]	@ (8003240 <HAL_IncTick+0x24>)
 800322e:	6013      	str	r3, [r2, #0]
}
 8003230:	bf00      	nop
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	20000028 	.word	0x20000028
 8003240:	20000538 	.word	0x20000538

08003244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  return uwTick;
 8003248:	4b03      	ldr	r3, [pc, #12]	@ (8003258 <HAL_GetTick+0x14>)
 800324a:	681b      	ldr	r3, [r3, #0]
}
 800324c:	4618      	mov	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	20000538 	.word	0x20000538

0800325c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003260:	4b03      	ldr	r3, [pc, #12]	@ (8003270 <HAL_GetTickPrio+0x14>)
 8003262:	681b      	ldr	r3, [r3, #0]
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	20000024 	.word	0x20000024

08003274 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003278:	f7ff ff56 	bl	8003128 <LL_DBGMCU_EnableDBGSleepMode>
}
 800327c:	bf00      	nop
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003284:	f7ff ff60 	bl	8003148 <LL_DBGMCU_EnableDBGStopMode>
}
 8003288:	bf00      	nop
 800328a:	bd80      	pop	{r7, pc}

0800328c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800329c:	4b0c      	ldr	r3, [pc, #48]	@ (80032d0 <__NVIC_SetPriorityGrouping+0x44>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032a8:	4013      	ands	r3, r2
 80032aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032be:	4a04      	ldr	r2, [pc, #16]	@ (80032d0 <__NVIC_SetPriorityGrouping+0x44>)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	60d3      	str	r3, [r2, #12]
}
 80032c4:	bf00      	nop
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	e000ed00 	.word	0xe000ed00

080032d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032d8:	4b04      	ldr	r3, [pc, #16]	@ (80032ec <__NVIC_GetPriorityGrouping+0x18>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	0a1b      	lsrs	r3, r3, #8
 80032de:	f003 0307 	and.w	r3, r3, #7
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	e000ed00 	.word	0xe000ed00

080032f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	db0b      	blt.n	800331a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	f003 021f 	and.w	r2, r3, #31
 8003308:	4907      	ldr	r1, [pc, #28]	@ (8003328 <__NVIC_EnableIRQ+0x38>)
 800330a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	2001      	movs	r0, #1
 8003312:	fa00 f202 	lsl.w	r2, r0, r2
 8003316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	e000e100 	.word	0xe000e100

0800332c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333a:	2b00      	cmp	r3, #0
 800333c:	db12      	blt.n	8003364 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800333e:	79fb      	ldrb	r3, [r7, #7]
 8003340:	f003 021f 	and.w	r2, r3, #31
 8003344:	490a      	ldr	r1, [pc, #40]	@ (8003370 <__NVIC_DisableIRQ+0x44>)
 8003346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	2001      	movs	r0, #1
 800334e:	fa00 f202 	lsl.w	r2, r0, r2
 8003352:	3320      	adds	r3, #32
 8003354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003358:	f3bf 8f4f 	dsb	sy
}
 800335c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800335e:	f3bf 8f6f 	isb	sy
}
 8003362:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	e000e100 	.word	0xe000e100

08003374 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800337e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003382:	2b00      	cmp	r3, #0
 8003384:	db0c      	blt.n	80033a0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	f003 021f 	and.w	r2, r3, #31
 800338c:	4907      	ldr	r1, [pc, #28]	@ (80033ac <__NVIC_SetPendingIRQ+0x38>)
 800338e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	2001      	movs	r0, #1
 8003396:	fa00 f202 	lsl.w	r2, r0, r2
 800339a:	3340      	adds	r3, #64	@ 0x40
 800339c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	e000e100 	.word	0xe000e100

080033b0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	db0c      	blt.n	80033dc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	f003 021f 	and.w	r2, r3, #31
 80033c8:	4907      	ldr	r1, [pc, #28]	@ (80033e8 <__NVIC_ClearPendingIRQ+0x38>)
 80033ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	2001      	movs	r0, #1
 80033d2:	fa00 f202 	lsl.w	r2, r0, r2
 80033d6:	3360      	adds	r3, #96	@ 0x60
 80033d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	e000e100 	.word	0xe000e100

080033ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	6039      	str	r1, [r7, #0]
 80033f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	db0a      	blt.n	8003416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	b2da      	uxtb	r2, r3
 8003404:	490c      	ldr	r1, [pc, #48]	@ (8003438 <__NVIC_SetPriority+0x4c>)
 8003406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340a:	0112      	lsls	r2, r2, #4
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	440b      	add	r3, r1
 8003410:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003414:	e00a      	b.n	800342c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	b2da      	uxtb	r2, r3
 800341a:	4908      	ldr	r1, [pc, #32]	@ (800343c <__NVIC_SetPriority+0x50>)
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	3b04      	subs	r3, #4
 8003424:	0112      	lsls	r2, r2, #4
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	440b      	add	r3, r1
 800342a:	761a      	strb	r2, [r3, #24]
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	e000e100 	.word	0xe000e100
 800343c:	e000ed00 	.word	0xe000ed00

08003440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003440:	b480      	push	{r7}
 8003442:	b089      	sub	sp, #36	@ 0x24
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f1c3 0307 	rsb	r3, r3, #7
 800345a:	2b04      	cmp	r3, #4
 800345c:	bf28      	it	cs
 800345e:	2304      	movcs	r3, #4
 8003460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3304      	adds	r3, #4
 8003466:	2b06      	cmp	r3, #6
 8003468:	d902      	bls.n	8003470 <NVIC_EncodePriority+0x30>
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	3b03      	subs	r3, #3
 800346e:	e000      	b.n	8003472 <NVIC_EncodePriority+0x32>
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003474:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43da      	mvns	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	401a      	ands	r2, r3
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003488:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	fa01 f303 	lsl.w	r3, r1, r3
 8003492:	43d9      	mvns	r1, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003498:	4313      	orrs	r3, r2
         );
}
 800349a:	4618      	mov	r0, r3
 800349c:	3724      	adds	r7, #36	@ 0x24
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
	...

080034a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034b8:	d301      	bcc.n	80034be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ba:	2301      	movs	r3, #1
 80034bc:	e00f      	b.n	80034de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034be:	4a0a      	ldr	r2, [pc, #40]	@ (80034e8 <SysTick_Config+0x40>)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034c6:	210f      	movs	r1, #15
 80034c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034cc:	f7ff ff8e 	bl	80033ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034d0:	4b05      	ldr	r3, [pc, #20]	@ (80034e8 <SysTick_Config+0x40>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034d6:	4b04      	ldr	r3, [pc, #16]	@ (80034e8 <SysTick_Config+0x40>)
 80034d8:	2207      	movs	r2, #7
 80034da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	e000e010 	.word	0xe000e010

080034ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7ff fec9 	bl	800328c <__NVIC_SetPriorityGrouping>
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b086      	sub	sp, #24
 8003506:	af00      	add	r7, sp, #0
 8003508:	4603      	mov	r3, r0
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607a      	str	r2, [r7, #4]
 800350e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003510:	f7ff fee0 	bl	80032d4 <__NVIC_GetPriorityGrouping>
 8003514:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	68b9      	ldr	r1, [r7, #8]
 800351a:	6978      	ldr	r0, [r7, #20]
 800351c:	f7ff ff90 	bl	8003440 <NVIC_EncodePriority>
 8003520:	4602      	mov	r2, r0
 8003522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003526:	4611      	mov	r1, r2
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff ff5f 	bl	80033ec <__NVIC_SetPriority>
}
 800352e:	bf00      	nop
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	4603      	mov	r3, r0
 800353e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff fed3 	bl	80032f0 <__NVIC_EnableIRQ>
}
 800354a:	bf00      	nop
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b082      	sub	sp, #8
 8003556:	af00      	add	r7, sp, #0
 8003558:	4603      	mov	r3, r0
 800355a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800355c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff fee3 	bl	800332c <__NVIC_DisableIRQ>
}
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7ff ff96 	bl	80034a8 <SysTick_Config>
 800357c:	4603      	mov	r3, r0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b082      	sub	sp, #8
 800358a:	af00      	add	r7, sp, #0
 800358c:	4603      	mov	r3, r0
 800358e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff feed 	bl	8003374 <__NVIC_SetPendingIRQ>
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	4603      	mov	r3, r0
 80035aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80035ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff fefd 	bl	80033b0 <__NVIC_ClearPendingIRQ>
}
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e08e      	b.n	80036f0 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	4b47      	ldr	r3, [pc, #284]	@ (80036f8 <HAL_DMA_Init+0x138>)
 80035da:	429a      	cmp	r2, r3
 80035dc:	d80f      	bhi.n	80035fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	4b45      	ldr	r3, [pc, #276]	@ (80036fc <HAL_DMA_Init+0x13c>)
 80035e6:	4413      	add	r3, r2
 80035e8:	4a45      	ldr	r2, [pc, #276]	@ (8003700 <HAL_DMA_Init+0x140>)
 80035ea:	fba2 2303 	umull	r2, r3, r2, r3
 80035ee:	091b      	lsrs	r3, r3, #4
 80035f0:	009a      	lsls	r2, r3, #2
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a42      	ldr	r2, [pc, #264]	@ (8003704 <HAL_DMA_Init+0x144>)
 80035fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80035fc:	e00e      	b.n	800361c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	4b40      	ldr	r3, [pc, #256]	@ (8003708 <HAL_DMA_Init+0x148>)
 8003606:	4413      	add	r3, r2
 8003608:	4a3d      	ldr	r2, [pc, #244]	@ (8003700 <HAL_DMA_Init+0x140>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	091b      	lsrs	r3, r3, #4
 8003610:	009a      	lsls	r2, r3, #2
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a3c      	ldr	r2, [pc, #240]	@ (800370c <HAL_DMA_Init+0x14c>)
 800361a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2202      	movs	r2, #2
 8003620:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003636:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003640:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800364c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003658:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fa74 	bl	8003b5c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800367c:	d102      	bne.n	8003684 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800368c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8003690:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800369a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d010      	beq.n	80036c6 <HAL_DMA_Init+0x106>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d80c      	bhi.n	80036c6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 fa93 	bl	8003bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80036c2:	605a      	str	r2, [r3, #4]
 80036c4:	e008      	b.n	80036d8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40020407 	.word	0x40020407
 80036fc:	bffdfff8 	.word	0xbffdfff8
 8003700:	cccccccd 	.word	0xcccccccd
 8003704:	40020000 	.word	0x40020000
 8003708:	bffdfbf8 	.word	0xbffdfbf8
 800370c:	40020400 	.word	0x40020400

08003710 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_DMA_Start_IT+0x20>
 800372c:	2302      	movs	r3, #2
 800372e:	e066      	b.n	80037fe <HAL_DMA_Start_IT+0xee>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d155      	bne.n	80037f0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0201 	bic.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	68b9      	ldr	r1, [r7, #8]
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 f9b9 	bl	8003ae0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003772:	2b00      	cmp	r3, #0
 8003774:	d008      	beq.n	8003788 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f042 020e 	orr.w	r2, r2, #14
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	e00f      	b.n	80037a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0204 	bic.w	r2, r2, #4
 8003796:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 020a 	orr.w	r2, r2, #10
 80037a6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d007      	beq.n	80037c6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037c4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d007      	beq.n	80037de <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037dc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0201 	orr.w	r2, r2, #1
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	e005      	b.n	80037fc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80037f8:	2302      	movs	r3, #2
 80037fa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80037fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e04f      	b.n	80038b8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d008      	beq.n	8003836 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2204      	movs	r2, #4
 8003828:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e040      	b.n	80038b8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 020e 	bic.w	r2, r2, #14
 8003844:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003850:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003854:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0201 	bic.w	r2, r2, #1
 8003864:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386a:	f003 021c 	and.w	r2, r3, #28
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003872:	2101      	movs	r1, #1
 8003874:	fa01 f202 	lsl.w	r2, r1, r2
 8003878:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003882:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00c      	beq.n	80038a6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003896:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800389a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80038a4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d005      	beq.n	80038e8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2204      	movs	r2, #4
 80038e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	73fb      	strb	r3, [r7, #15]
 80038e6:	e047      	b.n	8003978 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 020e 	bic.w	r2, r2, #14
 80038f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0201 	bic.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003912:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003916:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391c:	f003 021c 	and.w	r2, r3, #28
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003924:	2101      	movs	r1, #1
 8003926:	fa01 f202 	lsl.w	r2, r1, r2
 800392a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003934:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00c      	beq.n	8003958 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003948:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800394c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003956:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	4798      	blx	r3
    }
  }
  return status;
 8003978:	7bfb      	ldrb	r3, [r7, #15]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399e:	f003 031c 	and.w	r3, r3, #28
 80039a2:	2204      	movs	r2, #4
 80039a4:	409a      	lsls	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	4013      	ands	r3, r2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d026      	beq.n	80039fc <HAL_DMA_IRQHandler+0x7a>
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d021      	beq.n	80039fc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d107      	bne.n	80039d6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0204 	bic.w	r2, r2, #4
 80039d4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039da:	f003 021c 	and.w	r2, r3, #28
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	2104      	movs	r1, #4
 80039e4:	fa01 f202 	lsl.w	r2, r1, r2
 80039e8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d071      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80039fa:	e06c      	b.n	8003ad6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a00:	f003 031c 	and.w	r3, r3, #28
 8003a04:	2202      	movs	r2, #2
 8003a06:	409a      	lsls	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d02e      	beq.n	8003a6e <HAL_DMA_IRQHandler+0xec>
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d029      	beq.n	8003a6e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0320 	and.w	r3, r3, #32
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10b      	bne.n	8003a40 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 020a 	bic.w	r2, r2, #10
 8003a36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a44:	f003 021c 	and.w	r2, r3, #28
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4c:	2102      	movs	r1, #2
 8003a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a52:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d038      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a6c:	e033      	b.n	8003ad6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a72:	f003 031c 	and.w	r3, r3, #28
 8003a76:	2208      	movs	r2, #8
 8003a78:	409a      	lsls	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d02a      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x156>
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d025      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 020e 	bic.w	r2, r2, #14
 8003a9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa0:	f003 021c 	and.w	r2, r3, #28
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8003aae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d004      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ad6:	bf00      	nop
 8003ad8:	bf00      	nop
}
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003af6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d004      	beq.n	8003b0a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b08:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0e:	f003 021c 	and.w	r2, r3, #28
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	2101      	movs	r1, #1
 8003b18:	fa01 f202 	lsl.w	r2, r1, r2
 8003b1c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	2b10      	cmp	r3, #16
 8003b2c:	d108      	bne.n	8003b40 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b3e:	e007      	b.n	8003b50 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	60da      	str	r2, [r3, #12]
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4b17      	ldr	r3, [pc, #92]	@ (8003bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d80a      	bhi.n	8003b86 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b74:	089b      	lsrs	r3, r3, #2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b7c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6493      	str	r3, [r2, #72]	@ 0x48
 8003b84:	e007      	b.n	8003b96 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8a:	089b      	lsrs	r3, r3, #2
 8003b8c:	009a      	lsls	r2, r3, #2
 8003b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8003bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003b90:	4413      	add	r3, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	3b08      	subs	r3, #8
 8003b9e:	4a0c      	ldr	r2, [pc, #48]	@ (8003bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba4:	091b      	lsrs	r3, r3, #4
 8003ba6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a0a      	ldr	r2, [pc, #40]	@ (8003bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003bac:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f003 031f 	and.w	r3, r3, #31
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	409a      	lsls	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003bbc:	bf00      	nop
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	40020407 	.word	0x40020407
 8003bcc:	4002081c 	.word	0x4002081c
 8003bd0:	cccccccd 	.word	0xcccccccd
 8003bd4:	40020880 	.word	0x40020880

08003bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003be8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4b0b      	ldr	r3, [pc, #44]	@ (8003c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003bee:	4413      	add	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a09      	ldr	r2, [pc, #36]	@ (8003c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003bfc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	3b01      	subs	r3, #1
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	2201      	movs	r2, #1
 8003c08:	409a      	lsls	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003c0e:	bf00      	nop
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	1000823f 	.word	0x1000823f
 8003c20:	40020940 	.word	0x40020940

08003c24 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c32:	e14c      	b.n	8003ece <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	2101      	movs	r1, #1
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c40:	4013      	ands	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 813e 	beq.w	8003ec8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f003 0303 	and.w	r3, r3, #3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d005      	beq.n	8003c64 <HAL_GPIO_Init+0x40>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 0303 	and.w	r3, r3, #3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d130      	bne.n	8003cc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	2203      	movs	r2, #3
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	43db      	mvns	r3, r3
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	091b      	lsrs	r3, r3, #4
 8003cb0:	f003 0201 	and.w	r2, r3, #1
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	d017      	beq.n	8003d02 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	2203      	movs	r2, #3
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d123      	bne.n	8003d56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	08da      	lsrs	r2, r3, #3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3208      	adds	r2, #8
 8003d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	220f      	movs	r2, #15
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	08da      	lsrs	r2, r3, #3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3208      	adds	r2, #8
 8003d50:	6939      	ldr	r1, [r7, #16]
 8003d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	2203      	movs	r2, #3
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43db      	mvns	r3, r3
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f003 0203 	and.w	r2, r3, #3
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 8098 	beq.w	8003ec8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003d98:	4a54      	ldr	r2, [pc, #336]	@ (8003eec <HAL_GPIO_Init+0x2c8>)
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	089b      	lsrs	r3, r3, #2
 8003d9e:	3302      	adds	r3, #2
 8003da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f003 0303 	and.w	r3, r3, #3
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	220f      	movs	r2, #15
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	43db      	mvns	r3, r3
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4013      	ands	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003dc2:	d019      	beq.n	8003df8 <HAL_GPIO_Init+0x1d4>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a4a      	ldr	r2, [pc, #296]	@ (8003ef0 <HAL_GPIO_Init+0x2cc>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d013      	beq.n	8003df4 <HAL_GPIO_Init+0x1d0>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a49      	ldr	r2, [pc, #292]	@ (8003ef4 <HAL_GPIO_Init+0x2d0>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00d      	beq.n	8003df0 <HAL_GPIO_Init+0x1cc>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a48      	ldr	r2, [pc, #288]	@ (8003ef8 <HAL_GPIO_Init+0x2d4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d007      	beq.n	8003dec <HAL_GPIO_Init+0x1c8>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a47      	ldr	r2, [pc, #284]	@ (8003efc <HAL_GPIO_Init+0x2d8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d101      	bne.n	8003de8 <HAL_GPIO_Init+0x1c4>
 8003de4:	2304      	movs	r3, #4
 8003de6:	e008      	b.n	8003dfa <HAL_GPIO_Init+0x1d6>
 8003de8:	2307      	movs	r3, #7
 8003dea:	e006      	b.n	8003dfa <HAL_GPIO_Init+0x1d6>
 8003dec:	2303      	movs	r3, #3
 8003dee:	e004      	b.n	8003dfa <HAL_GPIO_Init+0x1d6>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e002      	b.n	8003dfa <HAL_GPIO_Init+0x1d6>
 8003df4:	2301      	movs	r3, #1
 8003df6:	e000      	b.n	8003dfa <HAL_GPIO_Init+0x1d6>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	f002 0203 	and.w	r2, r2, #3
 8003e00:	0092      	lsls	r2, r2, #2
 8003e02:	4093      	lsls	r3, r2
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e0a:	4938      	ldr	r1, [pc, #224]	@ (8003eec <HAL_GPIO_Init+0x2c8>)
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	089b      	lsrs	r3, r3, #2
 8003e10:	3302      	adds	r3, #2
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e18:	4b39      	ldr	r3, [pc, #228]	@ (8003f00 <HAL_GPIO_Init+0x2dc>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	43db      	mvns	r3, r3
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4013      	ands	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e3c:	4a30      	ldr	r2, [pc, #192]	@ (8003f00 <HAL_GPIO_Init+0x2dc>)
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e42:	4b2f      	ldr	r3, [pc, #188]	@ (8003f00 <HAL_GPIO_Init+0x2dc>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e66:	4a26      	ldr	r2, [pc, #152]	@ (8003f00 <HAL_GPIO_Init+0x2dc>)
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e6c:	4b24      	ldr	r3, [pc, #144]	@ (8003f00 <HAL_GPIO_Init+0x2dc>)
 8003e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	43db      	mvns	r3, r3
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e92:	4a1b      	ldr	r2, [pc, #108]	@ (8003f00 <HAL_GPIO_Init+0x2dc>)
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8003e9a:	4b19      	ldr	r3, [pc, #100]	@ (8003f00 <HAL_GPIO_Init+0x2dc>)
 8003e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ec0:	4a0f      	ldr	r2, [pc, #60]	@ (8003f00 <HAL_GPIO_Init+0x2dc>)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f47f aeab 	bne.w	8003c34 <HAL_GPIO_Init+0x10>
  }
}
 8003ede:	bf00      	nop
 8003ee0:	bf00      	nop
 8003ee2:	371c      	adds	r7, #28
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	40010000 	.word	0x40010000
 8003ef0:	48000400 	.word	0x48000400
 8003ef4:	48000800 	.word	0x48000800
 8003ef8:	48000c00 	.word	0x48000c00
 8003efc:	48001000 	.word	0x48001000
 8003f00:	58000800 	.word	0x58000800

08003f04 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691a      	ldr	r2, [r3, #16]
 8003f14:	887b      	ldrh	r3, [r7, #2]
 8003f16:	4013      	ands	r3, r2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	73fb      	strb	r3, [r7, #15]
 8003f20:	e001      	b.n	8003f26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f22:	2300      	movs	r3, #0
 8003f24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	807b      	strh	r3, [r7, #2]
 8003f40:	4613      	mov	r3, r2
 8003f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f44:	787b      	ldrb	r3, [r7, #1]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f4a:	887a      	ldrh	r2, [r7, #2]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f50:	e002      	b.n	8003f58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f52:	887a      	ldrh	r2, [r7, #2]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f76:	887a      	ldrh	r2, [r7, #2]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	041a      	lsls	r2, r3, #16
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	43d9      	mvns	r1, r3
 8003f82:	887b      	ldrh	r3, [r7, #2]
 8003f84:	400b      	ands	r3, r1
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	619a      	str	r2, [r3, #24]
}
 8003f8c:	bf00      	nop
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc8 <HAL_HSEM_IRQHandler+0x30>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003fa4:	4b08      	ldr	r3, [pc, #32]	@ (8003fc8 <HAL_HSEM_IRQHandler+0x30>)
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	43db      	mvns	r3, r3
 8003fac:	4906      	ldr	r1, [pc, #24]	@ (8003fc8 <HAL_HSEM_IRQHandler+0x30>)
 8003fae:	4013      	ands	r3, r2
 8003fb0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003fb2:	4a05      	ldr	r2, [pc, #20]	@ (8003fc8 <HAL_HSEM_IRQHandler+0x30>)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f807 	bl	8003fcc <HAL_HSEM_FreeCallback>
}
 8003fbe:	bf00      	nop
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	58001500 	.word	0x58001500

08003fcc <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d01e      	beq.n	8004030 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003ff2:	4b13      	ldr	r3, [pc, #76]	@ (8004040 <HAL_IPCC_Init+0x60>)
 8003ff4:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d102      	bne.n	8004008 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7fe fdb4 	bl	8002b70 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004008:	68b8      	ldr	r0, [r7, #8]
 800400a:	f000 f85b 	bl	80040c4 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f82c 	bl	8004078 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800402e:	e001      	b.n	8004034 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004034:	7bfb      	ldrb	r3, [r7, #15]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	58000c00 	.word	0x58000c00

08004044 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	4613      	mov	r3, r2
 8004050:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004052:	bf00      	nop
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800405e:	b480      	push	{r7}
 8004060:	b085      	sub	sp, #20
 8004062:	af00      	add	r7, sp, #0
 8004064:	60f8      	str	r0, [r7, #12]
 8004066:	60b9      	str	r1, [r7, #8]
 8004068:	4613      	mov	r3, r2
 800406a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800406c:	bf00      	nop
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004080:	2300      	movs	r3, #0
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	e00f      	b.n	80040a6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	4a0b      	ldr	r2, [pc, #44]	@ (80040bc <IPCC_SetDefaultCallbacks+0x44>)
 8004090:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	3306      	adds	r3, #6
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	4a08      	ldr	r2, [pc, #32]	@ (80040c0 <IPCC_SetDefaultCallbacks+0x48>)
 800409e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3301      	adds	r3, #1
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2b05      	cmp	r3, #5
 80040aa:	d9ec      	bls.n	8004086 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80040ac:	bf00      	nop
 80040ae:	bf00      	nop
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	08004045 	.word	0x08004045
 80040c0:	0800405f 	.word	0x0800405f

080040c4 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 80040d8:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	223f      	movs	r2, #63	@ 0x3f
 80040de:	609a      	str	r2, [r3, #8]
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ee:	b08b      	sub	sp, #44	@ 0x2c
 80040f0:	af06      	add	r7, sp, #24
 80040f2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e0cb      	b.n	8004296 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d106      	bne.n	8004118 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f00e ffb2 	bl	801307c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2203      	movs	r2, #3
 800411c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f006 faf2 	bl	800a70e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800412a:	2300      	movs	r3, #0
 800412c:	73fb      	strb	r3, [r7, #15]
 800412e:	e040      	b.n	80041b2 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	440b      	add	r3, r1
 8004140:	3301      	adds	r3, #1
 8004142:	2201      	movs	r2, #1
 8004144:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004146:	7bfb      	ldrb	r3, [r7, #15]
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	1c5a      	adds	r2, r3, #1
 800414c:	4613      	mov	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	440b      	add	r3, r1
 8004156:	7bfa      	ldrb	r2, [r7, #15]
 8004158:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800415a:	7bfb      	ldrb	r3, [r7, #15]
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	440b      	add	r3, r1
 800416a:	3303      	adds	r3, #3
 800416c:	2200      	movs	r2, #0
 800416e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004170:	7bfa      	ldrb	r2, [r7, #15]
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	440b      	add	r3, r1
 800417e:	3338      	adds	r3, #56	@ 0x38
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004184:	7bfa      	ldrb	r2, [r7, #15]
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	4613      	mov	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	440b      	add	r3, r1
 8004192:	333c      	adds	r3, #60	@ 0x3c
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004198:	7bfa      	ldrb	r2, [r7, #15]
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	440b      	add	r3, r1
 80041a6:	3340      	adds	r3, #64	@ 0x40
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	3301      	adds	r3, #1
 80041b0:	73fb      	strb	r3, [r7, #15]
 80041b2:	7bfa      	ldrb	r2, [r7, #15]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d3b9      	bcc.n	8004130 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041bc:	2300      	movs	r3, #0
 80041be:	73fb      	strb	r3, [r7, #15]
 80041c0:	e044      	b.n	800424c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80041c2:	7bfa      	ldrb	r2, [r7, #15]
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	440b      	add	r3, r1
 80041d0:	f203 1369 	addw	r3, r3, #361	@ 0x169
 80041d4:	2200      	movs	r2, #0
 80041d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80041d8:	7bfa      	ldrb	r2, [r7, #15]
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	440b      	add	r3, r1
 80041e6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80041ea:	7bfa      	ldrb	r2, [r7, #15]
 80041ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041ee:	7bfa      	ldrb	r2, [r7, #15]
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	4613      	mov	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	440b      	add	r3, r1
 80041fc:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8004200:	2200      	movs	r2, #0
 8004202:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004204:	7bfa      	ldrb	r2, [r7, #15]
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	440b      	add	r3, r1
 8004212:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800421a:	7bfa      	ldrb	r2, [r7, #15]
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	4613      	mov	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	440b      	add	r3, r1
 8004228:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004230:	7bfa      	ldrb	r2, [r7, #15]
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	4613      	mov	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	440b      	add	r3, r1
 800423e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004246:	7bfb      	ldrb	r3, [r7, #15]
 8004248:	3301      	adds	r3, #1
 800424a:	73fb      	strb	r3, [r7, #15]
 800424c:	7bfa      	ldrb	r2, [r7, #15]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	429a      	cmp	r2, r3
 8004254:	d3b5      	bcc.n	80041c2 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	687e      	ldr	r6, [r7, #4]
 800425e:	466d      	mov	r5, sp
 8004260:	f106 0410 	add.w	r4, r6, #16
 8004264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	602b      	str	r3, [r5, #0]
 800426c:	1d33      	adds	r3, r6, #4
 800426e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004270:	6838      	ldr	r0, [r7, #0]
 8004272:	f006 fa67 	bl	800a744 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d102      	bne.n	8004294 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f001 fc2c 	bl	8005aec <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800429e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b082      	sub	sp, #8
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d101      	bne.n	80042b4 <HAL_PCD_Start+0x16>
 80042b0:	2302      	movs	r3, #2
 80042b2:	e012      	b.n	80042da <HAL_PCD_Start+0x3c>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f006 fa0d 	bl	800a6e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f008 fcd1 	bl	800cc72 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b084      	sub	sp, #16
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f008 fcd6 	bl	800cca0 <USB_ReadInterrupts>
 80042f4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 faed 	bl	80048e0 <PCD_EP_ISR_Handler>

    return;
 8004306:	e110      	b.n	800452a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800430e:	2b00      	cmp	r3, #0
 8004310:	d013      	beq.n	800433a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800431a:	b29a      	uxth	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004324:	b292      	uxth	r2, r2
 8004326:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f00e ff49 	bl	80131c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004330:	2100      	movs	r1, #0
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f8fc 	bl	8004530 <HAL_PCD_SetAddress>

    return;
 8004338:	e0f7      	b.n	800452a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00c      	beq.n	800435e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800434c:	b29a      	uxth	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004356:	b292      	uxth	r2, r2
 8004358:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800435c:	e0e5      	b.n	800452a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00c      	beq.n	8004382 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004370:	b29a      	uxth	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800437a:	b292      	uxth	r2, r2
 800437c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004380:	e0d3      	b.n	800452a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d034      	beq.n	80043f6 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004394:	b29a      	uxth	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0204 	bic.w	r2, r2, #4
 800439e:	b292      	uxth	r2, r2
 80043a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0208 	bic.w	r2, r2, #8
 80043b6:	b292      	uxth	r2, r2
 80043b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d107      	bne.n	80043d6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80043ce:	2100      	movs	r1, #0
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f00f f8c7 	bl	8013564 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f00e ff2c 	bl	8013234 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80043ee:	b292      	uxth	r2, r2
 80043f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80043f4:	e099      	b.n	800452a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d027      	beq.n	8004450 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004408:	b29a      	uxth	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0208 	orr.w	r2, r2, #8
 8004412:	b292      	uxth	r2, r2
 8004414:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004420:	b29a      	uxth	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800442a:	b292      	uxth	r2, r2
 800442c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004438:	b29a      	uxth	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0204 	orr.w	r2, r2, #4
 8004442:	b292      	uxth	r2, r2
 8004444:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f00e fed9 	bl	8013200 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800444e:	e06c      	b.n	800452a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004456:	2b00      	cmp	r3, #0
 8004458:	d040      	beq.n	80044dc <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004462:	b29a      	uxth	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800446c:	b292      	uxth	r2, r2
 800446e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d12b      	bne.n	80044d4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004484:	b29a      	uxth	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0204 	orr.w	r2, r2, #4
 800448e:	b292      	uxth	r2, r2
 8004490:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800449c:	b29a      	uxth	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0208 	orr.w	r2, r2, #8
 80044a6:	b292      	uxth	r2, r2
 80044a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80044bc:	b29b      	uxth	r3, r3
 80044be:	089b      	lsrs	r3, r3, #2
 80044c0:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80044ca:	2101      	movs	r1, #1
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f00f f849 	bl	8013564 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80044d2:	e02a      	b.n	800452a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f00e fe93 	bl	8013200 <HAL_PCD_SuspendCallback>
    return;
 80044da:	e026      	b.n	800452a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00f      	beq.n	8004506 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80044f8:	b292      	uxth	r2, r2
 80044fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f00e fe51 	bl	80131a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004504:	e011      	b.n	800452a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00c      	beq.n	800452a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004518:	b29a      	uxth	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004522:	b292      	uxth	r2, r2
 8004524:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004528:	bf00      	nop
  }
}
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	460b      	mov	r3, r1
 800453a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_PCD_SetAddress+0x1a>
 8004546:	2302      	movs	r3, #2
 8004548:	e013      	b.n	8004572 <HAL_PCD_SetAddress+0x42>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	78fa      	ldrb	r2, [r7, #3]
 8004556:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	78fa      	ldrb	r2, [r7, #3]
 8004560:	4611      	mov	r1, r2
 8004562:	4618      	mov	r0, r3
 8004564:	f008 fb71 	bl	800cc4a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b084      	sub	sp, #16
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	4608      	mov	r0, r1
 8004584:	4611      	mov	r1, r2
 8004586:	461a      	mov	r2, r3
 8004588:	4603      	mov	r3, r0
 800458a:	70fb      	strb	r3, [r7, #3]
 800458c:	460b      	mov	r3, r1
 800458e:	803b      	strh	r3, [r7, #0]
 8004590:	4613      	mov	r3, r2
 8004592:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004598:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800459c:	2b00      	cmp	r3, #0
 800459e:	da0e      	bge.n	80045be <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	4613      	mov	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	4413      	add	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2201      	movs	r2, #1
 80045ba:	705a      	strb	r2, [r3, #1]
 80045bc:	e00e      	b.n	80045dc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045be:	78fb      	ldrb	r3, [r7, #3]
 80045c0:	f003 0207 	and.w	r2, r3, #7
 80045c4:	4613      	mov	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	4413      	add	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80045dc:	78fb      	ldrb	r3, [r7, #3]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80045e8:	883a      	ldrh	r2, [r7, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	78ba      	ldrb	r2, [r7, #2]
 80045f2:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80045f4:	78bb      	ldrb	r3, [r7, #2]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d102      	bne.n	8004600 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_PCD_EP_Open+0x94>
 800460a:	2302      	movs	r3, #2
 800460c:	e00e      	b.n	800462c <HAL_PCD_EP_Open+0xb2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68f9      	ldr	r1, [r7, #12]
 800461c:	4618      	mov	r0, r3
 800461e:	f006 f8b3 	bl	800a788 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 800462a:	7afb      	ldrb	r3, [r7, #11]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004640:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004644:	2b00      	cmp	r3, #0
 8004646:	da0e      	bge.n	8004666 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004648:	78fb      	ldrb	r3, [r7, #3]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	4413      	add	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2201      	movs	r2, #1
 8004662:	705a      	strb	r2, [r3, #1]
 8004664:	e00e      	b.n	8004684 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004666:	78fb      	ldrb	r3, [r7, #3]
 8004668:	f003 0207 	and.w	r2, r3, #7
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	4413      	add	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004684:	78fb      	ldrb	r3, [r7, #3]
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	b2da      	uxtb	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004696:	2b01      	cmp	r3, #1
 8004698:	d101      	bne.n	800469e <HAL_PCD_EP_Close+0x6a>
 800469a:	2302      	movs	r3, #2
 800469c:	e00e      	b.n	80046bc <HAL_PCD_EP_Close+0x88>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68f9      	ldr	r1, [r7, #12]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f006 fc2f 	bl	800af10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	607a      	str	r2, [r7, #4]
 80046ce:	603b      	str	r3, [r7, #0]
 80046d0:	460b      	mov	r3, r1
 80046d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046d4:	7afb      	ldrb	r3, [r7, #11]
 80046d6:	f003 0207 	and.w	r2, r3, #7
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	4413      	add	r3, r2
 80046ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	2200      	movs	r2, #0
 80046fc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2200      	movs	r2, #0
 8004702:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004704:	7afb      	ldrb	r3, [r7, #11]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	b2da      	uxtb	r2, r3
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6979      	ldr	r1, [r7, #20]
 8004716:	4618      	mov	r0, r3
 8004718:	f006 fde7 	bl	800b2ea <USB_EPStartXfer>

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3718      	adds	r7, #24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b086      	sub	sp, #24
 800472a:	af00      	add	r7, sp, #0
 800472c:	60f8      	str	r0, [r7, #12]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	603b      	str	r3, [r7, #0]
 8004732:	460b      	mov	r3, r1
 8004734:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004736:	7afb      	ldrb	r3, [r7, #11]
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	1c5a      	adds	r2, r3, #1
 800473e:	4613      	mov	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	4413      	add	r3, r2
 800474a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2200      	movs	r2, #0
 800476a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	2201      	movs	r2, #1
 8004770:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004772:	7afb      	ldrb	r3, [r7, #11]
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	b2da      	uxtb	r2, r3
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6979      	ldr	r1, [r7, #20]
 8004784:	4618      	mov	r0, r3
 8004786:	f006 fdb0 	bl	800b2ea <USB_EPStartXfer>

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80047a0:	78fb      	ldrb	r3, [r7, #3]
 80047a2:	f003 0207 	and.w	r2, r3, #7
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d901      	bls.n	80047b2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e03e      	b.n	8004830 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80047b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	da0e      	bge.n	80047d8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047ba:	78fb      	ldrb	r3, [r7, #3]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	4613      	mov	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	4413      	add	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2201      	movs	r2, #1
 80047d4:	705a      	strb	r2, [r3, #1]
 80047d6:	e00c      	b.n	80047f2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80047d8:	78fa      	ldrb	r2, [r7, #3]
 80047da:	4613      	mov	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	4413      	add	r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2201      	movs	r2, #1
 80047f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047f8:	78fb      	ldrb	r3, [r7, #3]
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800480a:	2b01      	cmp	r3, #1
 800480c:	d101      	bne.n	8004812 <HAL_PCD_EP_SetStall+0x7e>
 800480e:	2302      	movs	r3, #2
 8004810:	e00e      	b.n	8004830 <HAL_PCD_EP_SetStall+0x9c>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68f9      	ldr	r1, [r7, #12]
 8004820:	4618      	mov	r0, r3
 8004822:	f008 f913 	bl	800ca4c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004844:	78fb      	ldrb	r3, [r7, #3]
 8004846:	f003 020f 	and.w	r2, r3, #15
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	429a      	cmp	r2, r3
 8004850:	d901      	bls.n	8004856 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e040      	b.n	80048d8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004856:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800485a:	2b00      	cmp	r3, #0
 800485c:	da0e      	bge.n	800487c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800485e:	78fb      	ldrb	r3, [r7, #3]
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	4613      	mov	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	4413      	add	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2201      	movs	r2, #1
 8004878:	705a      	strb	r2, [r3, #1]
 800487a:	e00e      	b.n	800489a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800487c:	78fb      	ldrb	r3, [r7, #3]
 800487e:	f003 0207 	and.w	r2, r3, #7
 8004882:	4613      	mov	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	4413      	add	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048a0:	78fb      	ldrb	r3, [r7, #3]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d101      	bne.n	80048ba <HAL_PCD_EP_ClrStall+0x82>
 80048b6:	2302      	movs	r3, #2
 80048b8:	e00e      	b.n	80048d8 <HAL_PCD_EP_ClrStall+0xa0>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68f9      	ldr	r1, [r7, #12]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f008 f910 	bl	800caee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b096      	sub	sp, #88	@ 0x58
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80048e8:	e3b0      	b.n	800504c <PCD_EP_ISR_Handler+0x76c>
  {
    wIstr = hpcd->Instance->ISTR;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80048f2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80048f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	f003 030f 	and.w	r3, r3, #15
 8004900:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8004904:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004908:	2b00      	cmp	r3, #0
 800490a:	f040 8172 	bne.w	8004bf2 <PCD_EP_ISR_Handler+0x312>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800490e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004912:	f003 0310 	and.w	r3, r3, #16
 8004916:	2b00      	cmp	r3, #0
 8004918:	d14f      	bne.n	80049ba <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	b29b      	uxth	r3, r3
 8004922:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800492a:	81fb      	strh	r3, [r7, #14]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	89fb      	ldrh	r3, [r7, #14]
 8004932:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004936:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800493a:	b29b      	uxth	r3, r3
 800493c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	3328      	adds	r3, #40	@ 0x28
 8004942:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800494c:	b29b      	uxth	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	00db      	lsls	r3, r3, #3
 8004956:	4413      	add	r3, r2
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6812      	ldr	r2, [r2, #0]
 800495c:	4413      	add	r3, r2
 800495e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800496a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800496c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800496e:	695a      	ldr	r2, [r3, #20]
 8004970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	441a      	add	r2, r3
 8004976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004978:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800497a:	2100      	movs	r1, #0
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f00e fbf8 	bl	8013172 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 835e 	beq.w	800504c <PCD_EP_ISR_Handler+0x76c>
 8004990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	2b00      	cmp	r3, #0
 8004996:	f040 8359 	bne.w	800504c <PCD_EP_ISR_Handler+0x76c>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80049b8:	e348      	b.n	800504c <PCD_EP_ISR_Handler+0x76c>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80049c0:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	881b      	ldrh	r3, [r3, #0]
 80049c8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80049cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80049d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d032      	beq.n	8004a3e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	461a      	mov	r2, r3
 80049e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	4413      	add	r3, r2
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6812      	ldr	r2, [r2, #0]
 80049f0:	4413      	add	r3, r2
 80049f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80049fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049fe:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6818      	ldr	r0, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8004a0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a0c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a10:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	f008 f996 	bl	800cd44 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004a24:	4013      	ands	r3, r2
 8004a26:	823b      	strh	r3, [r7, #16]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	8a3a      	ldrh	r2, [r7, #16]
 8004a2e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a32:	b292      	uxth	r2, r2
 8004a34:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f00e fb6e 	bl	8013118 <HAL_PCD_SetupStageCallback>
 8004a3c:	e306      	b.n	800504c <PCD_EP_ISR_Handler+0x76c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004a3e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f280 8302 	bge.w	800504c <PCD_EP_ISR_Handler+0x76c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004a54:	4013      	ands	r3, r2
 8004a56:	83fb      	strh	r3, [r7, #30]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	8bfa      	ldrh	r2, [r7, #30]
 8004a5e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a62:	b292      	uxth	r2, r2
 8004a64:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	461a      	mov	r2, r3
 8004a72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	4413      	add	r3, r2
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6812      	ldr	r2, [r2, #0]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004a84:	881b      	ldrh	r3, [r3, #0]
 8004a86:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a8c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d019      	beq.n	8004aca <PCD_EP_ISR_Handler+0x1ea>
 8004a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d015      	beq.n	8004aca <PCD_EP_ISR_Handler+0x1ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6818      	ldr	r0, [r3, #0]
 8004aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aa4:	6959      	ldr	r1, [r3, #20]
 8004aa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aa8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aac:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	f008 f948 	bl	800cd44 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004ab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ab6:	695a      	ldr	r2, [r3, #20]
 8004ab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	441a      	add	r2, r3
 8004abe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ac0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f00e fb39 	bl	801313c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004ad4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004ad8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f040 82b5 	bne.w	800504c <PCD_EP_ISR_Handler+0x76c>
 8004ae2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004ae6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004aea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004aee:	f000 82ad 	beq.w	800504c <PCD_EP_ISR_Handler+0x76c>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	61bb      	str	r3, [r7, #24]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	461a      	mov	r2, r3
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	4413      	add	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	801a      	strh	r2, [r3, #0]
 8004b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	2b3e      	cmp	r3, #62	@ 0x3e
 8004b28:	d91d      	bls.n	8004b66 <PCD_EP_ISR_Handler+0x286>
 8004b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	095b      	lsrs	r3, r3, #5
 8004b30:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	f003 031f 	and.w	r3, r3, #31
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d102      	bne.n	8004b44 <PCD_EP_ISR_Handler+0x264>
 8004b3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b40:	3b01      	subs	r3, #1
 8004b42:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	029b      	lsls	r3, r3, #10
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	4313      	orrs	r3, r2
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	801a      	strh	r2, [r3, #0]
 8004b64:	e026      	b.n	8004bb4 <PCD_EP_ISR_Handler+0x2d4>
 8004b66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10a      	bne.n	8004b84 <PCD_EP_ISR_Handler+0x2a4>
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	801a      	strh	r2, [r3, #0]
 8004b82:	e017      	b.n	8004bb4 <PCD_EP_ISR_Handler+0x2d4>
 8004b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	085b      	lsrs	r3, r3, #1
 8004b8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <PCD_EP_ISR_Handler+0x2be>
 8004b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	029b      	lsls	r3, r3, #10
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	4313      	orrs	r3, r2
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bc4:	827b      	strh	r3, [r7, #18]
 8004bc6:	8a7b      	ldrh	r3, [r7, #18]
 8004bc8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004bcc:	827b      	strh	r3, [r7, #18]
 8004bce:	8a7b      	ldrh	r3, [r7, #18]
 8004bd0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004bd4:	827b      	strh	r3, [r7, #18]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	8a7b      	ldrh	r3, [r7, #18]
 8004bdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004be0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004be4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004be8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	8013      	strh	r3, [r2, #0]
 8004bf0:	e22c      	b.n	800504c <PCD_EP_ISR_Handler+0x76c>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004c06:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f280 80f6 	bge.w	8004dfc <PCD_EP_ISR_Handler+0x51c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	461a      	mov	r2, r3
 8004c16:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004c26:	4013      	ands	r3, r2
 8004c28:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	461a      	mov	r2, r3
 8004c32:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004c3e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004c42:	b292      	uxth	r2, r2
 8004c44:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004c46:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	4413      	add	r3, r2
 8004c5a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004c5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c5e:	7b1b      	ldrb	r3, [r3, #12]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d123      	bne.n	8004cac <PCD_EP_ISR_Handler+0x3cc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	461a      	mov	r2, r3
 8004c70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	00db      	lsls	r3, r3, #3
 8004c76:	4413      	add	r3, r2
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6812      	ldr	r2, [r2, #0]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c88:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004c8c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 808e 	beq.w	8004db2 <PCD_EP_ISR_Handler+0x4d2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6818      	ldr	r0, [r3, #0]
 8004c9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c9c:	6959      	ldr	r1, [r3, #20]
 8004c9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ca0:	88da      	ldrh	r2, [r3, #6]
 8004ca2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004ca6:	f008 f84d 	bl	800cd44 <USB_ReadPMA>
 8004caa:	e082      	b.n	8004db2 <PCD_EP_ISR_Handler+0x4d2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004cac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cae:	78db      	ldrb	r3, [r3, #3]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d10a      	bne.n	8004cca <PCD_EP_ISR_Handler+0x3ea>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004cb4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004cb8:	461a      	mov	r2, r3
 8004cba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f9d3 	bl	8005068 <HAL_PCD_EP_DB_Receive>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004cc8:	e073      	b.n	8004db2 <PCD_EP_ISR_Handler+0x4d2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	881b      	ldrh	r3, [r3, #0]
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ce0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ce4:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	461a      	mov	r2, r3
 8004cee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	441a      	add	r2, r3
 8004cf6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004cfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d06:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d022      	beq.n	8004d6e <PCD_EP_ISR_Handler+0x48e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	461a      	mov	r2, r3
 8004d34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	4413      	add	r3, r2
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6812      	ldr	r2, [r2, #0]
 8004d40:	4413      	add	r3, r2
 8004d42:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004d46:	881b      	ldrh	r3, [r3, #0]
 8004d48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d4c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004d50:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d02c      	beq.n	8004db2 <PCD_EP_ISR_Handler+0x4d2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d5e:	6959      	ldr	r1, [r3, #20]
 8004d60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d62:	891a      	ldrh	r2, [r3, #8]
 8004d64:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004d68:	f007 ffec 	bl	800cd44 <USB_ReadPMA>
 8004d6c:	e021      	b.n	8004db2 <PCD_EP_ISR_Handler+0x4d2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	461a      	mov	r2, r3
 8004d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	00db      	lsls	r3, r3, #3
 8004d80:	4413      	add	r3, r2
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6812      	ldr	r2, [r2, #0]
 8004d86:	4413      	add	r3, r2
 8004d88:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d92:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004d96:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d009      	beq.n	8004db2 <PCD_EP_ISR_Handler+0x4d2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004da4:	6959      	ldr	r1, [r3, #20]
 8004da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004da8:	895a      	ldrh	r2, [r3, #10]
 8004daa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004dae:	f007 ffc9 	bl	800cd44 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004db4:	69da      	ldr	r2, [r3, #28]
 8004db6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004dba:	441a      	add	r2, r3
 8004dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dbe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004dc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dc2:	695a      	ldr	r2, [r3, #20]
 8004dc4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004dc8:	441a      	add	r2, r3
 8004dca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dcc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004dce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d005      	beq.n	8004de2 <PCD_EP_ISR_Handler+0x502>
 8004dd6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d206      	bcs.n	8004df0 <PCD_EP_ISR_Handler+0x510>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	4619      	mov	r1, r3
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f00e f9a7 	bl	801313c <HAL_PCD_DataOutStageCallback>
 8004dee:	e005      	b.n	8004dfc <PCD_EP_ISR_Handler+0x51c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004df6:	4618      	mov	r0, r3
 8004df8:	f006 fa77 	bl	800b2ea <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004dfc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 8121 	beq.w	800504c <PCD_EP_ISR_Handler+0x76c>
      {
        ep = &hpcd->IN_ep[epindex];
 8004e0a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	4613      	mov	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	881b      	ldrh	r3, [r3, #0]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004e34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e38:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	461a      	mov	r2, r3
 8004e42:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	441a      	add	r2, r3
 8004e4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004e5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e5c:	78db      	ldrb	r3, [r3, #3]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	f040 80a2 	bne.w	8004fa8 <PCD_EP_ISR_Handler+0x6c8>
        {
          ep->xfer_len = 0U;
 8004e64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e66:	2200      	movs	r2, #0
 8004e68:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e6c:	7b1b      	ldrb	r3, [r3, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 8093 	beq.w	8004f9a <PCD_EP_ISR_Handler+0x6ba>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004e74:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d046      	beq.n	8004f0e <PCD_EP_ISR_Handler+0x62e>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e82:	785b      	ldrb	r3, [r3, #1]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d126      	bne.n	8004ed6 <PCD_EP_ISR_Handler+0x5f6>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9c:	4413      	add	r3, r2
 8004e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	00da      	lsls	r2, r3, #3
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004eae:	623b      	str	r3, [r7, #32]
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	881b      	ldrh	r3, [r3, #0]
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	801a      	strh	r2, [r3, #0]
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	801a      	strh	r2, [r3, #0]
 8004ed4:	e061      	b.n	8004f9a <PCD_EP_ISR_Handler+0x6ba>
 8004ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ed8:	785b      	ldrb	r3, [r3, #1]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d15d      	bne.n	8004f9a <PCD_EP_ISR_Handler+0x6ba>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	461a      	mov	r2, r3
 8004ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef2:	4413      	add	r3, r2
 8004ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	00da      	lsls	r2, r3, #3
 8004efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004efe:	4413      	add	r3, r2
 8004f00:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004f04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f08:	2200      	movs	r2, #0
 8004f0a:	801a      	strh	r2, [r3, #0]
 8004f0c:	e045      	b.n	8004f9a <PCD_EP_ISR_Handler+0x6ba>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f16:	785b      	ldrb	r3, [r3, #1]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d126      	bne.n	8004f6a <PCD_EP_ISR_Handler+0x68a>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f30:	4413      	add	r3, r2
 8004f32:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	00da      	lsls	r2, r3, #3
 8004f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004f42:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f52:	801a      	strh	r2, [r3, #0]
 8004f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f66:	801a      	strh	r2, [r3, #0]
 8004f68:	e017      	b.n	8004f9a <PCD_EP_ISR_Handler+0x6ba>
 8004f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f6c:	785b      	ldrb	r3, [r3, #1]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d113      	bne.n	8004f9a <PCD_EP_ISR_Handler+0x6ba>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f80:	4413      	add	r3, r2
 8004f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	00da      	lsls	r2, r3, #3
 8004f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004f92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f96:	2200      	movs	r2, #0
 8004f98:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f00e f8e6 	bl	8013172 <HAL_PCD_DataInStageCallback>
 8004fa6:	e051      	b.n	800504c <PCD_EP_ISR_Handler+0x76c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004fa8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d144      	bne.n	800503e <PCD_EP_ISR_Handler+0x75e>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	4413      	add	r3, r2
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fd8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004fdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fde:	699a      	ldr	r2, [r3, #24]
 8004fe0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d907      	bls.n	8004ff8 <PCD_EP_ISR_Handler+0x718>
            {
              ep->xfer_len -= TxPctSize;
 8004fe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fea:	699a      	ldr	r2, [r3, #24]
 8004fec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004ff0:	1ad2      	subs	r2, r2, r3
 8004ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ff4:	619a      	str	r2, [r3, #24]
 8004ff6:	e002      	b.n	8004ffe <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              ep->xfer_len = 0U;
 8004ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <PCD_EP_ISR_Handler+0x734>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	4619      	mov	r1, r3
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f00e f8b0 	bl	8013172 <HAL_PCD_DataInStageCallback>
 8005012:	e01b      	b.n	800504c <PCD_EP_ISR_Handler+0x76c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005016:	695a      	ldr	r2, [r3, #20]
 8005018:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800501c:	441a      	add	r2, r3
 800501e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005020:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005024:	69da      	ldr	r2, [r3, #28]
 8005026:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800502a:	441a      	add	r2, r3
 800502c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800502e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005036:	4618      	mov	r0, r3
 8005038:	f006 f957 	bl	800b2ea <USB_EPStartXfer>
 800503c:	e006      	b.n	800504c <PCD_EP_ISR_Handler+0x76c>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800503e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005042:	461a      	mov	r2, r3
 8005044:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f917 	bl	800527a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005054:	b29b      	uxth	r3, r3
 8005056:	b21b      	sxth	r3, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	f6ff ac46 	blt.w	80048ea <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3758      	adds	r7, #88	@ 0x58
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b088      	sub	sp, #32
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	4613      	mov	r3, r2
 8005074:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005076:	88fb      	ldrh	r3, [r7, #6]
 8005078:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d07c      	beq.n	800517a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005088:	b29b      	uxth	r3, r3
 800508a:	461a      	mov	r2, r3
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	00db      	lsls	r3, r3, #3
 8005092:	4413      	add	r3, r2
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	6812      	ldr	r2, [r2, #0]
 8005098:	4413      	add	r3, r2
 800509a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050a4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	699a      	ldr	r2, [r3, #24]
 80050aa:	8b7b      	ldrh	r3, [r7, #26]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d306      	bcc.n	80050be <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	699a      	ldr	r2, [r3, #24]
 80050b4:	8b7b      	ldrh	r3, [r7, #26]
 80050b6:	1ad2      	subs	r2, r2, r3
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	619a      	str	r2, [r3, #24]
 80050bc:	e002      	b.n	80050c4 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2200      	movs	r2, #0
 80050c2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d123      	bne.n	8005114 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	461a      	mov	r2, r3
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	881b      	ldrh	r3, [r3, #0]
 80050dc:	b29b      	uxth	r3, r3
 80050de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050e6:	833b      	strh	r3, [r7, #24]
 80050e8:	8b3b      	ldrh	r3, [r7, #24]
 80050ea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80050ee:	833b      	strh	r3, [r7, #24]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	441a      	add	r2, r3
 80050fe:	8b3b      	ldrh	r3, [r7, #24]
 8005100:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005104:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005108:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800510c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005110:	b29b      	uxth	r3, r3
 8005112:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005114:	88fb      	ldrh	r3, [r7, #6]
 8005116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800511a:	2b00      	cmp	r3, #0
 800511c:	d01f      	beq.n	800515e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	b29b      	uxth	r3, r3
 8005130:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005134:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005138:	82fb      	strh	r3, [r7, #22]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	461a      	mov	r2, r3
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	441a      	add	r2, r3
 8005148:	8afb      	ldrh	r3, [r7, #22]
 800514a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800514e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005152:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005156:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800515a:	b29b      	uxth	r3, r3
 800515c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800515e:	8b7b      	ldrh	r3, [r7, #26]
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 8085 	beq.w	8005270 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	6959      	ldr	r1, [r3, #20]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	891a      	ldrh	r2, [r3, #8]
 8005172:	8b7b      	ldrh	r3, [r7, #26]
 8005174:	f007 fde6 	bl	800cd44 <USB_ReadPMA>
 8005178:	e07a      	b.n	8005270 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005182:	b29b      	uxth	r3, r3
 8005184:	461a      	mov	r2, r3
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	4413      	add	r3, r2
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	6812      	ldr	r2, [r2, #0]
 8005192:	4413      	add	r3, r2
 8005194:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800519e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	699a      	ldr	r2, [r3, #24]
 80051a4:	8b7b      	ldrh	r3, [r7, #26]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d306      	bcc.n	80051b8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	8b7b      	ldrh	r3, [r7, #26]
 80051b0:	1ad2      	subs	r2, r2, r3
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	619a      	str	r2, [r3, #24]
 80051b6:	e002      	b.n	80051be <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2200      	movs	r2, #0
 80051bc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d123      	bne.n	800520e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	881b      	ldrh	r3, [r3, #0]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051e0:	83fb      	strh	r3, [r7, #30]
 80051e2:	8bfb      	ldrh	r3, [r7, #30]
 80051e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80051e8:	83fb      	strh	r3, [r7, #30]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	461a      	mov	r2, r3
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	441a      	add	r2, r3
 80051f8:	8bfb      	ldrh	r3, [r7, #30]
 80051fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005202:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800520a:	b29b      	uxth	r3, r3
 800520c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800520e:	88fb      	ldrh	r3, [r7, #6]
 8005210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005214:	2b00      	cmp	r3, #0
 8005216:	d11f      	bne.n	8005258 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	461a      	mov	r2, r3
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	b29b      	uxth	r3, r3
 800522a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800522e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005232:	83bb      	strh	r3, [r7, #28]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	461a      	mov	r2, r3
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	441a      	add	r2, r3
 8005242:	8bbb      	ldrh	r3, [r7, #28]
 8005244:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005248:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800524c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005250:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005254:	b29b      	uxth	r3, r3
 8005256:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005258:	8b7b      	ldrh	r3, [r7, #26]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d008      	beq.n	8005270 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6818      	ldr	r0, [r3, #0]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	6959      	ldr	r1, [r3, #20]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	895a      	ldrh	r2, [r3, #10]
 800526a:	8b7b      	ldrh	r3, [r7, #26]
 800526c:	f007 fd6a 	bl	800cd44 <USB_ReadPMA>
    }
  }

  return count;
 8005270:	8b7b      	ldrh	r3, [r7, #26]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3720      	adds	r7, #32
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b0a4      	sub	sp, #144	@ 0x90
 800527e:	af00      	add	r7, sp, #0
 8005280:	60f8      	str	r0, [r7, #12]
 8005282:	60b9      	str	r1, [r7, #8]
 8005284:	4613      	mov	r3, r2
 8005286:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005288:	88fb      	ldrh	r3, [r7, #6]
 800528a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 81db 	beq.w	800564a <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800529c:	b29b      	uxth	r3, r3
 800529e:	461a      	mov	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	00db      	lsls	r3, r3, #3
 80052a6:	4413      	add	r3, r2
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	6812      	ldr	r2, [r2, #0]
 80052ac:	4413      	add	r3, r2
 80052ae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052b8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	699a      	ldr	r2, [r3, #24]
 80052c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d907      	bls.n	80052d8 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	699a      	ldr	r2, [r3, #24]
 80052cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80052d0:	1ad2      	subs	r2, r2, r3
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	619a      	str	r2, [r3, #24]
 80052d6:	e002      	b.n	80052de <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2200      	movs	r2, #0
 80052dc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f040 80b9 	bne.w	800545a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	785b      	ldrb	r3, [r3, #1]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d126      	bne.n	800533e <HAL_PCD_EP_DB_Transmit+0xc4>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052fe:	b29b      	uxth	r3, r3
 8005300:	461a      	mov	r2, r3
 8005302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005304:	4413      	add	r3, r2
 8005306:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	00da      	lsls	r2, r3, #3
 800530e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005310:	4413      	add	r3, r2
 8005312:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005316:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	b29b      	uxth	r3, r3
 800531e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005322:	b29a      	uxth	r2, r3
 8005324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005326:	801a      	strh	r2, [r3, #0]
 8005328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532a:	881b      	ldrh	r3, [r3, #0]
 800532c:	b29b      	uxth	r3, r3
 800532e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005332:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005336:	b29a      	uxth	r2, r3
 8005338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533a:	801a      	strh	r2, [r3, #0]
 800533c:	e01a      	b.n	8005374 <HAL_PCD_EP_DB_Transmit+0xfa>
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	785b      	ldrb	r3, [r3, #1]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d116      	bne.n	8005374 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	637b      	str	r3, [r7, #52]	@ 0x34
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005354:	b29b      	uxth	r3, r3
 8005356:	461a      	mov	r2, r3
 8005358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800535a:	4413      	add	r3, r2
 800535c:	637b      	str	r3, [r7, #52]	@ 0x34
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	00da      	lsls	r2, r3, #3
 8005364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005366:	4413      	add	r3, r2
 8005368:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800536c:	633b      	str	r3, [r7, #48]	@ 0x30
 800536e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005370:	2200      	movs	r2, #0
 8005372:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	627b      	str	r3, [r7, #36]	@ 0x24
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	785b      	ldrb	r3, [r3, #1]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d126      	bne.n	80053d0 <HAL_PCD_EP_DB_Transmit+0x156>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	61fb      	str	r3, [r7, #28]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005390:	b29b      	uxth	r3, r3
 8005392:	461a      	mov	r2, r3
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	4413      	add	r3, r2
 8005398:	61fb      	str	r3, [r7, #28]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	00da      	lsls	r2, r3, #3
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	4413      	add	r3, r2
 80053a4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80053a8:	61bb      	str	r3, [r7, #24]
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	801a      	strh	r2, [r3, #0]
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	b29b      	uxth	r3, r3
 80053c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	801a      	strh	r2, [r3, #0]
 80053ce:	e017      	b.n	8005400 <HAL_PCD_EP_DB_Transmit+0x186>
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	785b      	ldrb	r3, [r3, #1]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d113      	bne.n	8005400 <HAL_PCD_EP_DB_Transmit+0x186>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	461a      	mov	r2, r3
 80053e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e6:	4413      	add	r3, r2
 80053e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	00da      	lsls	r2, r3, #3
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	4413      	add	r3, r2
 80053f4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80053f8:	623b      	str	r3, [r7, #32]
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	2200      	movs	r2, #0
 80053fe:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	4619      	mov	r1, r3
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f00d feb3 	bl	8013172 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800540c:	88fb      	ldrh	r3, [r7, #6]
 800540e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 82fa 	beq.w	8005a0c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	461a      	mov	r2, r3
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4413      	add	r3, r2
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	b29b      	uxth	r3, r3
 800542a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800542e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005432:	82fb      	strh	r3, [r7, #22]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	461a      	mov	r2, r3
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	441a      	add	r2, r3
 8005442:	8afb      	ldrh	r3, [r7, #22]
 8005444:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005448:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800544c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005450:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005454:	b29b      	uxth	r3, r3
 8005456:	8013      	strh	r3, [r2, #0]
 8005458:	e2d8      	b.n	8005a0c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800545a:	88fb      	ldrh	r3, [r7, #6]
 800545c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d021      	beq.n	80054a8 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	461a      	mov	r2, r3
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	b29b      	uxth	r3, r3
 8005476:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800547a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800547e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	461a      	mov	r2, r3
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	441a      	add	r2, r3
 8005490:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005494:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005498:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800549c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	f040 82ac 	bne.w	8005a0c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	695a      	ldr	r2, [r3, #20]
 80054b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80054bc:	441a      	add	r2, r3
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	69da      	ldr	r2, [r3, #28]
 80054c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80054ca:	441a      	add	r2, r3
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	6a1a      	ldr	r2, [r3, #32]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d30b      	bcc.n	80054f4 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	6a1a      	ldr	r2, [r3, #32]
 80054e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054ec:	1ad2      	subs	r2, r2, r3
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	621a      	str	r2, [r3, #32]
 80054f2:	e017      	b.n	8005524 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d108      	bne.n	800550e <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80054fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005500:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800550c:	e00a      	b.n	8005524 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2200      	movs	r2, #0
 8005522:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	785b      	ldrb	r3, [r3, #1]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d165      	bne.n	80055f8 <HAL_PCD_EP_DB_Transmit+0x37e>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800553a:	b29b      	uxth	r3, r3
 800553c:	461a      	mov	r2, r3
 800553e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005540:	4413      	add	r3, r2
 8005542:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	00da      	lsls	r2, r3, #3
 800554a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800554c:	4413      	add	r3, r2
 800554e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005552:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	b29b      	uxth	r3, r3
 800555a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800555e:	b29a      	uxth	r2, r3
 8005560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005562:	801a      	strh	r2, [r3, #0]
 8005564:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005568:	2b3e      	cmp	r3, #62	@ 0x3e
 800556a:	d91d      	bls.n	80055a8 <HAL_PCD_EP_DB_Transmit+0x32e>
 800556c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005570:	095b      	lsrs	r3, r3, #5
 8005572:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005574:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005578:	f003 031f 	and.w	r3, r3, #31
 800557c:	2b00      	cmp	r3, #0
 800557e:	d102      	bne.n	8005586 <HAL_PCD_EP_DB_Transmit+0x30c>
 8005580:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005582:	3b01      	subs	r3, #1
 8005584:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	b29a      	uxth	r2, r3
 800558c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800558e:	b29b      	uxth	r3, r3
 8005590:	029b      	lsls	r3, r3, #10
 8005592:	b29b      	uxth	r3, r3
 8005594:	4313      	orrs	r3, r2
 8005596:	b29b      	uxth	r3, r3
 8005598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800559c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a4:	801a      	strh	r2, [r3, #0]
 80055a6:	e044      	b.n	8005632 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80055a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10a      	bne.n	80055c6 <HAL_PCD_EP_DB_Transmit+0x34c>
 80055b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055be:	b29a      	uxth	r2, r3
 80055c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c2:	801a      	strh	r2, [r3, #0]
 80055c4:	e035      	b.n	8005632 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80055c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055ca:	085b      	lsrs	r3, r3, #1
 80055cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <HAL_PCD_EP_DB_Transmit+0x366>
 80055da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055dc:	3301      	adds	r3, #1
 80055de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e2:	881b      	ldrh	r3, [r3, #0]
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	029b      	lsls	r3, r3, #10
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	4313      	orrs	r3, r2
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f4:	801a      	strh	r2, [r3, #0]
 80055f6:	e01c      	b.n	8005632 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	785b      	ldrb	r3, [r3, #1]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d118      	bne.n	8005632 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	647b      	str	r3, [r7, #68]	@ 0x44
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800560e:	b29b      	uxth	r3, r3
 8005610:	461a      	mov	r2, r3
 8005612:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005614:	4413      	add	r3, r2
 8005616:	647b      	str	r3, [r7, #68]	@ 0x44
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	00da      	lsls	r2, r3, #3
 800561e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005620:	4413      	add	r3, r2
 8005622:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005626:	643b      	str	r3, [r7, #64]	@ 0x40
 8005628:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800562c:	b29a      	uxth	r2, r3
 800562e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005630:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6818      	ldr	r0, [r3, #0]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	6959      	ldr	r1, [r3, #20]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	891a      	ldrh	r2, [r3, #8]
 800563e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005642:	b29b      	uxth	r3, r3
 8005644:	f007 fb3c 	bl	800ccc0 <USB_WritePMA>
 8005648:	e1e0      	b.n	8005a0c <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005652:	b29b      	uxth	r3, r3
 8005654:	461a      	mov	r2, r3
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	4413      	add	r3, r2
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	6812      	ldr	r2, [r2, #0]
 8005662:	4413      	add	r3, r2
 8005664:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800566e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	699a      	ldr	r2, [r3, #24]
 8005676:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800567a:	429a      	cmp	r2, r3
 800567c:	d307      	bcc.n	800568e <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	699a      	ldr	r2, [r3, #24]
 8005682:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005686:	1ad2      	subs	r2, r2, r3
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	619a      	str	r2, [r3, #24]
 800568c:	e002      	b.n	8005694 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	2200      	movs	r2, #0
 8005692:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	2b00      	cmp	r3, #0
 800569a:	f040 80c0 	bne.w	800581e <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	785b      	ldrb	r3, [r3, #1]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d126      	bne.n	80056f4 <HAL_PCD_EP_DB_Transmit+0x47a>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	461a      	mov	r2, r3
 80056b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80056ba:	4413      	add	r3, r2
 80056bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	00da      	lsls	r2, r3, #3
 80056c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80056c6:	4413      	add	r3, r2
 80056c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80056cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056d8:	b29a      	uxth	r2, r3
 80056da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056dc:	801a      	strh	r2, [r3, #0]
 80056de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056f0:	801a      	strh	r2, [r3, #0]
 80056f2:	e01a      	b.n	800572a <HAL_PCD_EP_DB_Transmit+0x4b0>
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	785b      	ldrb	r3, [r3, #1]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d116      	bne.n	800572a <HAL_PCD_EP_DB_Transmit+0x4b0>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	667b      	str	r3, [r7, #100]	@ 0x64
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800570a:	b29b      	uxth	r3, r3
 800570c:	461a      	mov	r2, r3
 800570e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005710:	4413      	add	r3, r2
 8005712:	667b      	str	r3, [r7, #100]	@ 0x64
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	00da      	lsls	r2, r3, #3
 800571a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800571c:	4413      	add	r3, r2
 800571e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005722:	663b      	str	r3, [r7, #96]	@ 0x60
 8005724:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005726:	2200      	movs	r2, #0
 8005728:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	785b      	ldrb	r3, [r3, #1]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d12b      	bne.n	8005790 <HAL_PCD_EP_DB_Transmit+0x516>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005746:	b29b      	uxth	r3, r3
 8005748:	461a      	mov	r2, r3
 800574a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800574c:	4413      	add	r3, r2
 800574e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	00da      	lsls	r2, r3, #3
 8005756:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005758:	4413      	add	r3, r2
 800575a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800575e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005762:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	b29b      	uxth	r3, r3
 800576a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800576e:	b29a      	uxth	r2, r3
 8005770:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005774:	801a      	strh	r2, [r3, #0]
 8005776:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	b29b      	uxth	r3, r3
 800577e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005786:	b29a      	uxth	r2, r3
 8005788:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800578c:	801a      	strh	r2, [r3, #0]
 800578e:	e017      	b.n	80057c0 <HAL_PCD_EP_DB_Transmit+0x546>
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	785b      	ldrb	r3, [r3, #1]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d113      	bne.n	80057c0 <HAL_PCD_EP_DB_Transmit+0x546>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	461a      	mov	r2, r3
 80057a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057a6:	4413      	add	r3, r2
 80057a8:	677b      	str	r3, [r7, #116]	@ 0x74
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	00da      	lsls	r2, r3, #3
 80057b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057b2:	4413      	add	r3, r2
 80057b4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80057b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80057ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057bc:	2200      	movs	r2, #0
 80057be:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	4619      	mov	r1, r3
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f00d fcd3 	bl	8013172 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80057cc:	88fb      	ldrh	r3, [r7, #6]
 80057ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f040 811a 	bne.w	8005a0c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	461a      	mov	r2, r3
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	881b      	ldrh	r3, [r3, #0]
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057f2:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	461a      	mov	r2, r3
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	441a      	add	r2, r3
 8005804:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005808:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800580c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005810:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005818:	b29b      	uxth	r3, r3
 800581a:	8013      	strh	r3, [r2, #0]
 800581c:	e0f6      	b.n	8005a0c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800581e:	88fb      	ldrh	r3, [r7, #6]
 8005820:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d121      	bne.n	800586c <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	461a      	mov	r2, r3
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	881b      	ldrh	r3, [r3, #0]
 8005838:	b29b      	uxth	r3, r3
 800583a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800583e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005842:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	441a      	add	r2, r3
 8005854:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005858:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800585c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005860:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005868:	b29b      	uxth	r3, r3
 800586a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005872:	2b01      	cmp	r3, #1
 8005874:	f040 80ca 	bne.w	8005a0c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	695a      	ldr	r2, [r3, #20]
 800587c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005880:	441a      	add	r2, r3
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	69da      	ldr	r2, [r3, #28]
 800588a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800588e:	441a      	add	r2, r3
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	6a1a      	ldr	r2, [r3, #32]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	429a      	cmp	r2, r3
 800589e:	d30b      	bcc.n	80058b8 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	6a1a      	ldr	r2, [r3, #32]
 80058ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058b0:	1ad2      	subs	r2, r2, r3
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	621a      	str	r2, [r3, #32]
 80058b6:	e017      	b.n	80058e8 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d108      	bne.n	80058d2 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80058c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80058c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80058d0:	e00a      	b.n	80058e8 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	2200      	movs	r2, #0
 80058de:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	785b      	ldrb	r3, [r3, #1]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d165      	bne.n	80059c2 <HAL_PCD_EP_DB_Transmit+0x748>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005904:	b29b      	uxth	r3, r3
 8005906:	461a      	mov	r2, r3
 8005908:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800590a:	4413      	add	r3, r2
 800590c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	00da      	lsls	r2, r3, #3
 8005914:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005916:	4413      	add	r3, r2
 8005918:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800591c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800591e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	b29b      	uxth	r3, r3
 8005924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005928:	b29a      	uxth	r2, r3
 800592a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800592c:	801a      	strh	r2, [r3, #0]
 800592e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005932:	2b3e      	cmp	r3, #62	@ 0x3e
 8005934:	d91d      	bls.n	8005972 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8005936:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800593a:	095b      	lsrs	r3, r3, #5
 800593c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800593e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005942:	f003 031f 	and.w	r3, r3, #31
 8005946:	2b00      	cmp	r3, #0
 8005948:	d102      	bne.n	8005950 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800594a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800594c:	3b01      	subs	r3, #1
 800594e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005950:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	b29a      	uxth	r2, r3
 8005956:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005958:	b29b      	uxth	r3, r3
 800595a:	029b      	lsls	r3, r3, #10
 800595c:	b29b      	uxth	r3, r3
 800595e:	4313      	orrs	r3, r2
 8005960:	b29b      	uxth	r3, r3
 8005962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800596a:	b29a      	uxth	r2, r3
 800596c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800596e:	801a      	strh	r2, [r3, #0]
 8005970:	e041      	b.n	80059f6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005972:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10a      	bne.n	8005990 <HAL_PCD_EP_DB_Transmit+0x716>
 800597a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800597c:	881b      	ldrh	r3, [r3, #0]
 800597e:	b29b      	uxth	r3, r3
 8005980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005988:	b29a      	uxth	r2, r3
 800598a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800598c:	801a      	strh	r2, [r3, #0]
 800598e:	e032      	b.n	80059f6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005990:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005994:	085b      	lsrs	r3, r3, #1
 8005996:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005998:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d002      	beq.n	80059aa <HAL_PCD_EP_DB_Transmit+0x730>
 80059a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059a6:	3301      	adds	r3, #1
 80059a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	029b      	lsls	r3, r3, #10
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	4313      	orrs	r3, r2
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80059be:	801a      	strh	r2, [r3, #0]
 80059c0:	e019      	b.n	80059f6 <HAL_PCD_EP_DB_Transmit+0x77c>
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	785b      	ldrb	r3, [r3, #1]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d115      	bne.n	80059f6 <HAL_PCD_EP_DB_Transmit+0x77c>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	461a      	mov	r2, r3
 80059d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059d8:	4413      	add	r3, r2
 80059da:	657b      	str	r3, [r7, #84]	@ 0x54
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	00da      	lsls	r2, r3, #3
 80059e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059e4:	4413      	add	r3, r2
 80059e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80059ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80059ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059f4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6818      	ldr	r0, [r3, #0]
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	6959      	ldr	r1, [r3, #20]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	895a      	ldrh	r2, [r3, #10]
 8005a02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	f007 f95a 	bl	800ccc0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	461a      	mov	r2, r3
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	881b      	ldrh	r3, [r3, #0]
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a26:	82bb      	strh	r3, [r7, #20]
 8005a28:	8abb      	ldrh	r3, [r7, #20]
 8005a2a:	f083 0310 	eor.w	r3, r3, #16
 8005a2e:	82bb      	strh	r3, [r7, #20]
 8005a30:	8abb      	ldrh	r3, [r7, #20]
 8005a32:	f083 0320 	eor.w	r3, r3, #32
 8005a36:	82bb      	strh	r3, [r7, #20]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	441a      	add	r2, r3
 8005a46:	8abb      	ldrh	r3, [r7, #20]
 8005a48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3790      	adds	r7, #144	@ 0x90
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b087      	sub	sp, #28
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	607b      	str	r3, [r7, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	817b      	strh	r3, [r7, #10]
 8005a74:	4613      	mov	r3, r2
 8005a76:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005a78:	897b      	ldrh	r3, [r7, #10]
 8005a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00b      	beq.n	8005a9c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a84:	897b      	ldrh	r3, [r7, #10]
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4413      	add	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	e009      	b.n	8005ab0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a9c:	897a      	ldrh	r2, [r7, #10]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4413      	add	r3, r2
 8005aae:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005ab0:	893b      	ldrh	r3, [r7, #8]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d107      	bne.n	8005ac6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	80da      	strh	r2, [r3, #6]
 8005ac4:	e00b      	b.n	8005ade <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	0c1b      	lsrs	r3, r3, #16
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	371c      	adds	r7, #28
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8
  hpcd->LPM_State = LPM_L0;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	f043 0301 	orr.w	r3, r3, #1
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	f043 0302 	orr.w	r3, r3, #2
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b44:	4b05      	ldr	r3, [pc, #20]	@ (8005b5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a04      	ldr	r2, [pc, #16]	@ (8005b5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b4e:	6013      	str	r3, [r2, #0]
}
 8005b50:	bf00      	nop
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	58000400 	.word	0x58000400

08005b60 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005b64:	4b04      	ldr	r3, [pc, #16]	@ (8005b78 <HAL_PWREx_GetVoltageRange+0x18>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	58000400 	.word	0x58000400

08005b7c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005b80:	4b05      	ldr	r3, [pc, #20]	@ (8005b98 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	4a04      	ldr	r2, [pc, #16]	@ (8005b98 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005b86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005b8a:	6053      	str	r3, [r2, #4]
}
 8005b8c:	bf00      	nop
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	58000400 	.word	0x58000400

08005b9c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005ba0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005baa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bae:	d101      	bne.n	8005bb4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e000      	b.n	8005bb6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <LL_RCC_HSE_Enable>:
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005bc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bd2:	6013      	str	r3, [r2, #0]
}
 8005bd4:	bf00      	nop
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <LL_RCC_HSE_Disable>:
{
 8005bde:	b480      	push	{r7}
 8005be0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005be2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bf0:	6013      	str	r3, [r2, #0]
}
 8005bf2:	bf00      	nop
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <LL_RCC_HSE_IsReady>:
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005c00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c0e:	d101      	bne.n	8005c14 <LL_RCC_HSE_IsReady+0x18>
 8005c10:	2301      	movs	r3, #1
 8005c12:	e000      	b.n	8005c16 <LL_RCC_HSE_IsReady+0x1a>
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <LL_RCC_HSI_Enable>:
{
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005c24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c32:	6013      	str	r3, [r2, #0]
}
 8005c34:	bf00      	nop
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <LL_RCC_HSI_Disable>:
{
 8005c3e:	b480      	push	{r7}
 8005c40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005c42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c50:	6013      	str	r3, [r2, #0]
}
 8005c52:	bf00      	nop
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <LL_RCC_HSI_IsReady>:
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005c60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c6e:	d101      	bne.n	8005c74 <LL_RCC_HSI_IsReady+0x18>
 8005c70:	2301      	movs	r3, #1
 8005c72:	e000      	b.n	8005c76 <LL_RCC_HSI_IsReady+0x1a>
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005c88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	061b      	lsls	r3, r3, #24
 8005c96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	604b      	str	r3, [r1, #4]
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <LL_RCC_HSI48_Enable>:
{
 8005caa:	b480      	push	{r7}
 8005cac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005cae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005cba:	f043 0301 	orr.w	r3, r3, #1
 8005cbe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8005cc2:	bf00      	nop
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <LL_RCC_HSI48_Disable>:
{
 8005ccc:	b480      	push	{r7}
 8005cce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005cd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005cdc:	f023 0301 	bic.w	r3, r3, #1
 8005ce0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8005ce4:	bf00      	nop
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <LL_RCC_HSI48_IsReady>:
{
 8005cee:	b480      	push	{r7}
 8005cf0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005cf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d101      	bne.n	8005d06 <LL_RCC_HSI48_IsReady+0x18>
 8005d02:	2301      	movs	r3, #1
 8005d04:	e000      	b.n	8005d08 <LL_RCC_HSI48_IsReady+0x1a>
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <LL_RCC_LSE_Enable>:
{
 8005d12:	b480      	push	{r7}
 8005d14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d22:	f043 0301 	orr.w	r3, r3, #1
 8005d26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005d2a:	bf00      	nop
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <LL_RCC_LSE_Disable>:
{
 8005d34:	b480      	push	{r7}
 8005d36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005d38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d44:	f023 0301 	bic.w	r3, r3, #1
 8005d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005d4c:	bf00      	nop
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <LL_RCC_LSE_EnableBypass>:
{
 8005d56:	b480      	push	{r7}
 8005d58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005d5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d66:	f043 0304 	orr.w	r3, r3, #4
 8005d6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005d6e:	bf00      	nop
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <LL_RCC_LSE_DisableBypass>:
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005d7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d88:	f023 0304 	bic.w	r3, r3, #4
 8005d8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005d90:	bf00      	nop
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <LL_RCC_LSE_IsReady>:
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005d9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d101      	bne.n	8005db2 <LL_RCC_LSE_IsReady+0x18>
 8005dae:	2301      	movs	r3, #1
 8005db0:	e000      	b.n	8005db4 <LL_RCC_LSE_IsReady+0x1a>
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <LL_RCC_LSI1_Enable>:
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005dce:	f043 0301 	orr.w	r3, r3, #1
 8005dd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005dd6:	bf00      	nop
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <LL_RCC_LSI1_Disable>:
{
 8005de0:	b480      	push	{r7}
 8005de2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005de4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005df0:	f023 0301 	bic.w	r3, r3, #1
 8005df4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005df8:	bf00      	nop
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <LL_RCC_LSI1_IsReady>:
{
 8005e02:	b480      	push	{r7}
 8005e04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005e06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d101      	bne.n	8005e1a <LL_RCC_LSI1_IsReady+0x18>
 8005e16:	2301      	movs	r3, #1
 8005e18:	e000      	b.n	8005e1c <LL_RCC_LSI1_IsReady+0x1a>
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <LL_RCC_LSI2_Enable>:
{
 8005e26:	b480      	push	{r7}
 8005e28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005e2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e36:	f043 0304 	orr.w	r3, r3, #4
 8005e3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005e3e:	bf00      	nop
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <LL_RCC_LSI2_Disable>:
{
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005e4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e58:	f023 0304 	bic.w	r3, r3, #4
 8005e5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005e60:	bf00      	nop
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <LL_RCC_LSI2_IsReady>:
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005e6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e76:	f003 0308 	and.w	r3, r3, #8
 8005e7a:	2b08      	cmp	r3, #8
 8005e7c:	d101      	bne.n	8005e82 <LL_RCC_LSI2_IsReady+0x18>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e000      	b.n	8005e84 <LL_RCC_LSI2_IsReady+0x1a>
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <LL_RCC_LSI2_SetTrimming>:
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005e96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e9e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	021b      	lsls	r3, r3, #8
 8005ea6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <LL_RCC_MSI_Enable>:
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005ec0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005eca:	f043 0301 	orr.w	r3, r3, #1
 8005ece:	6013      	str	r3, [r2, #0]
}
 8005ed0:	bf00      	nop
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <LL_RCC_MSI_Disable>:
{
 8005eda:	b480      	push	{r7}
 8005edc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005ede:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ee8:	f023 0301 	bic.w	r3, r3, #1
 8005eec:	6013      	str	r3, [r2, #0]
}
 8005eee:	bf00      	nop
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <LL_RCC_MSI_IsReady>:
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d101      	bne.n	8005f0e <LL_RCC_MSI_IsReady+0x16>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e000      	b.n	8005f10 <LL_RCC_MSI_IsReady+0x18>
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <LL_RCC_MSI_SetRange>:
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005f22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	600b      	str	r3, [r1, #0]
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <LL_RCC_MSI_GetRange>:
{
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005f48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f52:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2bb0      	cmp	r3, #176	@ 0xb0
 8005f58:	d901      	bls.n	8005f5e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005f5a:	23b0      	movs	r3, #176	@ 0xb0
 8005f5c:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005f5e:	687b      	ldr	r3, [r7, #4]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <LL_RCC_MSI_SetCalibTrimming>:
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005f74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	021b      	lsls	r3, r3, #8
 8005f82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f86:	4313      	orrs	r3, r2
 8005f88:	604b      	str	r3, [r1, #4]
}
 8005f8a:	bf00      	nop
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <LL_RCC_SetSysClkSource>:
{
 8005f96:	b480      	push	{r7}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005f9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f023 0203 	bic.w	r2, r3, #3
 8005fa8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	608b      	str	r3, [r1, #8]
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <LL_RCC_GetSysClkSource>:
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005fc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f003 030c 	and.w	r3, r3, #12
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <LL_RCC_SetAHBPrescaler>:
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005fde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005fe8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	608b      	str	r3, [r1, #8]
}
 8005ff2:	bf00      	nop
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <LL_C2_RCC_SetAHBPrescaler>:
{
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006006:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800600a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800600e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006012:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4313      	orrs	r3, r2
 800601a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800601e:	bf00      	nop
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <LL_RCC_SetAHB4Prescaler>:
{
 800602a:	b480      	push	{r7}
 800602c:	b083      	sub	sp, #12
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006032:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006036:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800603a:	f023 020f 	bic.w	r2, r3, #15
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	091b      	lsrs	r3, r3, #4
 8006042:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006046:	4313      	orrs	r3, r2
 8006048:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <LL_RCC_SetAPB1Prescaler>:
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006060:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800606a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4313      	orrs	r3, r2
 8006072:	608b      	str	r3, [r1, #8]
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <LL_RCC_SetAPB2Prescaler>:
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006088:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006092:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4313      	orrs	r3, r2
 800609a:	608b      	str	r3, [r1, #8]
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <LL_RCC_GetAHBPrescaler>:
{
 80060a8:	b480      	push	{r7}
 80060aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80060ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <LL_RCC_GetAHB4Prescaler>:
{
 80060c0:	b480      	push	{r7}
 80060c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80060c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80060cc:	011b      	lsls	r3, r3, #4
 80060ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <LL_RCC_GetAPB1Prescaler>:
{
 80060dc:	b480      	push	{r7}
 80060de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80060e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <LL_RCC_GetAPB2Prescaler>:
{
 80060f4:	b480      	push	{r7}
 80060f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80060f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8006102:	4618      	mov	r0, r3
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <LL_RCC_PLL_Enable>:
{
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006110:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800611a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800611e:	6013      	str	r3, [r2, #0]
}
 8006120:	bf00      	nop
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <LL_RCC_PLL_Disable>:
{
 800612a:	b480      	push	{r7}
 800612c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800612e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006138:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800613c:	6013      	str	r3, [r2, #0]
}
 800613e:	bf00      	nop
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <LL_RCC_PLL_IsReady>:
{
 8006148:	b480      	push	{r7}
 800614a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800614c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006156:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800615a:	d101      	bne.n	8006160 <LL_RCC_PLL_IsReady+0x18>
 800615c:	2301      	movs	r3, #1
 800615e:	e000      	b.n	8006162 <LL_RCC_PLL_IsReady+0x1a>
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <LL_RCC_PLL_GetN>:
{
 800616c:	b480      	push	{r7}
 800616e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006170:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	0a1b      	lsrs	r3, r3, #8
 8006178:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800617c:	4618      	mov	r0, r3
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <LL_RCC_PLL_GetR>:
{
 8006186:	b480      	push	{r7}
 8006188:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800618a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8006194:	4618      	mov	r0, r3
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <LL_RCC_PLL_GetDivider>:
{
 800619e:	b480      	push	{r7}
 80061a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80061a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <LL_RCC_PLL_GetMainSource>:
{
 80061b6:	b480      	push	{r7}
 80061b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80061ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f003 0303 	and.w	r3, r3, #3
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <LL_RCC_IsActiveFlag_HPRE>:
{
 80061ce:	b480      	push	{r7}
 80061d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80061d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061e0:	d101      	bne.n	80061e6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80061e2:	2301      	movs	r3, #1
 80061e4:	e000      	b.n	80061e8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80061f2:	b480      	push	{r7}
 80061f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80061f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80061fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006202:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006206:	d101      	bne.n	800620c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006208:	2301      	movs	r3, #1
 800620a:	e000      	b.n	800620e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8006218:	b480      	push	{r7}
 800621a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800621c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006220:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800622c:	d101      	bne.n	8006232 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800622e:	2301      	movs	r3, #1
 8006230:	e000      	b.n	8006234 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <LL_RCC_IsActiveFlag_PPRE1>:
{
 800623e:	b480      	push	{r7}
 8006240:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006242:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800624c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006250:	d101      	bne.n	8006256 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006252:	2301      	movs	r3, #1
 8006254:	e000      	b.n	8006258 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8006262:	b480      	push	{r7}
 8006264:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006266:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006270:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006274:	d101      	bne.n	800627a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006276:	2301      	movs	r3, #1
 8006278:	e000      	b.n	800627c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
	...

08006288 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006288:	b590      	push	{r4, r7, lr}
 800628a:	b08d      	sub	sp, #52	@ 0x34
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e363      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0320 	and.w	r3, r3, #32
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 808d 	beq.w	80063c2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062a8:	f7ff fe89 	bl	8005fbe <LL_RCC_GetSysClkSource>
 80062ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062ae:	f7ff ff82 	bl	80061b6 <LL_RCC_PLL_GetMainSource>
 80062b2:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80062b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d005      	beq.n	80062c6 <HAL_RCC_OscConfig+0x3e>
 80062ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062bc:	2b0c      	cmp	r3, #12
 80062be:	d147      	bne.n	8006350 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80062c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d144      	bne.n	8006350 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e347      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80062d6:	f7ff fe34 	bl	8005f42 <LL_RCC_MSI_GetRange>
 80062da:	4603      	mov	r3, r0
 80062dc:	429c      	cmp	r4, r3
 80062de:	d914      	bls.n	800630a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 fd2f 	bl	8006d48 <RCC_SetFlashLatencyFromMSIRange>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e336      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7ff fe0e 	bl	8005f1a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	4618      	mov	r0, r3
 8006304:	f7ff fe32 	bl	8005f6c <LL_RCC_MSI_SetCalibTrimming>
 8006308:	e013      	b.n	8006332 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800630e:	4618      	mov	r0, r3
 8006310:	f7ff fe03 	bl	8005f1a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	4618      	mov	r0, r3
 800631a:	f7ff fe27 	bl	8005f6c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006322:	4618      	mov	r0, r3
 8006324:	f000 fd10 	bl	8006d48 <RCC_SetFlashLatencyFromMSIRange>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e317      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006332:	f000 fcc9 	bl	8006cc8 <HAL_RCC_GetHCLKFreq>
 8006336:	4603      	mov	r3, r0
 8006338:	4aa4      	ldr	r2, [pc, #656]	@ (80065cc <HAL_RCC_OscConfig+0x344>)
 800633a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800633c:	4ba4      	ldr	r3, [pc, #656]	@ (80065d0 <HAL_RCC_OscConfig+0x348>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4618      	mov	r0, r3
 8006342:	f7fc ff31 	bl	80031a8 <HAL_InitTick>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d039      	beq.n	80063c0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e308      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	69db      	ldr	r3, [r3, #28]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d01e      	beq.n	8006396 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006358:	f7ff fdb0 	bl	8005ebc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800635c:	f7fc ff72 	bl	8003244 <HAL_GetTick>
 8006360:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006362:	e008      	b.n	8006376 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006364:	f7fc ff6e 	bl	8003244 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b02      	cmp	r3, #2
 8006370:	d901      	bls.n	8006376 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e2f5      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006376:	f7ff fdbf 	bl	8005ef8 <LL_RCC_MSI_IsReady>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d0f1      	beq.n	8006364 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006384:	4618      	mov	r0, r3
 8006386:	f7ff fdc8 	bl	8005f1a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	4618      	mov	r0, r3
 8006390:	f7ff fdec 	bl	8005f6c <LL_RCC_MSI_SetCalibTrimming>
 8006394:	e015      	b.n	80063c2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006396:	f7ff fda0 	bl	8005eda <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800639a:	f7fc ff53 	bl	8003244 <HAL_GetTick>
 800639e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80063a0:	e008      	b.n	80063b4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80063a2:	f7fc ff4f 	bl	8003244 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d901      	bls.n	80063b4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e2d6      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80063b4:	f7ff fda0 	bl	8005ef8 <LL_RCC_MSI_IsReady>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1f1      	bne.n	80063a2 <HAL_RCC_OscConfig+0x11a>
 80063be:	e000      	b.n	80063c2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80063c0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d047      	beq.n	800645e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063ce:	f7ff fdf6 	bl	8005fbe <LL_RCC_GetSysClkSource>
 80063d2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063d4:	f7ff feef 	bl	80061b6 <LL_RCC_PLL_GetMainSource>
 80063d8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80063da:	6a3b      	ldr	r3, [r7, #32]
 80063dc:	2b08      	cmp	r3, #8
 80063de:	d005      	beq.n	80063ec <HAL_RCC_OscConfig+0x164>
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	2b0c      	cmp	r3, #12
 80063e4:	d108      	bne.n	80063f8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	2b03      	cmp	r3, #3
 80063ea:	d105      	bne.n	80063f8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d134      	bne.n	800645e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e2b4      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006400:	d102      	bne.n	8006408 <HAL_RCC_OscConfig+0x180>
 8006402:	f7ff fbdd 	bl	8005bc0 <LL_RCC_HSE_Enable>
 8006406:	e001      	b.n	800640c <HAL_RCC_OscConfig+0x184>
 8006408:	f7ff fbe9 	bl	8005bde <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d012      	beq.n	800643a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006414:	f7fc ff16 	bl	8003244 <HAL_GetTick>
 8006418:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800641a:	e008      	b.n	800642e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800641c:	f7fc ff12 	bl	8003244 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b64      	cmp	r3, #100	@ 0x64
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e299      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800642e:	f7ff fbe5 	bl	8005bfc <LL_RCC_HSE_IsReady>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d0f1      	beq.n	800641c <HAL_RCC_OscConfig+0x194>
 8006438:	e011      	b.n	800645e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800643a:	f7fc ff03 	bl	8003244 <HAL_GetTick>
 800643e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006440:	e008      	b.n	8006454 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006442:	f7fc feff 	bl	8003244 <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	2b64      	cmp	r3, #100	@ 0x64
 800644e:	d901      	bls.n	8006454 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e286      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006454:	f7ff fbd2 	bl	8005bfc <LL_RCC_HSE_IsReady>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1f1      	bne.n	8006442 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d04c      	beq.n	8006504 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800646a:	f7ff fda8 	bl	8005fbe <LL_RCC_GetSysClkSource>
 800646e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006470:	f7ff fea1 	bl	80061b6 <LL_RCC_PLL_GetMainSource>
 8006474:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	2b04      	cmp	r3, #4
 800647a:	d005      	beq.n	8006488 <HAL_RCC_OscConfig+0x200>
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	2b0c      	cmp	r3, #12
 8006480:	d10e      	bne.n	80064a0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2b02      	cmp	r3, #2
 8006486:	d10b      	bne.n	80064a0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e266      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	4618      	mov	r0, r3
 800649a:	f7ff fbf1 	bl	8005c80 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800649e:	e031      	b.n	8006504 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d019      	beq.n	80064dc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064a8:	f7ff fbba 	bl	8005c20 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ac:	f7fc feca 	bl	8003244 <HAL_GetTick>
 80064b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80064b2:	e008      	b.n	80064c6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064b4:	f7fc fec6 	bl	8003244 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e24d      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80064c6:	f7ff fbc9 	bl	8005c5c <LL_RCC_HSI_IsReady>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d0f1      	beq.n	80064b4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7ff fbd3 	bl	8005c80 <LL_RCC_HSI_SetCalibTrimming>
 80064da:	e013      	b.n	8006504 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064dc:	f7ff fbaf 	bl	8005c3e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e0:	f7fc feb0 	bl	8003244 <HAL_GetTick>
 80064e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80064e6:	e008      	b.n	80064fa <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064e8:	f7fc feac 	bl	8003244 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d901      	bls.n	80064fa <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e233      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80064fa:	f7ff fbaf 	bl	8005c5c <LL_RCC_HSI_IsReady>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1f1      	bne.n	80064e8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0308 	and.w	r3, r3, #8
 800650c:	2b00      	cmp	r3, #0
 800650e:	d106      	bne.n	800651e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 80a3 	beq.w	8006664 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d076      	beq.n	8006614 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0310 	and.w	r3, r3, #16
 800652e:	2b00      	cmp	r3, #0
 8006530:	d046      	beq.n	80065c0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006532:	f7ff fc66 	bl	8005e02 <LL_RCC_LSI1_IsReady>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d113      	bne.n	8006564 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800653c:	f7ff fc3f 	bl	8005dbe <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006540:	f7fc fe80 	bl	8003244 <HAL_GetTick>
 8006544:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006546:	e008      	b.n	800655a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006548:	f7fc fe7c 	bl	8003244 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	2b02      	cmp	r3, #2
 8006554:	d901      	bls.n	800655a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e203      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800655a:	f7ff fc52 	bl	8005e02 <LL_RCC_LSI1_IsReady>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d0f1      	beq.n	8006548 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006564:	f7ff fc5f 	bl	8005e26 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006568:	f7fc fe6c 	bl	8003244 <HAL_GetTick>
 800656c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800656e:	e008      	b.n	8006582 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006570:	f7fc fe68 	bl	8003244 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b03      	cmp	r3, #3
 800657c:	d901      	bls.n	8006582 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e1ef      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006582:	f7ff fc72 	bl	8005e6a <LL_RCC_LSI2_IsReady>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d0f1      	beq.n	8006570 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	4618      	mov	r0, r3
 8006592:	f7ff fc7c 	bl	8005e8e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006596:	f7ff fc23 	bl	8005de0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800659a:	f7fc fe53 	bl	8003244 <HAL_GetTick>
 800659e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80065a0:	e008      	b.n	80065b4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80065a2:	f7fc fe4f 	bl	8003244 <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d901      	bls.n	80065b4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e1d6      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80065b4:	f7ff fc25 	bl	8005e02 <LL_RCC_LSI1_IsReady>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1f1      	bne.n	80065a2 <HAL_RCC_OscConfig+0x31a>
 80065be:	e051      	b.n	8006664 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80065c0:	f7ff fbfd 	bl	8005dbe <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c4:	f7fc fe3e 	bl	8003244 <HAL_GetTick>
 80065c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80065ca:	e00c      	b.n	80065e6 <HAL_RCC_OscConfig+0x35e>
 80065cc:	20000020 	.word	0x20000020
 80065d0:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80065d4:	f7fc fe36 	bl	8003244 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e1bd      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80065e6:	f7ff fc0c 	bl	8005e02 <LL_RCC_LSI1_IsReady>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d0f1      	beq.n	80065d4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80065f0:	f7ff fc2a 	bl	8005e48 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80065f4:	e008      	b.n	8006608 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80065f6:	f7fc fe25 	bl	8003244 <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	2b03      	cmp	r3, #3
 8006602:	d901      	bls.n	8006608 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e1ac      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006608:	f7ff fc2f 	bl	8005e6a <LL_RCC_LSI2_IsReady>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1f1      	bne.n	80065f6 <HAL_RCC_OscConfig+0x36e>
 8006612:	e027      	b.n	8006664 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006614:	f7ff fc18 	bl	8005e48 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006618:	f7fc fe14 	bl	8003244 <HAL_GetTick>
 800661c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800661e:	e008      	b.n	8006632 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006620:	f7fc fe10 	bl	8003244 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b03      	cmp	r3, #3
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e197      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006632:	f7ff fc1a 	bl	8005e6a <LL_RCC_LSI2_IsReady>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1f1      	bne.n	8006620 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800663c:	f7ff fbd0 	bl	8005de0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006640:	f7fc fe00 	bl	8003244 <HAL_GetTick>
 8006644:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006646:	e008      	b.n	800665a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006648:	f7fc fdfc 	bl	8003244 <HAL_GetTick>
 800664c:	4602      	mov	r2, r0
 800664e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	2b02      	cmp	r3, #2
 8006654:	d901      	bls.n	800665a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e183      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800665a:	f7ff fbd2 	bl	8005e02 <LL_RCC_LSI1_IsReady>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1f1      	bne.n	8006648 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0304 	and.w	r3, r3, #4
 800666c:	2b00      	cmp	r3, #0
 800666e:	d05b      	beq.n	8006728 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006670:	4ba7      	ldr	r3, [pc, #668]	@ (8006910 <HAL_RCC_OscConfig+0x688>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006678:	2b00      	cmp	r3, #0
 800667a:	d114      	bne.n	80066a6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800667c:	f7ff fa60 	bl	8005b40 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006680:	f7fc fde0 	bl	8003244 <HAL_GetTick>
 8006684:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006686:	e008      	b.n	800669a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006688:	f7fc fddc 	bl	8003244 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	2b02      	cmp	r3, #2
 8006694:	d901      	bls.n	800669a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e163      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800669a:	4b9d      	ldr	r3, [pc, #628]	@ (8006910 <HAL_RCC_OscConfig+0x688>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d0f0      	beq.n	8006688 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d102      	bne.n	80066b4 <HAL_RCC_OscConfig+0x42c>
 80066ae:	f7ff fb30 	bl	8005d12 <LL_RCC_LSE_Enable>
 80066b2:	e00c      	b.n	80066ce <HAL_RCC_OscConfig+0x446>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	2b05      	cmp	r3, #5
 80066ba:	d104      	bne.n	80066c6 <HAL_RCC_OscConfig+0x43e>
 80066bc:	f7ff fb4b 	bl	8005d56 <LL_RCC_LSE_EnableBypass>
 80066c0:	f7ff fb27 	bl	8005d12 <LL_RCC_LSE_Enable>
 80066c4:	e003      	b.n	80066ce <HAL_RCC_OscConfig+0x446>
 80066c6:	f7ff fb35 	bl	8005d34 <LL_RCC_LSE_Disable>
 80066ca:	f7ff fb55 	bl	8005d78 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d014      	beq.n	8006700 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066d6:	f7fc fdb5 	bl	8003244 <HAL_GetTick>
 80066da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80066dc:	e00a      	b.n	80066f4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066de:	f7fc fdb1 	bl	8003244 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d901      	bls.n	80066f4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e136      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80066f4:	f7ff fb51 	bl	8005d9a <LL_RCC_LSE_IsReady>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0ef      	beq.n	80066de <HAL_RCC_OscConfig+0x456>
 80066fe:	e013      	b.n	8006728 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006700:	f7fc fda0 	bl	8003244 <HAL_GetTick>
 8006704:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006706:	e00a      	b.n	800671e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006708:	f7fc fd9c 	bl	8003244 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006716:	4293      	cmp	r3, r2
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e121      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800671e:	f7ff fb3c 	bl	8005d9a <LL_RCC_LSE_IsReady>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1ef      	bne.n	8006708 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006730:	2b00      	cmp	r3, #0
 8006732:	d02c      	beq.n	800678e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006738:	2b00      	cmp	r3, #0
 800673a:	d014      	beq.n	8006766 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800673c:	f7ff fab5 	bl	8005caa <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006740:	f7fc fd80 	bl	8003244 <HAL_GetTick>
 8006744:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006746:	e008      	b.n	800675a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006748:	f7fc fd7c 	bl	8003244 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b02      	cmp	r3, #2
 8006754:	d901      	bls.n	800675a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e103      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800675a:	f7ff fac8 	bl	8005cee <LL_RCC_HSI48_IsReady>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d0f1      	beq.n	8006748 <HAL_RCC_OscConfig+0x4c0>
 8006764:	e013      	b.n	800678e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006766:	f7ff fab1 	bl	8005ccc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800676a:	f7fc fd6b 	bl	8003244 <HAL_GetTick>
 800676e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006770:	e008      	b.n	8006784 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006772:	f7fc fd67 	bl	8003244 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	2b02      	cmp	r3, #2
 800677e:	d901      	bls.n	8006784 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e0ee      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006784:	f7ff fab3 	bl	8005cee <LL_RCC_HSI48_IsReady>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1f1      	bne.n	8006772 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 80e4 	beq.w	8006960 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006798:	f7ff fc11 	bl	8005fbe <LL_RCC_GetSysClkSource>
 800679c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800679e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	f040 80b4 	bne.w	8006918 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f003 0203 	and.w	r2, r3, #3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d123      	bne.n	8006806 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d11c      	bne.n	8006806 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	0a1b      	lsrs	r3, r3, #8
 80067d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067d8:	429a      	cmp	r2, r3
 80067da:	d114      	bne.n	8006806 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d10d      	bne.n	8006806 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d106      	bne.n	8006806 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006802:	429a      	cmp	r2, r3
 8006804:	d05d      	beq.n	80068c2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	2b0c      	cmp	r3, #12
 800680a:	d058      	beq.n	80068be <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800680c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e0a1      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800681e:	f7ff fc84 	bl	800612a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006822:	f7fc fd0f 	bl	8003244 <HAL_GetTick>
 8006826:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006828:	e008      	b.n	800683c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800682a:	f7fc fd0b 	bl	8003244 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	2b02      	cmp	r3, #2
 8006836:	d901      	bls.n	800683c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e092      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800683c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1ef      	bne.n	800682a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800684a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800684e:	68da      	ldr	r2, [r3, #12]
 8006850:	4b30      	ldr	r3, [pc, #192]	@ (8006914 <HAL_RCC_OscConfig+0x68c>)
 8006852:	4013      	ands	r3, r2
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800685c:	4311      	orrs	r1, r2
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006862:	0212      	lsls	r2, r2, #8
 8006864:	4311      	orrs	r1, r2
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800686a:	4311      	orrs	r1, r2
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006870:	4311      	orrs	r1, r2
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006876:	430a      	orrs	r2, r1
 8006878:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800687c:	4313      	orrs	r3, r2
 800687e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006880:	f7ff fc44 	bl	800610c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006884:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800688e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006892:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006894:	f7fc fcd6 	bl	8003244 <HAL_GetTick>
 8006898:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800689a:	e008      	b.n	80068ae <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800689c:	f7fc fcd2 	bl	8003244 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d901      	bls.n	80068ae <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e059      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d0ef      	beq.n	800689c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068bc:	e050      	b.n	8006960 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e04f      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d147      	bne.n	8006960 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80068d0:	f7ff fc1c 	bl	800610c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80068d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80068e4:	f7fc fcae 	bl	8003244 <HAL_GetTick>
 80068e8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068ea:	e008      	b.n	80068fe <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068ec:	f7fc fcaa 	bl	8003244 <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d901      	bls.n	80068fe <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e031      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d0ef      	beq.n	80068ec <HAL_RCC_OscConfig+0x664>
 800690c:	e028      	b.n	8006960 <HAL_RCC_OscConfig+0x6d8>
 800690e:	bf00      	nop
 8006910:	58000400 	.word	0x58000400
 8006914:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	2b0c      	cmp	r3, #12
 800691c:	d01e      	beq.n	800695c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800691e:	f7ff fc04 	bl	800612a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006922:	f7fc fc8f 	bl	8003244 <HAL_GetTick>
 8006926:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006928:	e008      	b.n	800693c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800692a:	f7fc fc8b 	bl	8003244 <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	2b02      	cmp	r3, #2
 8006936:	d901      	bls.n	800693c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e012      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800693c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1ef      	bne.n	800692a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800694a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800694e:	68da      	ldr	r2, [r3, #12]
 8006950:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006954:	4b05      	ldr	r3, [pc, #20]	@ (800696c <HAL_RCC_OscConfig+0x6e4>)
 8006956:	4013      	ands	r3, r2
 8006958:	60cb      	str	r3, [r1, #12]
 800695a:	e001      	b.n	8006960 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e000      	b.n	8006962 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3734      	adds	r7, #52	@ 0x34
 8006966:	46bd      	mov	sp, r7
 8006968:	bd90      	pop	{r4, r7, pc}
 800696a:	bf00      	nop
 800696c:	eefefffc 	.word	0xeefefffc

08006970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d101      	bne.n	8006984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e12d      	b.n	8006be0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006984:	4b98      	ldr	r3, [pc, #608]	@ (8006be8 <HAL_RCC_ClockConfig+0x278>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0307 	and.w	r3, r3, #7
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	429a      	cmp	r2, r3
 8006990:	d91b      	bls.n	80069ca <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006992:	4b95      	ldr	r3, [pc, #596]	@ (8006be8 <HAL_RCC_ClockConfig+0x278>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f023 0207 	bic.w	r2, r3, #7
 800699a:	4993      	ldr	r1, [pc, #588]	@ (8006be8 <HAL_RCC_ClockConfig+0x278>)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	4313      	orrs	r3, r2
 80069a0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069a2:	f7fc fc4f 	bl	8003244 <HAL_GetTick>
 80069a6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069a8:	e008      	b.n	80069bc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80069aa:	f7fc fc4b 	bl	8003244 <HAL_GetTick>
 80069ae:	4602      	mov	r2, r0
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d901      	bls.n	80069bc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e111      	b.n	8006be0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069bc:	4b8a      	ldr	r3, [pc, #552]	@ (8006be8 <HAL_RCC_ClockConfig+0x278>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0307 	and.w	r3, r3, #7
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d1ef      	bne.n	80069aa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d016      	beq.n	8006a04 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	4618      	mov	r0, r3
 80069dc:	f7ff fafb 	bl	8005fd6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80069e0:	f7fc fc30 	bl	8003244 <HAL_GetTick>
 80069e4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80069e6:	e008      	b.n	80069fa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80069e8:	f7fc fc2c 	bl	8003244 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d901      	bls.n	80069fa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e0f2      	b.n	8006be0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80069fa:	f7ff fbe8 	bl	80061ce <LL_RCC_IsActiveFlag_HPRE>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d0f1      	beq.n	80069e8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0320 	and.w	r3, r3, #32
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d016      	beq.n	8006a3e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	695b      	ldr	r3, [r3, #20]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7ff faf2 	bl	8005ffe <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006a1a:	f7fc fc13 	bl	8003244 <HAL_GetTick>
 8006a1e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006a20:	e008      	b.n	8006a34 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a22:	f7fc fc0f 	bl	8003244 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d901      	bls.n	8006a34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e0d5      	b.n	8006be0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006a34:	f7ff fbdd 	bl	80061f2 <LL_RCC_IsActiveFlag_C2HPRE>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d0f1      	beq.n	8006a22 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d016      	beq.n	8006a78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7ff faeb 	bl	800602a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006a54:	f7fc fbf6 	bl	8003244 <HAL_GetTick>
 8006a58:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006a5a:	e008      	b.n	8006a6e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a5c:	f7fc fbf2 	bl	8003244 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d901      	bls.n	8006a6e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e0b8      	b.n	8006be0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006a6e:	f7ff fbd3 	bl	8006218 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d0f1      	beq.n	8006a5c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0304 	and.w	r3, r3, #4
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d016      	beq.n	8006ab2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7ff fae5 	bl	8006058 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006a8e:	f7fc fbd9 	bl	8003244 <HAL_GetTick>
 8006a92:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006a94:	e008      	b.n	8006aa8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a96:	f7fc fbd5 	bl	8003244 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d901      	bls.n	8006aa8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e09b      	b.n	8006be0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006aa8:	f7ff fbc9 	bl	800623e <LL_RCC_IsActiveFlag_PPRE1>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0f1      	beq.n	8006a96 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0308 	and.w	r3, r3, #8
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d017      	beq.n	8006aee <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	00db      	lsls	r3, r3, #3
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7ff fadb 	bl	8006080 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006aca:	f7fc fbbb 	bl	8003244 <HAL_GetTick>
 8006ace:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006ad0:	e008      	b.n	8006ae4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006ad2:	f7fc fbb7 	bl	8003244 <HAL_GetTick>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d901      	bls.n	8006ae4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e07d      	b.n	8006be0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006ae4:	f7ff fbbd 	bl	8006262 <LL_RCC_IsActiveFlag_PPRE2>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d0f1      	beq.n	8006ad2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d043      	beq.n	8006b82 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d106      	bne.n	8006b10 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006b02:	f7ff f87b 	bl	8005bfc <LL_RCC_HSE_IsReady>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d11e      	bne.n	8006b4a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e067      	b.n	8006be0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	2b03      	cmp	r3, #3
 8006b16:	d106      	bne.n	8006b26 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006b18:	f7ff fb16 	bl	8006148 <LL_RCC_PLL_IsReady>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d113      	bne.n	8006b4a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e05c      	b.n	8006be0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d106      	bne.n	8006b3c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006b2e:	f7ff f9e3 	bl	8005ef8 <LL_RCC_MSI_IsReady>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d108      	bne.n	8006b4a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e051      	b.n	8006be0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006b3c:	f7ff f88e 	bl	8005c5c <LL_RCC_HSI_IsReady>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e04a      	b.n	8006be0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7ff fa21 	bl	8005f96 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b54:	f7fc fb76 	bl	8003244 <HAL_GetTick>
 8006b58:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b5a:	e00a      	b.n	8006b72 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b5c:	f7fc fb72 	bl	8003244 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d901      	bls.n	8006b72 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e036      	b.n	8006be0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b72:	f7ff fa24 	bl	8005fbe <LL_RCC_GetSysClkSource>
 8006b76:	4602      	mov	r2, r0
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d1ec      	bne.n	8006b5c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b82:	4b19      	ldr	r3, [pc, #100]	@ (8006be8 <HAL_RCC_ClockConfig+0x278>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0307 	and.w	r3, r3, #7
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d21b      	bcs.n	8006bc8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b90:	4b15      	ldr	r3, [pc, #84]	@ (8006be8 <HAL_RCC_ClockConfig+0x278>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f023 0207 	bic.w	r2, r3, #7
 8006b98:	4913      	ldr	r1, [pc, #76]	@ (8006be8 <HAL_RCC_ClockConfig+0x278>)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ba0:	f7fc fb50 	bl	8003244 <HAL_GetTick>
 8006ba4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ba6:	e008      	b.n	8006bba <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006ba8:	f7fc fb4c 	bl	8003244 <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d901      	bls.n	8006bba <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e012      	b.n	8006be0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bba:	4b0b      	ldr	r3, [pc, #44]	@ (8006be8 <HAL_RCC_ClockConfig+0x278>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0307 	and.w	r3, r3, #7
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d1ef      	bne.n	8006ba8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006bc8:	f000 f87e 	bl	8006cc8 <HAL_RCC_GetHCLKFreq>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	4a07      	ldr	r2, [pc, #28]	@ (8006bec <HAL_RCC_ClockConfig+0x27c>)
 8006bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006bd2:	f7fc fb43 	bl	800325c <HAL_GetTickPrio>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7fc fae5 	bl	80031a8 <HAL_InitTick>
 8006bde:	4603      	mov	r3, r0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	58004000 	.word	0x58004000
 8006bec:	20000020 	.word	0x20000020

08006bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bf0:	b590      	push	{r4, r7, lr}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bf6:	f7ff f9e2 	bl	8005fbe <LL_RCC_GetSysClkSource>
 8006bfa:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10a      	bne.n	8006c18 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006c02:	f7ff f99e 	bl	8005f42 <LL_RCC_MSI_GetRange>
 8006c06:	4603      	mov	r3, r0
 8006c08:	091b      	lsrs	r3, r3, #4
 8006c0a:	f003 030f 	and.w	r3, r3, #15
 8006c0e:	4a2b      	ldr	r2, [pc, #172]	@ (8006cbc <HAL_RCC_GetSysClockFreq+0xcc>)
 8006c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c14:	60fb      	str	r3, [r7, #12]
 8006c16:	e04b      	b.n	8006cb0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b04      	cmp	r3, #4
 8006c1c:	d102      	bne.n	8006c24 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006c1e:	4b28      	ldr	r3, [pc, #160]	@ (8006cc0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c20:	60fb      	str	r3, [r7, #12]
 8006c22:	e045      	b.n	8006cb0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2b08      	cmp	r3, #8
 8006c28:	d10a      	bne.n	8006c40 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006c2a:	f7fe ffb7 	bl	8005b9c <LL_RCC_HSE_IsEnabledDiv2>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d102      	bne.n	8006c3a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006c34:	4b22      	ldr	r3, [pc, #136]	@ (8006cc0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c36:	60fb      	str	r3, [r7, #12]
 8006c38:	e03a      	b.n	8006cb0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006c3a:	4b22      	ldr	r3, [pc, #136]	@ (8006cc4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006c3c:	60fb      	str	r3, [r7, #12]
 8006c3e:	e037      	b.n	8006cb0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006c40:	f7ff fab9 	bl	80061b6 <LL_RCC_PLL_GetMainSource>
 8006c44:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d003      	beq.n	8006c54 <HAL_RCC_GetSysClockFreq+0x64>
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	2b03      	cmp	r3, #3
 8006c50:	d003      	beq.n	8006c5a <HAL_RCC_GetSysClockFreq+0x6a>
 8006c52:	e00d      	b.n	8006c70 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006c54:	4b1a      	ldr	r3, [pc, #104]	@ (8006cc0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c56:	60bb      	str	r3, [r7, #8]
        break;
 8006c58:	e015      	b.n	8006c86 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006c5a:	f7fe ff9f 	bl	8005b9c <LL_RCC_HSE_IsEnabledDiv2>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d102      	bne.n	8006c6a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006c64:	4b16      	ldr	r3, [pc, #88]	@ (8006cc0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c66:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006c68:	e00d      	b.n	8006c86 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006c6a:	4b16      	ldr	r3, [pc, #88]	@ (8006cc4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006c6c:	60bb      	str	r3, [r7, #8]
        break;
 8006c6e:	e00a      	b.n	8006c86 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006c70:	f7ff f967 	bl	8005f42 <LL_RCC_MSI_GetRange>
 8006c74:	4603      	mov	r3, r0
 8006c76:	091b      	lsrs	r3, r3, #4
 8006c78:	f003 030f 	and.w	r3, r3, #15
 8006c7c:	4a0f      	ldr	r2, [pc, #60]	@ (8006cbc <HAL_RCC_GetSysClockFreq+0xcc>)
 8006c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c82:	60bb      	str	r3, [r7, #8]
        break;
 8006c84:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8006c86:	f7ff fa71 	bl	800616c <LL_RCC_PLL_GetN>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	fb03 f402 	mul.w	r4, r3, r2
 8006c92:	f7ff fa84 	bl	800619e <LL_RCC_PLL_GetDivider>
 8006c96:	4603      	mov	r3, r0
 8006c98:	091b      	lsrs	r3, r3, #4
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	fbb4 f4f3 	udiv	r4, r4, r3
 8006ca0:	f7ff fa71 	bl	8006186 <LL_RCC_PLL_GetR>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	0f5b      	lsrs	r3, r3, #29
 8006ca8:	3301      	adds	r3, #1
 8006caa:	fbb4 f3f3 	udiv	r3, r4, r3
 8006cae:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd90      	pop	{r4, r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	08016788 	.word	0x08016788
 8006cc0:	00f42400 	.word	0x00f42400
 8006cc4:	01e84800 	.word	0x01e84800

08006cc8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cc8:	b598      	push	{r3, r4, r7, lr}
 8006cca:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006ccc:	f7ff ff90 	bl	8006bf0 <HAL_RCC_GetSysClockFreq>
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	f7ff f9e9 	bl	80060a8 <LL_RCC_GetAHBPrescaler>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	091b      	lsrs	r3, r3, #4
 8006cda:	f003 030f 	and.w	r3, r3, #15
 8006cde:	4a03      	ldr	r2, [pc, #12]	@ (8006cec <HAL_RCC_GetHCLKFreq+0x24>)
 8006ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ce4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	bd98      	pop	{r3, r4, r7, pc}
 8006cec:	08016728 	.word	0x08016728

08006cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cf0:	b598      	push	{r3, r4, r7, lr}
 8006cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006cf4:	f7ff ffe8 	bl	8006cc8 <HAL_RCC_GetHCLKFreq>
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	f7ff f9ef 	bl	80060dc <LL_RCC_GetAPB1Prescaler>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	0a1b      	lsrs	r3, r3, #8
 8006d02:	f003 0307 	and.w	r3, r3, #7
 8006d06:	4a04      	ldr	r2, [pc, #16]	@ (8006d18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d0c:	f003 031f 	and.w	r3, r3, #31
 8006d10:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	bd98      	pop	{r3, r4, r7, pc}
 8006d18:	08016768 	.word	0x08016768

08006d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d1c:	b598      	push	{r3, r4, r7, lr}
 8006d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006d20:	f7ff ffd2 	bl	8006cc8 <HAL_RCC_GetHCLKFreq>
 8006d24:	4604      	mov	r4, r0
 8006d26:	f7ff f9e5 	bl	80060f4 <LL_RCC_GetAPB2Prescaler>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	0adb      	lsrs	r3, r3, #11
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	4a04      	ldr	r2, [pc, #16]	@ (8006d44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d38:	f003 031f 	and.w	r3, r3, #31
 8006d3c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	bd98      	pop	{r3, r4, r7, pc}
 8006d44:	08016768 	.word	0x08016768

08006d48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006d48:	b590      	push	{r4, r7, lr}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2bb0      	cmp	r3, #176	@ 0xb0
 8006d54:	d903      	bls.n	8006d5e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006d56:	4b15      	ldr	r3, [pc, #84]	@ (8006dac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	e007      	b.n	8006d6e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	091b      	lsrs	r3, r3, #4
 8006d62:	f003 030f 	and.w	r3, r3, #15
 8006d66:	4a11      	ldr	r2, [pc, #68]	@ (8006dac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d6c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006d6e:	f7ff f9a7 	bl	80060c0 <LL_RCC_GetAHB4Prescaler>
 8006d72:	4603      	mov	r3, r0
 8006d74:	091b      	lsrs	r3, r3, #4
 8006d76:	f003 030f 	and.w	r3, r3, #15
 8006d7a:	4a0d      	ldr	r2, [pc, #52]	@ (8006db0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d86:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8006db4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d90:	0c9c      	lsrs	r4, r3, #18
 8006d92:	f7fe fee5 	bl	8005b60 <HAL_PWREx_GetVoltageRange>
 8006d96:	4603      	mov	r3, r0
 8006d98:	4619      	mov	r1, r3
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f000 f80c 	bl	8006db8 <RCC_SetFlashLatency>
 8006da0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3714      	adds	r7, #20
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd90      	pop	{r4, r7, pc}
 8006daa:	bf00      	nop
 8006dac:	08016788 	.word	0x08016788
 8006db0:	08016728 	.word	0x08016728
 8006db4:	431bde83 	.word	0x431bde83

08006db8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006db8:	b590      	push	{r4, r7, lr}
 8006dba:	b093      	sub	sp, #76	@ 0x4c
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006dc2:	4b37      	ldr	r3, [pc, #220]	@ (8006ea0 <RCC_SetFlashLatency+0xe8>)
 8006dc4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8006dc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006dca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006dce:	4a35      	ldr	r2, [pc, #212]	@ (8006ea4 <RCC_SetFlashLatency+0xec>)
 8006dd0:	f107 031c 	add.w	r3, r7, #28
 8006dd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8006dd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006dda:	4b33      	ldr	r3, [pc, #204]	@ (8006ea8 <RCC_SetFlashLatency+0xf0>)
 8006ddc:	f107 040c 	add.w	r4, r7, #12
 8006de0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006de2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006de6:	2300      	movs	r3, #0
 8006de8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006df0:	d11a      	bne.n	8006e28 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006df2:	2300      	movs	r3, #0
 8006df4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006df6:	e013      	b.n	8006e20 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006df8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	3348      	adds	r3, #72	@ 0x48
 8006dfe:	443b      	add	r3, r7
 8006e00:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d807      	bhi.n	8006e1a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006e0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	3348      	adds	r3, #72	@ 0x48
 8006e10:	443b      	add	r3, r7
 8006e12:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006e16:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8006e18:	e020      	b.n	8006e5c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006e1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	d9e8      	bls.n	8006df8 <RCC_SetFlashLatency+0x40>
 8006e26:	e019      	b.n	8006e5c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006e28:	2300      	movs	r3, #0
 8006e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e2c:	e013      	b.n	8006e56 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	3348      	adds	r3, #72	@ 0x48
 8006e34:	443b      	add	r3, r7
 8006e36:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d807      	bhi.n	8006e50 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006e40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	3348      	adds	r3, #72	@ 0x48
 8006e46:	443b      	add	r3, r7
 8006e48:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006e4c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8006e4e:	e005      	b.n	8006e5c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e52:	3301      	adds	r3, #1
 8006e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d9e8      	bls.n	8006e2e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006e5c:	4b13      	ldr	r3, [pc, #76]	@ (8006eac <RCC_SetFlashLatency+0xf4>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f023 0207 	bic.w	r2, r3, #7
 8006e64:	4911      	ldr	r1, [pc, #68]	@ (8006eac <RCC_SetFlashLatency+0xf4>)
 8006e66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006e6c:	f7fc f9ea 	bl	8003244 <HAL_GetTick>
 8006e70:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006e72:	e008      	b.n	8006e86 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006e74:	f7fc f9e6 	bl	8003244 <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d901      	bls.n	8006e86 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e007      	b.n	8006e96 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006e86:	4b09      	ldr	r3, [pc, #36]	@ (8006eac <RCC_SetFlashLatency+0xf4>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0307 	and.w	r3, r3, #7
 8006e8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d1ef      	bne.n	8006e74 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	374c      	adds	r7, #76	@ 0x4c
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd90      	pop	{r4, r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	0801520c 	.word	0x0801520c
 8006ea4:	0801521c 	.word	0x0801521c
 8006ea8:	08015228 	.word	0x08015228
 8006eac:	58004000 	.word	0x58004000

08006eb0 <LL_RCC_LSE_IsEnabled>:
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006eb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d101      	bne.n	8006ec8 <LL_RCC_LSE_IsEnabled+0x18>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e000      	b.n	8006eca <LL_RCC_LSE_IsEnabled+0x1a>
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <LL_RCC_LSE_IsReady>:
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006ed8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ee0:	f003 0302 	and.w	r3, r3, #2
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d101      	bne.n	8006eec <LL_RCC_LSE_IsReady+0x18>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e000      	b.n	8006eee <LL_RCC_LSE_IsReady+0x1a>
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <LL_RCC_SetRFWKPClockSource>:
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f08:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006f0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <LL_RCC_SetSMPSClockSource>:
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006f2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f32:	f023 0203 	bic.w	r2, r3, #3
 8006f36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <LL_RCC_SetSMPSPrescaler>:
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006f54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f5a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006f5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <LL_RCC_SetUSARTClockSource>:
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006f7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f84:	f023 0203 	bic.w	r2, r3, #3
 8006f88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <LL_RCC_SetLPUARTClockSource>:
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006fa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fb0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006fb4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <LL_RCC_SetI2CClockSource>:
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006fd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fd8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	091b      	lsrs	r3, r3, #4
 8006fe0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006fe4:	43db      	mvns	r3, r3
 8006fe6:	401a      	ands	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	011b      	lsls	r3, r3, #4
 8006fec:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006ff0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006ffa:	bf00      	nop
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <LL_RCC_SetLPTIMClockSource>:
{
 8007006:	b480      	push	{r7}
 8007008:	b083      	sub	sp, #12
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800700e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007012:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	0c1b      	lsrs	r3, r3, #16
 800701a:	041b      	lsls	r3, r3, #16
 800701c:	43db      	mvns	r3, r3
 800701e:	401a      	ands	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	041b      	lsls	r3, r3, #16
 8007024:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007028:	4313      	orrs	r3, r2
 800702a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800702e:	bf00      	nop
 8007030:	370c      	adds	r7, #12
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <LL_RCC_SetSAIClockSource>:
{
 800703a:	b480      	push	{r7}
 800703c:	b083      	sub	sp, #12
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007042:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800704a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800704e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4313      	orrs	r3, r2
 8007056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800705a:	bf00      	nop
 800705c:	370c      	adds	r7, #12
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <LL_RCC_SetRNGClockSource>:
{
 8007066:	b480      	push	{r7}
 8007068:	b083      	sub	sp, #12
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800706e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007076:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800707a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4313      	orrs	r3, r2
 8007082:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007086:	bf00      	nop
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <LL_RCC_SetCLK48ClockSource>:
{
 8007092:	b480      	push	{r7}
 8007094:	b083      	sub	sp, #12
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800709a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800709e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80070a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80070b2:	bf00      	nop
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <LL_RCC_SetUSBClockSource>:
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b082      	sub	sp, #8
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7ff ffe3 	bl	8007092 <LL_RCC_SetCLK48ClockSource>
}
 80070cc:	bf00      	nop
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <LL_RCC_SetADCClockSource>:
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80070dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80070e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <LL_RCC_SetRTCClockSource>:
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007108:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800710c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007110:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007114:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4313      	orrs	r3, r2
 800711c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <LL_RCC_GetRTCClockSource>:
{
 800712c:	b480      	push	{r7}
 800712e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007130:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007138:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800713c:	4618      	mov	r0, r3
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <LL_RCC_ForceBackupDomainReset>:
{
 8007146:	b480      	push	{r7}
 8007148:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800714a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800714e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007152:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007156:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800715a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800715e:	bf00      	nop
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007168:	b480      	push	{r7}
 800716a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800716c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007174:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007178:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800717c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007180:	bf00      	nop
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <LL_RCC_PLLSAI1_Enable>:
{
 800718a:	b480      	push	{r7}
 800718c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800718e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007198:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800719c:	6013      	str	r3, [r2, #0]
}
 800719e:	bf00      	nop
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <LL_RCC_PLLSAI1_Disable>:
{
 80071a8:	b480      	push	{r7}
 80071aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80071ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80071b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80071ba:	6013      	str	r3, [r2, #0]
}
 80071bc:	bf00      	nop
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <LL_RCC_PLLSAI1_IsReady>:
{
 80071c6:	b480      	push	{r7}
 80071c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80071ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071d8:	d101      	bne.n	80071de <LL_RCC_PLLSAI1_IsReady+0x18>
 80071da:	2301      	movs	r3, #1
 80071dc:	e000      	b.n	80071e0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b088      	sub	sp, #32
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80071f2:	2300      	movs	r3, #0
 80071f4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80071f6:	2300      	movs	r3, #0
 80071f8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007202:	2b00      	cmp	r3, #0
 8007204:	d034      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800720a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800720e:	d021      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007210:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007214:	d81b      	bhi.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007216:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800721a:	d01d      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800721c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007220:	d815      	bhi.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00b      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007226:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800722a:	d110      	bne.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800722c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800723a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800723c:	e00d      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	3304      	adds	r3, #4
 8007242:	4618      	mov	r0, r3
 8007244:	f000 f947 	bl	80074d6 <RCCEx_PLLSAI1_ConfigNP>
 8007248:	4603      	mov	r3, r0
 800724a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800724c:	e005      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	77fb      	strb	r3, [r7, #31]
        break;
 8007252:	e002      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007254:	bf00      	nop
 8007256:	e000      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800725a:	7ffb      	ldrb	r3, [r7, #31]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d105      	bne.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007264:	4618      	mov	r0, r3
 8007266:	f7ff fee8 	bl	800703a <LL_RCC_SetSAIClockSource>
 800726a:	e001      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800726c:	7ffb      	ldrb	r3, [r7, #31]
 800726e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007278:	2b00      	cmp	r3, #0
 800727a:	d046      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800727c:	f7ff ff56 	bl	800712c <LL_RCC_GetRTCClockSource>
 8007280:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007286:	69ba      	ldr	r2, [r7, #24]
 8007288:	429a      	cmp	r2, r3
 800728a:	d03c      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800728c:	f7fe fc58 	bl	8005b40 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d105      	bne.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800729a:	4618      	mov	r0, r3
 800729c:	f7ff ff30 	bl	8007100 <LL_RCC_SetRTCClockSource>
 80072a0:	e02e      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80072a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072aa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80072ac:	f7ff ff4b 	bl	8007146 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80072b0:	f7ff ff5a 	bl	8007168 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072be:	4313      	orrs	r3, r2
 80072c0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80072c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80072cc:	f7ff fdf0 	bl	8006eb0 <LL_RCC_LSE_IsEnabled>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d114      	bne.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80072d6:	f7fb ffb5 	bl	8003244 <HAL_GetTick>
 80072da:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80072dc:	e00b      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072de:	f7fb ffb1 	bl	8003244 <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d902      	bls.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80072f0:	2303      	movs	r3, #3
 80072f2:	77fb      	strb	r3, [r7, #31]
              break;
 80072f4:	e004      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80072f6:	f7ff fded 	bl	8006ed4 <LL_RCC_LSE_IsReady>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d1ee      	bne.n	80072de <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007300:	7ffb      	ldrb	r3, [r7, #31]
 8007302:	77bb      	strb	r3, [r7, #30]
 8007304:	e001      	b.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007306:	7ffb      	ldrb	r3, [r7, #31]
 8007308:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	2b00      	cmp	r3, #0
 8007314:	d004      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	4618      	mov	r0, r3
 800731c:	f7ff fe2a 	bl	8006f74 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0302 	and.w	r3, r3, #2
 8007328:	2b00      	cmp	r3, #0
 800732a:	d004      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	69db      	ldr	r3, [r3, #28]
 8007330:	4618      	mov	r0, r3
 8007332:	f7ff fe35 	bl	8006fa0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0310 	and.w	r3, r3, #16
 800733e:	2b00      	cmp	r3, #0
 8007340:	d004      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007346:	4618      	mov	r0, r3
 8007348:	f7ff fe5d 	bl	8007006 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0320 	and.w	r3, r3, #32
 8007354:	2b00      	cmp	r3, #0
 8007356:	d004      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800735c:	4618      	mov	r0, r3
 800735e:	f7ff fe52 	bl	8007006 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 0304 	and.w	r3, r3, #4
 800736a:	2b00      	cmp	r3, #0
 800736c:	d004      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	4618      	mov	r0, r3
 8007374:	f7ff fe2a 	bl	8006fcc <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0308 	and.w	r3, r3, #8
 8007380:	2b00      	cmp	r3, #0
 8007382:	d004      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007388:	4618      	mov	r0, r3
 800738a:	f7ff fe1f 	bl	8006fcc <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007396:	2b00      	cmp	r3, #0
 8007398:	d022      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800739e:	4618      	mov	r0, r3
 80073a0:	f7ff fe8d 	bl	80070be <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073ac:	d107      	bne.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80073ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80073b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80073bc:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80073c6:	d10b      	bne.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3304      	adds	r3, #4
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 f8dd 	bl	800758c <RCCEx_PLLSAI1_ConfigNQ>
 80073d2:	4603      	mov	r3, r0
 80073d4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80073d6:	7ffb      	ldrb	r3, [r7, #31]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80073dc:	7ffb      	ldrb	r3, [r7, #31]
 80073de:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d02b      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073f4:	d008      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073fe:	d003      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007404:	2b00      	cmp	r3, #0
 8007406:	d105      	bne.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800740c:	4618      	mov	r0, r3
 800740e:	f7ff fe2a 	bl	8007066 <LL_RCC_SetRNGClockSource>
 8007412:	e00a      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007418:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800741c:	60fb      	str	r3, [r7, #12]
 800741e:	2000      	movs	r0, #0
 8007420:	f7ff fe21 	bl	8007066 <LL_RCC_SetRNGClockSource>
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f7ff fe34 	bl	8007092 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800742e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007432:	d107      	bne.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007434:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800743e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007442:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800744c:	2b00      	cmp	r3, #0
 800744e:	d022      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007454:	4618      	mov	r0, r3
 8007456:	f7ff fe3d 	bl	80070d4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800745e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007462:	d107      	bne.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007464:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800746e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007472:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007478:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800747c:	d10b      	bne.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	3304      	adds	r3, #4
 8007482:	4618      	mov	r0, r3
 8007484:	f000 f8dd 	bl	8007642 <RCCEx_PLLSAI1_ConfigNR>
 8007488:	4603      	mov	r3, r0
 800748a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800748c:	7ffb      	ldrb	r3, [r7, #31]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8007492:	7ffb      	ldrb	r3, [r7, #31]
 8007494:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d004      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7ff fd26 	bl	8006ef8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d009      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074bc:	4618      	mov	r0, r3
 80074be:	f7ff fd45 	bl	8006f4c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7ff fd2c 	bl	8006f24 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80074cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3720      	adds	r7, #32
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074de:	2300      	movs	r3, #0
 80074e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80074e2:	f7ff fe61 	bl	80071a8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80074e6:	f7fb fead 	bl	8003244 <HAL_GetTick>
 80074ea:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80074ec:	e009      	b.n	8007502 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80074ee:	f7fb fea9 	bl	8003244 <HAL_GetTick>
 80074f2:	4602      	mov	r2, r0
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d902      	bls.n	8007502 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007500:	e004      	b.n	800750c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007502:	f7ff fe60 	bl	80071c6 <LL_RCC_PLLSAI1_IsReady>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1f0      	bne.n	80074ee <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800750c:	7bfb      	ldrb	r3, [r7, #15]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d137      	bne.n	8007582 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007512:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	021b      	lsls	r3, r3, #8
 8007522:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007526:	4313      	orrs	r3, r2
 8007528:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800752a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800753c:	4313      	orrs	r3, r2
 800753e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007540:	f7ff fe23 	bl	800718a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007544:	f7fb fe7e 	bl	8003244 <HAL_GetTick>
 8007548:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800754a:	e009      	b.n	8007560 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800754c:	f7fb fe7a 	bl	8003244 <HAL_GetTick>
 8007550:	4602      	mov	r2, r0
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	2b02      	cmp	r3, #2
 8007558:	d902      	bls.n	8007560 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	73fb      	strb	r3, [r7, #15]
        break;
 800755e:	e004      	b.n	800756a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007560:	f7ff fe31 	bl	80071c6 <LL_RCC_PLLSAI1_IsReady>
 8007564:	4603      	mov	r3, r0
 8007566:	2b01      	cmp	r3, #1
 8007568:	d1f0      	bne.n	800754c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800756a:	7bfb      	ldrb	r3, [r7, #15]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d108      	bne.n	8007582 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007574:	691a      	ldr	r2, [r3, #16]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800757e:	4313      	orrs	r3, r2
 8007580:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007582:	7bfb      	ldrb	r3, [r7, #15]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007594:	2300      	movs	r3, #0
 8007596:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007598:	f7ff fe06 	bl	80071a8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800759c:	f7fb fe52 	bl	8003244 <HAL_GetTick>
 80075a0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80075a2:	e009      	b.n	80075b8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80075a4:	f7fb fe4e 	bl	8003244 <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d902      	bls.n	80075b8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	73fb      	strb	r3, [r7, #15]
      break;
 80075b6:	e004      	b.n	80075c2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80075b8:	f7ff fe05 	bl	80071c6 <LL_RCC_PLLSAI1_IsReady>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1f0      	bne.n	80075a4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d137      	bne.n	8007638 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80075c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	021b      	lsls	r3, r3, #8
 80075d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80075dc:	4313      	orrs	r3, r2
 80075de:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80075e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80075f2:	4313      	orrs	r3, r2
 80075f4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80075f6:	f7ff fdc8 	bl	800718a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075fa:	f7fb fe23 	bl	8003244 <HAL_GetTick>
 80075fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007600:	e009      	b.n	8007616 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007602:	f7fb fe1f 	bl	8003244 <HAL_GetTick>
 8007606:	4602      	mov	r2, r0
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	2b02      	cmp	r3, #2
 800760e:	d902      	bls.n	8007616 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007610:	2303      	movs	r3, #3
 8007612:	73fb      	strb	r3, [r7, #15]
        break;
 8007614:	e004      	b.n	8007620 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007616:	f7ff fdd6 	bl	80071c6 <LL_RCC_PLLSAI1_IsReady>
 800761a:	4603      	mov	r3, r0
 800761c:	2b01      	cmp	r3, #1
 800761e:	d1f0      	bne.n	8007602 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007620:	7bfb      	ldrb	r3, [r7, #15]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d108      	bne.n	8007638 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007626:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800762a:	691a      	ldr	r2, [r3, #16]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007634:	4313      	orrs	r3, r2
 8007636:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007638:	7bfb      	ldrb	r3, [r7, #15]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b084      	sub	sp, #16
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800764e:	f7ff fdab 	bl	80071a8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007652:	f7fb fdf7 	bl	8003244 <HAL_GetTick>
 8007656:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007658:	e009      	b.n	800766e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800765a:	f7fb fdf3 	bl	8003244 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	2b02      	cmp	r3, #2
 8007666:	d902      	bls.n	800766e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	73fb      	strb	r3, [r7, #15]
      break;
 800766c:	e004      	b.n	8007678 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800766e:	f7ff fdaa 	bl	80071c6 <LL_RCC_PLLSAI1_IsReady>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1f0      	bne.n	800765a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007678:	7bfb      	ldrb	r3, [r7, #15]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d137      	bne.n	80076ee <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800767e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	021b      	lsls	r3, r3, #8
 800768e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007692:	4313      	orrs	r3, r2
 8007694:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007696:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80076a8:	4313      	orrs	r3, r2
 80076aa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80076ac:	f7ff fd6d 	bl	800718a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076b0:	f7fb fdc8 	bl	8003244 <HAL_GetTick>
 80076b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80076b6:	e009      	b.n	80076cc <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80076b8:	f7fb fdc4 	bl	8003244 <HAL_GetTick>
 80076bc:	4602      	mov	r2, r0
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d902      	bls.n	80076cc <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	73fb      	strb	r3, [r7, #15]
        break;
 80076ca:	e004      	b.n	80076d6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80076cc:	f7ff fd7b 	bl	80071c6 <LL_RCC_PLLSAI1_IsReady>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d1f0      	bne.n	80076b8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80076d6:	7bfb      	ldrb	r3, [r7, #15]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d108      	bne.n	80076ee <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80076dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076e0:	691a      	ldr	r2, [r3, #16]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80076ea:	4313      	orrs	r3, r2
 80076ec:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80076ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d101      	bne.n	800770a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e027      	b.n	800775a <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	7a5b      	ldrb	r3, [r3, #9]
 800770e:	b2db      	uxtb	r3, r3
 8007710:	2b00      	cmp	r3, #0
 8007712:	d105      	bne.n	8007720 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f7fb fafc 	bl	8002d18 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f023 0120 	bic.w	r1, r3, #32
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685a      	ldr	r2, [r3, #4]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	430a      	orrs	r2, r1
 800773a:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f042 0204 	orr.w	r2, r2, #4
 800774a:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
	...

08007764 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d101      	bne.n	8007776 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e09f      	b.n	80078b6 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b00      	cmp	r3, #0
 8007780:	d106      	bne.n	8007790 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f7fb faee 	bl	8002d6c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2202      	movs	r2, #2
 8007794:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007798:	4b49      	ldr	r3, [pc, #292]	@ (80078c0 <HAL_RTC_Init+0x15c>)
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	f003 0310 	and.w	r3, r3, #16
 80077a0:	2b10      	cmp	r3, #16
 80077a2:	d07e      	beq.n	80078a2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	22ca      	movs	r2, #202	@ 0xca
 80077aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2253      	movs	r2, #83	@ 0x53
 80077b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f8ab 	bl	8007910 <RTC_EnterInitMode>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00a      	beq.n	80077d6 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	22ff      	movs	r2, #255	@ 0xff
 80077c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2204      	movs	r2, #4
 80077cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	73fb      	strb	r3, [r7, #15]
 80077d4:	e067      	b.n	80078a6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	6812      	ldr	r2, [r2, #0]
 80077e0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80077e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077e8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	6899      	ldr	r1, [r3, #8]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	685a      	ldr	r2, [r3, #4]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	431a      	orrs	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	699b      	ldr	r3, [r3, #24]
 80077fe:	431a      	orrs	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	430a      	orrs	r2, r1
 8007806:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	68d2      	ldr	r2, [r2, #12]
 8007810:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	6919      	ldr	r1, [r3, #16]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	041a      	lsls	r2, r3, #16
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	430a      	orrs	r2, r1
 8007824:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68da      	ldr	r2, [r3, #12]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007834:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f022 0203 	bic.w	r2, r2, #3
 8007844:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	69da      	ldr	r2, [r3, #28]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	431a      	orrs	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	430a      	orrs	r2, r1
 800785c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f003 0320 	and.w	r3, r3, #32
 8007868:	2b00      	cmp	r3, #0
 800786a:	d113      	bne.n	8007894 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f829 	bl	80078c4 <HAL_RTC_WaitForSynchro>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00d      	beq.n	8007894 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	22ff      	movs	r2, #255	@ 0xff
 800787e:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2204      	movs	r2, #4
 8007884:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e010      	b.n	80078b6 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	22ff      	movs	r2, #255	@ 0xff
 800789a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	73fb      	strb	r3, [r7, #15]
 80078a0:	e001      	b.n	80078a6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80078a2:	2300      	movs	r3, #0
 80078a4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80078a6:	7bfb      	ldrb	r3, [r7, #15]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d103      	bne.n	80078b4 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	40002800 	.word	0x40002800

080078c4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68da      	ldr	r2, [r3, #12]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80078da:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80078dc:	f7fb fcb2 	bl	8003244 <HAL_GetTick>
 80078e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80078e2:	e009      	b.n	80078f8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80078e4:	f7fb fcae 	bl	8003244 <HAL_GetTick>
 80078e8:	4602      	mov	r2, r0
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	1ad3      	subs	r3, r2, r3
 80078ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078f2:	d901      	bls.n	80078f8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80078f4:	2303      	movs	r3, #3
 80078f6:	e007      	b.n	8007908 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	f003 0320 	and.w	r3, r3, #32
 8007902:	2b00      	cmp	r3, #0
 8007904:	d0ee      	beq.n	80078e4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007922:	2b00      	cmp	r3, #0
 8007924:	d119      	bne.n	800795a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800792e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007930:	f7fb fc88 	bl	8003244 <HAL_GetTick>
 8007934:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007936:	e009      	b.n	800794c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007938:	f7fb fc84 	bl	8003244 <HAL_GetTick>
 800793c:	4602      	mov	r2, r0
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007946:	d901      	bls.n	800794c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007948:	2303      	movs	r3, #3
 800794a:	e007      	b.n	800795c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007956:	2b00      	cmp	r3, #0
 8007958:	d0ee      	beq.n	8007938 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007976:	2b01      	cmp	r3, #1
 8007978:	d101      	bne.n	800797e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800797a:	2302      	movs	r3, #2
 800797c:	e0a8      	b.n	8007ad0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2202      	movs	r2, #2
 800798a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	22ca      	movs	r2, #202	@ 0xca
 8007994:	625a      	str	r2, [r3, #36]	@ 0x24
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2253      	movs	r2, #83	@ 0x53
 800799c:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d020      	beq.n	80079ee <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80079ac:	f7fb fc4a 	bl	8003244 <HAL_GetTick>
 80079b0:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80079b2:	e015      	b.n	80079e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80079b4:	f7fb fc46 	bl	8003244 <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80079c2:	d90d      	bls.n	80079e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	22ff      	movs	r2, #255	@ 0xff
 80079ca:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2203      	movs	r2, #3
 80079d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e077      	b.n	8007ad0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	f003 0304 	and.w	r3, r3, #4
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1e2      	bne.n	80079b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	689a      	ldr	r2, [r3, #8]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079fc:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	b2da      	uxtb	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8007a0e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007a10:	f7fb fc18 	bl	8003244 <HAL_GetTick>
 8007a14:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007a16:	e015      	b.n	8007a44 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007a18:	f7fb fc14 	bl	8003244 <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a26:	d90d      	bls.n	8007a44 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	22ff      	movs	r2, #255	@ 0xff
 8007a2e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2203      	movs	r2, #3
 8007a34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007a40:	2303      	movs	r3, #3
 8007a42:	e045      	b.n	8007ad0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	f003 0304 	and.w	r3, r3, #4
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d0e2      	beq.n	8007a18 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	689a      	ldr	r2, [r3, #8]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f022 0207 	bic.w	r2, r2, #7
 8007a68:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6899      	ldr	r1, [r3, #8]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	430a      	orrs	r2, r1
 8007a78:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007a7a:	4b17      	ldr	r3, [pc, #92]	@ (8007ad8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a80:	4a15      	ldr	r2, [pc, #84]	@ (8007ad8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007a82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a86:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007a8a:	4b13      	ldr	r3, [pc, #76]	@ (8007ad8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a12      	ldr	r2, [pc, #72]	@ (8007ad8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007a90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a94:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007aa4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	689a      	ldr	r2, [r3, #8]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007ab4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	22ff      	movs	r2, #255	@ 0xff
 8007abc:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3718      	adds	r7, #24
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	58000800 	.word	0x58000800

08007adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e049      	b.n	8007b82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d106      	bne.n	8007b08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f7fb f966 	bl	8002dd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	3304      	adds	r3, #4
 8007b18:	4619      	mov	r1, r3
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	f000 fa94 	bl	8008048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
	...

08007b8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d001      	beq.n	8007ba4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e036      	b.n	8007c12 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68da      	ldr	r2, [r3, #12]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f042 0201 	orr.w	r2, r2, #1
 8007bba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a17      	ldr	r2, [pc, #92]	@ (8007c20 <HAL_TIM_Base_Start_IT+0x94>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d004      	beq.n	8007bd0 <HAL_TIM_Base_Start_IT+0x44>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bce:	d115      	bne.n	8007bfc <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689a      	ldr	r2, [r3, #8]
 8007bd6:	4b13      	ldr	r3, [pc, #76]	@ (8007c24 <HAL_TIM_Base_Start_IT+0x98>)
 8007bd8:	4013      	ands	r3, r2
 8007bda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2b06      	cmp	r3, #6
 8007be0:	d015      	beq.n	8007c0e <HAL_TIM_Base_Start_IT+0x82>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007be8:	d011      	beq.n	8007c0e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f042 0201 	orr.w	r2, r2, #1
 8007bf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bfa:	e008      	b.n	8007c0e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f042 0201 	orr.w	r2, r2, #1
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	e000      	b.n	8007c10 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	40012c00 	.word	0x40012c00
 8007c24:	00010007 	.word	0x00010007

08007c28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d122      	bne.n	8007c84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	f003 0302 	and.w	r3, r3, #2
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d11b      	bne.n	8007c84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f06f 0202 	mvn.w	r2, #2
 8007c54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	699b      	ldr	r3, [r3, #24]
 8007c62:	f003 0303 	and.w	r3, r3, #3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d003      	beq.n	8007c72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f9ce 	bl	800800c <HAL_TIM_IC_CaptureCallback>
 8007c70:	e005      	b.n	8007c7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f9c0 	bl	8007ff8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f9d1 	bl	8008020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	f003 0304 	and.w	r3, r3, #4
 8007c8e:	2b04      	cmp	r3, #4
 8007c90:	d122      	bne.n	8007cd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	f003 0304 	and.w	r3, r3, #4
 8007c9c:	2b04      	cmp	r3, #4
 8007c9e:	d11b      	bne.n	8007cd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f06f 0204 	mvn.w	r2, #4
 8007ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2202      	movs	r2, #2
 8007cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d003      	beq.n	8007cc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f9a4 	bl	800800c <HAL_TIM_IC_CaptureCallback>
 8007cc4:	e005      	b.n	8007cd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f996 	bl	8007ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f9a7 	bl	8008020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	f003 0308 	and.w	r3, r3, #8
 8007ce2:	2b08      	cmp	r3, #8
 8007ce4:	d122      	bne.n	8007d2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	f003 0308 	and.w	r3, r3, #8
 8007cf0:	2b08      	cmp	r3, #8
 8007cf2:	d11b      	bne.n	8007d2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f06f 0208 	mvn.w	r2, #8
 8007cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2204      	movs	r2, #4
 8007d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	69db      	ldr	r3, [r3, #28]
 8007d0a:	f003 0303 	and.w	r3, r3, #3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d003      	beq.n	8007d1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f97a 	bl	800800c <HAL_TIM_IC_CaptureCallback>
 8007d18:	e005      	b.n	8007d26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f96c 	bl	8007ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f97d 	bl	8008020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	f003 0310 	and.w	r3, r3, #16
 8007d36:	2b10      	cmp	r3, #16
 8007d38:	d122      	bne.n	8007d80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	f003 0310 	and.w	r3, r3, #16
 8007d44:	2b10      	cmp	r3, #16
 8007d46:	d11b      	bne.n	8007d80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f06f 0210 	mvn.w	r2, #16
 8007d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2208      	movs	r2, #8
 8007d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d003      	beq.n	8007d6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f950 	bl	800800c <HAL_TIM_IC_CaptureCallback>
 8007d6c:	e005      	b.n	8007d7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f942 	bl	8007ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f953 	bl	8008020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d10e      	bne.n	8007dac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	f003 0301 	and.w	r3, r3, #1
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d107      	bne.n	8007dac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f06f 0201 	mvn.w	r2, #1
 8007da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7fa fae0 	bl	800236c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007db6:	2b80      	cmp	r3, #128	@ 0x80
 8007db8:	d10e      	bne.n	8007dd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dc4:	2b80      	cmp	r3, #128	@ 0x80
 8007dc6:	d107      	bne.n	8007dd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 faa2 	bl	800831c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007de2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007de6:	d10e      	bne.n	8007e06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007df2:	2b80      	cmp	r3, #128	@ 0x80
 8007df4:	d107      	bne.n	8007e06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 fa95 	bl	8008330 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e10:	2b40      	cmp	r3, #64	@ 0x40
 8007e12:	d10e      	bne.n	8007e32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e1e:	2b40      	cmp	r3, #64	@ 0x40
 8007e20:	d107      	bne.n	8007e32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 f901 	bl	8008034 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	f003 0320 	and.w	r3, r3, #32
 8007e3c:	2b20      	cmp	r3, #32
 8007e3e:	d10e      	bne.n	8007e5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	f003 0320 	and.w	r3, r3, #32
 8007e4a:	2b20      	cmp	r3, #32
 8007e4c:	d107      	bne.n	8007e5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f06f 0220 	mvn.w	r2, #32
 8007e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 fa55 	bl	8008308 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e5e:	bf00      	nop
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b084      	sub	sp, #16
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
 8007e6e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e70:	2300      	movs	r3, #0
 8007e72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d101      	bne.n	8007e82 <HAL_TIM_ConfigClockSource+0x1c>
 8007e7e:	2302      	movs	r3, #2
 8007e80:	e0b6      	b.n	8007ff0 <HAL_TIM_ConfigClockSource+0x18a>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2201      	movs	r2, #1
 8007e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2202      	movs	r2, #2
 8007e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007ea0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007ea4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007eac:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ebe:	d03e      	beq.n	8007f3e <HAL_TIM_ConfigClockSource+0xd8>
 8007ec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ec4:	f200 8087 	bhi.w	8007fd6 <HAL_TIM_ConfigClockSource+0x170>
 8007ec8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ecc:	f000 8086 	beq.w	8007fdc <HAL_TIM_ConfigClockSource+0x176>
 8007ed0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ed4:	d87f      	bhi.n	8007fd6 <HAL_TIM_ConfigClockSource+0x170>
 8007ed6:	2b70      	cmp	r3, #112	@ 0x70
 8007ed8:	d01a      	beq.n	8007f10 <HAL_TIM_ConfigClockSource+0xaa>
 8007eda:	2b70      	cmp	r3, #112	@ 0x70
 8007edc:	d87b      	bhi.n	8007fd6 <HAL_TIM_ConfigClockSource+0x170>
 8007ede:	2b60      	cmp	r3, #96	@ 0x60
 8007ee0:	d050      	beq.n	8007f84 <HAL_TIM_ConfigClockSource+0x11e>
 8007ee2:	2b60      	cmp	r3, #96	@ 0x60
 8007ee4:	d877      	bhi.n	8007fd6 <HAL_TIM_ConfigClockSource+0x170>
 8007ee6:	2b50      	cmp	r3, #80	@ 0x50
 8007ee8:	d03c      	beq.n	8007f64 <HAL_TIM_ConfigClockSource+0xfe>
 8007eea:	2b50      	cmp	r3, #80	@ 0x50
 8007eec:	d873      	bhi.n	8007fd6 <HAL_TIM_ConfigClockSource+0x170>
 8007eee:	2b40      	cmp	r3, #64	@ 0x40
 8007ef0:	d058      	beq.n	8007fa4 <HAL_TIM_ConfigClockSource+0x13e>
 8007ef2:	2b40      	cmp	r3, #64	@ 0x40
 8007ef4:	d86f      	bhi.n	8007fd6 <HAL_TIM_ConfigClockSource+0x170>
 8007ef6:	2b30      	cmp	r3, #48	@ 0x30
 8007ef8:	d064      	beq.n	8007fc4 <HAL_TIM_ConfigClockSource+0x15e>
 8007efa:	2b30      	cmp	r3, #48	@ 0x30
 8007efc:	d86b      	bhi.n	8007fd6 <HAL_TIM_ConfigClockSource+0x170>
 8007efe:	2b20      	cmp	r3, #32
 8007f00:	d060      	beq.n	8007fc4 <HAL_TIM_ConfigClockSource+0x15e>
 8007f02:	2b20      	cmp	r3, #32
 8007f04:	d867      	bhi.n	8007fd6 <HAL_TIM_ConfigClockSource+0x170>
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d05c      	beq.n	8007fc4 <HAL_TIM_ConfigClockSource+0x15e>
 8007f0a:	2b10      	cmp	r3, #16
 8007f0c:	d05a      	beq.n	8007fc4 <HAL_TIM_ConfigClockSource+0x15e>
 8007f0e:	e062      	b.n	8007fd6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f20:	f000 f972 	bl	8008208 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007f32:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	609a      	str	r2, [r3, #8]
      break;
 8007f3c:	e04f      	b.n	8007fde <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f4e:	f000 f95b 	bl	8008208 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	689a      	ldr	r2, [r3, #8]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f60:	609a      	str	r2, [r3, #8]
      break;
 8007f62:	e03c      	b.n	8007fde <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f70:	461a      	mov	r2, r3
 8007f72:	f000 f8cd 	bl	8008110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2150      	movs	r1, #80	@ 0x50
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 f926 	bl	80081ce <TIM_ITRx_SetConfig>
      break;
 8007f82:	e02c      	b.n	8007fde <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f90:	461a      	mov	r2, r3
 8007f92:	f000 f8ec 	bl	800816e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2160      	movs	r1, #96	@ 0x60
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 f916 	bl	80081ce <TIM_ITRx_SetConfig>
      break;
 8007fa2:	e01c      	b.n	8007fde <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	f000 f8ad 	bl	8008110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2140      	movs	r1, #64	@ 0x40
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f000 f906 	bl	80081ce <TIM_ITRx_SetConfig>
      break;
 8007fc2:	e00c      	b.n	8007fde <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4619      	mov	r1, r3
 8007fce:	4610      	mov	r0, r2
 8007fd0:	f000 f8fd 	bl	80081ce <TIM_ITRx_SetConfig>
      break;
 8007fd4:	e003      	b.n	8007fde <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	73fb      	strb	r3, [r7, #15]
      break;
 8007fda:	e000      	b.n	8007fde <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007fdc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a2a      	ldr	r2, [pc, #168]	@ (8008104 <TIM_Base_SetConfig+0xbc>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d003      	beq.n	8008068 <TIM_Base_SetConfig+0x20>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008066:	d108      	bne.n	800807a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800806e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	4313      	orrs	r3, r2
 8008078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a21      	ldr	r2, [pc, #132]	@ (8008104 <TIM_Base_SetConfig+0xbc>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d00b      	beq.n	800809a <TIM_Base_SetConfig+0x52>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008088:	d007      	beq.n	800809a <TIM_Base_SetConfig+0x52>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a1e      	ldr	r2, [pc, #120]	@ (8008108 <TIM_Base_SetConfig+0xc0>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d003      	beq.n	800809a <TIM_Base_SetConfig+0x52>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a1d      	ldr	r2, [pc, #116]	@ (800810c <TIM_Base_SetConfig+0xc4>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d108      	bne.n	80080ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	695b      	ldr	r3, [r3, #20]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	689a      	ldr	r2, [r3, #8]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a0c      	ldr	r2, [pc, #48]	@ (8008104 <TIM_Base_SetConfig+0xbc>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d007      	beq.n	80080e8 <TIM_Base_SetConfig+0xa0>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a0b      	ldr	r2, [pc, #44]	@ (8008108 <TIM_Base_SetConfig+0xc0>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d003      	beq.n	80080e8 <TIM_Base_SetConfig+0xa0>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a0a      	ldr	r2, [pc, #40]	@ (800810c <TIM_Base_SetConfig+0xc4>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d103      	bne.n	80080f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	691a      	ldr	r2, [r3, #16]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	615a      	str	r2, [r3, #20]
}
 80080f6:	bf00      	nop
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	40012c00 	.word	0x40012c00
 8008108:	40014400 	.word	0x40014400
 800810c:	40014800 	.word	0x40014800

08008110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008110:	b480      	push	{r7}
 8008112:	b087      	sub	sp, #28
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6a1b      	ldr	r3, [r3, #32]
 8008120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6a1b      	ldr	r3, [r3, #32]
 8008126:	f023 0201 	bic.w	r2, r3, #1
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800813a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	011b      	lsls	r3, r3, #4
 8008140:	693a      	ldr	r2, [r7, #16]
 8008142:	4313      	orrs	r3, r2
 8008144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	f023 030a 	bic.w	r3, r3, #10
 800814c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800814e:	697a      	ldr	r2, [r7, #20]
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	4313      	orrs	r3, r2
 8008154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	621a      	str	r2, [r3, #32]
}
 8008162:	bf00      	nop
 8008164:	371c      	adds	r7, #28
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr

0800816e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800816e:	b480      	push	{r7}
 8008170:	b087      	sub	sp, #28
 8008172:	af00      	add	r7, sp, #0
 8008174:	60f8      	str	r0, [r7, #12]
 8008176:	60b9      	str	r1, [r7, #8]
 8008178:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6a1b      	ldr	r3, [r3, #32]
 800817e:	f023 0210 	bic.w	r2, r3, #16
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6a1b      	ldr	r3, [r3, #32]
 8008190:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008198:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	031b      	lsls	r3, r3, #12
 800819e:	697a      	ldr	r2, [r7, #20]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80081aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	011b      	lsls	r3, r3, #4
 80081b0:	693a      	ldr	r2, [r7, #16]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	697a      	ldr	r2, [r7, #20]
 80081ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	693a      	ldr	r2, [r7, #16]
 80081c0:	621a      	str	r2, [r3, #32]
}
 80081c2:	bf00      	nop
 80081c4:	371c      	adds	r7, #28
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b085      	sub	sp, #20
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80081e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081ea:	683a      	ldr	r2, [r7, #0]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	f043 0307 	orr.w	r3, r3, #7
 80081f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	609a      	str	r2, [r3, #8]
}
 80081fc:	bf00      	nop
 80081fe:	3714      	adds	r7, #20
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008208:	b480      	push	{r7}
 800820a:	b087      	sub	sp, #28
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	607a      	str	r2, [r7, #4]
 8008214:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008222:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	021a      	lsls	r2, r3, #8
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	431a      	orrs	r2, r3
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	4313      	orrs	r3, r2
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	4313      	orrs	r3, r2
 8008234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	697a      	ldr	r2, [r7, #20]
 800823a:	609a      	str	r2, [r3, #8]
}
 800823c:	bf00      	nop
 800823e:	371c      	adds	r7, #28
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008258:	2b01      	cmp	r3, #1
 800825a:	d101      	bne.n	8008260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800825c:	2302      	movs	r3, #2
 800825e:	e04a      	b.n	80082f6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2202      	movs	r2, #2
 800826c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a1f      	ldr	r2, [pc, #124]	@ (8008304 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d108      	bne.n	800829c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008290:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	4313      	orrs	r3, r2
 800829a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a12      	ldr	r2, [pc, #72]	@ (8008304 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d004      	beq.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082c8:	d10c      	bne.n	80082e4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	4313      	orrs	r3, r2
 80082da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	40012c00 	.word	0x40012c00

08008308 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008310:	bf00      	nop
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008324:	bf00      	nop
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008338:	bf00      	nop
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <LL_RCC_GetUSARTClockSource>:
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800834c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008350:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4013      	ands	r3, r2
}
 8008358:	4618      	mov	r0, r3
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <LL_RCC_GetLPUARTClockSource>:
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800836c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008370:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4013      	ands	r3, r2
}
 8008378:	4618      	mov	r0, r3
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d101      	bne.n	8008396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e042      	b.n	800841c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800839c:	2b00      	cmp	r3, #0
 800839e:	d106      	bne.n	80083ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f7fa fc05 	bl	8002bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2224      	movs	r2, #36	@ 0x24
 80083b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f022 0201 	bic.w	r2, r2, #1
 80083c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fcca 	bl	8008d60 <UART_SetConfig>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d101      	bne.n	80083d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e022      	b.n	800841c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d002      	beq.n	80083e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fee6 	bl	80091b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	685a      	ldr	r2, [r3, #4]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80083f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	689a      	ldr	r2, [r3, #8]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008402:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f042 0201 	orr.w	r2, r2, #1
 8008412:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 ff6d 	bl	80092f4 <UART_CheckIdleState>
 800841a:	4603      	mov	r3, r0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b08a      	sub	sp, #40	@ 0x28
 8008428:	af02      	add	r7, sp, #8
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	603b      	str	r3, [r7, #0]
 8008430:	4613      	mov	r3, r2
 8008432:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800843a:	2b20      	cmp	r3, #32
 800843c:	d17b      	bne.n	8008536 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d002      	beq.n	800844a <HAL_UART_Transmit+0x26>
 8008444:	88fb      	ldrh	r3, [r7, #6]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d101      	bne.n	800844e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e074      	b.n	8008538 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2221      	movs	r2, #33	@ 0x21
 800845a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800845e:	f7fa fef1 	bl	8003244 <HAL_GetTick>
 8008462:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	88fa      	ldrh	r2, [r7, #6]
 8008468:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	88fa      	ldrh	r2, [r7, #6]
 8008470:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800847c:	d108      	bne.n	8008490 <HAL_UART_Transmit+0x6c>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d104      	bne.n	8008490 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008486:	2300      	movs	r3, #0
 8008488:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	61bb      	str	r3, [r7, #24]
 800848e:	e003      	b.n	8008498 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008494:	2300      	movs	r3, #0
 8008496:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008498:	e030      	b.n	80084fc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	9300      	str	r3, [sp, #0]
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	2200      	movs	r2, #0
 80084a2:	2180      	movs	r1, #128	@ 0x80
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f000 ffcf 	bl	8009448 <UART_WaitOnFlagUntilTimeout>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d005      	beq.n	80084bc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2220      	movs	r2, #32
 80084b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80084b8:	2303      	movs	r3, #3
 80084ba:	e03d      	b.n	8008538 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10b      	bne.n	80084da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	881b      	ldrh	r3, [r3, #0]
 80084c6:	461a      	mov	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084d0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	3302      	adds	r3, #2
 80084d6:	61bb      	str	r3, [r7, #24]
 80084d8:	e007      	b.n	80084ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	781a      	ldrb	r2, [r3, #0]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	3301      	adds	r3, #1
 80084e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	3b01      	subs	r3, #1
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008502:	b29b      	uxth	r3, r3
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1c8      	bne.n	800849a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	2200      	movs	r2, #0
 8008510:	2140      	movs	r1, #64	@ 0x40
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f000 ff98 	bl	8009448 <UART_WaitOnFlagUntilTimeout>
 8008518:	4603      	mov	r3, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d005      	beq.n	800852a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2220      	movs	r2, #32
 8008522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e006      	b.n	8008538 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2220      	movs	r2, #32
 800852e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008532:	2300      	movs	r3, #0
 8008534:	e000      	b.n	8008538 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008536:	2302      	movs	r3, #2
  }
}
 8008538:	4618      	mov	r0, r3
 800853a:	3720      	adds	r7, #32
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b08a      	sub	sp, #40	@ 0x28
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	4613      	mov	r3, r2
 800854c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008554:	2b20      	cmp	r3, #32
 8008556:	d137      	bne.n	80085c8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d002      	beq.n	8008564 <HAL_UART_Receive_IT+0x24>
 800855e:	88fb      	ldrh	r3, [r7, #6]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d101      	bne.n	8008568 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e030      	b.n	80085ca <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a18      	ldr	r2, [pc, #96]	@ (80085d4 <HAL_UART_Receive_IT+0x94>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d01f      	beq.n	80085b8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d018      	beq.n	80085b8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	e853 3f00 	ldrex	r3, [r3]
 8008592:	613b      	str	r3, [r7, #16]
   return(result);
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800859a:	627b      	str	r3, [r7, #36]	@ 0x24
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	461a      	mov	r2, r3
 80085a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a4:	623b      	str	r3, [r7, #32]
 80085a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a8:	69f9      	ldr	r1, [r7, #28]
 80085aa:	6a3a      	ldr	r2, [r7, #32]
 80085ac:	e841 2300 	strex	r3, r2, [r1]
 80085b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1e6      	bne.n	8008586 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 80085b8:	88fb      	ldrh	r3, [r7, #6]
 80085ba:	461a      	mov	r2, r3
 80085bc:	68b9      	ldr	r1, [r7, #8]
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f000 ffaa 	bl	8009518 <UART_Start_Receive_IT>
 80085c4:	4603      	mov	r3, r0
 80085c6:	e000      	b.n	80085ca <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80085c8:	2302      	movs	r3, #2
  }
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3728      	adds	r7, #40	@ 0x28
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	40008000 	.word	0x40008000

080085d8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b08a      	sub	sp, #40	@ 0x28
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	4613      	mov	r3, r2
 80085e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ec:	2b20      	cmp	r3, #32
 80085ee:	d167      	bne.n	80086c0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d002      	beq.n	80085fc <HAL_UART_Transmit_DMA+0x24>
 80085f6:	88fb      	ldrh	r3, [r7, #6]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d101      	bne.n	8008600 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	e060      	b.n	80086c2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	88fa      	ldrh	r2, [r7, #6]
 800860a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	88fa      	ldrh	r2, [r7, #6]
 8008612:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2221      	movs	r2, #33	@ 0x21
 8008622:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800862a:	2b00      	cmp	r3, #0
 800862c:	d028      	beq.n	8008680 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008632:	4a26      	ldr	r2, [pc, #152]	@ (80086cc <HAL_UART_Transmit_DMA+0xf4>)
 8008634:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800863a:	4a25      	ldr	r2, [pc, #148]	@ (80086d0 <HAL_UART_Transmit_DMA+0xf8>)
 800863c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008642:	4a24      	ldr	r2, [pc, #144]	@ (80086d4 <HAL_UART_Transmit_DMA+0xfc>)
 8008644:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800864a:	2200      	movs	r2, #0
 800864c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008656:	4619      	mov	r1, r3
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3328      	adds	r3, #40	@ 0x28
 800865e:	461a      	mov	r2, r3
 8008660:	88fb      	ldrh	r3, [r7, #6]
 8008662:	f7fb f855 	bl	8003710 <HAL_DMA_Start_IT>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d009      	beq.n	8008680 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2210      	movs	r2, #16
 8008670:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2220      	movs	r2, #32
 8008678:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e020      	b.n	80086c2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2240      	movs	r2, #64	@ 0x40
 8008686:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	3308      	adds	r3, #8
 800868e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	e853 3f00 	ldrex	r3, [r3]
 8008696:	613b      	str	r3, [r7, #16]
   return(result);
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800869e:	627b      	str	r3, [r7, #36]	@ 0x24
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3308      	adds	r3, #8
 80086a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086a8:	623a      	str	r2, [r7, #32]
 80086aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ac:	69f9      	ldr	r1, [r7, #28]
 80086ae:	6a3a      	ldr	r2, [r7, #32]
 80086b0:	e841 2300 	strex	r3, r2, [r1]
 80086b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1e5      	bne.n	8008688 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	e000      	b.n	80086c2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80086c0:	2302      	movs	r3, #2
  }
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3728      	adds	r7, #40	@ 0x28
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	080098ab 	.word	0x080098ab
 80086d0:	08009945 	.word	0x08009945
 80086d4:	08009961 	.word	0x08009961

080086d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b0ba      	sub	sp, #232	@ 0xe8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	69db      	ldr	r3, [r3, #28]
 80086e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80086fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008702:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008706:	4013      	ands	r3, r2
 8008708:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800870c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008710:	2b00      	cmp	r3, #0
 8008712:	d11b      	bne.n	800874c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008718:	f003 0320 	and.w	r3, r3, #32
 800871c:	2b00      	cmp	r3, #0
 800871e:	d015      	beq.n	800874c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008724:	f003 0320 	and.w	r3, r3, #32
 8008728:	2b00      	cmp	r3, #0
 800872a:	d105      	bne.n	8008738 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800872c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d009      	beq.n	800874c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800873c:	2b00      	cmp	r3, #0
 800873e:	f000 82e3 	beq.w	8008d08 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	4798      	blx	r3
      }
      return;
 800874a:	e2dd      	b.n	8008d08 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800874c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008750:	2b00      	cmp	r3, #0
 8008752:	f000 8123 	beq.w	800899c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008756:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800875a:	4b8d      	ldr	r3, [pc, #564]	@ (8008990 <HAL_UART_IRQHandler+0x2b8>)
 800875c:	4013      	ands	r3, r2
 800875e:	2b00      	cmp	r3, #0
 8008760:	d106      	bne.n	8008770 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008762:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008766:	4b8b      	ldr	r3, [pc, #556]	@ (8008994 <HAL_UART_IRQHandler+0x2bc>)
 8008768:	4013      	ands	r3, r2
 800876a:	2b00      	cmp	r3, #0
 800876c:	f000 8116 	beq.w	800899c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008774:	f003 0301 	and.w	r3, r3, #1
 8008778:	2b00      	cmp	r3, #0
 800877a:	d011      	beq.n	80087a0 <HAL_UART_IRQHandler+0xc8>
 800877c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00b      	beq.n	80087a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2201      	movs	r2, #1
 800878e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008796:	f043 0201 	orr.w	r2, r3, #1
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087a4:	f003 0302 	and.w	r3, r3, #2
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d011      	beq.n	80087d0 <HAL_UART_IRQHandler+0xf8>
 80087ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087b0:	f003 0301 	and.w	r3, r3, #1
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00b      	beq.n	80087d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2202      	movs	r2, #2
 80087be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087c6:	f043 0204 	orr.w	r2, r3, #4
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087d4:	f003 0304 	and.w	r3, r3, #4
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d011      	beq.n	8008800 <HAL_UART_IRQHandler+0x128>
 80087dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087e0:	f003 0301 	and.w	r3, r3, #1
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00b      	beq.n	8008800 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2204      	movs	r2, #4
 80087ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087f6:	f043 0202 	orr.w	r2, r3, #2
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008804:	f003 0308 	and.w	r3, r3, #8
 8008808:	2b00      	cmp	r3, #0
 800880a:	d017      	beq.n	800883c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800880c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008810:	f003 0320 	and.w	r3, r3, #32
 8008814:	2b00      	cmp	r3, #0
 8008816:	d105      	bne.n	8008824 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008818:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800881c:	4b5c      	ldr	r3, [pc, #368]	@ (8008990 <HAL_UART_IRQHandler+0x2b8>)
 800881e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00b      	beq.n	800883c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2208      	movs	r2, #8
 800882a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008832:	f043 0208 	orr.w	r2, r3, #8
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800883c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008840:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008844:	2b00      	cmp	r3, #0
 8008846:	d012      	beq.n	800886e <HAL_UART_IRQHandler+0x196>
 8008848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800884c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00c      	beq.n	800886e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800885c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008864:	f043 0220 	orr.w	r2, r3, #32
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008874:	2b00      	cmp	r3, #0
 8008876:	f000 8249 	beq.w	8008d0c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800887a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800887e:	f003 0320 	and.w	r3, r3, #32
 8008882:	2b00      	cmp	r3, #0
 8008884:	d013      	beq.n	80088ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800888a:	f003 0320 	and.w	r3, r3, #32
 800888e:	2b00      	cmp	r3, #0
 8008890:	d105      	bne.n	800889e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800889a:	2b00      	cmp	r3, #0
 800889c:	d007      	beq.n	80088ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d003      	beq.n	80088ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088c2:	2b40      	cmp	r3, #64	@ 0x40
 80088c4:	d005      	beq.n	80088d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80088c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80088ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d054      	beq.n	800897c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 ff83 	bl	80097de <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088e2:	2b40      	cmp	r3, #64	@ 0x40
 80088e4:	d146      	bne.n	8008974 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	3308      	adds	r3, #8
 80088ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80088f4:	e853 3f00 	ldrex	r3, [r3]
 80088f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80088fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008900:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008904:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3308      	adds	r3, #8
 800890e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008912:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008916:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800891e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008922:	e841 2300 	strex	r3, r2, [r1]
 8008926:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800892a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1d9      	bne.n	80088e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008938:	2b00      	cmp	r3, #0
 800893a:	d017      	beq.n	800896c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008942:	4a15      	ldr	r2, [pc, #84]	@ (8008998 <HAL_UART_IRQHandler+0x2c0>)
 8008944:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800894c:	4618      	mov	r0, r3
 800894e:	f7fa ffb9 	bl	80038c4 <HAL_DMA_Abort_IT>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d019      	beq.n	800898c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800895e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008966:	4610      	mov	r0, r2
 8008968:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800896a:	e00f      	b.n	800898c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f9e1 	bl	8008d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008972:	e00b      	b.n	800898c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 f9dd 	bl	8008d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800897a:	e007      	b.n	800898c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 f9d9 	bl	8008d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800898a:	e1bf      	b.n	8008d0c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800898c:	bf00      	nop
    return;
 800898e:	e1bd      	b.n	8008d0c <HAL_UART_IRQHandler+0x634>
 8008990:	10000001 	.word	0x10000001
 8008994:	04000120 	.word	0x04000120
 8008998:	080099e1 	.word	0x080099e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	f040 8153 	bne.w	8008c4c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80089a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089aa:	f003 0310 	and.w	r3, r3, #16
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f000 814c 	beq.w	8008c4c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80089b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089b8:	f003 0310 	and.w	r3, r3, #16
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f000 8145 	beq.w	8008c4c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2210      	movs	r2, #16
 80089c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089d4:	2b40      	cmp	r3, #64	@ 0x40
 80089d6:	f040 80bb 	bne.w	8008b50 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80089e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f000 818f 	beq.w	8008d10 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80089f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80089fc:	429a      	cmp	r2, r3
 80089fe:	f080 8187 	bcs.w	8008d10 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f003 0320 	and.w	r3, r3, #32
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	f040 8087 	bne.w	8008b2e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008a2c:	e853 3f00 	ldrex	r3, [r3]
 8008a30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008a34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	461a      	mov	r2, r3
 8008a46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008a4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a4e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a52:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008a56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008a5a:	e841 2300 	strex	r3, r2, [r1]
 8008a5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1da      	bne.n	8008a20 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	3308      	adds	r3, #8
 8008a70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a74:	e853 3f00 	ldrex	r3, [r3]
 8008a78:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008a7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a7c:	f023 0301 	bic.w	r3, r3, #1
 8008a80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	3308      	adds	r3, #8
 8008a8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008a8e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008a92:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a94:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008a96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008a9a:	e841 2300 	strex	r3, r2, [r1]
 8008a9e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008aa0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1e1      	bne.n	8008a6a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3308      	adds	r3, #8
 8008aac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ab0:	e853 3f00 	ldrex	r3, [r3]
 8008ab4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008ab6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ab8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008abc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	3308      	adds	r3, #8
 8008ac6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008aca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008acc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ace:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008ad0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008ad2:	e841 2300 	strex	r3, r2, [r1]
 8008ad6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008ad8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1e3      	bne.n	8008aa6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2220      	movs	r2, #32
 8008ae2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008af4:	e853 3f00 	ldrex	r3, [r3]
 8008af8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008afa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008afc:	f023 0310 	bic.w	r3, r3, #16
 8008b00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	461a      	mov	r2, r3
 8008b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b10:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b16:	e841 2300 	strex	r3, r2, [r1]
 8008b1a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008b1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1e4      	bne.n	8008aec <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7fa fe6c 	bl	8003806 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2202      	movs	r2, #2
 8008b32:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	1ad3      	subs	r3, r2, r3
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	4619      	mov	r1, r3
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f8fd 	bl	8008d48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b4e:	e0df      	b.n	8008d10 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	f000 80d1 	beq.w	8008d14 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8008b72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f000 80cc 	beq.w	8008d14 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b84:	e853 3f00 	ldrex	r3, [r3]
 8008b88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	461a      	mov	r2, r3
 8008b9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008b9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ba0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ba4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ba6:	e841 2300 	strex	r3, r2, [r1]
 8008baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1e4      	bne.n	8008b7c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	3308      	adds	r3, #8
 8008bb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bbc:	e853 3f00 	ldrex	r3, [r3]
 8008bc0:	623b      	str	r3, [r7, #32]
   return(result);
 8008bc2:	6a3b      	ldr	r3, [r7, #32]
 8008bc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008bc8:	f023 0301 	bic.w	r3, r3, #1
 8008bcc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	3308      	adds	r3, #8
 8008bd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008bda:	633a      	str	r2, [r7, #48]	@ 0x30
 8008bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008be0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008be2:	e841 2300 	strex	r3, r2, [r1]
 8008be6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1e1      	bne.n	8008bb2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2220      	movs	r2, #32
 8008bf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	e853 3f00 	ldrex	r3, [r3]
 8008c0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f023 0310 	bic.w	r3, r3, #16
 8008c16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008c24:	61fb      	str	r3, [r7, #28]
 8008c26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c28:	69b9      	ldr	r1, [r7, #24]
 8008c2a:	69fa      	ldr	r2, [r7, #28]
 8008c2c:	e841 2300 	strex	r3, r2, [r1]
 8008c30:	617b      	str	r3, [r7, #20]
   return(result);
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1e4      	bne.n	8008c02 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2202      	movs	r2, #2
 8008c3c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c42:	4619      	mov	r1, r3
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 f87f 	bl	8008d48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008c4a:	e063      	b.n	8008d14 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d00e      	beq.n	8008c76 <HAL_UART_IRQHandler+0x59e>
 8008c58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d008      	beq.n	8008c76 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008c6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f001 fc14 	bl	800a49c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c74:	e051      	b.n	8008d1a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d014      	beq.n	8008cac <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d105      	bne.n	8008c9a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008c8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d008      	beq.n	8008cac <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d03a      	beq.n	8008d18 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	4798      	blx	r3
    }
    return;
 8008caa:	e035      	b.n	8008d18 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d009      	beq.n	8008ccc <HAL_UART_IRQHandler+0x5f4>
 8008cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d003      	beq.n	8008ccc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fea1 	bl	8009a0c <UART_EndTransmit_IT>
    return;
 8008cca:	e026      	b.n	8008d1a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d009      	beq.n	8008cec <HAL_UART_IRQHandler+0x614>
 8008cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cdc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d003      	beq.n	8008cec <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f001 fbed 	bl	800a4c4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008cea:	e016      	b.n	8008d1a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d010      	beq.n	8008d1a <HAL_UART_IRQHandler+0x642>
 8008cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	da0c      	bge.n	8008d1a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f001 fbd5 	bl	800a4b0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d06:	e008      	b.n	8008d1a <HAL_UART_IRQHandler+0x642>
      return;
 8008d08:	bf00      	nop
 8008d0a:	e006      	b.n	8008d1a <HAL_UART_IRQHandler+0x642>
    return;
 8008d0c:	bf00      	nop
 8008d0e:	e004      	b.n	8008d1a <HAL_UART_IRQHandler+0x642>
      return;
 8008d10:	bf00      	nop
 8008d12:	e002      	b.n	8008d1a <HAL_UART_IRQHandler+0x642>
      return;
 8008d14:	bf00      	nop
 8008d16:	e000      	b.n	8008d1a <HAL_UART_IRQHandler+0x642>
    return;
 8008d18:	bf00      	nop
  }
}
 8008d1a:	37e8      	adds	r7, #232	@ 0xe8
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008d28:	bf00      	nop
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008d54:	bf00      	nop
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d64:	b08c      	sub	sp, #48	@ 0x30
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	689a      	ldr	r2, [r3, #8]
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	431a      	orrs	r2, r3
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	431a      	orrs	r2, r3
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	69db      	ldr	r3, [r3, #28]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	4baf      	ldr	r3, [pc, #700]	@ (800904c <UART_SetConfig+0x2ec>)
 8008d90:	4013      	ands	r3, r2
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	6812      	ldr	r2, [r2, #0]
 8008d96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d98:	430b      	orrs	r3, r1
 8008d9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	68da      	ldr	r2, [r3, #12]
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	430a      	orrs	r2, r1
 8008db0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4aa4      	ldr	r2, [pc, #656]	@ (8009050 <UART_SetConfig+0x2f0>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d004      	beq.n	8008dcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	6a1b      	ldr	r3, [r3, #32]
 8008dc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008dd6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008dda:	697a      	ldr	r2, [r7, #20]
 8008ddc:	6812      	ldr	r2, [r2, #0]
 8008dde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008de0:	430b      	orrs	r3, r1
 8008de2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dea:	f023 010f 	bic.w	r1, r3, #15
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	430a      	orrs	r2, r1
 8008df8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a95      	ldr	r2, [pc, #596]	@ (8009054 <UART_SetConfig+0x2f4>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d125      	bne.n	8008e50 <UART_SetConfig+0xf0>
 8008e04:	2003      	movs	r0, #3
 8008e06:	f7ff fa9d 	bl	8008344 <LL_RCC_GetUSARTClockSource>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b03      	cmp	r3, #3
 8008e0e:	d81b      	bhi.n	8008e48 <UART_SetConfig+0xe8>
 8008e10:	a201      	add	r2, pc, #4	@ (adr r2, 8008e18 <UART_SetConfig+0xb8>)
 8008e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e16:	bf00      	nop
 8008e18:	08008e29 	.word	0x08008e29
 8008e1c:	08008e39 	.word	0x08008e39
 8008e20:	08008e31 	.word	0x08008e31
 8008e24:	08008e41 	.word	0x08008e41
 8008e28:	2301      	movs	r3, #1
 8008e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e2e:	e042      	b.n	8008eb6 <UART_SetConfig+0x156>
 8008e30:	2302      	movs	r3, #2
 8008e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e36:	e03e      	b.n	8008eb6 <UART_SetConfig+0x156>
 8008e38:	2304      	movs	r3, #4
 8008e3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e3e:	e03a      	b.n	8008eb6 <UART_SetConfig+0x156>
 8008e40:	2308      	movs	r3, #8
 8008e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e46:	e036      	b.n	8008eb6 <UART_SetConfig+0x156>
 8008e48:	2310      	movs	r3, #16
 8008e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e4e:	e032      	b.n	8008eb6 <UART_SetConfig+0x156>
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a7e      	ldr	r2, [pc, #504]	@ (8009050 <UART_SetConfig+0x2f0>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d12a      	bne.n	8008eb0 <UART_SetConfig+0x150>
 8008e5a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8008e5e:	f7ff fa81 	bl	8008364 <LL_RCC_GetLPUARTClockSource>
 8008e62:	4603      	mov	r3, r0
 8008e64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e68:	d01a      	beq.n	8008ea0 <UART_SetConfig+0x140>
 8008e6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e6e:	d81b      	bhi.n	8008ea8 <UART_SetConfig+0x148>
 8008e70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e74:	d00c      	beq.n	8008e90 <UART_SetConfig+0x130>
 8008e76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e7a:	d815      	bhi.n	8008ea8 <UART_SetConfig+0x148>
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d003      	beq.n	8008e88 <UART_SetConfig+0x128>
 8008e80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e84:	d008      	beq.n	8008e98 <UART_SetConfig+0x138>
 8008e86:	e00f      	b.n	8008ea8 <UART_SetConfig+0x148>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e8e:	e012      	b.n	8008eb6 <UART_SetConfig+0x156>
 8008e90:	2302      	movs	r3, #2
 8008e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e96:	e00e      	b.n	8008eb6 <UART_SetConfig+0x156>
 8008e98:	2304      	movs	r3, #4
 8008e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e9e:	e00a      	b.n	8008eb6 <UART_SetConfig+0x156>
 8008ea0:	2308      	movs	r3, #8
 8008ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ea6:	e006      	b.n	8008eb6 <UART_SetConfig+0x156>
 8008ea8:	2310      	movs	r3, #16
 8008eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eae:	e002      	b.n	8008eb6 <UART_SetConfig+0x156>
 8008eb0:	2310      	movs	r3, #16
 8008eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a65      	ldr	r2, [pc, #404]	@ (8009050 <UART_SetConfig+0x2f0>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	f040 8097 	bne.w	8008ff0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ec2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008ec6:	2b08      	cmp	r3, #8
 8008ec8:	d823      	bhi.n	8008f12 <UART_SetConfig+0x1b2>
 8008eca:	a201      	add	r2, pc, #4	@ (adr r2, 8008ed0 <UART_SetConfig+0x170>)
 8008ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed0:	08008ef5 	.word	0x08008ef5
 8008ed4:	08008f13 	.word	0x08008f13
 8008ed8:	08008efd 	.word	0x08008efd
 8008edc:	08008f13 	.word	0x08008f13
 8008ee0:	08008f03 	.word	0x08008f03
 8008ee4:	08008f13 	.word	0x08008f13
 8008ee8:	08008f13 	.word	0x08008f13
 8008eec:	08008f13 	.word	0x08008f13
 8008ef0:	08008f0b 	.word	0x08008f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ef4:	f7fd fefc 	bl	8006cf0 <HAL_RCC_GetPCLK1Freq>
 8008ef8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008efa:	e010      	b.n	8008f1e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008efc:	4b56      	ldr	r3, [pc, #344]	@ (8009058 <UART_SetConfig+0x2f8>)
 8008efe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f00:	e00d      	b.n	8008f1e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f02:	f7fd fe75 	bl	8006bf0 <HAL_RCC_GetSysClockFreq>
 8008f06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f08:	e009      	b.n	8008f1e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f10:	e005      	b.n	8008f1e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8008f12:	2300      	movs	r3, #0
 8008f14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008f1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f000 812b 	beq.w	800917c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f2a:	4a4c      	ldr	r2, [pc, #304]	@ (800905c <UART_SetConfig+0x2fc>)
 8008f2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f30:	461a      	mov	r2, r3
 8008f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f38:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	685a      	ldr	r2, [r3, #4]
 8008f3e:	4613      	mov	r3, r2
 8008f40:	005b      	lsls	r3, r3, #1
 8008f42:	4413      	add	r3, r2
 8008f44:	69ba      	ldr	r2, [r7, #24]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d305      	bcc.n	8008f56 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f50:	69ba      	ldr	r2, [r7, #24]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d903      	bls.n	8008f5e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008f5c:	e10e      	b.n	800917c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f60:	2200      	movs	r2, #0
 8008f62:	60bb      	str	r3, [r7, #8]
 8008f64:	60fa      	str	r2, [r7, #12]
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f6a:	4a3c      	ldr	r2, [pc, #240]	@ (800905c <UART_SetConfig+0x2fc>)
 8008f6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	2200      	movs	r2, #0
 8008f74:	603b      	str	r3, [r7, #0]
 8008f76:	607a      	str	r2, [r7, #4]
 8008f78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008f80:	f7f7 fc3c 	bl	80007fc <__aeabi_uldivmod>
 8008f84:	4602      	mov	r2, r0
 8008f86:	460b      	mov	r3, r1
 8008f88:	4610      	mov	r0, r2
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	f04f 0200 	mov.w	r2, #0
 8008f90:	f04f 0300 	mov.w	r3, #0
 8008f94:	020b      	lsls	r3, r1, #8
 8008f96:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008f9a:	0202      	lsls	r2, r0, #8
 8008f9c:	6979      	ldr	r1, [r7, #20]
 8008f9e:	6849      	ldr	r1, [r1, #4]
 8008fa0:	0849      	lsrs	r1, r1, #1
 8008fa2:	2000      	movs	r0, #0
 8008fa4:	460c      	mov	r4, r1
 8008fa6:	4605      	mov	r5, r0
 8008fa8:	eb12 0804 	adds.w	r8, r2, r4
 8008fac:	eb43 0905 	adc.w	r9, r3, r5
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	469a      	mov	sl, r3
 8008fb8:	4693      	mov	fp, r2
 8008fba:	4652      	mov	r2, sl
 8008fbc:	465b      	mov	r3, fp
 8008fbe:	4640      	mov	r0, r8
 8008fc0:	4649      	mov	r1, r9
 8008fc2:	f7f7 fc1b 	bl	80007fc <__aeabi_uldivmod>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	460b      	mov	r3, r1
 8008fca:	4613      	mov	r3, r2
 8008fcc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008fce:	6a3b      	ldr	r3, [r7, #32]
 8008fd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fd4:	d308      	bcc.n	8008fe8 <UART_SetConfig+0x288>
 8008fd6:	6a3b      	ldr	r3, [r7, #32]
 8008fd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fdc:	d204      	bcs.n	8008fe8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	6a3a      	ldr	r2, [r7, #32]
 8008fe4:	60da      	str	r2, [r3, #12]
 8008fe6:	e0c9      	b.n	800917c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008fee:	e0c5      	b.n	800917c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	69db      	ldr	r3, [r3, #28]
 8008ff4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ff8:	d16d      	bne.n	80090d6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008ffa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008ffe:	3b01      	subs	r3, #1
 8009000:	2b07      	cmp	r3, #7
 8009002:	d82d      	bhi.n	8009060 <UART_SetConfig+0x300>
 8009004:	a201      	add	r2, pc, #4	@ (adr r2, 800900c <UART_SetConfig+0x2ac>)
 8009006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900a:	bf00      	nop
 800900c:	0800902d 	.word	0x0800902d
 8009010:	08009035 	.word	0x08009035
 8009014:	08009061 	.word	0x08009061
 8009018:	0800903b 	.word	0x0800903b
 800901c:	08009061 	.word	0x08009061
 8009020:	08009061 	.word	0x08009061
 8009024:	08009061 	.word	0x08009061
 8009028:	08009043 	.word	0x08009043
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800902c:	f7fd fe76 	bl	8006d1c <HAL_RCC_GetPCLK2Freq>
 8009030:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009032:	e01b      	b.n	800906c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009034:	4b08      	ldr	r3, [pc, #32]	@ (8009058 <UART_SetConfig+0x2f8>)
 8009036:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009038:	e018      	b.n	800906c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800903a:	f7fd fdd9 	bl	8006bf0 <HAL_RCC_GetSysClockFreq>
 800903e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009040:	e014      	b.n	800906c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009046:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009048:	e010      	b.n	800906c <UART_SetConfig+0x30c>
 800904a:	bf00      	nop
 800904c:	cfff69f3 	.word	0xcfff69f3
 8009050:	40008000 	.word	0x40008000
 8009054:	40013800 	.word	0x40013800
 8009058:	00f42400 	.word	0x00f42400
 800905c:	080167c8 	.word	0x080167c8
      default:
        pclk = 0U;
 8009060:	2300      	movs	r3, #0
 8009062:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800906a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800906c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906e:	2b00      	cmp	r3, #0
 8009070:	f000 8084 	beq.w	800917c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009078:	4a4b      	ldr	r2, [pc, #300]	@ (80091a8 <UART_SetConfig+0x448>)
 800907a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800907e:	461a      	mov	r2, r3
 8009080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009082:	fbb3 f3f2 	udiv	r3, r3, r2
 8009086:	005a      	lsls	r2, r3, #1
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	085b      	lsrs	r3, r3, #1
 800908e:	441a      	add	r2, r3
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	fbb2 f3f3 	udiv	r3, r2, r3
 8009098:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800909a:	6a3b      	ldr	r3, [r7, #32]
 800909c:	2b0f      	cmp	r3, #15
 800909e:	d916      	bls.n	80090ce <UART_SetConfig+0x36e>
 80090a0:	6a3b      	ldr	r3, [r7, #32]
 80090a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090a6:	d212      	bcs.n	80090ce <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090a8:	6a3b      	ldr	r3, [r7, #32]
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	f023 030f 	bic.w	r3, r3, #15
 80090b0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090b2:	6a3b      	ldr	r3, [r7, #32]
 80090b4:	085b      	lsrs	r3, r3, #1
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	f003 0307 	and.w	r3, r3, #7
 80090bc:	b29a      	uxth	r2, r3
 80090be:	8bfb      	ldrh	r3, [r7, #30]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	8bfa      	ldrh	r2, [r7, #30]
 80090ca:	60da      	str	r2, [r3, #12]
 80090cc:	e056      	b.n	800917c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80090d4:	e052      	b.n	800917c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80090d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80090da:	3b01      	subs	r3, #1
 80090dc:	2b07      	cmp	r3, #7
 80090de:	d822      	bhi.n	8009126 <UART_SetConfig+0x3c6>
 80090e0:	a201      	add	r2, pc, #4	@ (adr r2, 80090e8 <UART_SetConfig+0x388>)
 80090e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e6:	bf00      	nop
 80090e8:	08009109 	.word	0x08009109
 80090ec:	08009111 	.word	0x08009111
 80090f0:	08009127 	.word	0x08009127
 80090f4:	08009117 	.word	0x08009117
 80090f8:	08009127 	.word	0x08009127
 80090fc:	08009127 	.word	0x08009127
 8009100:	08009127 	.word	0x08009127
 8009104:	0800911f 	.word	0x0800911f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009108:	f7fd fe08 	bl	8006d1c <HAL_RCC_GetPCLK2Freq>
 800910c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800910e:	e010      	b.n	8009132 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009110:	4b26      	ldr	r3, [pc, #152]	@ (80091ac <UART_SetConfig+0x44c>)
 8009112:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009114:	e00d      	b.n	8009132 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009116:	f7fd fd6b 	bl	8006bf0 <HAL_RCC_GetSysClockFreq>
 800911a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800911c:	e009      	b.n	8009132 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800911e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009122:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009124:	e005      	b.n	8009132 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8009126:	2300      	movs	r3, #0
 8009128:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009130:	bf00      	nop
    }

    if (pclk != 0U)
 8009132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009134:	2b00      	cmp	r3, #0
 8009136:	d021      	beq.n	800917c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800913c:	4a1a      	ldr	r2, [pc, #104]	@ (80091a8 <UART_SetConfig+0x448>)
 800913e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009142:	461a      	mov	r2, r3
 8009144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009146:	fbb3 f2f2 	udiv	r2, r3, r2
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	085b      	lsrs	r3, r3, #1
 8009150:	441a      	add	r2, r3
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	fbb2 f3f3 	udiv	r3, r2, r3
 800915a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800915c:	6a3b      	ldr	r3, [r7, #32]
 800915e:	2b0f      	cmp	r3, #15
 8009160:	d909      	bls.n	8009176 <UART_SetConfig+0x416>
 8009162:	6a3b      	ldr	r3, [r7, #32]
 8009164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009168:	d205      	bcs.n	8009176 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800916a:	6a3b      	ldr	r3, [r7, #32]
 800916c:	b29a      	uxth	r2, r3
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	60da      	str	r2, [r3, #12]
 8009174:	e002      	b.n	800917c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	2201      	movs	r2, #1
 8009180:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	2201      	movs	r2, #1
 8009188:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	2200      	movs	r2, #0
 8009190:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	2200      	movs	r2, #0
 8009196:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009198:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800919c:	4618      	mov	r0, r3
 800919e:	3730      	adds	r7, #48	@ 0x30
 80091a0:	46bd      	mov	sp, r7
 80091a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091a6:	bf00      	nop
 80091a8:	080167c8 	.word	0x080167c8
 80091ac:	00f42400 	.word	0x00f42400

080091b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091bc:	f003 0301 	and.w	r3, r3, #1
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d00a      	beq.n	80091da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	430a      	orrs	r2, r1
 80091d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091de:	f003 0302 	and.w	r3, r3, #2
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00a      	beq.n	80091fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	430a      	orrs	r2, r1
 80091fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009200:	f003 0304 	and.w	r3, r3, #4
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00a      	beq.n	800921e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	430a      	orrs	r2, r1
 800921c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009222:	f003 0308 	and.w	r3, r3, #8
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00a      	beq.n	8009240 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	430a      	orrs	r2, r1
 800923e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009244:	f003 0310 	and.w	r3, r3, #16
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00a      	beq.n	8009262 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	430a      	orrs	r2, r1
 8009260:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009266:	f003 0320 	and.w	r3, r3, #32
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00a      	beq.n	8009284 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	430a      	orrs	r2, r1
 8009282:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800928c:	2b00      	cmp	r3, #0
 800928e:	d01a      	beq.n	80092c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	430a      	orrs	r2, r1
 80092a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092ae:	d10a      	bne.n	80092c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	430a      	orrs	r2, r1
 80092c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00a      	beq.n	80092e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	430a      	orrs	r2, r1
 80092e6:	605a      	str	r2, [r3, #4]
  }
}
 80092e8:	bf00      	nop
 80092ea:	370c      	adds	r7, #12
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b098      	sub	sp, #96	@ 0x60
 80092f8:	af02      	add	r7, sp, #8
 80092fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009304:	f7f9 ff9e 	bl	8003244 <HAL_GetTick>
 8009308:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 0308 	and.w	r3, r3, #8
 8009314:	2b08      	cmp	r3, #8
 8009316:	d12f      	bne.n	8009378 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009318:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009320:	2200      	movs	r2, #0
 8009322:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f88e 	bl	8009448 <UART_WaitOnFlagUntilTimeout>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d022      	beq.n	8009378 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800933a:	e853 3f00 	ldrex	r3, [r3]
 800933e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009342:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009346:	653b      	str	r3, [r7, #80]	@ 0x50
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	461a      	mov	r2, r3
 800934e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009350:	647b      	str	r3, [r7, #68]	@ 0x44
 8009352:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009354:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009356:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009358:	e841 2300 	strex	r3, r2, [r1]
 800935c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800935e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1e6      	bne.n	8009332 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2220      	movs	r2, #32
 8009368:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009374:	2303      	movs	r3, #3
 8009376:	e063      	b.n	8009440 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 0304 	and.w	r3, r3, #4
 8009382:	2b04      	cmp	r3, #4
 8009384:	d149      	bne.n	800941a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009386:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800938e:	2200      	movs	r2, #0
 8009390:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 f857 	bl	8009448 <UART_WaitOnFlagUntilTimeout>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d03c      	beq.n	800941a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a8:	e853 3f00 	ldrex	r3, [r3]
 80093ac:	623b      	str	r3, [r7, #32]
   return(result);
 80093ae:	6a3b      	ldr	r3, [r7, #32]
 80093b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	461a      	mov	r2, r3
 80093bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093be:	633b      	str	r3, [r7, #48]	@ 0x30
 80093c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093c6:	e841 2300 	strex	r3, r2, [r1]
 80093ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1e6      	bne.n	80093a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	3308      	adds	r3, #8
 80093d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	e853 3f00 	ldrex	r3, [r3]
 80093e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f023 0301 	bic.w	r3, r3, #1
 80093e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	3308      	adds	r3, #8
 80093f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093f2:	61fa      	str	r2, [r7, #28]
 80093f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f6:	69b9      	ldr	r1, [r7, #24]
 80093f8:	69fa      	ldr	r2, [r7, #28]
 80093fa:	e841 2300 	strex	r3, r2, [r1]
 80093fe:	617b      	str	r3, [r7, #20]
   return(result);
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1e5      	bne.n	80093d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2220      	movs	r2, #32
 800940a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009416:	2303      	movs	r3, #3
 8009418:	e012      	b.n	8009440 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2220      	movs	r2, #32
 800941e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2220      	movs	r2, #32
 8009426:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3758      	adds	r7, #88	@ 0x58
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	603b      	str	r3, [r7, #0]
 8009454:	4613      	mov	r3, r2
 8009456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009458:	e049      	b.n	80094ee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009460:	d045      	beq.n	80094ee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009462:	f7f9 feef 	bl	8003244 <HAL_GetTick>
 8009466:	4602      	mov	r2, r0
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	1ad3      	subs	r3, r2, r3
 800946c:	69ba      	ldr	r2, [r7, #24]
 800946e:	429a      	cmp	r2, r3
 8009470:	d302      	bcc.n	8009478 <UART_WaitOnFlagUntilTimeout+0x30>
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d101      	bne.n	800947c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009478:	2303      	movs	r3, #3
 800947a:	e048      	b.n	800950e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f003 0304 	and.w	r3, r3, #4
 8009486:	2b00      	cmp	r3, #0
 8009488:	d031      	beq.n	80094ee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	69db      	ldr	r3, [r3, #28]
 8009490:	f003 0308 	and.w	r3, r3, #8
 8009494:	2b08      	cmp	r3, #8
 8009496:	d110      	bne.n	80094ba <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2208      	movs	r2, #8
 800949e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f000 f99c 	bl	80097de <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2208      	movs	r2, #8
 80094aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	e029      	b.n	800950e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	69db      	ldr	r3, [r3, #28]
 80094c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80094c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094c8:	d111      	bne.n	80094ee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80094d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094d4:	68f8      	ldr	r0, [r7, #12]
 80094d6:	f000 f982 	bl	80097de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2220      	movs	r2, #32
 80094de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80094ea:	2303      	movs	r3, #3
 80094ec:	e00f      	b.n	800950e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	69da      	ldr	r2, [r3, #28]
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	4013      	ands	r3, r2
 80094f8:	68ba      	ldr	r2, [r7, #8]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	bf0c      	ite	eq
 80094fe:	2301      	moveq	r3, #1
 8009500:	2300      	movne	r3, #0
 8009502:	b2db      	uxtb	r3, r3
 8009504:	461a      	mov	r2, r3
 8009506:	79fb      	ldrb	r3, [r7, #7]
 8009508:	429a      	cmp	r2, r3
 800950a:	d0a6      	beq.n	800945a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
	...

08009518 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009518:	b480      	push	{r7}
 800951a:	b0a3      	sub	sp, #140	@ 0x8c
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	4613      	mov	r3, r2
 8009524:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	88fa      	ldrh	r2, [r7, #6]
 8009530:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	88fa      	ldrh	r2, [r7, #6]
 8009538:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2200      	movs	r2, #0
 8009540:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800954a:	d10e      	bne.n	800956a <UART_Start_Receive_IT+0x52>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	691b      	ldr	r3, [r3, #16]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d105      	bne.n	8009560 <UART_Start_Receive_IT+0x48>
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800955a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800955e:	e02d      	b.n	80095bc <UART_Start_Receive_IT+0xa4>
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	22ff      	movs	r2, #255	@ 0xff
 8009564:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009568:	e028      	b.n	80095bc <UART_Start_Receive_IT+0xa4>
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10d      	bne.n	800958e <UART_Start_Receive_IT+0x76>
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d104      	bne.n	8009584 <UART_Start_Receive_IT+0x6c>
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	22ff      	movs	r2, #255	@ 0xff
 800957e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009582:	e01b      	b.n	80095bc <UART_Start_Receive_IT+0xa4>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	227f      	movs	r2, #127	@ 0x7f
 8009588:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800958c:	e016      	b.n	80095bc <UART_Start_Receive_IT+0xa4>
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009596:	d10d      	bne.n	80095b4 <UART_Start_Receive_IT+0x9c>
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d104      	bne.n	80095aa <UART_Start_Receive_IT+0x92>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	227f      	movs	r2, #127	@ 0x7f
 80095a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80095a8:	e008      	b.n	80095bc <UART_Start_Receive_IT+0xa4>
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	223f      	movs	r2, #63	@ 0x3f
 80095ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80095b2:	e003      	b.n	80095bc <UART_Start_Receive_IT+0xa4>
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2200      	movs	r2, #0
 80095c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2222      	movs	r2, #34	@ 0x22
 80095c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	3308      	adds	r3, #8
 80095d2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095d6:	e853 3f00 	ldrex	r3, [r3]
 80095da:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80095dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80095de:	f043 0301 	orr.w	r3, r3, #1
 80095e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	3308      	adds	r3, #8
 80095ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80095f0:	673a      	str	r2, [r7, #112]	@ 0x70
 80095f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80095f6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80095f8:	e841 2300 	strex	r3, r2, [r1]
 80095fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80095fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1e3      	bne.n	80095cc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009608:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800960c:	d14f      	bne.n	80096ae <UART_Start_Receive_IT+0x196>
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009614:	88fa      	ldrh	r2, [r7, #6]
 8009616:	429a      	cmp	r2, r3
 8009618:	d349      	bcc.n	80096ae <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009622:	d107      	bne.n	8009634 <UART_Start_Receive_IT+0x11c>
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	691b      	ldr	r3, [r3, #16]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d103      	bne.n	8009634 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	4a47      	ldr	r2, [pc, #284]	@ (800974c <UART_Start_Receive_IT+0x234>)
 8009630:	675a      	str	r2, [r3, #116]	@ 0x74
 8009632:	e002      	b.n	800963a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	4a46      	ldr	r2, [pc, #280]	@ (8009750 <UART_Start_Receive_IT+0x238>)
 8009638:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	691b      	ldr	r3, [r3, #16]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d01a      	beq.n	8009678 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009648:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800964a:	e853 3f00 	ldrex	r3, [r3]
 800964e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009650:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009652:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009656:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	461a      	mov	r2, r3
 8009660:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009664:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009666:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009668:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800966a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800966c:	e841 2300 	strex	r3, r2, [r1]
 8009670:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009674:	2b00      	cmp	r3, #0
 8009676:	d1e4      	bne.n	8009642 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	3308      	adds	r3, #8
 800967e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009682:	e853 3f00 	ldrex	r3, [r3]
 8009686:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800968e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	3308      	adds	r3, #8
 8009696:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009698:	64ba      	str	r2, [r7, #72]	@ 0x48
 800969a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800969e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096a0:	e841 2300 	strex	r3, r2, [r1]
 80096a4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80096a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1e5      	bne.n	8009678 <UART_Start_Receive_IT+0x160>
 80096ac:	e046      	b.n	800973c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096b6:	d107      	bne.n	80096c8 <UART_Start_Receive_IT+0x1b0>
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	691b      	ldr	r3, [r3, #16]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d103      	bne.n	80096c8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	4a24      	ldr	r2, [pc, #144]	@ (8009754 <UART_Start_Receive_IT+0x23c>)
 80096c4:	675a      	str	r2, [r3, #116]	@ 0x74
 80096c6:	e002      	b.n	80096ce <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	4a23      	ldr	r2, [pc, #140]	@ (8009758 <UART_Start_Receive_IT+0x240>)
 80096cc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d019      	beq.n	800970a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096de:	e853 3f00 	ldrex	r3, [r3]
 80096e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80096ea:	677b      	str	r3, [r7, #116]	@ 0x74
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	461a      	mov	r2, r3
 80096f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80096f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80096f6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80096fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80096fc:	e841 2300 	strex	r3, r2, [r1]
 8009700:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1e6      	bne.n	80096d6 <UART_Start_Receive_IT+0x1be>
 8009708:	e018      	b.n	800973c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	e853 3f00 	ldrex	r3, [r3]
 8009716:	613b      	str	r3, [r7, #16]
   return(result);
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	f043 0320 	orr.w	r3, r3, #32
 800971e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	461a      	mov	r2, r3
 8009726:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009728:	623b      	str	r3, [r7, #32]
 800972a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972c:	69f9      	ldr	r1, [r7, #28]
 800972e:	6a3a      	ldr	r2, [r7, #32]
 8009730:	e841 2300 	strex	r3, r2, [r1]
 8009734:	61bb      	str	r3, [r7, #24]
   return(result);
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d1e6      	bne.n	800970a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	378c      	adds	r7, #140	@ 0x8c
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr
 800974a:	bf00      	nop
 800974c:	0800a135 	.word	0x0800a135
 8009750:	08009dd5 	.word	0x08009dd5
 8009754:	08009c1d 	.word	0x08009c1d
 8009758:	08009a65 	.word	0x08009a65

0800975c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800975c:	b480      	push	{r7}
 800975e:	b08f      	sub	sp, #60	@ 0x3c
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976a:	6a3b      	ldr	r3, [r7, #32]
 800976c:	e853 3f00 	ldrex	r3, [r3]
 8009770:	61fb      	str	r3, [r7, #28]
   return(result);
 8009772:	69fb      	ldr	r3, [r7, #28]
 8009774:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009778:	637b      	str	r3, [r7, #52]	@ 0x34
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	461a      	mov	r2, r3
 8009780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009782:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009784:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009786:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009788:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800978a:	e841 2300 	strex	r3, r2, [r1]
 800978e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1e6      	bne.n	8009764 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	3308      	adds	r3, #8
 800979c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	e853 3f00 	ldrex	r3, [r3]
 80097a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80097ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	3308      	adds	r3, #8
 80097b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097b6:	61ba      	str	r2, [r7, #24]
 80097b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ba:	6979      	ldr	r1, [r7, #20]
 80097bc:	69ba      	ldr	r2, [r7, #24]
 80097be:	e841 2300 	strex	r3, r2, [r1]
 80097c2:	613b      	str	r3, [r7, #16]
   return(result);
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d1e5      	bne.n	8009796 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2220      	movs	r2, #32
 80097ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80097d2:	bf00      	nop
 80097d4:	373c      	adds	r7, #60	@ 0x3c
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr

080097de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097de:	b480      	push	{r7}
 80097e0:	b095      	sub	sp, #84	@ 0x54
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097ee:	e853 3f00 	ldrex	r3, [r3]
 80097f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	461a      	mov	r2, r3
 8009802:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009804:	643b      	str	r3, [r7, #64]	@ 0x40
 8009806:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009808:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800980a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800980c:	e841 2300 	strex	r3, r2, [r1]
 8009810:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009814:	2b00      	cmp	r3, #0
 8009816:	d1e6      	bne.n	80097e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	3308      	adds	r3, #8
 800981e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009820:	6a3b      	ldr	r3, [r7, #32]
 8009822:	e853 3f00 	ldrex	r3, [r3]
 8009826:	61fb      	str	r3, [r7, #28]
   return(result);
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800982e:	f023 0301 	bic.w	r3, r3, #1
 8009832:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	3308      	adds	r3, #8
 800983a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800983c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800983e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009840:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009842:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009844:	e841 2300 	strex	r3, r2, [r1]
 8009848:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800984a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800984c:	2b00      	cmp	r3, #0
 800984e:	d1e3      	bne.n	8009818 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009854:	2b01      	cmp	r3, #1
 8009856:	d118      	bne.n	800988a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	e853 3f00 	ldrex	r3, [r3]
 8009864:	60bb      	str	r3, [r7, #8]
   return(result);
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	f023 0310 	bic.w	r3, r3, #16
 800986c:	647b      	str	r3, [r7, #68]	@ 0x44
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	461a      	mov	r2, r3
 8009874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009876:	61bb      	str	r3, [r7, #24]
 8009878:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987a:	6979      	ldr	r1, [r7, #20]
 800987c:	69ba      	ldr	r2, [r7, #24]
 800987e:	e841 2300 	strex	r3, r2, [r1]
 8009882:	613b      	str	r3, [r7, #16]
   return(result);
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d1e6      	bne.n	8009858 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2220      	movs	r2, #32
 800988e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800989e:	bf00      	nop
 80098a0:	3754      	adds	r7, #84	@ 0x54
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b090      	sub	sp, #64	@ 0x40
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f003 0320 	and.w	r3, r3, #32
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d137      	bne.n	8009936 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80098c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098c8:	2200      	movs	r2, #0
 80098ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80098ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3308      	adds	r3, #8
 80098d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d8:	e853 3f00 	ldrex	r3, [r3]
 80098dc:	623b      	str	r3, [r7, #32]
   return(result);
 80098de:	6a3b      	ldr	r3, [r7, #32]
 80098e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80098e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	3308      	adds	r3, #8
 80098ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80098ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80098f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098f6:	e841 2300 	strex	r3, r2, [r1]
 80098fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80098fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d1e5      	bne.n	80098ce <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	e853 3f00 	ldrex	r3, [r3]
 800990e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009916:	637b      	str	r3, [r7, #52]	@ 0x34
 8009918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	461a      	mov	r2, r3
 800991e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009920:	61fb      	str	r3, [r7, #28]
 8009922:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009924:	69b9      	ldr	r1, [r7, #24]
 8009926:	69fa      	ldr	r2, [r7, #28]
 8009928:	e841 2300 	strex	r3, r2, [r1]
 800992c:	617b      	str	r3, [r7, #20]
   return(result);
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1e6      	bne.n	8009902 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009934:	e002      	b.n	800993c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009936:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009938:	f7f8 fc8a 	bl	8002250 <HAL_UART_TxCpltCallback>
}
 800993c:	bf00      	nop
 800993e:	3740      	adds	r7, #64	@ 0x40
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009950:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f7ff f9e4 	bl	8008d20 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009958:	bf00      	nop
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b086      	sub	sp, #24
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800996c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009974:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800997c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009988:	2b80      	cmp	r3, #128	@ 0x80
 800998a:	d109      	bne.n	80099a0 <UART_DMAError+0x40>
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	2b21      	cmp	r3, #33	@ 0x21
 8009990:	d106      	bne.n	80099a0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	2200      	movs	r2, #0
 8009996:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800999a:	6978      	ldr	r0, [r7, #20]
 800999c:	f7ff fede 	bl	800975c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099aa:	2b40      	cmp	r3, #64	@ 0x40
 80099ac:	d109      	bne.n	80099c2 <UART_DMAError+0x62>
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2b22      	cmp	r3, #34	@ 0x22
 80099b2:	d106      	bne.n	80099c2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80099bc:	6978      	ldr	r0, [r7, #20]
 80099be:	f7ff ff0e 	bl	80097de <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099c8:	f043 0210 	orr.w	r2, r3, #16
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099d2:	6978      	ldr	r0, [r7, #20]
 80099d4:	f7ff f9ae 	bl	8008d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099d8:	bf00      	nop
 80099da:	3718      	adds	r7, #24
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099fe:	68f8      	ldr	r0, [r7, #12]
 8009a00:	f7ff f998 	bl	8008d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a04:	bf00      	nop
 8009a06:	3710      	adds	r7, #16
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b088      	sub	sp, #32
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	e853 3f00 	ldrex	r3, [r3]
 8009a20:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a28:	61fb      	str	r3, [r7, #28]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	461a      	mov	r2, r3
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	61bb      	str	r3, [r7, #24]
 8009a34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a36:	6979      	ldr	r1, [r7, #20]
 8009a38:	69ba      	ldr	r2, [r7, #24]
 8009a3a:	e841 2300 	strex	r3, r2, [r1]
 8009a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d1e6      	bne.n	8009a14 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2220      	movs	r2, #32
 8009a4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f7f8 fbfb 	bl	8002250 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a5a:	bf00      	nop
 8009a5c:	3720      	adds	r7, #32
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
	...

08009a64 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b09c      	sub	sp, #112	@ 0x70
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009a72:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a7c:	2b22      	cmp	r3, #34	@ 0x22
 8009a7e:	f040 80be 	bne.w	8009bfe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a88:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009a8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009a90:	b2d9      	uxtb	r1, r3
 8009a92:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009a96:	b2da      	uxtb	r2, r3
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a9c:	400a      	ands	r2, r1
 8009a9e:	b2d2      	uxtb	r2, r2
 8009aa0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aa6:	1c5a      	adds	r2, r3, #1
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	b29a      	uxth	r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f040 80a1 	bne.w	8009c0e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ad4:	e853 3f00 	ldrex	r3, [r3]
 8009ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009ada:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009adc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ae0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009aea:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009aec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009af0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009af2:	e841 2300 	strex	r3, r2, [r1]
 8009af6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009af8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d1e6      	bne.n	8009acc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	3308      	adds	r3, #8
 8009b04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b08:	e853 3f00 	ldrex	r3, [r3]
 8009b0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b10:	f023 0301 	bic.w	r3, r3, #1
 8009b14:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	3308      	adds	r3, #8
 8009b1c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009b1e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009b20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b26:	e841 2300 	strex	r3, r2, [r1]
 8009b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d1e5      	bne.n	8009afe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2220      	movs	r2, #32
 8009b36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a33      	ldr	r2, [pc, #204]	@ (8009c18 <UART_RxISR_8BIT+0x1b4>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d01f      	beq.n	8009b90 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d018      	beq.n	8009b90 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b66:	e853 3f00 	ldrex	r3, [r3]
 8009b6a:	623b      	str	r3, [r7, #32]
   return(result);
 8009b6c:	6a3b      	ldr	r3, [r7, #32]
 8009b6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009b72:	663b      	str	r3, [r7, #96]	@ 0x60
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	461a      	mov	r2, r3
 8009b7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b84:	e841 2300 	strex	r3, r2, [r1]
 8009b88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d1e6      	bne.n	8009b5e <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d12e      	bne.n	8009bf6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	e853 3f00 	ldrex	r3, [r3]
 8009baa:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f023 0310 	bic.w	r3, r3, #16
 8009bb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	461a      	mov	r2, r3
 8009bba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009bbc:	61fb      	str	r3, [r7, #28]
 8009bbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc0:	69b9      	ldr	r1, [r7, #24]
 8009bc2:	69fa      	ldr	r2, [r7, #28]
 8009bc4:	e841 2300 	strex	r3, r2, [r1]
 8009bc8:	617b      	str	r3, [r7, #20]
   return(result);
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d1e6      	bne.n	8009b9e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	69db      	ldr	r3, [r3, #28]
 8009bd6:	f003 0310 	and.w	r3, r3, #16
 8009bda:	2b10      	cmp	r3, #16
 8009bdc:	d103      	bne.n	8009be6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2210      	movs	r2, #16
 8009be4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009bec:	4619      	mov	r1, r3
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f7ff f8aa 	bl	8008d48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009bf4:	e00b      	b.n	8009c0e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f7f8 fafc 	bl	80021f4 <HAL_UART_RxCpltCallback>
}
 8009bfc:	e007      	b.n	8009c0e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	699a      	ldr	r2, [r3, #24]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f042 0208 	orr.w	r2, r2, #8
 8009c0c:	619a      	str	r2, [r3, #24]
}
 8009c0e:	bf00      	nop
 8009c10:	3770      	adds	r7, #112	@ 0x70
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	40008000 	.word	0x40008000

08009c1c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b09c      	sub	sp, #112	@ 0x70
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009c2a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c34:	2b22      	cmp	r3, #34	@ 0x22
 8009c36:	f040 80be 	bne.w	8009db6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c40:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c48:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009c4a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009c4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009c52:	4013      	ands	r3, r2
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c58:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c5e:	1c9a      	adds	r2, r3, #2
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f040 80a1 	bne.w	8009dc6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c8c:	e853 3f00 	ldrex	r3, [r3]
 8009c90:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009c92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c98:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ca2:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ca4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009ca8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009caa:	e841 2300 	strex	r3, r2, [r1]
 8009cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009cb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d1e6      	bne.n	8009c84 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	3308      	adds	r3, #8
 8009cbc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cc0:	e853 3f00 	ldrex	r3, [r3]
 8009cc4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc8:	f023 0301 	bic.w	r3, r3, #1
 8009ccc:	663b      	str	r3, [r7, #96]	@ 0x60
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	3308      	adds	r3, #8
 8009cd4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009cd6:	643a      	str	r2, [r7, #64]	@ 0x40
 8009cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cda:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009cdc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009cde:	e841 2300 	strex	r3, r2, [r1]
 8009ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d1e5      	bne.n	8009cb6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2220      	movs	r2, #32
 8009cee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a33      	ldr	r2, [pc, #204]	@ (8009dd0 <UART_RxISR_16BIT+0x1b4>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d01f      	beq.n	8009d48 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d018      	beq.n	8009d48 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1c:	6a3b      	ldr	r3, [r7, #32]
 8009d1e:	e853 3f00 	ldrex	r3, [r3]
 8009d22:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009d2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	461a      	mov	r2, r3
 8009d32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d36:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d3c:	e841 2300 	strex	r3, r2, [r1]
 8009d40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d1e6      	bne.n	8009d16 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d12e      	bne.n	8009dae <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	e853 3f00 	ldrex	r3, [r3]
 8009d62:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	f023 0310 	bic.w	r3, r3, #16
 8009d6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	461a      	mov	r2, r3
 8009d72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009d74:	61bb      	str	r3, [r7, #24]
 8009d76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d78:	6979      	ldr	r1, [r7, #20]
 8009d7a:	69ba      	ldr	r2, [r7, #24]
 8009d7c:	e841 2300 	strex	r3, r2, [r1]
 8009d80:	613b      	str	r3, [r7, #16]
   return(result);
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d1e6      	bne.n	8009d56 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	69db      	ldr	r3, [r3, #28]
 8009d8e:	f003 0310 	and.w	r3, r3, #16
 8009d92:	2b10      	cmp	r3, #16
 8009d94:	d103      	bne.n	8009d9e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2210      	movs	r2, #16
 8009d9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009da4:	4619      	mov	r1, r3
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f7fe ffce 	bl	8008d48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009dac:	e00b      	b.n	8009dc6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7f8 fa20 	bl	80021f4 <HAL_UART_RxCpltCallback>
}
 8009db4:	e007      	b.n	8009dc6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	699a      	ldr	r2, [r3, #24]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f042 0208 	orr.w	r2, r2, #8
 8009dc4:	619a      	str	r2, [r3, #24]
}
 8009dc6:	bf00      	nop
 8009dc8:	3770      	adds	r7, #112	@ 0x70
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	40008000 	.word	0x40008000

08009dd4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b0ac      	sub	sp, #176	@ 0xb0
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009de2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	69db      	ldr	r3, [r3, #28]
 8009dec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e0a:	2b22      	cmp	r3, #34	@ 0x22
 8009e0c:	f040 8182 	bne.w	800a114 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009e16:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e1a:	e125      	b.n	800a068 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e22:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009e26:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009e2a:	b2d9      	uxtb	r1, r3
 8009e2c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009e30:	b2da      	uxtb	r2, r3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e36:	400a      	ands	r2, r1
 8009e38:	b2d2      	uxtb	r2, r2
 8009e3a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e40:	1c5a      	adds	r2, r3, #1
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	3b01      	subs	r3, #1
 8009e50:	b29a      	uxth	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	69db      	ldr	r3, [r3, #28]
 8009e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009e62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e66:	f003 0307 	and.w	r3, r3, #7
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d053      	beq.n	8009f16 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e72:	f003 0301 	and.w	r3, r3, #1
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d011      	beq.n	8009e9e <UART_RxISR_8BIT_FIFOEN+0xca>
 8009e7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d00b      	beq.n	8009e9e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e94:	f043 0201 	orr.w	r2, r3, #1
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ea2:	f003 0302 	and.w	r3, r3, #2
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d011      	beq.n	8009ece <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009eaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009eae:	f003 0301 	and.w	r3, r3, #1
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d00b      	beq.n	8009ece <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2202      	movs	r2, #2
 8009ebc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ec4:	f043 0204 	orr.w	r2, r3, #4
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ece:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ed2:	f003 0304 	and.w	r3, r3, #4
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d011      	beq.n	8009efe <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009eda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009ede:	f003 0301 	and.w	r3, r3, #1
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00b      	beq.n	8009efe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2204      	movs	r2, #4
 8009eec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ef4:	f043 0202 	orr.w	r2, r3, #2
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d006      	beq.n	8009f16 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f7fe ff13 	bl	8008d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f040 80a2 	bne.w	800a068 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f2c:	e853 3f00 	ldrex	r3, [r3]
 8009f30:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009f32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	461a      	mov	r2, r3
 8009f42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009f46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009f48:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f4a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009f4c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009f4e:	e841 2300 	strex	r3, r2, [r1]
 8009f52:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009f54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d1e4      	bne.n	8009f24 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	3308      	adds	r3, #8
 8009f60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f64:	e853 3f00 	ldrex	r3, [r3]
 8009f68:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009f6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f70:	f023 0301 	bic.w	r3, r3, #1
 8009f74:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	3308      	adds	r3, #8
 8009f7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009f82:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009f84:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f86:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009f88:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009f8a:	e841 2300 	strex	r3, r2, [r1]
 8009f8e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009f90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d1e1      	bne.n	8009f5a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2220      	movs	r2, #32
 8009f9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a5f      	ldr	r2, [pc, #380]	@ (800a12c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d021      	beq.n	8009ff8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d01a      	beq.n	8009ff8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fca:	e853 3f00 	ldrex	r3, [r3]
 8009fce:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fd2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009fd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	461a      	mov	r2, r3
 8009fe0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009fe4:	657b      	str	r3, [r7, #84]	@ 0x54
 8009fe6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009fea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009fec:	e841 2300 	strex	r3, r2, [r1]
 8009ff0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009ff2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1e4      	bne.n	8009fc2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d130      	bne.n	800a062 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a00e:	e853 3f00 	ldrex	r3, [r3]
 800a012:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a016:	f023 0310 	bic.w	r3, r3, #16
 800a01a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	461a      	mov	r2, r3
 800a024:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a028:	643b      	str	r3, [r7, #64]	@ 0x40
 800a02a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a02e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a030:	e841 2300 	strex	r3, r2, [r1]
 800a034:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d1e4      	bne.n	800a006 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	69db      	ldr	r3, [r3, #28]
 800a042:	f003 0310 	and.w	r3, r3, #16
 800a046:	2b10      	cmp	r3, #16
 800a048:	d103      	bne.n	800a052 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2210      	movs	r2, #16
 800a050:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a058:	4619      	mov	r1, r3
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f7fe fe74 	bl	8008d48 <HAL_UARTEx_RxEventCallback>
 800a060:	e002      	b.n	800a068 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f7f8 f8c6 	bl	80021f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a068:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d006      	beq.n	800a07e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800a070:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a074:	f003 0320 	and.w	r3, r3, #32
 800a078:	2b00      	cmp	r3, #0
 800a07a:	f47f aecf 	bne.w	8009e1c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a084:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a088:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d049      	beq.n	800a124 <UART_RxISR_8BIT_FIFOEN+0x350>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a096:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d242      	bcs.n	800a124 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	3308      	adds	r3, #8
 800a0a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a6:	6a3b      	ldr	r3, [r7, #32]
 800a0a8:	e853 3f00 	ldrex	r3, [r3]
 800a0ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0ae:	69fb      	ldr	r3, [r7, #28]
 800a0b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a0b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	3308      	adds	r3, #8
 800a0be:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a0c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a0c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a0c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0ca:	e841 2300 	strex	r3, r2, [r1]
 800a0ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d1e3      	bne.n	800a09e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	4a15      	ldr	r2, [pc, #84]	@ (800a130 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a0da:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	e853 3f00 	ldrex	r3, [r3]
 800a0e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	f043 0320 	orr.w	r3, r3, #32
 800a0f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a0fe:	61bb      	str	r3, [r7, #24]
 800a100:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a102:	6979      	ldr	r1, [r7, #20]
 800a104:	69ba      	ldr	r2, [r7, #24]
 800a106:	e841 2300 	strex	r3, r2, [r1]
 800a10a:	613b      	str	r3, [r7, #16]
   return(result);
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d1e4      	bne.n	800a0dc <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a112:	e007      	b.n	800a124 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	699a      	ldr	r2, [r3, #24]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f042 0208 	orr.w	r2, r2, #8
 800a122:	619a      	str	r2, [r3, #24]
}
 800a124:	bf00      	nop
 800a126:	37b0      	adds	r7, #176	@ 0xb0
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	40008000 	.word	0x40008000
 800a130:	08009a65 	.word	0x08009a65

0800a134 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b0ae      	sub	sp, #184	@ 0xb8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a142:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	69db      	ldr	r3, [r3, #28]
 800a14c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a16a:	2b22      	cmp	r3, #34	@ 0x22
 800a16c:	f040 8186 	bne.w	800a47c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a176:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a17a:	e129      	b.n	800a3d0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a182:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a18a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a18e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800a192:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800a196:	4013      	ands	r3, r2
 800a198:	b29a      	uxth	r2, r3
 800a19a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a19e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1a4:	1c9a      	adds	r2, r3, #2
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	3b01      	subs	r3, #1
 800a1b4:	b29a      	uxth	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	69db      	ldr	r3, [r3, #28]
 800a1c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a1c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a1ca:	f003 0307 	and.w	r3, r3, #7
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d053      	beq.n	800a27a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a1d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a1d6:	f003 0301 	and.w	r3, r3, #1
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d011      	beq.n	800a202 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a1de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00b      	beq.n	800a202 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1f8:	f043 0201 	orr.w	r2, r3, #1
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a202:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a206:	f003 0302 	and.w	r3, r3, #2
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d011      	beq.n	800a232 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a20e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a212:	f003 0301 	and.w	r3, r3, #1
 800a216:	2b00      	cmp	r3, #0
 800a218:	d00b      	beq.n	800a232 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2202      	movs	r2, #2
 800a220:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a228:	f043 0204 	orr.w	r2, r3, #4
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a232:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a236:	f003 0304 	and.w	r3, r3, #4
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d011      	beq.n	800a262 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a23e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a242:	f003 0301 	and.w	r3, r3, #1
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00b      	beq.n	800a262 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2204      	movs	r2, #4
 800a250:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a258:	f043 0202 	orr.w	r2, r3, #2
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d006      	beq.n	800a27a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f7fe fd61 	bl	8008d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a280:	b29b      	uxth	r3, r3
 800a282:	2b00      	cmp	r3, #0
 800a284:	f040 80a4 	bne.w	800a3d0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a28e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a290:	e853 3f00 	ldrex	r3, [r3]
 800a294:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a296:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a298:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a29c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a2aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a2ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a2b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a2b6:	e841 2300 	strex	r3, r2, [r1]
 800a2ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a2bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d1e2      	bne.n	800a288 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	3308      	adds	r3, #8
 800a2c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a2cc:	e853 3f00 	ldrex	r3, [r3]
 800a2d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a2d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a2d8:	f023 0301 	bic.w	r3, r3, #1
 800a2dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	3308      	adds	r3, #8
 800a2e6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a2ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a2ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a2f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a2f2:	e841 2300 	strex	r3, r2, [r1]
 800a2f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a2f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d1e1      	bne.n	800a2c2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2220      	movs	r2, #32
 800a302:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a5f      	ldr	r2, [pc, #380]	@ (800a494 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d021      	beq.n	800a360 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a326:	2b00      	cmp	r3, #0
 800a328:	d01a      	beq.n	800a360 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a330:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a332:	e853 3f00 	ldrex	r3, [r3]
 800a336:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a338:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a33a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a33e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	461a      	mov	r2, r3
 800a348:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a34c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a34e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a350:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a352:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a354:	e841 2300 	strex	r3, r2, [r1]
 800a358:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a35a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d1e4      	bne.n	800a32a <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a364:	2b01      	cmp	r3, #1
 800a366:	d130      	bne.n	800a3ca <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a376:	e853 3f00 	ldrex	r3, [r3]
 800a37a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a37c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a37e:	f023 0310 	bic.w	r3, r3, #16
 800a382:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	461a      	mov	r2, r3
 800a38c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a390:	647b      	str	r3, [r7, #68]	@ 0x44
 800a392:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a394:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a396:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a398:	e841 2300 	strex	r3, r2, [r1]
 800a39c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a39e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d1e4      	bne.n	800a36e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	69db      	ldr	r3, [r3, #28]
 800a3aa:	f003 0310 	and.w	r3, r3, #16
 800a3ae:	2b10      	cmp	r3, #16
 800a3b0:	d103      	bne.n	800a3ba <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2210      	movs	r2, #16
 800a3b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f7fe fcc0 	bl	8008d48 <HAL_UARTEx_RxEventCallback>
 800a3c8:	e002      	b.n	800a3d0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f7f7 ff12 	bl	80021f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a3d0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d006      	beq.n	800a3e6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800a3d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a3dc:	f003 0320 	and.w	r3, r3, #32
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	f47f aecb 	bne.w	800a17c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a3ec:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a3f0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d049      	beq.n	800a48c <UART_RxISR_16BIT_FIFOEN+0x358>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a3fe:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a402:	429a      	cmp	r2, r3
 800a404:	d242      	bcs.n	800a48c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	3308      	adds	r3, #8
 800a40c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a410:	e853 3f00 	ldrex	r3, [r3]
 800a414:	623b      	str	r3, [r7, #32]
   return(result);
 800a416:	6a3b      	ldr	r3, [r7, #32]
 800a418:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a41c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	3308      	adds	r3, #8
 800a426:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a42a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a42c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a430:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a432:	e841 2300 	strex	r3, r2, [r1]
 800a436:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d1e3      	bne.n	800a406 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a15      	ldr	r2, [pc, #84]	@ (800a498 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a442:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	e853 3f00 	ldrex	r3, [r3]
 800a450:	60fb      	str	r3, [r7, #12]
   return(result);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f043 0320 	orr.w	r3, r3, #32
 800a458:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	461a      	mov	r2, r3
 800a462:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a466:	61fb      	str	r3, [r7, #28]
 800a468:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46a:	69b9      	ldr	r1, [r7, #24]
 800a46c:	69fa      	ldr	r2, [r7, #28]
 800a46e:	e841 2300 	strex	r3, r2, [r1]
 800a472:	617b      	str	r3, [r7, #20]
   return(result);
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d1e4      	bne.n	800a444 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a47a:	e007      	b.n	800a48c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	699a      	ldr	r2, [r3, #24]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f042 0208 	orr.w	r2, r2, #8
 800a48a:	619a      	str	r2, [r3, #24]
}
 800a48c:	bf00      	nop
 800a48e:	37b8      	adds	r7, #184	@ 0xb8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	40008000 	.word	0x40008000
 800a498:	08009c1d 	.word	0x08009c1d

0800a49c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b083      	sub	sp, #12
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a4a4:	bf00      	nop
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a4b8:	bf00      	nop
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d101      	bne.n	800a4ee <HAL_UARTEx_DisableFifoMode+0x16>
 800a4ea:	2302      	movs	r3, #2
 800a4ec:	e027      	b.n	800a53e <HAL_UARTEx_DisableFifoMode+0x66>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2224      	movs	r2, #36	@ 0x24
 800a4fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f022 0201 	bic.w	r2, r2, #1
 800a514:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a51c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2220      	movs	r2, #32
 800a530:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3714      	adds	r7, #20
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr

0800a54a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b084      	sub	sp, #16
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
 800a552:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d101      	bne.n	800a562 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a55e:	2302      	movs	r3, #2
 800a560:	e02d      	b.n	800a5be <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2201      	movs	r2, #1
 800a566:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2224      	movs	r2, #36	@ 0x24
 800a56e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f022 0201 	bic.w	r2, r2, #1
 800a588:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	683a      	ldr	r2, [r7, #0]
 800a59a:	430a      	orrs	r2, r1
 800a59c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 f850 	bl	800a644 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2220      	movs	r2, #32
 800a5b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5bc:	2300      	movs	r3, #0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b084      	sub	sp, #16
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
 800a5ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d101      	bne.n	800a5de <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a5da:	2302      	movs	r3, #2
 800a5dc:	e02d      	b.n	800a63a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2224      	movs	r2, #36	@ 0x24
 800a5ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f022 0201 	bic.w	r2, r2, #1
 800a604:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	683a      	ldr	r2, [r7, #0]
 800a616:	430a      	orrs	r2, r1
 800a618:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 f812 	bl	800a644 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2220      	movs	r2, #32
 800a62c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
	...

0800a644 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a650:	2b00      	cmp	r3, #0
 800a652:	d108      	bne.n	800a666 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a664:	e031      	b.n	800a6ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a666:	2308      	movs	r3, #8
 800a668:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a66a:	2308      	movs	r3, #8
 800a66c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	0e5b      	lsrs	r3, r3, #25
 800a676:	b2db      	uxtb	r3, r3
 800a678:	f003 0307 	and.w	r3, r3, #7
 800a67c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	0f5b      	lsrs	r3, r3, #29
 800a686:	b2db      	uxtb	r3, r3
 800a688:	f003 0307 	and.w	r3, r3, #7
 800a68c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a68e:	7bbb      	ldrb	r3, [r7, #14]
 800a690:	7b3a      	ldrb	r2, [r7, #12]
 800a692:	4911      	ldr	r1, [pc, #68]	@ (800a6d8 <UARTEx_SetNbDataToProcess+0x94>)
 800a694:	5c8a      	ldrb	r2, [r1, r2]
 800a696:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a69a:	7b3a      	ldrb	r2, [r7, #12]
 800a69c:	490f      	ldr	r1, [pc, #60]	@ (800a6dc <UARTEx_SetNbDataToProcess+0x98>)
 800a69e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6a4:	b29a      	uxth	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6ac:	7bfb      	ldrb	r3, [r7, #15]
 800a6ae:	7b7a      	ldrb	r2, [r7, #13]
 800a6b0:	4909      	ldr	r1, [pc, #36]	@ (800a6d8 <UARTEx_SetNbDataToProcess+0x94>)
 800a6b2:	5c8a      	ldrb	r2, [r1, r2]
 800a6b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a6b8:	7b7a      	ldrb	r2, [r7, #13]
 800a6ba:	4908      	ldr	r1, [pc, #32]	@ (800a6dc <UARTEx_SetNbDataToProcess+0x98>)
 800a6bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6be:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6c2:	b29a      	uxth	r2, r3
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a6ca:	bf00      	nop
 800a6cc:	3714      	adds	r7, #20
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr
 800a6d6:	bf00      	nop
 800a6d8:	080167e0 	.word	0x080167e0
 800a6dc:	080167e8 	.word	0x080167e8

0800a6e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b085      	sub	sp, #20
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a6f0:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800a6f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	b29a      	uxth	r2, r3
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3714      	adds	r7, #20
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a70e:	b480      	push	{r7}
 800a710:	b085      	sub	sp, #20
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a716:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800a71a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a722:	b29a      	uxth	r2, r3
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	b29b      	uxth	r3, r3
 800a728:	43db      	mvns	r3, r3
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	4013      	ands	r3, r2
 800a72e:	b29a      	uxth	r2, r3
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a736:	2300      	movs	r3, #0
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3714      	adds	r7, #20
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a744:	b084      	sub	sp, #16
 800a746:	b480      	push	{r7}
 800a748:	b083      	sub	sp, #12
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
 800a74e:	f107 0014 	add.w	r0, r7, #20
 800a752:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2201      	movs	r2, #1
 800a75a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2200      	movs	r2, #0
 800a762:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2200      	movs	r2, #0
 800a76a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	b004      	add	sp, #16
 800a784:	4770      	bx	lr
	...

0800a788 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a788:	b480      	push	{r7}
 800a78a:	b09d      	sub	sp, #116	@ 0x74
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a792:	2300      	movs	r3, #0
 800a794:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	4413      	add	r3, r2
 800a7a2:	881b      	ldrh	r3, [r3, #0]
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800a7aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7ae:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	78db      	ldrb	r3, [r3, #3]
 800a7b6:	2b03      	cmp	r3, #3
 800a7b8:	d81f      	bhi.n	800a7fa <USB_ActivateEndpoint+0x72>
 800a7ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a7c0 <USB_ActivateEndpoint+0x38>)
 800a7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c0:	0800a7d1 	.word	0x0800a7d1
 800a7c4:	0800a7ed 	.word	0x0800a7ed
 800a7c8:	0800a803 	.word	0x0800a803
 800a7cc:	0800a7df 	.word	0x0800a7df
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a7d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a7d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a7d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a7dc:	e012      	b.n	800a804 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a7de:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a7e2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800a7e6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a7ea:	e00b      	b.n	800a804 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a7ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a7f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a7f4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a7f8:	e004      	b.n	800a804 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800a800:	e000      	b.n	800a804 <USB_ActivateEndpoint+0x7c>
      break;
 800a802:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	441a      	add	r2, r3
 800a80e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a812:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a816:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a81a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a81e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a822:	b29b      	uxth	r3, r3
 800a824:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	4413      	add	r3, r2
 800a830:	881b      	ldrh	r3, [r3, #0]
 800a832:	b29b      	uxth	r3, r3
 800a834:	b21b      	sxth	r3, r3
 800a836:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a83a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a83e:	b21a      	sxth	r2, r3
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	b21b      	sxth	r3, r3
 800a846:	4313      	orrs	r3, r2
 800a848:	b21b      	sxth	r3, r3
 800a84a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	441a      	add	r2, r3
 800a858:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800a85c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a860:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a864:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	7b1b      	ldrb	r3, [r3, #12]
 800a874:	2b00      	cmp	r3, #0
 800a876:	f040 8178 	bne.w	800ab6a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	785b      	ldrb	r3, [r3, #1]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	f000 8084 	beq.w	800a98c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	61bb      	str	r3, [r7, #24]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a88e:	b29b      	uxth	r3, r3
 800a890:	461a      	mov	r2, r3
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	4413      	add	r3, r2
 800a896:	61bb      	str	r3, [r7, #24]
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	00da      	lsls	r2, r3, #3
 800a89e:	69bb      	ldr	r3, [r7, #24]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a8a6:	617b      	str	r3, [r7, #20]
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	88db      	ldrh	r3, [r3, #6]
 800a8ac:	085b      	lsrs	r3, r3, #1
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	005b      	lsls	r3, r3, #1
 800a8b2:	b29a      	uxth	r2, r3
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	4413      	add	r3, r2
 800a8c2:	881b      	ldrh	r3, [r3, #0]
 800a8c4:	827b      	strh	r3, [r7, #18]
 800a8c6:	8a7b      	ldrh	r3, [r7, #18]
 800a8c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d01b      	beq.n	800a908 <USB_ActivateEndpoint+0x180>
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	4413      	add	r3, r2
 800a8da:	881b      	ldrh	r3, [r3, #0]
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8e6:	823b      	strh	r3, [r7, #16]
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	441a      	add	r2, r3
 800a8f2:	8a3b      	ldrh	r3, [r7, #16]
 800a8f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a900:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a904:	b29b      	uxth	r3, r3
 800a906:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	78db      	ldrb	r3, [r3, #3]
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d020      	beq.n	800a952 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	4413      	add	r3, r2
 800a91a:	881b      	ldrh	r3, [r3, #0]
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a922:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a926:	81bb      	strh	r3, [r7, #12]
 800a928:	89bb      	ldrh	r3, [r7, #12]
 800a92a:	f083 0320 	eor.w	r3, r3, #32
 800a92e:	81bb      	strh	r3, [r7, #12]
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	441a      	add	r2, r3
 800a93a:	89bb      	ldrh	r3, [r7, #12]
 800a93c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a940:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	8013      	strh	r3, [r2, #0]
 800a950:	e2d5      	b.n	800aefe <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	4413      	add	r3, r2
 800a95c:	881b      	ldrh	r3, [r3, #0]
 800a95e:	b29b      	uxth	r3, r3
 800a960:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a964:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a968:	81fb      	strh	r3, [r7, #14]
 800a96a:	687a      	ldr	r2, [r7, #4]
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	441a      	add	r2, r3
 800a974:	89fb      	ldrh	r3, [r7, #14]
 800a976:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a97a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a97e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a986:	b29b      	uxth	r3, r3
 800a988:	8013      	strh	r3, [r2, #0]
 800a98a:	e2b8      	b.n	800aefe <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a996:	b29b      	uxth	r3, r3
 800a998:	461a      	mov	r2, r3
 800a99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a99c:	4413      	add	r3, r2
 800a99e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	00da      	lsls	r2, r3, #3
 800a9a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9a8:	4413      	add	r3, r2
 800a9aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a9ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	88db      	ldrh	r3, [r3, #6]
 800a9b4:	085b      	lsrs	r3, r3, #1
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	005b      	lsls	r3, r3, #1
 800a9ba:	b29a      	uxth	r2, r3
 800a9bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9be:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9d0:	4413      	add	r3, r2
 800a9d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	00da      	lsls	r2, r3, #3
 800a9da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9dc:	4413      	add	r3, r2
 800a9de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a9e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e6:	881b      	ldrh	r3, [r3, #0]
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9ee:	b29a      	uxth	r2, r3
 800a9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f2:	801a      	strh	r2, [r3, #0]
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	691b      	ldr	r3, [r3, #16]
 800a9f8:	2b3e      	cmp	r3, #62	@ 0x3e
 800a9fa:	d91d      	bls.n	800aa38 <USB_ActivateEndpoint+0x2b0>
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	691b      	ldr	r3, [r3, #16]
 800aa00:	095b      	lsrs	r3, r3, #5
 800aa02:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	691b      	ldr	r3, [r3, #16]
 800aa08:	f003 031f 	and.w	r3, r3, #31
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d102      	bne.n	800aa16 <USB_ActivateEndpoint+0x28e>
 800aa10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa12:	3b01      	subs	r3, #1
 800aa14:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa18:	881b      	ldrh	r3, [r3, #0]
 800aa1a:	b29a      	uxth	r2, r3
 800aa1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	029b      	lsls	r3, r3, #10
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	4313      	orrs	r3, r2
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa30:	b29a      	uxth	r2, r3
 800aa32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa34:	801a      	strh	r2, [r3, #0]
 800aa36:	e026      	b.n	800aa86 <USB_ActivateEndpoint+0x2fe>
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	691b      	ldr	r3, [r3, #16]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d10a      	bne.n	800aa56 <USB_ActivateEndpoint+0x2ce>
 800aa40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa42:	881b      	ldrh	r3, [r3, #0]
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa4e:	b29a      	uxth	r2, r3
 800aa50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa52:	801a      	strh	r2, [r3, #0]
 800aa54:	e017      	b.n	800aa86 <USB_ActivateEndpoint+0x2fe>
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	085b      	lsrs	r3, r3, #1
 800aa5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	691b      	ldr	r3, [r3, #16]
 800aa62:	f003 0301 	and.w	r3, r3, #1
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d002      	beq.n	800aa70 <USB_ActivateEndpoint+0x2e8>
 800aa6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa72:	881b      	ldrh	r3, [r3, #0]
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	029b      	lsls	r3, r3, #10
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	b29a      	uxth	r2, r3
 800aa82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa84:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	4413      	add	r3, r2
 800aa90:	881b      	ldrh	r3, [r3, #0]
 800aa92:	847b      	strh	r3, [r7, #34]	@ 0x22
 800aa94:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800aa96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d01b      	beq.n	800aad6 <USB_ActivateEndpoint+0x34e>
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	4413      	add	r3, r2
 800aaa8:	881b      	ldrh	r3, [r3, #0]
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aab0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aab4:	843b      	strh	r3, [r7, #32]
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	441a      	add	r2, r3
 800aac0:	8c3b      	ldrh	r3, [r7, #32]
 800aac2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aac6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aaca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800aace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d124      	bne.n	800ab28 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	4413      	add	r3, r2
 800aae8:	881b      	ldrh	r3, [r3, #0]
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aaf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aaf4:	83bb      	strh	r3, [r7, #28]
 800aaf6:	8bbb      	ldrh	r3, [r7, #28]
 800aaf8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aafc:	83bb      	strh	r3, [r7, #28]
 800aafe:	8bbb      	ldrh	r3, [r7, #28]
 800ab00:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ab04:	83bb      	strh	r3, [r7, #28]
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	441a      	add	r2, r3
 800ab10:	8bbb      	ldrh	r3, [r7, #28]
 800ab12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	8013      	strh	r3, [r2, #0]
 800ab26:	e1ea      	b.n	800aefe <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	4413      	add	r3, r2
 800ab32:	881b      	ldrh	r3, [r3, #0]
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab3e:	83fb      	strh	r3, [r7, #30]
 800ab40:	8bfb      	ldrh	r3, [r7, #30]
 800ab42:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ab46:	83fb      	strh	r3, [r7, #30]
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	441a      	add	r2, r3
 800ab52:	8bfb      	ldrh	r3, [r7, #30]
 800ab54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	8013      	strh	r3, [r2, #0]
 800ab68:	e1c9      	b.n	800aefe <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	78db      	ldrb	r3, [r3, #3]
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	d11e      	bne.n	800abb0 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	4413      	add	r3, r2
 800ab7c:	881b      	ldrh	r3, [r3, #0]
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab88:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	441a      	add	r2, r3
 800ab96:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800ab9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aba2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800aba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abaa:	b29b      	uxth	r3, r3
 800abac:	8013      	strh	r3, [r2, #0]
 800abae:	e01d      	b.n	800abec <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	4413      	add	r3, r2
 800abba:	881b      	ldrh	r3, [r3, #0]
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800abc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abc6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	441a      	add	r2, r3
 800abd4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800abd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abe0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abe4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abe8:	b29b      	uxth	r3, r3
 800abea:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	461a      	mov	r2, r3
 800abfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800abfc:	4413      	add	r3, r2
 800abfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	00da      	lsls	r2, r3, #3
 800ac06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac08:	4413      	add	r3, r2
 800ac0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	891b      	ldrh	r3, [r3, #8]
 800ac14:	085b      	lsrs	r3, r3, #1
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	005b      	lsls	r3, r3, #1
 800ac1a:	b29a      	uxth	r2, r3
 800ac1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac1e:	801a      	strh	r2, [r3, #0]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	657b      	str	r3, [r7, #84]	@ 0x54
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac30:	4413      	add	r3, r2
 800ac32:	657b      	str	r3, [r7, #84]	@ 0x54
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	00da      	lsls	r2, r3, #3
 800ac3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac3c:	4413      	add	r3, r2
 800ac3e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ac42:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	895b      	ldrh	r3, [r3, #10]
 800ac48:	085b      	lsrs	r3, r3, #1
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	005b      	lsls	r3, r3, #1
 800ac4e:	b29a      	uxth	r2, r3
 800ac50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac52:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	785b      	ldrb	r3, [r3, #1]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	f040 8093 	bne.w	800ad84 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	4413      	add	r3, r2
 800ac68:	881b      	ldrh	r3, [r3, #0]
 800ac6a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800ac6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ac72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d01b      	beq.n	800acb2 <USB_ActivateEndpoint+0x52a>
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	4413      	add	r3, r2
 800ac84:	881b      	ldrh	r3, [r3, #0]
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac90:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	441a      	add	r2, r3
 800ac9c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ac9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aca2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aca6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800acaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acae:	b29b      	uxth	r3, r3
 800acb0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	4413      	add	r3, r2
 800acbc:	881b      	ldrh	r3, [r3, #0]
 800acbe:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800acc0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800acc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d01b      	beq.n	800ad02 <USB_ActivateEndpoint+0x57a>
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	4413      	add	r3, r2
 800acd4:	881b      	ldrh	r3, [r3, #0]
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ace0:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	441a      	add	r2, r3
 800acec:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800acee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800acf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800acf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800acfa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	4413      	add	r3, r2
 800ad0c:	881b      	ldrh	r3, [r3, #0]
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ad14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad18:	873b      	strh	r3, [r7, #56]	@ 0x38
 800ad1a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ad1c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ad20:	873b      	strh	r3, [r7, #56]	@ 0x38
 800ad22:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ad24:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ad28:	873b      	strh	r3, [r7, #56]	@ 0x38
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	441a      	add	r2, r3
 800ad34:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ad36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	4413      	add	r3, r2
 800ad54:	881b      	ldrh	r3, [r3, #0]
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad60:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	441a      	add	r2, r3
 800ad6c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ad6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	8013      	strh	r3, [r2, #0]
 800ad82:	e0bc      	b.n	800aefe <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	4413      	add	r3, r2
 800ad8e:	881b      	ldrh	r3, [r3, #0]
 800ad90:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800ad94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ad98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d01d      	beq.n	800addc <USB_ActivateEndpoint+0x654>
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	4413      	add	r3, r2
 800adaa:	881b      	ldrh	r3, [r3, #0]
 800adac:	b29b      	uxth	r3, r3
 800adae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800adb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adb6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	441a      	add	r2, r3
 800adc4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800adc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800adcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800add0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800add4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800add8:	b29b      	uxth	r3, r3
 800adda:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	4413      	add	r3, r2
 800ade6:	881b      	ldrh	r3, [r3, #0]
 800ade8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800adec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800adf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d01d      	beq.n	800ae34 <USB_ActivateEndpoint+0x6ac>
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	4413      	add	r3, r2
 800ae02:	881b      	ldrh	r3, [r3, #0]
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae0e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	441a      	add	r2, r3
 800ae1c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800ae20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae2c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	78db      	ldrb	r3, [r3, #3]
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d024      	beq.n	800ae86 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	4413      	add	r3, r2
 800ae46:	881b      	ldrh	r3, [r3, #0]
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae52:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800ae56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ae5a:	f083 0320 	eor.w	r3, r3, #32
 800ae5e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	009b      	lsls	r3, r3, #2
 800ae6a:	441a      	add	r2, r3
 800ae6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ae70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	8013      	strh	r3, [r2, #0]
 800ae84:	e01d      	b.n	800aec2 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	4413      	add	r3, r2
 800ae90:	881b      	ldrh	r3, [r3, #0]
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae9c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	009b      	lsls	r3, r3, #2
 800aea8:	441a      	add	r2, r3
 800aeaa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800aeae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aeb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aeb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aeba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	4413      	add	r3, r2
 800aecc:	881b      	ldrh	r3, [r3, #0]
 800aece:	b29b      	uxth	r3, r3
 800aed0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aed4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aed8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	441a      	add	r2, r3
 800aee6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800aeea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aeee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aef2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aef6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800aefe:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800af02:	4618      	mov	r0, r3
 800af04:	3774      	adds	r7, #116	@ 0x74
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr
 800af0e:	bf00      	nop

0800af10 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800af10:	b480      	push	{r7}
 800af12:	b08d      	sub	sp, #52	@ 0x34
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	7b1b      	ldrb	r3, [r3, #12]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f040 808e 	bne.w	800b040 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	785b      	ldrb	r3, [r3, #1]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d044      	beq.n	800afb6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4413      	add	r3, r2
 800af36:	881b      	ldrh	r3, [r3, #0]
 800af38:	81bb      	strh	r3, [r7, #12]
 800af3a:	89bb      	ldrh	r3, [r7, #12]
 800af3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af40:	2b00      	cmp	r3, #0
 800af42:	d01b      	beq.n	800af7c <USB_DeactivateEndpoint+0x6c>
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	4413      	add	r3, r2
 800af4e:	881b      	ldrh	r3, [r3, #0]
 800af50:	b29b      	uxth	r3, r3
 800af52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af5a:	817b      	strh	r3, [r7, #10]
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	441a      	add	r2, r3
 800af66:	897b      	ldrh	r3, [r7, #10]
 800af68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af74:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800af78:	b29b      	uxth	r3, r3
 800af7a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	4413      	add	r3, r2
 800af86:	881b      	ldrh	r3, [r3, #0]
 800af88:	b29b      	uxth	r3, r3
 800af8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af92:	813b      	strh	r3, [r7, #8]
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	441a      	add	r2, r3
 800af9e:	893b      	ldrh	r3, [r7, #8]
 800afa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800afac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	8013      	strh	r3, [r2, #0]
 800afb4:	e192      	b.n	800b2dc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800afb6:	687a      	ldr	r2, [r7, #4]
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	4413      	add	r3, r2
 800afc0:	881b      	ldrh	r3, [r3, #0]
 800afc2:	827b      	strh	r3, [r7, #18]
 800afc4:	8a7b      	ldrh	r3, [r7, #18]
 800afc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d01b      	beq.n	800b006 <USB_DeactivateEndpoint+0xf6>
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	4413      	add	r3, r2
 800afd8:	881b      	ldrh	r3, [r3, #0]
 800afda:	b29b      	uxth	r3, r3
 800afdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800afe0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afe4:	823b      	strh	r3, [r7, #16]
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	441a      	add	r2, r3
 800aff0:	8a3b      	ldrh	r3, [r7, #16]
 800aff2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aff6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800affa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800affe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b002:	b29b      	uxth	r3, r3
 800b004:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	4413      	add	r3, r2
 800b010:	881b      	ldrh	r3, [r3, #0]
 800b012:	b29b      	uxth	r3, r3
 800b014:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b018:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b01c:	81fb      	strh	r3, [r7, #14]
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	441a      	add	r2, r3
 800b028:	89fb      	ldrh	r3, [r7, #14]
 800b02a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b02e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b032:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	8013      	strh	r3, [r2, #0]
 800b03e:	e14d      	b.n	800b2dc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	785b      	ldrb	r3, [r3, #1]
 800b044:	2b00      	cmp	r3, #0
 800b046:	f040 80a5 	bne.w	800b194 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	4413      	add	r3, r2
 800b054:	881b      	ldrh	r3, [r3, #0]
 800b056:	843b      	strh	r3, [r7, #32]
 800b058:	8c3b      	ldrh	r3, [r7, #32]
 800b05a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d01b      	beq.n	800b09a <USB_DeactivateEndpoint+0x18a>
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	4413      	add	r3, r2
 800b06c:	881b      	ldrh	r3, [r3, #0]
 800b06e:	b29b      	uxth	r3, r3
 800b070:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b078:	83fb      	strh	r3, [r7, #30]
 800b07a:	687a      	ldr	r2, [r7, #4]
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	441a      	add	r2, r3
 800b084:	8bfb      	ldrh	r3, [r7, #30]
 800b086:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b08a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b08e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b096:	b29b      	uxth	r3, r3
 800b098:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	4413      	add	r3, r2
 800b0a4:	881b      	ldrh	r3, [r3, #0]
 800b0a6:	83bb      	strh	r3, [r7, #28]
 800b0a8:	8bbb      	ldrh	r3, [r7, #28]
 800b0aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d01b      	beq.n	800b0ea <USB_DeactivateEndpoint+0x1da>
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	4413      	add	r3, r2
 800b0bc:	881b      	ldrh	r3, [r3, #0]
 800b0be:	b29b      	uxth	r3, r3
 800b0c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0c8:	837b      	strh	r3, [r7, #26]
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	441a      	add	r2, r3
 800b0d4:	8b7b      	ldrh	r3, [r7, #26]
 800b0d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b0e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	4413      	add	r3, r2
 800b0f4:	881b      	ldrh	r3, [r3, #0]
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b100:	833b      	strh	r3, [r7, #24]
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	441a      	add	r2, r3
 800b10c:	8b3b      	ldrh	r3, [r7, #24]
 800b10e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b112:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b116:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b11a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b11e:	b29b      	uxth	r3, r3
 800b120:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	4413      	add	r3, r2
 800b12c:	881b      	ldrh	r3, [r3, #0]
 800b12e:	b29b      	uxth	r3, r3
 800b130:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b134:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b138:	82fb      	strh	r3, [r7, #22]
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	441a      	add	r2, r3
 800b144:	8afb      	ldrh	r3, [r7, #22]
 800b146:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b14a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b14e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b156:	b29b      	uxth	r3, r3
 800b158:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	4413      	add	r3, r2
 800b164:	881b      	ldrh	r3, [r3, #0]
 800b166:	b29b      	uxth	r3, r3
 800b168:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b16c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b170:	82bb      	strh	r3, [r7, #20]
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	441a      	add	r2, r3
 800b17c:	8abb      	ldrh	r3, [r7, #20]
 800b17e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b182:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b186:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b18a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b18e:	b29b      	uxth	r3, r3
 800b190:	8013      	strh	r3, [r2, #0]
 800b192:	e0a3      	b.n	800b2dc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	4413      	add	r3, r2
 800b19e:	881b      	ldrh	r3, [r3, #0]
 800b1a0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800b1a2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b1a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d01b      	beq.n	800b1e4 <USB_DeactivateEndpoint+0x2d4>
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	781b      	ldrb	r3, [r3, #0]
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	4413      	add	r3, r2
 800b1b6:	881b      	ldrh	r3, [r3, #0]
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b1be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1c2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	441a      	add	r2, r3
 800b1ce:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b1d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b1d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b1d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b1dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	4413      	add	r3, r2
 800b1ee:	881b      	ldrh	r3, [r3, #0]
 800b1f0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800b1f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b1f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d01b      	beq.n	800b234 <USB_DeactivateEndpoint+0x324>
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	4413      	add	r3, r2
 800b206:	881b      	ldrh	r3, [r3, #0]
 800b208:	b29b      	uxth	r3, r3
 800b20a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b20e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b212:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	441a      	add	r2, r3
 800b21e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b220:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b224:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b228:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b22c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b230:	b29b      	uxth	r3, r3
 800b232:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	009b      	lsls	r3, r3, #2
 800b23c:	4413      	add	r3, r2
 800b23e:	881b      	ldrh	r3, [r3, #0]
 800b240:	b29b      	uxth	r3, r3
 800b242:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b24a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	781b      	ldrb	r3, [r3, #0]
 800b252:	009b      	lsls	r3, r3, #2
 800b254:	441a      	add	r2, r3
 800b256:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b258:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b25c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b260:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b268:	b29b      	uxth	r3, r3
 800b26a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	4413      	add	r3, r2
 800b276:	881b      	ldrh	r3, [r3, #0]
 800b278:	b29b      	uxth	r3, r3
 800b27a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b27e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b282:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	441a      	add	r2, r3
 800b28e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b290:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b294:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b298:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b29c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	4413      	add	r3, r2
 800b2ae:	881b      	ldrh	r3, [r3, #0]
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b2b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2ba:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	009b      	lsls	r3, r3, #2
 800b2c4:	441a      	add	r2, r3
 800b2c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b2c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b2cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b2d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b2dc:	2300      	movs	r3, #0
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3734      	adds	r7, #52	@ 0x34
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e8:	4770      	bx	lr

0800b2ea <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b0c2      	sub	sp, #264	@ 0x108
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b2f8:	6018      	str	r0, [r3, #0]
 800b2fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b302:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	785b      	ldrb	r3, [r3, #1]
 800b310:	2b01      	cmp	r3, #1
 800b312:	f040 86b7 	bne.w	800c084 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b31a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	699a      	ldr	r2, [r3, #24]
 800b322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b326:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	691b      	ldr	r3, [r3, #16]
 800b32e:	429a      	cmp	r2, r3
 800b330:	d908      	bls.n	800b344 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b336:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b342:	e007      	b.n	800b354 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	699b      	ldr	r3, [r3, #24]
 800b350:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	7b1b      	ldrb	r3, [r3, #12]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d13a      	bne.n	800b3da <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	6959      	ldr	r1, [r3, #20]
 800b370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b374:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	88da      	ldrh	r2, [r3, #6]
 800b37c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b380:	b29b      	uxth	r3, r3
 800b382:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b386:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b38a:	6800      	ldr	r0, [r0, #0]
 800b38c:	f001 fc98 	bl	800ccc0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b394:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	613b      	str	r3, [r7, #16]
 800b39c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b3aa:	b29b      	uxth	r3, r3
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	613b      	str	r3, [r7, #16]
 800b3b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	00da      	lsls	r2, r3, #3
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	4413      	add	r3, r2
 800b3c6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b3ca:	60fb      	str	r3, [r7, #12]
 800b3cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3d0:	b29a      	uxth	r2, r3
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	801a      	strh	r2, [r3, #0]
 800b3d6:	f000 be1f 	b.w	800c018 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b3da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	78db      	ldrb	r3, [r3, #3]
 800b3e6:	2b02      	cmp	r3, #2
 800b3e8:	f040 8462 	bne.w	800bcb0 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b3ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	6a1a      	ldr	r2, [r3, #32]
 800b3f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	691b      	ldr	r3, [r3, #16]
 800b404:	429a      	cmp	r2, r3
 800b406:	f240 83df 	bls.w	800bbc8 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b40a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b40e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	4413      	add	r3, r2
 800b424:	881b      	ldrh	r3, [r3, #0]
 800b426:	b29b      	uxth	r3, r3
 800b428:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b42c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b430:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800b434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b438:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b43c:	681a      	ldr	r2, [r3, #0]
 800b43e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b442:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	441a      	add	r2, r3
 800b44e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b452:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b456:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b45a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b45e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b462:	b29b      	uxth	r3, r3
 800b464:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b466:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b46a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	6a1a      	ldr	r2, [r3, #32]
 800b472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b476:	1ad2      	subs	r2, r2, r3
 800b478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b47c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b488:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b492:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	009b      	lsls	r3, r3, #2
 800b49c:	4413      	add	r3, r2
 800b49e:	881b      	ldrh	r3, [r3, #0]
 800b4a0:	b29b      	uxth	r3, r3
 800b4a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	f000 81c7 	beq.w	800b83a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b4ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	785b      	ldrb	r3, [r3, #1]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d177      	bne.n	800b5b8 <USB_EPStartXfer+0x2ce>
 800b4c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b4d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4e8:	4413      	add	r3, r2
 800b4ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b4ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	00da      	lsls	r2, r3, #3
 800b4fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4fc:	4413      	add	r3, r2
 800b4fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b502:	627b      	str	r3, [r7, #36]	@ 0x24
 800b504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b506:	881b      	ldrh	r3, [r3, #0]
 800b508:	b29b      	uxth	r3, r3
 800b50a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b50e:	b29a      	uxth	r2, r3
 800b510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b512:	801a      	strh	r2, [r3, #0]
 800b514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b518:	2b3e      	cmp	r3, #62	@ 0x3e
 800b51a:	d921      	bls.n	800b560 <USB_EPStartXfer+0x276>
 800b51c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b520:	095b      	lsrs	r3, r3, #5
 800b522:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b52a:	f003 031f 	and.w	r3, r3, #31
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d104      	bne.n	800b53c <USB_EPStartXfer+0x252>
 800b532:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b536:	3b01      	subs	r3, #1
 800b538:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b53e:	881b      	ldrh	r3, [r3, #0]
 800b540:	b29a      	uxth	r2, r3
 800b542:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b546:	b29b      	uxth	r3, r3
 800b548:	029b      	lsls	r3, r3, #10
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	4313      	orrs	r3, r2
 800b54e:	b29b      	uxth	r3, r3
 800b550:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b554:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b558:	b29a      	uxth	r2, r3
 800b55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b55c:	801a      	strh	r2, [r3, #0]
 800b55e:	e050      	b.n	800b602 <USB_EPStartXfer+0x318>
 800b560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b564:	2b00      	cmp	r3, #0
 800b566:	d10a      	bne.n	800b57e <USB_EPStartXfer+0x294>
 800b568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b56a:	881b      	ldrh	r3, [r3, #0]
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b576:	b29a      	uxth	r2, r3
 800b578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b57a:	801a      	strh	r2, [r3, #0]
 800b57c:	e041      	b.n	800b602 <USB_EPStartXfer+0x318>
 800b57e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b582:	085b      	lsrs	r3, r3, #1
 800b584:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b58c:	f003 0301 	and.w	r3, r3, #1
 800b590:	2b00      	cmp	r3, #0
 800b592:	d004      	beq.n	800b59e <USB_EPStartXfer+0x2b4>
 800b594:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b598:	3301      	adds	r3, #1
 800b59a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a0:	881b      	ldrh	r3, [r3, #0]
 800b5a2:	b29a      	uxth	r2, r3
 800b5a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	029b      	lsls	r3, r3, #10
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	b29a      	uxth	r2, r3
 800b5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b4:	801a      	strh	r2, [r3, #0]
 800b5b6:	e024      	b.n	800b602 <USB_EPStartXfer+0x318>
 800b5b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	785b      	ldrb	r3, [r3, #1]
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	d11c      	bne.n	800b602 <USB_EPStartXfer+0x318>
 800b5c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	461a      	mov	r2, r3
 800b5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5dc:	4413      	add	r3, r2
 800b5de:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	00da      	lsls	r2, r3, #3
 800b5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f0:	4413      	add	r3, r2
 800b5f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b5f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b5f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5fc:	b29a      	uxth	r2, r3
 800b5fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b600:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b606:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	895b      	ldrh	r3, [r3, #10]
 800b60e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b616:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	6959      	ldr	r1, [r3, #20]
 800b61e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b622:	b29b      	uxth	r3, r3
 800b624:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b628:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b62c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b630:	6800      	ldr	r0, [r0, #0]
 800b632:	f001 fb45 	bl	800ccc0 <USB_WritePMA>
            ep->xfer_buff += len;
 800b636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b63a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	695a      	ldr	r2, [r3, #20]
 800b642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b646:	441a      	add	r2, r3
 800b648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b64c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	6a1a      	ldr	r2, [r3, #32]
 800b660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b664:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	691b      	ldr	r3, [r3, #16]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d90f      	bls.n	800b690 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800b670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b674:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	6a1a      	ldr	r2, [r3, #32]
 800b67c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b680:	1ad2      	subs	r2, r2, r3
 800b682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	621a      	str	r2, [r3, #32]
 800b68e:	e00e      	b.n	800b6ae <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	6a1b      	ldr	r3, [r3, #32]
 800b69c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800b6a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b6ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	785b      	ldrb	r3, [r3, #1]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d177      	bne.n	800b7ae <USB_EPStartXfer+0x4c4>
 800b6be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	61bb      	str	r3, [r7, #24]
 800b6ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	461a      	mov	r2, r3
 800b6dc:	69bb      	ldr	r3, [r7, #24]
 800b6de:	4413      	add	r3, r2
 800b6e0:	61bb      	str	r3, [r7, #24]
 800b6e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	00da      	lsls	r2, r3, #3
 800b6f0:	69bb      	ldr	r3, [r7, #24]
 800b6f2:	4413      	add	r3, r2
 800b6f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b6f8:	617b      	str	r3, [r7, #20]
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	881b      	ldrh	r3, [r3, #0]
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b704:	b29a      	uxth	r2, r3
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	801a      	strh	r2, [r3, #0]
 800b70a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b70e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b710:	d921      	bls.n	800b756 <USB_EPStartXfer+0x46c>
 800b712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b716:	095b      	lsrs	r3, r3, #5
 800b718:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b71c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b720:	f003 031f 	and.w	r3, r3, #31
 800b724:	2b00      	cmp	r3, #0
 800b726:	d104      	bne.n	800b732 <USB_EPStartXfer+0x448>
 800b728:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b72c:	3b01      	subs	r3, #1
 800b72e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	881b      	ldrh	r3, [r3, #0]
 800b736:	b29a      	uxth	r2, r3
 800b738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b73c:	b29b      	uxth	r3, r3
 800b73e:	029b      	lsls	r3, r3, #10
 800b740:	b29b      	uxth	r3, r3
 800b742:	4313      	orrs	r3, r2
 800b744:	b29b      	uxth	r3, r3
 800b746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b74a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b74e:	b29a      	uxth	r2, r3
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	801a      	strh	r2, [r3, #0]
 800b754:	e056      	b.n	800b804 <USB_EPStartXfer+0x51a>
 800b756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d10a      	bne.n	800b774 <USB_EPStartXfer+0x48a>
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	881b      	ldrh	r3, [r3, #0]
 800b762:	b29b      	uxth	r3, r3
 800b764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b76c:	b29a      	uxth	r2, r3
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	801a      	strh	r2, [r3, #0]
 800b772:	e047      	b.n	800b804 <USB_EPStartXfer+0x51a>
 800b774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b778:	085b      	lsrs	r3, r3, #1
 800b77a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b77e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b782:	f003 0301 	and.w	r3, r3, #1
 800b786:	2b00      	cmp	r3, #0
 800b788:	d004      	beq.n	800b794 <USB_EPStartXfer+0x4aa>
 800b78a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b78e:	3301      	adds	r3, #1
 800b790:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	881b      	ldrh	r3, [r3, #0]
 800b798:	b29a      	uxth	r2, r3
 800b79a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	029b      	lsls	r3, r3, #10
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	b29a      	uxth	r2, r3
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	801a      	strh	r2, [r3, #0]
 800b7ac:	e02a      	b.n	800b804 <USB_EPStartXfer+0x51a>
 800b7ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	785b      	ldrb	r3, [r3, #1]
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d122      	bne.n	800b804 <USB_EPStartXfer+0x51a>
 800b7be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	623b      	str	r3, [r7, #32]
 800b7ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	461a      	mov	r2, r3
 800b7dc:	6a3b      	ldr	r3, [r7, #32]
 800b7de:	4413      	add	r3, r2
 800b7e0:	623b      	str	r3, [r7, #32]
 800b7e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	00da      	lsls	r2, r3, #3
 800b7f0:	6a3b      	ldr	r3, [r7, #32]
 800b7f2:	4413      	add	r3, r2
 800b7f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b7f8:	61fb      	str	r3, [r7, #28]
 800b7fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7fe:	b29a      	uxth	r2, r3
 800b800:	69fb      	ldr	r3, [r7, #28]
 800b802:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	891b      	ldrh	r3, [r3, #8]
 800b810:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	6959      	ldr	r1, [r3, #20]
 800b820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b824:	b29b      	uxth	r3, r3
 800b826:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b82a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b82e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b832:	6800      	ldr	r0, [r0, #0]
 800b834:	f001 fa44 	bl	800ccc0 <USB_WritePMA>
 800b838:	e3ee      	b.n	800c018 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b83a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b83e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	785b      	ldrb	r3, [r3, #1]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d177      	bne.n	800b93a <USB_EPStartXfer+0x650>
 800b84a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b84e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b85a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b864:	b29b      	uxth	r3, r3
 800b866:	461a      	mov	r2, r3
 800b868:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b86a:	4413      	add	r3, r2
 800b86c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b86e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b872:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	00da      	lsls	r2, r3, #3
 800b87c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b87e:	4413      	add	r3, r2
 800b880:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b884:	647b      	str	r3, [r7, #68]	@ 0x44
 800b886:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b888:	881b      	ldrh	r3, [r3, #0]
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b890:	b29a      	uxth	r2, r3
 800b892:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b894:	801a      	strh	r2, [r3, #0]
 800b896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b89a:	2b3e      	cmp	r3, #62	@ 0x3e
 800b89c:	d921      	bls.n	800b8e2 <USB_EPStartXfer+0x5f8>
 800b89e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8a2:	095b      	lsrs	r3, r3, #5
 800b8a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b8a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8ac:	f003 031f 	and.w	r3, r3, #31
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d104      	bne.n	800b8be <USB_EPStartXfer+0x5d4>
 800b8b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b8b8:	3b01      	subs	r3, #1
 800b8ba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b8be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8c0:	881b      	ldrh	r3, [r3, #0]
 800b8c2:	b29a      	uxth	r2, r3
 800b8c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	029b      	lsls	r3, r3, #10
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8da:	b29a      	uxth	r2, r3
 800b8dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8de:	801a      	strh	r2, [r3, #0]
 800b8e0:	e056      	b.n	800b990 <USB_EPStartXfer+0x6a6>
 800b8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d10a      	bne.n	800b900 <USB_EPStartXfer+0x616>
 800b8ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8ec:	881b      	ldrh	r3, [r3, #0]
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8fc:	801a      	strh	r2, [r3, #0]
 800b8fe:	e047      	b.n	800b990 <USB_EPStartXfer+0x6a6>
 800b900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b904:	085b      	lsrs	r3, r3, #1
 800b906:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b90a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b90e:	f003 0301 	and.w	r3, r3, #1
 800b912:	2b00      	cmp	r3, #0
 800b914:	d004      	beq.n	800b920 <USB_EPStartXfer+0x636>
 800b916:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b91a:	3301      	adds	r3, #1
 800b91c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b922:	881b      	ldrh	r3, [r3, #0]
 800b924:	b29a      	uxth	r2, r3
 800b926:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	029b      	lsls	r3, r3, #10
 800b92e:	b29b      	uxth	r3, r3
 800b930:	4313      	orrs	r3, r2
 800b932:	b29a      	uxth	r2, r3
 800b934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b936:	801a      	strh	r2, [r3, #0]
 800b938:	e02a      	b.n	800b990 <USB_EPStartXfer+0x6a6>
 800b93a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b93e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	785b      	ldrb	r3, [r3, #1]
 800b946:	2b01      	cmp	r3, #1
 800b948:	d122      	bne.n	800b990 <USB_EPStartXfer+0x6a6>
 800b94a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b94e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	653b      	str	r3, [r7, #80]	@ 0x50
 800b956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b95a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b964:	b29b      	uxth	r3, r3
 800b966:	461a      	mov	r2, r3
 800b968:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b96a:	4413      	add	r3, r2
 800b96c:	653b      	str	r3, [r7, #80]	@ 0x50
 800b96e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b972:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	00da      	lsls	r2, r3, #3
 800b97c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b97e:	4413      	add	r3, r2
 800b980:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b984:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b98a:	b29a      	uxth	r2, r3
 800b98c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b98e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	891b      	ldrh	r3, [r3, #8]
 800b99c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b9a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	6959      	ldr	r1, [r3, #20]
 800b9ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9b0:	b29b      	uxth	r3, r3
 800b9b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b9b6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b9ba:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b9be:	6800      	ldr	r0, [r0, #0]
 800b9c0:	f001 f97e 	bl	800ccc0 <USB_WritePMA>
            ep->xfer_buff += len;
 800b9c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	695a      	ldr	r2, [r3, #20]
 800b9d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9d4:	441a      	add	r2, r3
 800b9d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b9e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	6a1a      	ldr	r2, [r3, #32]
 800b9ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	691b      	ldr	r3, [r3, #16]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d90f      	bls.n	800ba1e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800b9fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	6a1a      	ldr	r2, [r3, #32]
 800ba0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba0e:	1ad2      	subs	r2, r2, r3
 800ba10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	621a      	str	r2, [r3, #32]
 800ba1c:	e00e      	b.n	800ba3c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800ba1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	6a1b      	ldr	r3, [r3, #32]
 800ba2a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800ba2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ba3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	785b      	ldrb	r3, [r3, #1]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d177      	bne.n	800bb48 <USB_EPStartXfer+0x85e>
 800ba58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ba64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba72:	b29b      	uxth	r3, r3
 800ba74:	461a      	mov	r2, r3
 800ba76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba78:	4413      	add	r3, r2
 800ba7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ba7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	00da      	lsls	r2, r3, #3
 800ba8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba8c:	4413      	add	r3, r2
 800ba8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ba92:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba96:	881b      	ldrh	r3, [r3, #0]
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baa2:	801a      	strh	r2, [r3, #0]
 800baa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baa8:	2b3e      	cmp	r3, #62	@ 0x3e
 800baaa:	d921      	bls.n	800baf0 <USB_EPStartXfer+0x806>
 800baac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bab0:	095b      	lsrs	r3, r3, #5
 800bab2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baba:	f003 031f 	and.w	r3, r3, #31
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d104      	bne.n	800bacc <USB_EPStartXfer+0x7e2>
 800bac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bac6:	3b01      	subs	r3, #1
 800bac8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bacc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bace:	881b      	ldrh	r3, [r3, #0]
 800bad0:	b29a      	uxth	r2, r3
 800bad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	029b      	lsls	r3, r3, #10
 800bada:	b29b      	uxth	r3, r3
 800badc:	4313      	orrs	r3, r2
 800bade:	b29b      	uxth	r3, r3
 800bae0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bae4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bae8:	b29a      	uxth	r2, r3
 800baea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baec:	801a      	strh	r2, [r3, #0]
 800baee:	e050      	b.n	800bb92 <USB_EPStartXfer+0x8a8>
 800baf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d10a      	bne.n	800bb0e <USB_EPStartXfer+0x824>
 800baf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bafa:	881b      	ldrh	r3, [r3, #0]
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb06:	b29a      	uxth	r2, r3
 800bb08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb0a:	801a      	strh	r2, [r3, #0]
 800bb0c:	e041      	b.n	800bb92 <USB_EPStartXfer+0x8a8>
 800bb0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb12:	085b      	lsrs	r3, r3, #1
 800bb14:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bb18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb1c:	f003 0301 	and.w	r3, r3, #1
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d004      	beq.n	800bb2e <USB_EPStartXfer+0x844>
 800bb24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb28:	3301      	adds	r3, #1
 800bb2a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bb2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb30:	881b      	ldrh	r3, [r3, #0]
 800bb32:	b29a      	uxth	r2, r3
 800bb34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	029b      	lsls	r3, r3, #10
 800bb3c:	b29b      	uxth	r3, r3
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	b29a      	uxth	r2, r3
 800bb42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb44:	801a      	strh	r2, [r3, #0]
 800bb46:	e024      	b.n	800bb92 <USB_EPStartXfer+0x8a8>
 800bb48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	785b      	ldrb	r3, [r3, #1]
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d11c      	bne.n	800bb92 <USB_EPStartXfer+0x8a8>
 800bb58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	461a      	mov	r2, r3
 800bb6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb6c:	4413      	add	r3, r2
 800bb6e:	643b      	str	r3, [r7, #64]	@ 0x40
 800bb70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	00da      	lsls	r2, r3, #3
 800bb7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb80:	4413      	add	r3, r2
 800bb82:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bb86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb8c:	b29a      	uxth	r2, r3
 800bb8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb90:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bb92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	895b      	ldrh	r3, [r3, #10]
 800bb9e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bba6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	6959      	ldr	r1, [r3, #20]
 800bbae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bbb8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bbbc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bbc0:	6800      	ldr	r0, [r0, #0]
 800bbc2:	f001 f87d 	bl	800ccc0 <USB_WritePMA>
 800bbc6:	e227      	b.n	800c018 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800bbc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	6a1b      	ldr	r3, [r3, #32]
 800bbd4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800bbd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbe6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	009b      	lsls	r3, r3, #2
 800bbf0:	4413      	add	r3, r2
 800bbf2:	881b      	ldrh	r3, [r3, #0]
 800bbf4:	b29b      	uxth	r3, r3
 800bbf6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800bbfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbfe:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800bc02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc0a:	681a      	ldr	r2, [r3, #0]
 800bc0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	441a      	add	r2, r3
 800bc1c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800bc20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bc34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bc40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc4e:	b29b      	uxth	r3, r3
 800bc50:	461a      	mov	r2, r3
 800bc52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc54:	4413      	add	r3, r2
 800bc56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bc58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	781b      	ldrb	r3, [r3, #0]
 800bc64:	00da      	lsls	r2, r3, #3
 800bc66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc68:	4413      	add	r3, r2
 800bc6a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bc6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bc70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc74:	b29a      	uxth	r2, r3
 800bc76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc78:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bc7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	891b      	ldrh	r3, [r3, #8]
 800bc86:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bc8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	6959      	ldr	r1, [r3, #20]
 800bc96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bca0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bca4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bca8:	6800      	ldr	r0, [r0, #0]
 800bcaa:	f001 f809 	bl	800ccc0 <USB_WritePMA>
 800bcae:	e1b3      	b.n	800c018 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800bcb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	6a1a      	ldr	r2, [r3, #32]
 800bcbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcc0:	1ad2      	subs	r2, r2, r3
 800bcc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bcce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	781b      	ldrb	r3, [r3, #0]
 800bce4:	009b      	lsls	r3, r3, #2
 800bce6:	4413      	add	r3, r2
 800bce8:	881b      	ldrh	r3, [r3, #0]
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	f000 80c6 	beq.w	800be82 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bcf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	673b      	str	r3, [r7, #112]	@ 0x70
 800bd02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	785b      	ldrb	r3, [r3, #1]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d177      	bne.n	800be02 <USB_EPStartXfer+0xb18>
 800bd12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bd1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	461a      	mov	r2, r3
 800bd30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bd32:	4413      	add	r3, r2
 800bd34:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bd36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	00da      	lsls	r2, r3, #3
 800bd44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bd46:	4413      	add	r3, r2
 800bd48:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bd4c:	667b      	str	r3, [r7, #100]	@ 0x64
 800bd4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd50:	881b      	ldrh	r3, [r3, #0]
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd58:	b29a      	uxth	r2, r3
 800bd5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd5c:	801a      	strh	r2, [r3, #0]
 800bd5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd62:	2b3e      	cmp	r3, #62	@ 0x3e
 800bd64:	d921      	bls.n	800bdaa <USB_EPStartXfer+0xac0>
 800bd66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd6a:	095b      	lsrs	r3, r3, #5
 800bd6c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bd70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd74:	f003 031f 	and.w	r3, r3, #31
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d104      	bne.n	800bd86 <USB_EPStartXfer+0xa9c>
 800bd7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bd80:	3b01      	subs	r3, #1
 800bd82:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bd86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd88:	881b      	ldrh	r3, [r3, #0]
 800bd8a:	b29a      	uxth	r2, r3
 800bd8c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	029b      	lsls	r3, r3, #10
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	4313      	orrs	r3, r2
 800bd98:	b29b      	uxth	r3, r3
 800bd9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bda2:	b29a      	uxth	r2, r3
 800bda4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bda6:	801a      	strh	r2, [r3, #0]
 800bda8:	e050      	b.n	800be4c <USB_EPStartXfer+0xb62>
 800bdaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d10a      	bne.n	800bdc8 <USB_EPStartXfer+0xade>
 800bdb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bdb4:	881b      	ldrh	r3, [r3, #0]
 800bdb6:	b29b      	uxth	r3, r3
 800bdb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bdbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bdc0:	b29a      	uxth	r2, r3
 800bdc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bdc4:	801a      	strh	r2, [r3, #0]
 800bdc6:	e041      	b.n	800be4c <USB_EPStartXfer+0xb62>
 800bdc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdcc:	085b      	lsrs	r3, r3, #1
 800bdce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bdd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdd6:	f003 0301 	and.w	r3, r3, #1
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d004      	beq.n	800bde8 <USB_EPStartXfer+0xafe>
 800bdde:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bde2:	3301      	adds	r3, #1
 800bde4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bde8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bdea:	881b      	ldrh	r3, [r3, #0]
 800bdec:	b29a      	uxth	r2, r3
 800bdee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	029b      	lsls	r3, r3, #10
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	b29a      	uxth	r2, r3
 800bdfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bdfe:	801a      	strh	r2, [r3, #0]
 800be00:	e024      	b.n	800be4c <USB_EPStartXfer+0xb62>
 800be02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	785b      	ldrb	r3, [r3, #1]
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d11c      	bne.n	800be4c <USB_EPStartXfer+0xb62>
 800be12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be20:	b29b      	uxth	r3, r3
 800be22:	461a      	mov	r2, r3
 800be24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800be26:	4413      	add	r3, r2
 800be28:	673b      	str	r3, [r7, #112]	@ 0x70
 800be2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	00da      	lsls	r2, r3, #3
 800be38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800be3a:	4413      	add	r3, r2
 800be3c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800be40:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800be42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be46:	b29a      	uxth	r2, r3
 800be48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be4a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800be4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	895b      	ldrh	r3, [r3, #10]
 800be58:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800be5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	6959      	ldr	r1, [r3, #20]
 800be68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800be72:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800be76:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800be7a:	6800      	ldr	r0, [r0, #0]
 800be7c:	f000 ff20 	bl	800ccc0 <USB_WritePMA>
 800be80:	e0ca      	b.n	800c018 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800be82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	785b      	ldrb	r3, [r3, #1]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d177      	bne.n	800bf82 <USB_EPStartXfer+0xc98>
 800be92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800be9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bea2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800beac:	b29b      	uxth	r3, r3
 800beae:	461a      	mov	r2, r3
 800beb0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800beb2:	4413      	add	r3, r2
 800beb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800beb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800beba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	00da      	lsls	r2, r3, #3
 800bec4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bec6:	4413      	add	r3, r2
 800bec8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800becc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bece:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bed0:	881b      	ldrh	r3, [r3, #0]
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bed8:	b29a      	uxth	r2, r3
 800beda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bedc:	801a      	strh	r2, [r3, #0]
 800bede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bee2:	2b3e      	cmp	r3, #62	@ 0x3e
 800bee4:	d921      	bls.n	800bf2a <USB_EPStartXfer+0xc40>
 800bee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800beea:	095b      	lsrs	r3, r3, #5
 800beec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bef4:	f003 031f 	and.w	r3, r3, #31
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d104      	bne.n	800bf06 <USB_EPStartXfer+0xc1c>
 800befc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800bf00:	3b01      	subs	r3, #1
 800bf02:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bf06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf08:	881b      	ldrh	r3, [r3, #0]
 800bf0a:	b29a      	uxth	r2, r3
 800bf0c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	029b      	lsls	r3, r3, #10
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	4313      	orrs	r3, r2
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf22:	b29a      	uxth	r2, r3
 800bf24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf26:	801a      	strh	r2, [r3, #0]
 800bf28:	e05c      	b.n	800bfe4 <USB_EPStartXfer+0xcfa>
 800bf2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d10a      	bne.n	800bf48 <USB_EPStartXfer+0xc5e>
 800bf32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf34:	881b      	ldrh	r3, [r3, #0]
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf40:	b29a      	uxth	r2, r3
 800bf42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf44:	801a      	strh	r2, [r3, #0]
 800bf46:	e04d      	b.n	800bfe4 <USB_EPStartXfer+0xcfa>
 800bf48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf4c:	085b      	lsrs	r3, r3, #1
 800bf4e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bf52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf56:	f003 0301 	and.w	r3, r3, #1
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d004      	beq.n	800bf68 <USB_EPStartXfer+0xc7e>
 800bf5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800bf62:	3301      	adds	r3, #1
 800bf64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bf68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf6a:	881b      	ldrh	r3, [r3, #0]
 800bf6c:	b29a      	uxth	r2, r3
 800bf6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	029b      	lsls	r3, r3, #10
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	b29a      	uxth	r2, r3
 800bf7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf7e:	801a      	strh	r2, [r3, #0]
 800bf80:	e030      	b.n	800bfe4 <USB_EPStartXfer+0xcfa>
 800bf82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	785b      	ldrb	r3, [r3, #1]
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d128      	bne.n	800bfe4 <USB_EPStartXfer+0xcfa>
 800bf92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bfa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bfae:	b29b      	uxth	r3, r3
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bfb6:	4413      	add	r3, r2
 800bfb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bfbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	00da      	lsls	r2, r3, #3
 800bfca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bfce:	4413      	add	r3, r2
 800bfd0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bfd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bfd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfdc:	b29a      	uxth	r2, r3
 800bfde:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bfe2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bfe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	891b      	ldrh	r3, [r3, #8]
 800bff0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bff8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	6959      	ldr	r1, [r3, #20]
 800c000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c004:	b29b      	uxth	r3, r3
 800c006:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c00a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c00e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c012:	6800      	ldr	r0, [r0, #0]
 800c014:	f000 fe54 	bl	800ccc0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c01c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c026:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	009b      	lsls	r3, r3, #2
 800c030:	4413      	add	r3, r2
 800c032:	881b      	ldrh	r3, [r3, #0]
 800c034:	b29b      	uxth	r3, r3
 800c036:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c03a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c03e:	817b      	strh	r3, [r7, #10]
 800c040:	897b      	ldrh	r3, [r7, #10]
 800c042:	f083 0310 	eor.w	r3, r3, #16
 800c046:	817b      	strh	r3, [r7, #10]
 800c048:	897b      	ldrh	r3, [r7, #10]
 800c04a:	f083 0320 	eor.w	r3, r3, #32
 800c04e:	817b      	strh	r3, [r7, #10]
 800c050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c054:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c05e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	441a      	add	r2, r3
 800c06a:	897b      	ldrh	r3, [r7, #10]
 800c06c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c070:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c074:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c078:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	8013      	strh	r3, [r2, #0]
 800c080:	f000 bcde 	b.w	800ca40 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	7b1b      	ldrb	r3, [r3, #12]
 800c090:	2b00      	cmp	r3, #0
 800c092:	f040 80bb 	bne.w	800c20c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c09a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	699a      	ldr	r2, [r3, #24]
 800c0a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	691b      	ldr	r3, [r3, #16]
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d917      	bls.n	800c0e2 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800c0b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	691b      	ldr	r3, [r3, #16]
 800c0be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800c0c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	699a      	ldr	r2, [r3, #24]
 800c0ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0d2:	1ad2      	subs	r2, r2, r3
 800c0d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	619a      	str	r2, [r3, #24]
 800c0e0:	e00e      	b.n	800c100 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800c0e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	699b      	ldr	r3, [r3, #24]
 800c0ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800c0f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c104:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c10e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c112:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	461a      	mov	r2, r3
 800c120:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c124:	4413      	add	r3, r2
 800c126:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c12a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c12e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	00da      	lsls	r2, r3, #3
 800c138:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c13c:	4413      	add	r3, r2
 800c13e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c142:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c146:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c14a:	881b      	ldrh	r3, [r3, #0]
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c152:	b29a      	uxth	r2, r3
 800c154:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c158:	801a      	strh	r2, [r3, #0]
 800c15a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c15e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c160:	d924      	bls.n	800c1ac <USB_EPStartXfer+0xec2>
 800c162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c166:	095b      	lsrs	r3, r3, #5
 800c168:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c16c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c170:	f003 031f 	and.w	r3, r3, #31
 800c174:	2b00      	cmp	r3, #0
 800c176:	d104      	bne.n	800c182 <USB_EPStartXfer+0xe98>
 800c178:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c17c:	3b01      	subs	r3, #1
 800c17e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c182:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c186:	881b      	ldrh	r3, [r3, #0]
 800c188:	b29a      	uxth	r2, r3
 800c18a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c18e:	b29b      	uxth	r3, r3
 800c190:	029b      	lsls	r3, r3, #10
 800c192:	b29b      	uxth	r3, r3
 800c194:	4313      	orrs	r3, r2
 800c196:	b29b      	uxth	r3, r3
 800c198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c19c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1a0:	b29a      	uxth	r2, r3
 800c1a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c1a6:	801a      	strh	r2, [r3, #0]
 800c1a8:	f000 bc10 	b.w	800c9cc <USB_EPStartXfer+0x16e2>
 800c1ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d10c      	bne.n	800c1ce <USB_EPStartXfer+0xee4>
 800c1b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c1b8:	881b      	ldrh	r3, [r3, #0]
 800c1ba:	b29b      	uxth	r3, r3
 800c1bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1c4:	b29a      	uxth	r2, r3
 800c1c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c1ca:	801a      	strh	r2, [r3, #0]
 800c1cc:	e3fe      	b.n	800c9cc <USB_EPStartXfer+0x16e2>
 800c1ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1d2:	085b      	lsrs	r3, r3, #1
 800c1d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c1d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1dc:	f003 0301 	and.w	r3, r3, #1
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d004      	beq.n	800c1ee <USB_EPStartXfer+0xf04>
 800c1e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c1ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c1f2:	881b      	ldrh	r3, [r3, #0]
 800c1f4:	b29a      	uxth	r2, r3
 800c1f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	029b      	lsls	r3, r3, #10
 800c1fe:	b29b      	uxth	r3, r3
 800c200:	4313      	orrs	r3, r2
 800c202:	b29a      	uxth	r2, r3
 800c204:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c208:	801a      	strh	r2, [r3, #0]
 800c20a:	e3df      	b.n	800c9cc <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c20c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	78db      	ldrb	r3, [r3, #3]
 800c218:	2b02      	cmp	r3, #2
 800c21a:	f040 8218 	bne.w	800c64e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c21e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c222:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	785b      	ldrb	r3, [r3, #1]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	f040 809d 	bne.w	800c36a <USB_EPStartXfer+0x1080>
 800c230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c234:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c23e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c242:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c24c:	b29b      	uxth	r3, r3
 800c24e:	461a      	mov	r2, r3
 800c250:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c254:	4413      	add	r3, r2
 800c256:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c25a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c25e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	00da      	lsls	r2, r3, #3
 800c268:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c26c:	4413      	add	r3, r2
 800c26e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c272:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c276:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c27a:	881b      	ldrh	r3, [r3, #0]
 800c27c:	b29b      	uxth	r3, r3
 800c27e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c282:	b29a      	uxth	r2, r3
 800c284:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c288:	801a      	strh	r2, [r3, #0]
 800c28a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c28e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	691b      	ldr	r3, [r3, #16]
 800c296:	2b3e      	cmp	r3, #62	@ 0x3e
 800c298:	d92b      	bls.n	800c2f2 <USB_EPStartXfer+0x1008>
 800c29a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c29e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	691b      	ldr	r3, [r3, #16]
 800c2a6:	095b      	lsrs	r3, r3, #5
 800c2a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c2ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	691b      	ldr	r3, [r3, #16]
 800c2b8:	f003 031f 	and.w	r3, r3, #31
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d104      	bne.n	800c2ca <USB_EPStartXfer+0xfe0>
 800c2c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2c4:	3b01      	subs	r3, #1
 800c2c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c2ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c2ce:	881b      	ldrh	r3, [r3, #0]
 800c2d0:	b29a      	uxth	r2, r3
 800c2d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	029b      	lsls	r3, r3, #10
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c2e8:	b29a      	uxth	r2, r3
 800c2ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c2ee:	801a      	strh	r2, [r3, #0]
 800c2f0:	e070      	b.n	800c3d4 <USB_EPStartXfer+0x10ea>
 800c2f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	691b      	ldr	r3, [r3, #16]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d10c      	bne.n	800c31c <USB_EPStartXfer+0x1032>
 800c302:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c306:	881b      	ldrh	r3, [r3, #0]
 800c308:	b29b      	uxth	r3, r3
 800c30a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c30e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c312:	b29a      	uxth	r2, r3
 800c314:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c318:	801a      	strh	r2, [r3, #0]
 800c31a:	e05b      	b.n	800c3d4 <USB_EPStartXfer+0x10ea>
 800c31c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c320:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	691b      	ldr	r3, [r3, #16]
 800c328:	085b      	lsrs	r3, r3, #1
 800c32a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c32e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c332:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	691b      	ldr	r3, [r3, #16]
 800c33a:	f003 0301 	and.w	r3, r3, #1
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d004      	beq.n	800c34c <USB_EPStartXfer+0x1062>
 800c342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c346:	3301      	adds	r3, #1
 800c348:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c34c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c350:	881b      	ldrh	r3, [r3, #0]
 800c352:	b29a      	uxth	r2, r3
 800c354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c358:	b29b      	uxth	r3, r3
 800c35a:	029b      	lsls	r3, r3, #10
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	4313      	orrs	r3, r2
 800c360:	b29a      	uxth	r2, r3
 800c362:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c366:	801a      	strh	r2, [r3, #0]
 800c368:	e034      	b.n	800c3d4 <USB_EPStartXfer+0x10ea>
 800c36a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c36e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	785b      	ldrb	r3, [r3, #1]
 800c376:	2b01      	cmp	r3, #1
 800c378:	d12c      	bne.n	800c3d4 <USB_EPStartXfer+0x10ea>
 800c37a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c37e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c38c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c396:	b29b      	uxth	r3, r3
 800c398:	461a      	mov	r2, r3
 800c39a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c39e:	4413      	add	r3, r2
 800c3a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c3a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	00da      	lsls	r2, r3, #3
 800c3b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c3b6:	4413      	add	r3, r2
 800c3b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c3bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c3c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	691b      	ldr	r3, [r3, #16]
 800c3cc:	b29a      	uxth	r2, r3
 800c3ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c3d2:	801a      	strh	r2, [r3, #0]
 800c3d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c3e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	785b      	ldrb	r3, [r3, #1]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	f040 809d 	bne.w	800c52e <USB_EPStartXfer+0x1244>
 800c3f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c406:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c410:	b29b      	uxth	r3, r3
 800c412:	461a      	mov	r2, r3
 800c414:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c418:	4413      	add	r3, r2
 800c41a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c41e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c422:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	00da      	lsls	r2, r3, #3
 800c42c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c430:	4413      	add	r3, r2
 800c432:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c436:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c43a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c43e:	881b      	ldrh	r3, [r3, #0]
 800c440:	b29b      	uxth	r3, r3
 800c442:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c446:	b29a      	uxth	r2, r3
 800c448:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c44c:	801a      	strh	r2, [r3, #0]
 800c44e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	691b      	ldr	r3, [r3, #16]
 800c45a:	2b3e      	cmp	r3, #62	@ 0x3e
 800c45c:	d92b      	bls.n	800c4b6 <USB_EPStartXfer+0x11cc>
 800c45e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	691b      	ldr	r3, [r3, #16]
 800c46a:	095b      	lsrs	r3, r3, #5
 800c46c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c474:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	691b      	ldr	r3, [r3, #16]
 800c47c:	f003 031f 	and.w	r3, r3, #31
 800c480:	2b00      	cmp	r3, #0
 800c482:	d104      	bne.n	800c48e <USB_EPStartXfer+0x11a4>
 800c484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c488:	3b01      	subs	r3, #1
 800c48a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c48e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c492:	881b      	ldrh	r3, [r3, #0]
 800c494:	b29a      	uxth	r2, r3
 800c496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	029b      	lsls	r3, r3, #10
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	4313      	orrs	r3, r2
 800c4a2:	b29b      	uxth	r3, r3
 800c4a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4ac:	b29a      	uxth	r2, r3
 800c4ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c4b2:	801a      	strh	r2, [r3, #0]
 800c4b4:	e069      	b.n	800c58a <USB_EPStartXfer+0x12a0>
 800c4b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	691b      	ldr	r3, [r3, #16]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d10c      	bne.n	800c4e0 <USB_EPStartXfer+0x11f6>
 800c4c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c4ca:	881b      	ldrh	r3, [r3, #0]
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4d6:	b29a      	uxth	r2, r3
 800c4d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c4dc:	801a      	strh	r2, [r3, #0]
 800c4de:	e054      	b.n	800c58a <USB_EPStartXfer+0x12a0>
 800c4e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	691b      	ldr	r3, [r3, #16]
 800c4ec:	085b      	lsrs	r3, r3, #1
 800c4ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c4f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	691b      	ldr	r3, [r3, #16]
 800c4fe:	f003 0301 	and.w	r3, r3, #1
 800c502:	2b00      	cmp	r3, #0
 800c504:	d004      	beq.n	800c510 <USB_EPStartXfer+0x1226>
 800c506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c50a:	3301      	adds	r3, #1
 800c50c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c510:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c514:	881b      	ldrh	r3, [r3, #0]
 800c516:	b29a      	uxth	r2, r3
 800c518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	029b      	lsls	r3, r3, #10
 800c520:	b29b      	uxth	r3, r3
 800c522:	4313      	orrs	r3, r2
 800c524:	b29a      	uxth	r2, r3
 800c526:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c52a:	801a      	strh	r2, [r3, #0]
 800c52c:	e02d      	b.n	800c58a <USB_EPStartXfer+0x12a0>
 800c52e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c532:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	785b      	ldrb	r3, [r3, #1]
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d125      	bne.n	800c58a <USB_EPStartXfer+0x12a0>
 800c53e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c542:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c54c:	b29b      	uxth	r3, r3
 800c54e:	461a      	mov	r2, r3
 800c550:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c554:	4413      	add	r3, r2
 800c556:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c55a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c55e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	00da      	lsls	r2, r3, #3
 800c568:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c56c:	4413      	add	r3, r2
 800c56e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c572:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c57a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	691b      	ldr	r3, [r3, #16]
 800c582:	b29a      	uxth	r2, r3
 800c584:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c588:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c58a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c58e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	69db      	ldr	r3, [r3, #28]
 800c596:	2b00      	cmp	r3, #0
 800c598:	f000 8218 	beq.w	800c9cc <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c59c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c5a4:	681a      	ldr	r2, [r3, #0]
 800c5a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	4413      	add	r3, r2
 800c5b6:	881b      	ldrh	r3, [r3, #0]
 800c5b8:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c5bc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c5c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d005      	beq.n	800c5d4 <USB_EPStartXfer+0x12ea>
 800c5c8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c5cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d10d      	bne.n	800c5f0 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c5d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c5d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	f040 81f5 	bne.w	800c9cc <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c5e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c5e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	f040 81ee 	bne.w	800c9cc <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c5f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c5f8:	681a      	ldr	r2, [r3, #0]
 800c5fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	781b      	ldrb	r3, [r3, #0]
 800c606:	009b      	lsls	r3, r3, #2
 800c608:	4413      	add	r3, r2
 800c60a:	881b      	ldrh	r3, [r3, #0]
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c616:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800c61a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c61e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c628:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	009b      	lsls	r3, r3, #2
 800c632:	441a      	add	r2, r3
 800c634:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800c638:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c63c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c640:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c644:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c648:	b29b      	uxth	r3, r3
 800c64a:	8013      	strh	r3, [r2, #0]
 800c64c:	e1be      	b.n	800c9cc <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c64e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c652:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	78db      	ldrb	r3, [r3, #3]
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	f040 81b4 	bne.w	800c9c8 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c664:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	699a      	ldr	r2, [r3, #24]
 800c66c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c670:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	691b      	ldr	r3, [r3, #16]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d917      	bls.n	800c6ac <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800c67c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	691b      	ldr	r3, [r3, #16]
 800c688:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800c68c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	699a      	ldr	r2, [r3, #24]
 800c698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c69c:	1ad2      	subs	r2, r2, r3
 800c69e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	619a      	str	r2, [r3, #24]
 800c6aa:	e00e      	b.n	800c6ca <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800c6ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	699b      	ldr	r3, [r3, #24]
 800c6b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800c6bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c6ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	785b      	ldrb	r3, [r3, #1]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	f040 8085 	bne.w	800c7e6 <USB_EPStartXfer+0x14fc>
 800c6dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c6ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c6f8:	b29b      	uxth	r3, r3
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c700:	4413      	add	r3, r2
 800c702:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c70a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	00da      	lsls	r2, r3, #3
 800c714:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c718:	4413      	add	r3, r2
 800c71a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c71e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c722:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c726:	881b      	ldrh	r3, [r3, #0]
 800c728:	b29b      	uxth	r3, r3
 800c72a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c72e:	b29a      	uxth	r2, r3
 800c730:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c734:	801a      	strh	r2, [r3, #0]
 800c736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c73a:	2b3e      	cmp	r3, #62	@ 0x3e
 800c73c:	d923      	bls.n	800c786 <USB_EPStartXfer+0x149c>
 800c73e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c742:	095b      	lsrs	r3, r3, #5
 800c744:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c74c:	f003 031f 	and.w	r3, r3, #31
 800c750:	2b00      	cmp	r3, #0
 800c752:	d104      	bne.n	800c75e <USB_EPStartXfer+0x1474>
 800c754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c758:	3b01      	subs	r3, #1
 800c75a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c75e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c762:	881b      	ldrh	r3, [r3, #0]
 800c764:	b29a      	uxth	r2, r3
 800c766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c76a:	b29b      	uxth	r3, r3
 800c76c:	029b      	lsls	r3, r3, #10
 800c76e:	b29b      	uxth	r3, r3
 800c770:	4313      	orrs	r3, r2
 800c772:	b29b      	uxth	r3, r3
 800c774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c77c:	b29a      	uxth	r2, r3
 800c77e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c782:	801a      	strh	r2, [r3, #0]
 800c784:	e060      	b.n	800c848 <USB_EPStartXfer+0x155e>
 800c786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d10c      	bne.n	800c7a8 <USB_EPStartXfer+0x14be>
 800c78e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c792:	881b      	ldrh	r3, [r3, #0]
 800c794:	b29b      	uxth	r3, r3
 800c796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c79a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c79e:	b29a      	uxth	r2, r3
 800c7a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c7a4:	801a      	strh	r2, [r3, #0]
 800c7a6:	e04f      	b.n	800c848 <USB_EPStartXfer+0x155e>
 800c7a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7ac:	085b      	lsrs	r3, r3, #1
 800c7ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c7b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7b6:	f003 0301 	and.w	r3, r3, #1
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d004      	beq.n	800c7c8 <USB_EPStartXfer+0x14de>
 800c7be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c7c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c7cc:	881b      	ldrh	r3, [r3, #0]
 800c7ce:	b29a      	uxth	r2, r3
 800c7d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7d4:	b29b      	uxth	r3, r3
 800c7d6:	029b      	lsls	r3, r3, #10
 800c7d8:	b29b      	uxth	r3, r3
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	b29a      	uxth	r2, r3
 800c7de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c7e2:	801a      	strh	r2, [r3, #0]
 800c7e4:	e030      	b.n	800c848 <USB_EPStartXfer+0x155e>
 800c7e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	785b      	ldrb	r3, [r3, #1]
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	d128      	bne.n	800c848 <USB_EPStartXfer+0x155e>
 800c7f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c808:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c812:	b29b      	uxth	r3, r3
 800c814:	461a      	mov	r2, r3
 800c816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c81a:	4413      	add	r3, r2
 800c81c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	00da      	lsls	r2, r3, #3
 800c82e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c832:	4413      	add	r3, r2
 800c834:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c838:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c83c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c840:	b29a      	uxth	r2, r3
 800c842:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c846:	801a      	strh	r2, [r3, #0]
 800c848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c84c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c85a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	785b      	ldrb	r3, [r3, #1]
 800c862:	2b00      	cmp	r3, #0
 800c864:	f040 8085 	bne.w	800c972 <USB_EPStartXfer+0x1688>
 800c868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c86c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c87a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c884:	b29b      	uxth	r3, r3
 800c886:	461a      	mov	r2, r3
 800c888:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c88c:	4413      	add	r3, r2
 800c88e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c896:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	00da      	lsls	r2, r3, #3
 800c8a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c8a4:	4413      	add	r3, r2
 800c8a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c8aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c8ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c8b2:	881b      	ldrh	r3, [r3, #0]
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c8ba:	b29a      	uxth	r2, r3
 800c8bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c8c0:	801a      	strh	r2, [r3, #0]
 800c8c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8c6:	2b3e      	cmp	r3, #62	@ 0x3e
 800c8c8:	d923      	bls.n	800c912 <USB_EPStartXfer+0x1628>
 800c8ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8ce:	095b      	lsrs	r3, r3, #5
 800c8d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c8d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8d8:	f003 031f 	and.w	r3, r3, #31
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d104      	bne.n	800c8ea <USB_EPStartXfer+0x1600>
 800c8e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c8e4:	3b01      	subs	r3, #1
 800c8e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c8ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c8ee:	881b      	ldrh	r3, [r3, #0]
 800c8f0:	b29a      	uxth	r2, r3
 800c8f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	029b      	lsls	r3, r3, #10
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	b29b      	uxth	r3, r3
 800c900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c908:	b29a      	uxth	r2, r3
 800c90a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c90e:	801a      	strh	r2, [r3, #0]
 800c910:	e05c      	b.n	800c9cc <USB_EPStartXfer+0x16e2>
 800c912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c916:	2b00      	cmp	r3, #0
 800c918:	d10c      	bne.n	800c934 <USB_EPStartXfer+0x164a>
 800c91a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c91e:	881b      	ldrh	r3, [r3, #0]
 800c920:	b29b      	uxth	r3, r3
 800c922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c92a:	b29a      	uxth	r2, r3
 800c92c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c930:	801a      	strh	r2, [r3, #0]
 800c932:	e04b      	b.n	800c9cc <USB_EPStartXfer+0x16e2>
 800c934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c938:	085b      	lsrs	r3, r3, #1
 800c93a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c93e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c942:	f003 0301 	and.w	r3, r3, #1
 800c946:	2b00      	cmp	r3, #0
 800c948:	d004      	beq.n	800c954 <USB_EPStartXfer+0x166a>
 800c94a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c94e:	3301      	adds	r3, #1
 800c950:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c954:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c958:	881b      	ldrh	r3, [r3, #0]
 800c95a:	b29a      	uxth	r2, r3
 800c95c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c960:	b29b      	uxth	r3, r3
 800c962:	029b      	lsls	r3, r3, #10
 800c964:	b29b      	uxth	r3, r3
 800c966:	4313      	orrs	r3, r2
 800c968:	b29a      	uxth	r2, r3
 800c96a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c96e:	801a      	strh	r2, [r3, #0]
 800c970:	e02c      	b.n	800c9cc <USB_EPStartXfer+0x16e2>
 800c972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	785b      	ldrb	r3, [r3, #1]
 800c97e:	2b01      	cmp	r3, #1
 800c980:	d124      	bne.n	800c9cc <USB_EPStartXfer+0x16e2>
 800c982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c986:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c990:	b29b      	uxth	r3, r3
 800c992:	461a      	mov	r2, r3
 800c994:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c998:	4413      	add	r3, r2
 800c99a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c99e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	00da      	lsls	r2, r3, #3
 800c9ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c9b0:	4413      	add	r3, r2
 800c9b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c9b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c9ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9be:	b29a      	uxth	r2, r3
 800c9c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c9c4:	801a      	strh	r2, [r3, #0]
 800c9c6:	e001      	b.n	800c9cc <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	e03a      	b.n	800ca42 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c9cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c9d4:	681a      	ldr	r2, [r3, #0]
 800c9d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	009b      	lsls	r3, r3, #2
 800c9e4:	4413      	add	r3, r2
 800c9e6:	881b      	ldrh	r3, [r3, #0]
 800c9e8:	b29b      	uxth	r3, r3
 800c9ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c9ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9f2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c9f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c9fa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c9fe:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ca02:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ca06:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ca0a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ca0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca16:	681a      	ldr	r2, [r3, #0]
 800ca18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	009b      	lsls	r3, r3, #2
 800ca26:	441a      	add	r2, r3
 800ca28:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ca2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca3c:	b29b      	uxth	r3, r3
 800ca3e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ca40:	2300      	movs	r3, #0
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b085      	sub	sp, #20
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	785b      	ldrb	r3, [r3, #1]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d020      	beq.n	800caa0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	009b      	lsls	r3, r3, #2
 800ca66:	4413      	add	r3, r2
 800ca68:	881b      	ldrh	r3, [r3, #0]
 800ca6a:	b29b      	uxth	r3, r3
 800ca6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca74:	81bb      	strh	r3, [r7, #12]
 800ca76:	89bb      	ldrh	r3, [r7, #12]
 800ca78:	f083 0310 	eor.w	r3, r3, #16
 800ca7c:	81bb      	strh	r3, [r7, #12]
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	781b      	ldrb	r3, [r3, #0]
 800ca84:	009b      	lsls	r3, r3, #2
 800ca86:	441a      	add	r2, r3
 800ca88:	89bb      	ldrh	r3, [r7, #12]
 800ca8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca9a:	b29b      	uxth	r3, r3
 800ca9c:	8013      	strh	r3, [r2, #0]
 800ca9e:	e01f      	b.n	800cae0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800caa0:	687a      	ldr	r2, [r7, #4]
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	781b      	ldrb	r3, [r3, #0]
 800caa6:	009b      	lsls	r3, r3, #2
 800caa8:	4413      	add	r3, r2
 800caaa:	881b      	ldrh	r3, [r3, #0]
 800caac:	b29b      	uxth	r3, r3
 800caae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cab6:	81fb      	strh	r3, [r7, #14]
 800cab8:	89fb      	ldrh	r3, [r7, #14]
 800caba:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cabe:	81fb      	strh	r3, [r7, #14]
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	009b      	lsls	r3, r3, #2
 800cac8:	441a      	add	r2, r3
 800caca:	89fb      	ldrh	r3, [r7, #14]
 800cacc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cad0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cad4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cadc:	b29b      	uxth	r3, r3
 800cade:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cae0:	2300      	movs	r3, #0
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3714      	adds	r7, #20
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr

0800caee <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800caee:	b480      	push	{r7}
 800caf0:	b087      	sub	sp, #28
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	6078      	str	r0, [r7, #4]
 800caf6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	7b1b      	ldrb	r3, [r3, #12]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	f040 809d 	bne.w	800cc3c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	785b      	ldrb	r3, [r3, #1]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d04c      	beq.n	800cba4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	009b      	lsls	r3, r3, #2
 800cb12:	4413      	add	r3, r2
 800cb14:	881b      	ldrh	r3, [r3, #0]
 800cb16:	823b      	strh	r3, [r7, #16]
 800cb18:	8a3b      	ldrh	r3, [r7, #16]
 800cb1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d01b      	beq.n	800cb5a <USB_EPClearStall+0x6c>
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	4413      	add	r3, r2
 800cb2c:	881b      	ldrh	r3, [r3, #0]
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb38:	81fb      	strh	r3, [r7, #14]
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	009b      	lsls	r3, r3, #2
 800cb42:	441a      	add	r2, r3
 800cb44:	89fb      	ldrh	r3, [r7, #14]
 800cb46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb52:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cb56:	b29b      	uxth	r3, r3
 800cb58:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	78db      	ldrb	r3, [r3, #3]
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d06c      	beq.n	800cc3c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cb62:	687a      	ldr	r2, [r7, #4]
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	009b      	lsls	r3, r3, #2
 800cb6a:	4413      	add	r3, r2
 800cb6c:	881b      	ldrh	r3, [r3, #0]
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb78:	81bb      	strh	r3, [r7, #12]
 800cb7a:	89bb      	ldrh	r3, [r7, #12]
 800cb7c:	f083 0320 	eor.w	r3, r3, #32
 800cb80:	81bb      	strh	r3, [r7, #12]
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	009b      	lsls	r3, r3, #2
 800cb8a:	441a      	add	r2, r3
 800cb8c:	89bb      	ldrh	r3, [r7, #12]
 800cb8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb9e:	b29b      	uxth	r3, r3
 800cba0:	8013      	strh	r3, [r2, #0]
 800cba2:	e04b      	b.n	800cc3c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cba4:	687a      	ldr	r2, [r7, #4]
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	009b      	lsls	r3, r3, #2
 800cbac:	4413      	add	r3, r2
 800cbae:	881b      	ldrh	r3, [r3, #0]
 800cbb0:	82fb      	strh	r3, [r7, #22]
 800cbb2:	8afb      	ldrh	r3, [r7, #22]
 800cbb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d01b      	beq.n	800cbf4 <USB_EPClearStall+0x106>
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	009b      	lsls	r3, r3, #2
 800cbc4:	4413      	add	r3, r2
 800cbc6:	881b      	ldrh	r3, [r3, #0]
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cbce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbd2:	82bb      	strh	r3, [r7, #20]
 800cbd4:	687a      	ldr	r2, [r7, #4]
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	009b      	lsls	r3, r3, #2
 800cbdc:	441a      	add	r2, r3
 800cbde:	8abb      	ldrh	r3, [r7, #20]
 800cbe0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cbe4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cbe8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cbec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	4413      	add	r3, r2
 800cbfe:	881b      	ldrh	r3, [r3, #0]
 800cc00:	b29b      	uxth	r3, r3
 800cc02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cc06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc0a:	827b      	strh	r3, [r7, #18]
 800cc0c:	8a7b      	ldrh	r3, [r7, #18]
 800cc0e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cc12:	827b      	strh	r3, [r7, #18]
 800cc14:	8a7b      	ldrh	r3, [r7, #18]
 800cc16:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cc1a:	827b      	strh	r3, [r7, #18]
 800cc1c:	687a      	ldr	r2, [r7, #4]
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	009b      	lsls	r3, r3, #2
 800cc24:	441a      	add	r2, r3
 800cc26:	8a7b      	ldrh	r3, [r7, #18]
 800cc28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc38:	b29b      	uxth	r3, r3
 800cc3a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800cc3c:	2300      	movs	r3, #0
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	371c      	adds	r7, #28
 800cc42:	46bd      	mov	sp, r7
 800cc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc48:	4770      	bx	lr

0800cc4a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800cc4a:	b480      	push	{r7}
 800cc4c:	b083      	sub	sp, #12
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	6078      	str	r0, [r7, #4]
 800cc52:	460b      	mov	r3, r1
 800cc54:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800cc56:	78fb      	ldrb	r3, [r7, #3]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d103      	bne.n	800cc64 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2280      	movs	r2, #128	@ 0x80
 800cc60:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800cc64:	2300      	movs	r3, #0
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	370c      	adds	r7, #12
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr

0800cc72 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800cc72:	b480      	push	{r7}
 800cc74:	b083      	sub	sp, #12
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc8a:	b29a      	uxth	r2, r3
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800cc92:	2300      	movs	r3, #0
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	370c      	adds	r7, #12
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b085      	sub	sp, #20
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800ccae:	b29b      	uxth	r3, r3
 800ccb0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	3714      	adds	r7, #20
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr

0800ccc0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b08b      	sub	sp, #44	@ 0x2c
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	60f8      	str	r0, [r7, #12]
 800ccc8:	60b9      	str	r1, [r7, #8]
 800ccca:	4611      	mov	r1, r2
 800cccc:	461a      	mov	r2, r3
 800ccce:	460b      	mov	r3, r1
 800ccd0:	80fb      	strh	r3, [r7, #6]
 800ccd2:	4613      	mov	r3, r2
 800ccd4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ccd6:	88bb      	ldrh	r3, [r7, #4]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	085b      	lsrs	r3, r3, #1
 800ccdc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cce6:	88fa      	ldrh	r2, [r7, #6]
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	4413      	add	r3, r2
 800ccec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ccf0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ccf2:	69bb      	ldr	r3, [r7, #24]
 800ccf4:	627b      	str	r3, [r7, #36]	@ 0x24
 800ccf6:	e01b      	b.n	800cd30 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800ccf8:	69fb      	ldr	r3, [r7, #28]
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ccfe:	69fb      	ldr	r3, [r7, #28]
 800cd00:	3301      	adds	r3, #1
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	021b      	lsls	r3, r3, #8
 800cd06:	b21a      	sxth	r2, r3
 800cd08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cd0c:	4313      	orrs	r3, r2
 800cd0e:	b21b      	sxth	r3, r3
 800cd10:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800cd12:	6a3b      	ldr	r3, [r7, #32]
 800cd14:	8a7a      	ldrh	r2, [r7, #18]
 800cd16:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800cd18:	6a3b      	ldr	r3, [r7, #32]
 800cd1a:	3302      	adds	r3, #2
 800cd1c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800cd1e:	69fb      	ldr	r3, [r7, #28]
 800cd20:	3301      	adds	r3, #1
 800cd22:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800cd24:	69fb      	ldr	r3, [r7, #28]
 800cd26:	3301      	adds	r3, #1
 800cd28:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cd2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd2c:	3b01      	subs	r3, #1
 800cd2e:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d1e0      	bne.n	800ccf8 <USB_WritePMA+0x38>
  }
}
 800cd36:	bf00      	nop
 800cd38:	bf00      	nop
 800cd3a:	372c      	adds	r7, #44	@ 0x2c
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd42:	4770      	bx	lr

0800cd44 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b08b      	sub	sp, #44	@ 0x2c
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	60f8      	str	r0, [r7, #12]
 800cd4c:	60b9      	str	r1, [r7, #8]
 800cd4e:	4611      	mov	r1, r2
 800cd50:	461a      	mov	r2, r3
 800cd52:	460b      	mov	r3, r1
 800cd54:	80fb      	strh	r3, [r7, #6]
 800cd56:	4613      	mov	r3, r2
 800cd58:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800cd5a:	88bb      	ldrh	r3, [r7, #4]
 800cd5c:	085b      	lsrs	r3, r3, #1
 800cd5e:	b29b      	uxth	r3, r3
 800cd60:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cd6a:	88fa      	ldrh	r2, [r7, #6]
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	4413      	add	r3, r2
 800cd70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cd74:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cd76:	69bb      	ldr	r3, [r7, #24]
 800cd78:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd7a:	e018      	b.n	800cdae <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800cd7c:	6a3b      	ldr	r3, [r7, #32]
 800cd7e:	881b      	ldrh	r3, [r3, #0]
 800cd80:	b29b      	uxth	r3, r3
 800cd82:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800cd84:	6a3b      	ldr	r3, [r7, #32]
 800cd86:	3302      	adds	r3, #2
 800cd88:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	b2da      	uxtb	r2, r3
 800cd8e:	69fb      	ldr	r3, [r7, #28]
 800cd90:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cd92:	69fb      	ldr	r3, [r7, #28]
 800cd94:	3301      	adds	r3, #1
 800cd96:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	0a1b      	lsrs	r3, r3, #8
 800cd9c:	b2da      	uxtb	r2, r3
 800cd9e:	69fb      	ldr	r3, [r7, #28]
 800cda0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cda2:	69fb      	ldr	r3, [r7, #28]
 800cda4:	3301      	adds	r3, #1
 800cda6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cda8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdaa:	3b01      	subs	r3, #1
 800cdac:	627b      	str	r3, [r7, #36]	@ 0x24
 800cdae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d1e3      	bne.n	800cd7c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800cdb4:	88bb      	ldrh	r3, [r7, #4]
 800cdb6:	f003 0301 	and.w	r3, r3, #1
 800cdba:	b29b      	uxth	r3, r3
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d007      	beq.n	800cdd0 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800cdc0:	6a3b      	ldr	r3, [r7, #32]
 800cdc2:	881b      	ldrh	r3, [r3, #0]
 800cdc4:	b29b      	uxth	r3, r3
 800cdc6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cdc8:	693b      	ldr	r3, [r7, #16]
 800cdca:	b2da      	uxtb	r2, r3
 800cdcc:	69fb      	ldr	r3, [r7, #28]
 800cdce:	701a      	strb	r2, [r3, #0]
  }
}
 800cdd0:	bf00      	nop
 800cdd2:	372c      	adds	r7, #44	@ 0x2c
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdda:	4770      	bx	lr

0800cddc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	460b      	mov	r3, r1
 800cde6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800cde8:	2010      	movs	r0, #16
 800cdea:	f006 fbf1 	bl	80135d0 <USBD_static_malloc>
 800cdee:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d109      	bne.n	800ce0a <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	32b0      	adds	r2, #176	@ 0xb0
 800ce00:	2100      	movs	r1, #0
 800ce02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ce06:	2302      	movs	r3, #2
 800ce08:	e048      	b.n	800ce9c <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	32b0      	adds	r2, #176	@ 0xb0
 800ce14:	68f9      	ldr	r1, [r7, #12]
 800ce16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	32b0      	adds	r2, #176	@ 0xb0
 800ce24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	7c1b      	ldrb	r3, [r3, #16]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d10d      	bne.n	800ce52 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800ce36:	4b1b      	ldr	r3, [pc, #108]	@ (800cea4 <USBD_HID_Init+0xc8>)
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	f003 020f 	and.w	r2, r3, #15
 800ce3e:	6879      	ldr	r1, [r7, #4]
 800ce40:	4613      	mov	r3, r2
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	4413      	add	r3, r2
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	440b      	add	r3, r1
 800ce4a:	3326      	adds	r3, #38	@ 0x26
 800ce4c:	2207      	movs	r2, #7
 800ce4e:	801a      	strh	r2, [r3, #0]
 800ce50:	e00c      	b.n	800ce6c <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800ce52:	4b14      	ldr	r3, [pc, #80]	@ (800cea4 <USBD_HID_Init+0xc8>)
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	f003 020f 	and.w	r2, r3, #15
 800ce5a:	6879      	ldr	r1, [r7, #4]
 800ce5c:	4613      	mov	r3, r2
 800ce5e:	009b      	lsls	r3, r3, #2
 800ce60:	4413      	add	r3, r2
 800ce62:	009b      	lsls	r3, r3, #2
 800ce64:	440b      	add	r3, r1
 800ce66:	3326      	adds	r3, #38	@ 0x26
 800ce68:	220a      	movs	r2, #10
 800ce6a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800ce6c:	4b0d      	ldr	r3, [pc, #52]	@ (800cea4 <USBD_HID_Init+0xc8>)
 800ce6e:	7819      	ldrb	r1, [r3, #0]
 800ce70:	2304      	movs	r3, #4
 800ce72:	2203      	movs	r2, #3
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f006 fa64 	bl	8013342 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800ce7a:	4b0a      	ldr	r3, [pc, #40]	@ (800cea4 <USBD_HID_Init+0xc8>)
 800ce7c:	781b      	ldrb	r3, [r3, #0]
 800ce7e:	f003 020f 	and.w	r2, r3, #15
 800ce82:	6879      	ldr	r1, [r7, #4]
 800ce84:	4613      	mov	r3, r2
 800ce86:	009b      	lsls	r3, r3, #2
 800ce88:	4413      	add	r3, r2
 800ce8a:	009b      	lsls	r3, r3, #2
 800ce8c:	440b      	add	r3, r1
 800ce8e:	3324      	adds	r3, #36	@ 0x24
 800ce90:	2201      	movs	r2, #1
 800ce92:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	2200      	movs	r2, #0
 800ce98:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800ce9a:	2300      	movs	r3, #0
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3710      	adds	r7, #16
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	200000df 	.word	0x200000df

0800cea8 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b082      	sub	sp, #8
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	460b      	mov	r3, r1
 800ceb2:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800ceb4:	4b1f      	ldr	r3, [pc, #124]	@ (800cf34 <USBD_HID_DeInit+0x8c>)
 800ceb6:	781b      	ldrb	r3, [r3, #0]
 800ceb8:	4619      	mov	r1, r3
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f006 fa67 	bl	801338e <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800cec0:	4b1c      	ldr	r3, [pc, #112]	@ (800cf34 <USBD_HID_DeInit+0x8c>)
 800cec2:	781b      	ldrb	r3, [r3, #0]
 800cec4:	f003 020f 	and.w	r2, r3, #15
 800cec8:	6879      	ldr	r1, [r7, #4]
 800ceca:	4613      	mov	r3, r2
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	4413      	add	r3, r2
 800ced0:	009b      	lsls	r3, r3, #2
 800ced2:	440b      	add	r3, r1
 800ced4:	3324      	adds	r3, #36	@ 0x24
 800ced6:	2200      	movs	r2, #0
 800ced8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800ceda:	4b16      	ldr	r3, [pc, #88]	@ (800cf34 <USBD_HID_DeInit+0x8c>)
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	f003 020f 	and.w	r2, r3, #15
 800cee2:	6879      	ldr	r1, [r7, #4]
 800cee4:	4613      	mov	r3, r2
 800cee6:	009b      	lsls	r3, r3, #2
 800cee8:	4413      	add	r3, r2
 800ceea:	009b      	lsls	r3, r3, #2
 800ceec:	440b      	add	r3, r1
 800ceee:	3326      	adds	r3, #38	@ 0x26
 800cef0:	2200      	movs	r2, #0
 800cef2:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	32b0      	adds	r2, #176	@ 0xb0
 800cefe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d011      	beq.n	800cf2a <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	32b0      	adds	r2, #176	@ 0xb0
 800cf10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf14:	4618      	mov	r0, r3
 800cf16:	f006 fb69 	bl	80135ec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	32b0      	adds	r2, #176	@ 0xb0
 800cf24:	2100      	movs	r1, #0
 800cf26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800cf2a:	2300      	movs	r3, #0
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3708      	adds	r7, #8
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	200000df 	.word	0x200000df

0800cf38 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b086      	sub	sp, #24
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	32b0      	adds	r2, #176	@ 0xb0
 800cf4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf50:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf52:	2300      	movs	r3, #0
 800cf54:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800cf56:	2300      	movs	r3, #0
 800cf58:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d101      	bne.n	800cf64 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800cf60:	2303      	movs	r3, #3
 800cf62:	e0e8      	b.n	800d136 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	781b      	ldrb	r3, [r3, #0]
 800cf68:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d046      	beq.n	800cffe <USBD_HID_Setup+0xc6>
 800cf70:	2b20      	cmp	r3, #32
 800cf72:	f040 80d8 	bne.w	800d126 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	785b      	ldrb	r3, [r3, #1]
 800cf7a:	3b02      	subs	r3, #2
 800cf7c:	2b09      	cmp	r3, #9
 800cf7e:	d836      	bhi.n	800cfee <USBD_HID_Setup+0xb6>
 800cf80:	a201      	add	r2, pc, #4	@ (adr r2, 800cf88 <USBD_HID_Setup+0x50>)
 800cf82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf86:	bf00      	nop
 800cf88:	0800cfdf 	.word	0x0800cfdf
 800cf8c:	0800cfbf 	.word	0x0800cfbf
 800cf90:	0800cfef 	.word	0x0800cfef
 800cf94:	0800cfef 	.word	0x0800cfef
 800cf98:	0800cfef 	.word	0x0800cfef
 800cf9c:	0800cfef 	.word	0x0800cfef
 800cfa0:	0800cfef 	.word	0x0800cfef
 800cfa4:	0800cfef 	.word	0x0800cfef
 800cfa8:	0800cfcd 	.word	0x0800cfcd
 800cfac:	0800cfb1 	.word	0x0800cfb1
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	885b      	ldrh	r3, [r3, #2]
 800cfb4:	b2db      	uxtb	r3, r3
 800cfb6:	461a      	mov	r2, r3
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	601a      	str	r2, [r3, #0]
          break;
 800cfbc:	e01e      	b.n	800cffc <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	4619      	mov	r1, r3
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f001 fb71 	bl	800e6ac <USBD_CtlSendData>
          break;
 800cfca:	e017      	b.n	800cffc <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	885b      	ldrh	r3, [r3, #2]
 800cfd0:	0a1b      	lsrs	r3, r3, #8
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	b2db      	uxtb	r3, r3
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	605a      	str	r2, [r3, #4]
          break;
 800cfdc:	e00e      	b.n	800cffc <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	3304      	adds	r3, #4
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f001 fb60 	bl	800e6ac <USBD_CtlSendData>
          break;
 800cfec:	e006      	b.n	800cffc <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800cfee:	6839      	ldr	r1, [r7, #0]
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f001 faea 	bl	800e5ca <USBD_CtlError>
          ret = USBD_FAIL;
 800cff6:	2303      	movs	r3, #3
 800cff8:	75fb      	strb	r3, [r7, #23]
          break;
 800cffa:	bf00      	nop
      }
      break;
 800cffc:	e09a      	b.n	800d134 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	785b      	ldrb	r3, [r3, #1]
 800d002:	2b0b      	cmp	r3, #11
 800d004:	f200 8086 	bhi.w	800d114 <USBD_HID_Setup+0x1dc>
 800d008:	a201      	add	r2, pc, #4	@ (adr r2, 800d010 <USBD_HID_Setup+0xd8>)
 800d00a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d00e:	bf00      	nop
 800d010:	0800d041 	.word	0x0800d041
 800d014:	0800d123 	.word	0x0800d123
 800d018:	0800d115 	.word	0x0800d115
 800d01c:	0800d115 	.word	0x0800d115
 800d020:	0800d115 	.word	0x0800d115
 800d024:	0800d115 	.word	0x0800d115
 800d028:	0800d06b 	.word	0x0800d06b
 800d02c:	0800d115 	.word	0x0800d115
 800d030:	0800d115 	.word	0x0800d115
 800d034:	0800d115 	.word	0x0800d115
 800d038:	0800d0c3 	.word	0x0800d0c3
 800d03c:	0800d0ed 	.word	0x0800d0ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d046:	b2db      	uxtb	r3, r3
 800d048:	2b03      	cmp	r3, #3
 800d04a:	d107      	bne.n	800d05c <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d04c:	f107 030a 	add.w	r3, r7, #10
 800d050:	2202      	movs	r2, #2
 800d052:	4619      	mov	r1, r3
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f001 fb29 	bl	800e6ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d05a:	e063      	b.n	800d124 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800d05c:	6839      	ldr	r1, [r7, #0]
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f001 fab3 	bl	800e5ca <USBD_CtlError>
            ret = USBD_FAIL;
 800d064:	2303      	movs	r3, #3
 800d066:	75fb      	strb	r3, [r7, #23]
          break;
 800d068:	e05c      	b.n	800d124 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	885b      	ldrh	r3, [r3, #2]
 800d06e:	0a1b      	lsrs	r3, r3, #8
 800d070:	b29b      	uxth	r3, r3
 800d072:	2b22      	cmp	r3, #34	@ 0x22
 800d074:	d108      	bne.n	800d088 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	88db      	ldrh	r3, [r3, #6]
 800d07a:	2b3f      	cmp	r3, #63	@ 0x3f
 800d07c:	bf28      	it	cs
 800d07e:	233f      	movcs	r3, #63	@ 0x3f
 800d080:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800d082:	4b2f      	ldr	r3, [pc, #188]	@ (800d140 <USBD_HID_Setup+0x208>)
 800d084:	613b      	str	r3, [r7, #16]
 800d086:	e015      	b.n	800d0b4 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	885b      	ldrh	r3, [r3, #2]
 800d08c:	0a1b      	lsrs	r3, r3, #8
 800d08e:	b29b      	uxth	r3, r3
 800d090:	2b21      	cmp	r3, #33	@ 0x21
 800d092:	d108      	bne.n	800d0a6 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 800d094:	4b2b      	ldr	r3, [pc, #172]	@ (800d144 <USBD_HID_Setup+0x20c>)
 800d096:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	88db      	ldrh	r3, [r3, #6]
 800d09c:	2b09      	cmp	r3, #9
 800d09e:	bf28      	it	cs
 800d0a0:	2309      	movcs	r3, #9
 800d0a2:	82bb      	strh	r3, [r7, #20]
 800d0a4:	e006      	b.n	800d0b4 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800d0a6:	6839      	ldr	r1, [r7, #0]
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f001 fa8e 	bl	800e5ca <USBD_CtlError>
            ret = USBD_FAIL;
 800d0ae:	2303      	movs	r3, #3
 800d0b0:	75fb      	strb	r3, [r7, #23]
            break;
 800d0b2:	e037      	b.n	800d124 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800d0b4:	8abb      	ldrh	r3, [r7, #20]
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	6939      	ldr	r1, [r7, #16]
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f001 faf6 	bl	800e6ac <USBD_CtlSendData>
          break;
 800d0c0:	e030      	b.n	800d124 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0c8:	b2db      	uxtb	r3, r3
 800d0ca:	2b03      	cmp	r3, #3
 800d0cc:	d107      	bne.n	800d0de <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	3308      	adds	r3, #8
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f001 fae8 	bl	800e6ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d0dc:	e022      	b.n	800d124 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800d0de:	6839      	ldr	r1, [r7, #0]
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f001 fa72 	bl	800e5ca <USBD_CtlError>
            ret = USBD_FAIL;
 800d0e6:	2303      	movs	r3, #3
 800d0e8:	75fb      	strb	r3, [r7, #23]
          break;
 800d0ea:	e01b      	b.n	800d124 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	2b03      	cmp	r3, #3
 800d0f6:	d106      	bne.n	800d106 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	885b      	ldrh	r3, [r3, #2]
 800d0fc:	b2db      	uxtb	r3, r3
 800d0fe:	461a      	mov	r2, r3
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d104:	e00e      	b.n	800d124 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800d106:	6839      	ldr	r1, [r7, #0]
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f001 fa5e 	bl	800e5ca <USBD_CtlError>
            ret = USBD_FAIL;
 800d10e:	2303      	movs	r3, #3
 800d110:	75fb      	strb	r3, [r7, #23]
          break;
 800d112:	e007      	b.n	800d124 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d114:	6839      	ldr	r1, [r7, #0]
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f001 fa57 	bl	800e5ca <USBD_CtlError>
          ret = USBD_FAIL;
 800d11c:	2303      	movs	r3, #3
 800d11e:	75fb      	strb	r3, [r7, #23]
          break;
 800d120:	e000      	b.n	800d124 <USBD_HID_Setup+0x1ec>
          break;
 800d122:	bf00      	nop
      }
      break;
 800d124:	e006      	b.n	800d134 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800d126:	6839      	ldr	r1, [r7, #0]
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f001 fa4e 	bl	800e5ca <USBD_CtlError>
      ret = USBD_FAIL;
 800d12e:	2303      	movs	r3, #3
 800d130:	75fb      	strb	r3, [r7, #23]
      break;
 800d132:	bf00      	nop
  }

  return (uint8_t)ret;
 800d134:	7dfb      	ldrb	r3, [r7, #23]
}
 800d136:	4618      	mov	r0, r3
 800d138:	3718      	adds	r7, #24
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	200000a0 	.word	0x200000a0
 800d144:	20000088 	.word	0x20000088

0800d148 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b086      	sub	sp, #24
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	60f8      	str	r0, [r7, #12]
 800d150:	60b9      	str	r1, [r7, #8]
 800d152:	4613      	mov	r3, r2
 800d154:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	32b0      	adds	r2, #176	@ 0xb0
 800d160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d164:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d101      	bne.n	800d170 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d16c:	2303      	movs	r3, #3
 800d16e:	e014      	b.n	800d19a <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d176:	b2db      	uxtb	r3, r3
 800d178:	2b03      	cmp	r3, #3
 800d17a:	d10d      	bne.n	800d198 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	7b1b      	ldrb	r3, [r3, #12]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d109      	bne.n	800d198 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	2201      	movs	r2, #1
 800d188:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800d18a:	4b06      	ldr	r3, [pc, #24]	@ (800d1a4 <USBD_HID_SendReport+0x5c>)
 800d18c:	7819      	ldrb	r1, [r3, #0]
 800d18e:	88fb      	ldrh	r3, [r7, #6]
 800d190:	68ba      	ldr	r2, [r7, #8]
 800d192:	68f8      	ldr	r0, [r7, #12]
 800d194:	f006 f9a4 	bl	80134e0 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800d198:	2300      	movs	r3, #0
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	3718      	adds	r7, #24
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}
 800d1a2:	bf00      	nop
 800d1a4:	200000df 	.word	0x200000df

0800d1a8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b084      	sub	sp, #16
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800d1b0:	2181      	movs	r1, #129	@ 0x81
 800d1b2:	4809      	ldr	r0, [pc, #36]	@ (800d1d8 <USBD_HID_GetFSCfgDesc+0x30>)
 800d1b4:	f000 fba9 	bl	800d90a <USBD_GetEpDesc>
 800d1b8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d002      	beq.n	800d1c6 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	220a      	movs	r2, #10
 800d1c4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2222      	movs	r2, #34	@ 0x22
 800d1ca:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800d1cc:	4b02      	ldr	r3, [pc, #8]	@ (800d1d8 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3710      	adds	r7, #16
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	20000064 	.word	0x20000064

0800d1dc <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b084      	sub	sp, #16
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800d1e4:	2181      	movs	r1, #129	@ 0x81
 800d1e6:	4809      	ldr	r0, [pc, #36]	@ (800d20c <USBD_HID_GetHSCfgDesc+0x30>)
 800d1e8:	f000 fb8f 	bl	800d90a <USBD_GetEpDesc>
 800d1ec:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d002      	beq.n	800d1fa <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	2207      	movs	r2, #7
 800d1f8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2222      	movs	r2, #34	@ 0x22
 800d1fe:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800d200:	4b02      	ldr	r3, [pc, #8]	@ (800d20c <USBD_HID_GetHSCfgDesc+0x30>)
}
 800d202:	4618      	mov	r0, r3
 800d204:	3710      	adds	r7, #16
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}
 800d20a:	bf00      	nop
 800d20c:	20000064 	.word	0x20000064

0800d210 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b084      	sub	sp, #16
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800d218:	2181      	movs	r1, #129	@ 0x81
 800d21a:	4809      	ldr	r0, [pc, #36]	@ (800d240 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 800d21c:	f000 fb75 	bl	800d90a <USBD_GetEpDesc>
 800d220:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d002      	beq.n	800d22e <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	220a      	movs	r2, #10
 800d22c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2222      	movs	r2, #34	@ 0x22
 800d232:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800d234:	4b02      	ldr	r3, [pc, #8]	@ (800d240 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800d236:	4618      	mov	r0, r3
 800d238:	3710      	adds	r7, #16
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}
 800d23e:	bf00      	nop
 800d240:	20000064 	.word	0x20000064

0800d244 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d244:	b480      	push	{r7}
 800d246:	b083      	sub	sp, #12
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	460b      	mov	r3, r1
 800d24e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	32b0      	adds	r2, #176	@ 0xb0
 800d25a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d25e:	2200      	movs	r2, #0
 800d260:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800d262:	2300      	movs	r3, #0
}
 800d264:	4618      	mov	r0, r3
 800d266:	370c      	adds	r7, #12
 800d268:	46bd      	mov	sp, r7
 800d26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26e:	4770      	bx	lr

0800d270 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800d270:	b480      	push	{r7}
 800d272:	b083      	sub	sp, #12
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	220a      	movs	r2, #10
 800d27c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800d27e:	4b03      	ldr	r3, [pc, #12]	@ (800d28c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800d280:	4618      	mov	r0, r3
 800d282:	370c      	adds	r7, #12
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr
 800d28c:	20000094 	.word	0x20000094

0800d290 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b086      	sub	sp, #24
 800d294:	af00      	add	r7, sp, #0
 800d296:	60f8      	str	r0, [r7, #12]
 800d298:	60b9      	str	r1, [r7, #8]
 800d29a:	4613      	mov	r3, r2
 800d29c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d101      	bne.n	800d2a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d2a4:	2303      	movs	r3, #3
 800d2a6:	e01f      	b.n	800d2e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d003      	beq.n	800d2ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	68ba      	ldr	r2, [r7, #8]
 800d2ca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	79fa      	ldrb	r2, [r7, #7]
 800d2da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d2dc:	68f8      	ldr	r0, [r7, #12]
 800d2de:	f005 ffc5 	bl	801326c <USBD_LL_Init>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d2e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3718      	adds	r7, #24
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}

0800d2f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b084      	sub	sp, #16
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d101      	bne.n	800d308 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d304:	2303      	movs	r3, #3
 800d306:	e025      	b.n	800d354 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	683a      	ldr	r2, [r7, #0]
 800d30c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	32ae      	adds	r2, #174	@ 0xae
 800d31a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d320:	2b00      	cmp	r3, #0
 800d322:	d00f      	beq.n	800d344 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	32ae      	adds	r2, #174	@ 0xae
 800d32e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d334:	f107 020e 	add.w	r2, r7, #14
 800d338:	4610      	mov	r0, r2
 800d33a:	4798      	blx	r3
 800d33c:	4602      	mov	r2, r0
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d34a:	1c5a      	adds	r2, r3, #1
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800d352:	2300      	movs	r3, #0
}
 800d354:	4618      	mov	r0, r3
 800d356:	3710      	adds	r7, #16
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}

0800d35c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b082      	sub	sp, #8
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f005 ffd1 	bl	801330c <USBD_LL_Start>
 800d36a:	4603      	mov	r3, r0
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3708      	adds	r7, #8
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d374:	b480      	push	{r7}
 800d376:	b083      	sub	sp, #12
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d37c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d37e:	4618      	mov	r0, r3
 800d380:	370c      	adds	r7, #12
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr

0800d38a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d38a:	b580      	push	{r7, lr}
 800d38c:	b084      	sub	sp, #16
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
 800d392:	460b      	mov	r3, r1
 800d394:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d396:	2300      	movs	r3, #0
 800d398:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d009      	beq.n	800d3b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	78fa      	ldrb	r2, [r7, #3]
 800d3ae:	4611      	mov	r1, r2
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	4798      	blx	r3
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3710      	adds	r7, #16
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}

0800d3c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d3c2:	b580      	push	{r7, lr}
 800d3c4:	b084      	sub	sp, #16
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	6078      	str	r0, [r7, #4]
 800d3ca:	460b      	mov	r3, r1
 800d3cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d3d8:	685b      	ldr	r3, [r3, #4]
 800d3da:	78fa      	ldrb	r2, [r7, #3]
 800d3dc:	4611      	mov	r1, r2
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	4798      	blx	r3
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d001      	beq.n	800d3ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d3e8:	2303      	movs	r3, #3
 800d3ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3710      	adds	r7, #16
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}

0800d3f6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d3f6:	b580      	push	{r7, lr}
 800d3f8:	b084      	sub	sp, #16
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	6078      	str	r0, [r7, #4]
 800d3fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d406:	6839      	ldr	r1, [r7, #0]
 800d408:	4618      	mov	r0, r3
 800d40a:	f001 f8a4 	bl	800e556 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2201      	movs	r2, #1
 800d412:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d41c:	461a      	mov	r2, r3
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d42a:	f003 031f 	and.w	r3, r3, #31
 800d42e:	2b02      	cmp	r3, #2
 800d430:	d01a      	beq.n	800d468 <USBD_LL_SetupStage+0x72>
 800d432:	2b02      	cmp	r3, #2
 800d434:	d822      	bhi.n	800d47c <USBD_LL_SetupStage+0x86>
 800d436:	2b00      	cmp	r3, #0
 800d438:	d002      	beq.n	800d440 <USBD_LL_SetupStage+0x4a>
 800d43a:	2b01      	cmp	r3, #1
 800d43c:	d00a      	beq.n	800d454 <USBD_LL_SetupStage+0x5e>
 800d43e:	e01d      	b.n	800d47c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d446:	4619      	mov	r1, r3
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f000 fad1 	bl	800d9f0 <USBD_StdDevReq>
 800d44e:	4603      	mov	r3, r0
 800d450:	73fb      	strb	r3, [r7, #15]
      break;
 800d452:	e020      	b.n	800d496 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d45a:	4619      	mov	r1, r3
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f000 fb39 	bl	800dad4 <USBD_StdItfReq>
 800d462:	4603      	mov	r3, r0
 800d464:	73fb      	strb	r3, [r7, #15]
      break;
 800d466:	e016      	b.n	800d496 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d46e:	4619      	mov	r1, r3
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f000 fb9b 	bl	800dbac <USBD_StdEPReq>
 800d476:	4603      	mov	r3, r0
 800d478:	73fb      	strb	r3, [r7, #15]
      break;
 800d47a:	e00c      	b.n	800d496 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d482:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d486:	b2db      	uxtb	r3, r3
 800d488:	4619      	mov	r1, r3
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f005 ff9e 	bl	80133cc <USBD_LL_StallEP>
 800d490:	4603      	mov	r3, r0
 800d492:	73fb      	strb	r3, [r7, #15]
      break;
 800d494:	bf00      	nop
  }

  return ret;
 800d496:	7bfb      	ldrb	r3, [r7, #15]
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3710      	adds	r7, #16
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b086      	sub	sp, #24
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	60f8      	str	r0, [r7, #12]
 800d4a8:	460b      	mov	r3, r1
 800d4aa:	607a      	str	r2, [r7, #4]
 800d4ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d4b2:	7afb      	ldrb	r3, [r7, #11]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d16e      	bne.n	800d596 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d4be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d4c6:	2b03      	cmp	r3, #3
 800d4c8:	f040 8098 	bne.w	800d5fc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	689a      	ldr	r2, [r3, #8]
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	68db      	ldr	r3, [r3, #12]
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d913      	bls.n	800d500 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	689a      	ldr	r2, [r3, #8]
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	68db      	ldr	r3, [r3, #12]
 800d4e0:	1ad2      	subs	r2, r2, r3
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	68da      	ldr	r2, [r3, #12]
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	689b      	ldr	r3, [r3, #8]
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	bf28      	it	cs
 800d4f2:	4613      	movcs	r3, r2
 800d4f4:	461a      	mov	r2, r3
 800d4f6:	6879      	ldr	r1, [r7, #4]
 800d4f8:	68f8      	ldr	r0, [r7, #12]
 800d4fa:	f001 f903 	bl	800e704 <USBD_CtlContinueRx>
 800d4fe:	e07d      	b.n	800d5fc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d506:	f003 031f 	and.w	r3, r3, #31
 800d50a:	2b02      	cmp	r3, #2
 800d50c:	d014      	beq.n	800d538 <USBD_LL_DataOutStage+0x98>
 800d50e:	2b02      	cmp	r3, #2
 800d510:	d81d      	bhi.n	800d54e <USBD_LL_DataOutStage+0xae>
 800d512:	2b00      	cmp	r3, #0
 800d514:	d002      	beq.n	800d51c <USBD_LL_DataOutStage+0x7c>
 800d516:	2b01      	cmp	r3, #1
 800d518:	d003      	beq.n	800d522 <USBD_LL_DataOutStage+0x82>
 800d51a:	e018      	b.n	800d54e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d51c:	2300      	movs	r3, #0
 800d51e:	75bb      	strb	r3, [r7, #22]
            break;
 800d520:	e018      	b.n	800d554 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	4619      	mov	r1, r3
 800d52c:	68f8      	ldr	r0, [r7, #12]
 800d52e:	f000 f9d2 	bl	800d8d6 <USBD_CoreFindIF>
 800d532:	4603      	mov	r3, r0
 800d534:	75bb      	strb	r3, [r7, #22]
            break;
 800d536:	e00d      	b.n	800d554 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d53e:	b2db      	uxtb	r3, r3
 800d540:	4619      	mov	r1, r3
 800d542:	68f8      	ldr	r0, [r7, #12]
 800d544:	f000 f9d4 	bl	800d8f0 <USBD_CoreFindEP>
 800d548:	4603      	mov	r3, r0
 800d54a:	75bb      	strb	r3, [r7, #22]
            break;
 800d54c:	e002      	b.n	800d554 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d54e:	2300      	movs	r3, #0
 800d550:	75bb      	strb	r3, [r7, #22]
            break;
 800d552:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d554:	7dbb      	ldrb	r3, [r7, #22]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d119      	bne.n	800d58e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d560:	b2db      	uxtb	r3, r3
 800d562:	2b03      	cmp	r3, #3
 800d564:	d113      	bne.n	800d58e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d566:	7dba      	ldrb	r2, [r7, #22]
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	32ae      	adds	r2, #174	@ 0xae
 800d56c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d570:	691b      	ldr	r3, [r3, #16]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d00b      	beq.n	800d58e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d576:	7dba      	ldrb	r2, [r7, #22]
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d57e:	7dba      	ldrb	r2, [r7, #22]
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	32ae      	adds	r2, #174	@ 0xae
 800d584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d588:	691b      	ldr	r3, [r3, #16]
 800d58a:	68f8      	ldr	r0, [r7, #12]
 800d58c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d58e:	68f8      	ldr	r0, [r7, #12]
 800d590:	f001 f8c9 	bl	800e726 <USBD_CtlSendStatus>
 800d594:	e032      	b.n	800d5fc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d596:	7afb      	ldrb	r3, [r7, #11]
 800d598:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d59c:	b2db      	uxtb	r3, r3
 800d59e:	4619      	mov	r1, r3
 800d5a0:	68f8      	ldr	r0, [r7, #12]
 800d5a2:	f000 f9a5 	bl	800d8f0 <USBD_CoreFindEP>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d5aa:	7dbb      	ldrb	r3, [r7, #22]
 800d5ac:	2bff      	cmp	r3, #255	@ 0xff
 800d5ae:	d025      	beq.n	800d5fc <USBD_LL_DataOutStage+0x15c>
 800d5b0:	7dbb      	ldrb	r3, [r7, #22]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d122      	bne.n	800d5fc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5bc:	b2db      	uxtb	r3, r3
 800d5be:	2b03      	cmp	r3, #3
 800d5c0:	d117      	bne.n	800d5f2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d5c2:	7dba      	ldrb	r2, [r7, #22]
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	32ae      	adds	r2, #174	@ 0xae
 800d5c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5cc:	699b      	ldr	r3, [r3, #24]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d00f      	beq.n	800d5f2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d5d2:	7dba      	ldrb	r2, [r7, #22]
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d5da:	7dba      	ldrb	r2, [r7, #22]
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	32ae      	adds	r2, #174	@ 0xae
 800d5e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5e4:	699b      	ldr	r3, [r3, #24]
 800d5e6:	7afa      	ldrb	r2, [r7, #11]
 800d5e8:	4611      	mov	r1, r2
 800d5ea:	68f8      	ldr	r0, [r7, #12]
 800d5ec:	4798      	blx	r3
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d5f2:	7dfb      	ldrb	r3, [r7, #23]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d001      	beq.n	800d5fc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d5f8:	7dfb      	ldrb	r3, [r7, #23]
 800d5fa:	e000      	b.n	800d5fe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d5fc:	2300      	movs	r3, #0
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3718      	adds	r7, #24
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}

0800d606 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d606:	b580      	push	{r7, lr}
 800d608:	b086      	sub	sp, #24
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	60f8      	str	r0, [r7, #12]
 800d60e:	460b      	mov	r3, r1
 800d610:	607a      	str	r2, [r7, #4]
 800d612:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d614:	7afb      	ldrb	r3, [r7, #11]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d16f      	bne.n	800d6fa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	3314      	adds	r3, #20
 800d61e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d626:	2b02      	cmp	r3, #2
 800d628:	d15a      	bne.n	800d6e0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d62a:	693b      	ldr	r3, [r7, #16]
 800d62c:	689a      	ldr	r2, [r3, #8]
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	68db      	ldr	r3, [r3, #12]
 800d632:	429a      	cmp	r2, r3
 800d634:	d914      	bls.n	800d660 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	689a      	ldr	r2, [r3, #8]
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	68db      	ldr	r3, [r3, #12]
 800d63e:	1ad2      	subs	r2, r2, r3
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d644:	693b      	ldr	r3, [r7, #16]
 800d646:	689b      	ldr	r3, [r3, #8]
 800d648:	461a      	mov	r2, r3
 800d64a:	6879      	ldr	r1, [r7, #4]
 800d64c:	68f8      	ldr	r0, [r7, #12]
 800d64e:	f001 f848 	bl	800e6e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d652:	2300      	movs	r3, #0
 800d654:	2200      	movs	r2, #0
 800d656:	2100      	movs	r1, #0
 800d658:	68f8      	ldr	r0, [r7, #12]
 800d65a:	f005 ff62 	bl	8013522 <USBD_LL_PrepareReceive>
 800d65e:	e03f      	b.n	800d6e0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	68da      	ldr	r2, [r3, #12]
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	689b      	ldr	r3, [r3, #8]
 800d668:	429a      	cmp	r2, r3
 800d66a:	d11c      	bne.n	800d6a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	685a      	ldr	r2, [r3, #4]
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d674:	429a      	cmp	r2, r3
 800d676:	d316      	bcc.n	800d6a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	685a      	ldr	r2, [r3, #4]
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d682:	429a      	cmp	r2, r3
 800d684:	d20f      	bcs.n	800d6a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d686:	2200      	movs	r2, #0
 800d688:	2100      	movs	r1, #0
 800d68a:	68f8      	ldr	r0, [r7, #12]
 800d68c:	f001 f829 	bl	800e6e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	2200      	movs	r2, #0
 800d694:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d698:	2300      	movs	r3, #0
 800d69a:	2200      	movs	r2, #0
 800d69c:	2100      	movs	r1, #0
 800d69e:	68f8      	ldr	r0, [r7, #12]
 800d6a0:	f005 ff3f 	bl	8013522 <USBD_LL_PrepareReceive>
 800d6a4:	e01c      	b.n	800d6e0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6ac:	b2db      	uxtb	r3, r3
 800d6ae:	2b03      	cmp	r3, #3
 800d6b0:	d10f      	bne.n	800d6d2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d6b8:	68db      	ldr	r3, [r3, #12]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d009      	beq.n	800d6d2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d6cc:	68db      	ldr	r3, [r3, #12]
 800d6ce:	68f8      	ldr	r0, [r7, #12]
 800d6d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d6d2:	2180      	movs	r1, #128	@ 0x80
 800d6d4:	68f8      	ldr	r0, [r7, #12]
 800d6d6:	f005 fe79 	bl	80133cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d6da:	68f8      	ldr	r0, [r7, #12]
 800d6dc:	f001 f836 	bl	800e74c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d03a      	beq.n	800d760 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d6ea:	68f8      	ldr	r0, [r7, #12]
 800d6ec:	f7ff fe42 	bl	800d374 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d6f8:	e032      	b.n	800d760 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d6fa:	7afb      	ldrb	r3, [r7, #11]
 800d6fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d700:	b2db      	uxtb	r3, r3
 800d702:	4619      	mov	r1, r3
 800d704:	68f8      	ldr	r0, [r7, #12]
 800d706:	f000 f8f3 	bl	800d8f0 <USBD_CoreFindEP>
 800d70a:	4603      	mov	r3, r0
 800d70c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d70e:	7dfb      	ldrb	r3, [r7, #23]
 800d710:	2bff      	cmp	r3, #255	@ 0xff
 800d712:	d025      	beq.n	800d760 <USBD_LL_DataInStage+0x15a>
 800d714:	7dfb      	ldrb	r3, [r7, #23]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d122      	bne.n	800d760 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d720:	b2db      	uxtb	r3, r3
 800d722:	2b03      	cmp	r3, #3
 800d724:	d11c      	bne.n	800d760 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d726:	7dfa      	ldrb	r2, [r7, #23]
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	32ae      	adds	r2, #174	@ 0xae
 800d72c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d730:	695b      	ldr	r3, [r3, #20]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d014      	beq.n	800d760 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d736:	7dfa      	ldrb	r2, [r7, #23]
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d73e:	7dfa      	ldrb	r2, [r7, #23]
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	32ae      	adds	r2, #174	@ 0xae
 800d744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d748:	695b      	ldr	r3, [r3, #20]
 800d74a:	7afa      	ldrb	r2, [r7, #11]
 800d74c:	4611      	mov	r1, r2
 800d74e:	68f8      	ldr	r0, [r7, #12]
 800d750:	4798      	blx	r3
 800d752:	4603      	mov	r3, r0
 800d754:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d756:	7dbb      	ldrb	r3, [r7, #22]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d001      	beq.n	800d760 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d75c:	7dbb      	ldrb	r3, [r7, #22]
 800d75e:	e000      	b.n	800d762 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d760:	2300      	movs	r3, #0
}
 800d762:	4618      	mov	r0, r3
 800d764:	3718      	adds	r7, #24
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}

0800d76a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d76a:	b580      	push	{r7, lr}
 800d76c:	b084      	sub	sp, #16
 800d76e:	af00      	add	r7, sp, #0
 800d770:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d772:	2300      	movs	r3, #0
 800d774:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2201      	movs	r2, #1
 800d77a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2200      	movs	r2, #0
 800d782:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2200      	movs	r2, #0
 800d78a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2200      	movs	r2, #0
 800d790:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2200      	movs	r2, #0
 800d798:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d014      	beq.n	800d7d0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d00e      	beq.n	800d7d0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	687a      	ldr	r2, [r7, #4]
 800d7bc:	6852      	ldr	r2, [r2, #4]
 800d7be:	b2d2      	uxtb	r2, r2
 800d7c0:	4611      	mov	r1, r2
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	4798      	blx	r3
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d001      	beq.n	800d7d0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d7cc:	2303      	movs	r3, #3
 800d7ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d7d0:	2340      	movs	r3, #64	@ 0x40
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	2100      	movs	r1, #0
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f005 fdb3 	bl	8013342 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2201      	movs	r2, #1
 800d7e0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2240      	movs	r2, #64	@ 0x40
 800d7e8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d7ec:	2340      	movs	r3, #64	@ 0x40
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	2180      	movs	r1, #128	@ 0x80
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f005 fda5 	bl	8013342 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2240      	movs	r2, #64	@ 0x40
 800d802:	621a      	str	r2, [r3, #32]

  return ret;
 800d804:	7bfb      	ldrb	r3, [r7, #15]
}
 800d806:	4618      	mov	r0, r3
 800d808:	3710      	adds	r7, #16
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}

0800d80e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d80e:	b480      	push	{r7}
 800d810:	b083      	sub	sp, #12
 800d812:	af00      	add	r7, sp, #0
 800d814:	6078      	str	r0, [r7, #4]
 800d816:	460b      	mov	r3, r1
 800d818:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	78fa      	ldrb	r2, [r7, #3]
 800d81e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d820:	2300      	movs	r3, #0
}
 800d822:	4618      	mov	r0, r3
 800d824:	370c      	adds	r7, #12
 800d826:	46bd      	mov	sp, r7
 800d828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82c:	4770      	bx	lr

0800d82e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d82e:	b480      	push	{r7}
 800d830:	b083      	sub	sp, #12
 800d832:	af00      	add	r7, sp, #0
 800d834:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d83c:	b2db      	uxtb	r3, r3
 800d83e:	2b04      	cmp	r3, #4
 800d840:	d006      	beq.n	800d850 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d848:	b2da      	uxtb	r2, r3
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2204      	movs	r2, #4
 800d854:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800d858:	2300      	movs	r3, #0
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	370c      	adds	r7, #12
 800d85e:	46bd      	mov	sp, r7
 800d860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d864:	4770      	bx	lr

0800d866 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d866:	b480      	push	{r7}
 800d868:	b083      	sub	sp, #12
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d874:	b2db      	uxtb	r3, r3
 800d876:	2b04      	cmp	r3, #4
 800d878:	d106      	bne.n	800d888 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d880:	b2da      	uxtb	r2, r3
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d888:	2300      	movs	r3, #0
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	370c      	adds	r7, #12
 800d88e:	46bd      	mov	sp, r7
 800d890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d894:	4770      	bx	lr

0800d896 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d896:	b580      	push	{r7, lr}
 800d898:	b082      	sub	sp, #8
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8a4:	b2db      	uxtb	r3, r3
 800d8a6:	2b03      	cmp	r3, #3
 800d8a8:	d110      	bne.n	800d8cc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d00b      	beq.n	800d8cc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8ba:	69db      	ldr	r3, [r3, #28]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d005      	beq.n	800d8cc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8c6:	69db      	ldr	r3, [r3, #28]
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d8cc:	2300      	movs	r3, #0
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3708      	adds	r7, #8
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}

0800d8d6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d8d6:	b480      	push	{r7}
 800d8d8:	b083      	sub	sp, #12
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	6078      	str	r0, [r7, #4]
 800d8de:	460b      	mov	r3, r1
 800d8e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d8e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	370c      	adds	r7, #12
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ee:	4770      	bx	lr

0800d8f0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b083      	sub	sp, #12
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d8fc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	370c      	adds	r7, #12
 800d902:	46bd      	mov	sp, r7
 800d904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d908:	4770      	bx	lr

0800d90a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d90a:	b580      	push	{r7, lr}
 800d90c:	b086      	sub	sp, #24
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
 800d912:	460b      	mov	r3, r1
 800d914:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d91e:	2300      	movs	r3, #0
 800d920:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	885b      	ldrh	r3, [r3, #2]
 800d926:	b29b      	uxth	r3, r3
 800d928:	68fa      	ldr	r2, [r7, #12]
 800d92a:	7812      	ldrb	r2, [r2, #0]
 800d92c:	4293      	cmp	r3, r2
 800d92e:	d91f      	bls.n	800d970 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	781b      	ldrb	r3, [r3, #0]
 800d934:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d936:	e013      	b.n	800d960 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d938:	f107 030a 	add.w	r3, r7, #10
 800d93c:	4619      	mov	r1, r3
 800d93e:	6978      	ldr	r0, [r7, #20]
 800d940:	f000 f81b 	bl	800d97a <USBD_GetNextDesc>
 800d944:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	785b      	ldrb	r3, [r3, #1]
 800d94a:	2b05      	cmp	r3, #5
 800d94c:	d108      	bne.n	800d960 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	789b      	ldrb	r3, [r3, #2]
 800d956:	78fa      	ldrb	r2, [r7, #3]
 800d958:	429a      	cmp	r2, r3
 800d95a:	d008      	beq.n	800d96e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d95c:	2300      	movs	r3, #0
 800d95e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	885b      	ldrh	r3, [r3, #2]
 800d964:	b29a      	uxth	r2, r3
 800d966:	897b      	ldrh	r3, [r7, #10]
 800d968:	429a      	cmp	r2, r3
 800d96a:	d8e5      	bhi.n	800d938 <USBD_GetEpDesc+0x2e>
 800d96c:	e000      	b.n	800d970 <USBD_GetEpDesc+0x66>
          break;
 800d96e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d970:	693b      	ldr	r3, [r7, #16]
}
 800d972:	4618      	mov	r0, r3
 800d974:	3718      	adds	r7, #24
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}

0800d97a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d97a:	b480      	push	{r7}
 800d97c:	b085      	sub	sp, #20
 800d97e:	af00      	add	r7, sp, #0
 800d980:	6078      	str	r0, [r7, #4]
 800d982:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	881b      	ldrh	r3, [r3, #0]
 800d98c:	68fa      	ldr	r2, [r7, #12]
 800d98e:	7812      	ldrb	r2, [r2, #0]
 800d990:	4413      	add	r3, r2
 800d992:	b29a      	uxth	r2, r3
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	781b      	ldrb	r3, [r3, #0]
 800d99c:	461a      	mov	r2, r3
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	4413      	add	r3, r2
 800d9a2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d9a4:	68fb      	ldr	r3, [r7, #12]
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3714      	adds	r7, #20
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b0:	4770      	bx	lr

0800d9b2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d9b2:	b480      	push	{r7}
 800d9b4:	b087      	sub	sp, #28
 800d9b6:	af00      	add	r7, sp, #0
 800d9b8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	3301      	adds	r3, #1
 800d9c8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d9d0:	8a3b      	ldrh	r3, [r7, #16]
 800d9d2:	021b      	lsls	r3, r3, #8
 800d9d4:	b21a      	sxth	r2, r3
 800d9d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d9da:	4313      	orrs	r3, r2
 800d9dc:	b21b      	sxth	r3, r3
 800d9de:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d9e0:	89fb      	ldrh	r3, [r7, #14]
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	371c      	adds	r7, #28
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ec:	4770      	bx	lr
	...

0800d9f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b084      	sub	sp, #16
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800da06:	2b40      	cmp	r3, #64	@ 0x40
 800da08:	d005      	beq.n	800da16 <USBD_StdDevReq+0x26>
 800da0a:	2b40      	cmp	r3, #64	@ 0x40
 800da0c:	d857      	bhi.n	800dabe <USBD_StdDevReq+0xce>
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d00f      	beq.n	800da32 <USBD_StdDevReq+0x42>
 800da12:	2b20      	cmp	r3, #32
 800da14:	d153      	bne.n	800dabe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	32ae      	adds	r2, #174	@ 0xae
 800da20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da24:	689b      	ldr	r3, [r3, #8]
 800da26:	6839      	ldr	r1, [r7, #0]
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	4798      	blx	r3
 800da2c:	4603      	mov	r3, r0
 800da2e:	73fb      	strb	r3, [r7, #15]
      break;
 800da30:	e04a      	b.n	800dac8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	785b      	ldrb	r3, [r3, #1]
 800da36:	2b09      	cmp	r3, #9
 800da38:	d83b      	bhi.n	800dab2 <USBD_StdDevReq+0xc2>
 800da3a:	a201      	add	r2, pc, #4	@ (adr r2, 800da40 <USBD_StdDevReq+0x50>)
 800da3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da40:	0800da95 	.word	0x0800da95
 800da44:	0800daa9 	.word	0x0800daa9
 800da48:	0800dab3 	.word	0x0800dab3
 800da4c:	0800da9f 	.word	0x0800da9f
 800da50:	0800dab3 	.word	0x0800dab3
 800da54:	0800da73 	.word	0x0800da73
 800da58:	0800da69 	.word	0x0800da69
 800da5c:	0800dab3 	.word	0x0800dab3
 800da60:	0800da8b 	.word	0x0800da8b
 800da64:	0800da7d 	.word	0x0800da7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800da68:	6839      	ldr	r1, [r7, #0]
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f000 fa3c 	bl	800dee8 <USBD_GetDescriptor>
          break;
 800da70:	e024      	b.n	800dabc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800da72:	6839      	ldr	r1, [r7, #0]
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f000 fbcb 	bl	800e210 <USBD_SetAddress>
          break;
 800da7a:	e01f      	b.n	800dabc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800da7c:	6839      	ldr	r1, [r7, #0]
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f000 fc0a 	bl	800e298 <USBD_SetConfig>
 800da84:	4603      	mov	r3, r0
 800da86:	73fb      	strb	r3, [r7, #15]
          break;
 800da88:	e018      	b.n	800dabc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800da8a:	6839      	ldr	r1, [r7, #0]
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f000 fcad 	bl	800e3ec <USBD_GetConfig>
          break;
 800da92:	e013      	b.n	800dabc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800da94:	6839      	ldr	r1, [r7, #0]
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f000 fcde 	bl	800e458 <USBD_GetStatus>
          break;
 800da9c:	e00e      	b.n	800dabc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800da9e:	6839      	ldr	r1, [r7, #0]
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f000 fd0d 	bl	800e4c0 <USBD_SetFeature>
          break;
 800daa6:	e009      	b.n	800dabc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800daa8:	6839      	ldr	r1, [r7, #0]
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f000 fd31 	bl	800e512 <USBD_ClrFeature>
          break;
 800dab0:	e004      	b.n	800dabc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800dab2:	6839      	ldr	r1, [r7, #0]
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 fd88 	bl	800e5ca <USBD_CtlError>
          break;
 800daba:	bf00      	nop
      }
      break;
 800dabc:	e004      	b.n	800dac8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800dabe:	6839      	ldr	r1, [r7, #0]
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f000 fd82 	bl	800e5ca <USBD_CtlError>
      break;
 800dac6:	bf00      	nop
  }

  return ret;
 800dac8:	7bfb      	ldrb	r3, [r7, #15]
}
 800daca:	4618      	mov	r0, r3
 800dacc:	3710      	adds	r7, #16
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
 800dad2:	bf00      	nop

0800dad4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b084      	sub	sp, #16
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dade:	2300      	movs	r3, #0
 800dae0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	781b      	ldrb	r3, [r3, #0]
 800dae6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800daea:	2b40      	cmp	r3, #64	@ 0x40
 800daec:	d005      	beq.n	800dafa <USBD_StdItfReq+0x26>
 800daee:	2b40      	cmp	r3, #64	@ 0x40
 800daf0:	d852      	bhi.n	800db98 <USBD_StdItfReq+0xc4>
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d001      	beq.n	800dafa <USBD_StdItfReq+0x26>
 800daf6:	2b20      	cmp	r3, #32
 800daf8:	d14e      	bne.n	800db98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db00:	b2db      	uxtb	r3, r3
 800db02:	3b01      	subs	r3, #1
 800db04:	2b02      	cmp	r3, #2
 800db06:	d840      	bhi.n	800db8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	889b      	ldrh	r3, [r3, #4]
 800db0c:	b2db      	uxtb	r3, r3
 800db0e:	2b01      	cmp	r3, #1
 800db10:	d836      	bhi.n	800db80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	889b      	ldrh	r3, [r3, #4]
 800db16:	b2db      	uxtb	r3, r3
 800db18:	4619      	mov	r1, r3
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f7ff fedb 	bl	800d8d6 <USBD_CoreFindIF>
 800db20:	4603      	mov	r3, r0
 800db22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800db24:	7bbb      	ldrb	r3, [r7, #14]
 800db26:	2bff      	cmp	r3, #255	@ 0xff
 800db28:	d01d      	beq.n	800db66 <USBD_StdItfReq+0x92>
 800db2a:	7bbb      	ldrb	r3, [r7, #14]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d11a      	bne.n	800db66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800db30:	7bba      	ldrb	r2, [r7, #14]
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	32ae      	adds	r2, #174	@ 0xae
 800db36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db3a:	689b      	ldr	r3, [r3, #8]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d00f      	beq.n	800db60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800db40:	7bba      	ldrb	r2, [r7, #14]
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800db48:	7bba      	ldrb	r2, [r7, #14]
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	32ae      	adds	r2, #174	@ 0xae
 800db4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db52:	689b      	ldr	r3, [r3, #8]
 800db54:	6839      	ldr	r1, [r7, #0]
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	4798      	blx	r3
 800db5a:	4603      	mov	r3, r0
 800db5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800db5e:	e004      	b.n	800db6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800db60:	2303      	movs	r3, #3
 800db62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800db64:	e001      	b.n	800db6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800db66:	2303      	movs	r3, #3
 800db68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	88db      	ldrh	r3, [r3, #6]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d110      	bne.n	800db94 <USBD_StdItfReq+0xc0>
 800db72:	7bfb      	ldrb	r3, [r7, #15]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d10d      	bne.n	800db94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f000 fdd4 	bl	800e726 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800db7e:	e009      	b.n	800db94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800db80:	6839      	ldr	r1, [r7, #0]
 800db82:	6878      	ldr	r0, [r7, #4]
 800db84:	f000 fd21 	bl	800e5ca <USBD_CtlError>
          break;
 800db88:	e004      	b.n	800db94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800db8a:	6839      	ldr	r1, [r7, #0]
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f000 fd1c 	bl	800e5ca <USBD_CtlError>
          break;
 800db92:	e000      	b.n	800db96 <USBD_StdItfReq+0xc2>
          break;
 800db94:	bf00      	nop
      }
      break;
 800db96:	e004      	b.n	800dba2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800db98:	6839      	ldr	r1, [r7, #0]
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f000 fd15 	bl	800e5ca <USBD_CtlError>
      break;
 800dba0:	bf00      	nop
  }

  return ret;
 800dba2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3710      	adds	r7, #16
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	889b      	ldrh	r3, [r3, #4]
 800dbbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dbc8:	2b40      	cmp	r3, #64	@ 0x40
 800dbca:	d007      	beq.n	800dbdc <USBD_StdEPReq+0x30>
 800dbcc:	2b40      	cmp	r3, #64	@ 0x40
 800dbce:	f200 817f 	bhi.w	800ded0 <USBD_StdEPReq+0x324>
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d02a      	beq.n	800dc2c <USBD_StdEPReq+0x80>
 800dbd6:	2b20      	cmp	r3, #32
 800dbd8:	f040 817a 	bne.w	800ded0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800dbdc:	7bbb      	ldrb	r3, [r7, #14]
 800dbde:	4619      	mov	r1, r3
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f7ff fe85 	bl	800d8f0 <USBD_CoreFindEP>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dbea:	7b7b      	ldrb	r3, [r7, #13]
 800dbec:	2bff      	cmp	r3, #255	@ 0xff
 800dbee:	f000 8174 	beq.w	800deda <USBD_StdEPReq+0x32e>
 800dbf2:	7b7b      	ldrb	r3, [r7, #13]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	f040 8170 	bne.w	800deda <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800dbfa:	7b7a      	ldrb	r2, [r7, #13]
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800dc02:	7b7a      	ldrb	r2, [r7, #13]
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	32ae      	adds	r2, #174	@ 0xae
 800dc08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc0c:	689b      	ldr	r3, [r3, #8]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	f000 8163 	beq.w	800deda <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800dc14:	7b7a      	ldrb	r2, [r7, #13]
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	32ae      	adds	r2, #174	@ 0xae
 800dc1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc1e:	689b      	ldr	r3, [r3, #8]
 800dc20:	6839      	ldr	r1, [r7, #0]
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	4798      	blx	r3
 800dc26:	4603      	mov	r3, r0
 800dc28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800dc2a:	e156      	b.n	800deda <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	785b      	ldrb	r3, [r3, #1]
 800dc30:	2b03      	cmp	r3, #3
 800dc32:	d008      	beq.n	800dc46 <USBD_StdEPReq+0x9a>
 800dc34:	2b03      	cmp	r3, #3
 800dc36:	f300 8145 	bgt.w	800dec4 <USBD_StdEPReq+0x318>
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	f000 809b 	beq.w	800dd76 <USBD_StdEPReq+0x1ca>
 800dc40:	2b01      	cmp	r3, #1
 800dc42:	d03c      	beq.n	800dcbe <USBD_StdEPReq+0x112>
 800dc44:	e13e      	b.n	800dec4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc4c:	b2db      	uxtb	r3, r3
 800dc4e:	2b02      	cmp	r3, #2
 800dc50:	d002      	beq.n	800dc58 <USBD_StdEPReq+0xac>
 800dc52:	2b03      	cmp	r3, #3
 800dc54:	d016      	beq.n	800dc84 <USBD_StdEPReq+0xd8>
 800dc56:	e02c      	b.n	800dcb2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dc58:	7bbb      	ldrb	r3, [r7, #14]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d00d      	beq.n	800dc7a <USBD_StdEPReq+0xce>
 800dc5e:	7bbb      	ldrb	r3, [r7, #14]
 800dc60:	2b80      	cmp	r3, #128	@ 0x80
 800dc62:	d00a      	beq.n	800dc7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dc64:	7bbb      	ldrb	r3, [r7, #14]
 800dc66:	4619      	mov	r1, r3
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f005 fbaf 	bl	80133cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc6e:	2180      	movs	r1, #128	@ 0x80
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f005 fbab 	bl	80133cc <USBD_LL_StallEP>
 800dc76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dc78:	e020      	b.n	800dcbc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800dc7a:	6839      	ldr	r1, [r7, #0]
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f000 fca4 	bl	800e5ca <USBD_CtlError>
              break;
 800dc82:	e01b      	b.n	800dcbc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	885b      	ldrh	r3, [r3, #2]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d10e      	bne.n	800dcaa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dc8c:	7bbb      	ldrb	r3, [r7, #14]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d00b      	beq.n	800dcaa <USBD_StdEPReq+0xfe>
 800dc92:	7bbb      	ldrb	r3, [r7, #14]
 800dc94:	2b80      	cmp	r3, #128	@ 0x80
 800dc96:	d008      	beq.n	800dcaa <USBD_StdEPReq+0xfe>
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	88db      	ldrh	r3, [r3, #6]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d104      	bne.n	800dcaa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dca0:	7bbb      	ldrb	r3, [r7, #14]
 800dca2:	4619      	mov	r1, r3
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f005 fb91 	bl	80133cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f000 fd3b 	bl	800e726 <USBD_CtlSendStatus>

              break;
 800dcb0:	e004      	b.n	800dcbc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800dcb2:	6839      	ldr	r1, [r7, #0]
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f000 fc88 	bl	800e5ca <USBD_CtlError>
              break;
 800dcba:	bf00      	nop
          }
          break;
 800dcbc:	e107      	b.n	800dece <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dcc4:	b2db      	uxtb	r3, r3
 800dcc6:	2b02      	cmp	r3, #2
 800dcc8:	d002      	beq.n	800dcd0 <USBD_StdEPReq+0x124>
 800dcca:	2b03      	cmp	r3, #3
 800dccc:	d016      	beq.n	800dcfc <USBD_StdEPReq+0x150>
 800dcce:	e04b      	b.n	800dd68 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dcd0:	7bbb      	ldrb	r3, [r7, #14]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d00d      	beq.n	800dcf2 <USBD_StdEPReq+0x146>
 800dcd6:	7bbb      	ldrb	r3, [r7, #14]
 800dcd8:	2b80      	cmp	r3, #128	@ 0x80
 800dcda:	d00a      	beq.n	800dcf2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dcdc:	7bbb      	ldrb	r3, [r7, #14]
 800dcde:	4619      	mov	r1, r3
 800dce0:	6878      	ldr	r0, [r7, #4]
 800dce2:	f005 fb73 	bl	80133cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dce6:	2180      	movs	r1, #128	@ 0x80
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f005 fb6f 	bl	80133cc <USBD_LL_StallEP>
 800dcee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dcf0:	e040      	b.n	800dd74 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800dcf2:	6839      	ldr	r1, [r7, #0]
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f000 fc68 	bl	800e5ca <USBD_CtlError>
              break;
 800dcfa:	e03b      	b.n	800dd74 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	885b      	ldrh	r3, [r3, #2]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d136      	bne.n	800dd72 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dd04:	7bbb      	ldrb	r3, [r7, #14]
 800dd06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d004      	beq.n	800dd18 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800dd0e:	7bbb      	ldrb	r3, [r7, #14]
 800dd10:	4619      	mov	r1, r3
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f005 fb79 	bl	801340a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f000 fd04 	bl	800e726 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800dd1e:	7bbb      	ldrb	r3, [r7, #14]
 800dd20:	4619      	mov	r1, r3
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f7ff fde4 	bl	800d8f0 <USBD_CoreFindEP>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dd2c:	7b7b      	ldrb	r3, [r7, #13]
 800dd2e:	2bff      	cmp	r3, #255	@ 0xff
 800dd30:	d01f      	beq.n	800dd72 <USBD_StdEPReq+0x1c6>
 800dd32:	7b7b      	ldrb	r3, [r7, #13]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d11c      	bne.n	800dd72 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800dd38:	7b7a      	ldrb	r2, [r7, #13]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800dd40:	7b7a      	ldrb	r2, [r7, #13]
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	32ae      	adds	r2, #174	@ 0xae
 800dd46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd4a:	689b      	ldr	r3, [r3, #8]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d010      	beq.n	800dd72 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dd50:	7b7a      	ldrb	r2, [r7, #13]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	32ae      	adds	r2, #174	@ 0xae
 800dd56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd5a:	689b      	ldr	r3, [r3, #8]
 800dd5c:	6839      	ldr	r1, [r7, #0]
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	4798      	blx	r3
 800dd62:	4603      	mov	r3, r0
 800dd64:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800dd66:	e004      	b.n	800dd72 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800dd68:	6839      	ldr	r1, [r7, #0]
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f000 fc2d 	bl	800e5ca <USBD_CtlError>
              break;
 800dd70:	e000      	b.n	800dd74 <USBD_StdEPReq+0x1c8>
              break;
 800dd72:	bf00      	nop
          }
          break;
 800dd74:	e0ab      	b.n	800dece <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	2b02      	cmp	r3, #2
 800dd80:	d002      	beq.n	800dd88 <USBD_StdEPReq+0x1dc>
 800dd82:	2b03      	cmp	r3, #3
 800dd84:	d032      	beq.n	800ddec <USBD_StdEPReq+0x240>
 800dd86:	e097      	b.n	800deb8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd88:	7bbb      	ldrb	r3, [r7, #14]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d007      	beq.n	800dd9e <USBD_StdEPReq+0x1f2>
 800dd8e:	7bbb      	ldrb	r3, [r7, #14]
 800dd90:	2b80      	cmp	r3, #128	@ 0x80
 800dd92:	d004      	beq.n	800dd9e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800dd94:	6839      	ldr	r1, [r7, #0]
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f000 fc17 	bl	800e5ca <USBD_CtlError>
                break;
 800dd9c:	e091      	b.n	800dec2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	da0b      	bge.n	800ddbe <USBD_StdEPReq+0x212>
 800dda6:	7bbb      	ldrb	r3, [r7, #14]
 800dda8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ddac:	4613      	mov	r3, r2
 800ddae:	009b      	lsls	r3, r3, #2
 800ddb0:	4413      	add	r3, r2
 800ddb2:	009b      	lsls	r3, r3, #2
 800ddb4:	3310      	adds	r3, #16
 800ddb6:	687a      	ldr	r2, [r7, #4]
 800ddb8:	4413      	add	r3, r2
 800ddba:	3304      	adds	r3, #4
 800ddbc:	e00b      	b.n	800ddd6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ddbe:	7bbb      	ldrb	r3, [r7, #14]
 800ddc0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ddc4:	4613      	mov	r3, r2
 800ddc6:	009b      	lsls	r3, r3, #2
 800ddc8:	4413      	add	r3, r2
 800ddca:	009b      	lsls	r3, r3, #2
 800ddcc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ddd0:	687a      	ldr	r2, [r7, #4]
 800ddd2:	4413      	add	r3, r2
 800ddd4:	3304      	adds	r3, #4
 800ddd6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	2200      	movs	r2, #0
 800dddc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	2202      	movs	r2, #2
 800dde2:	4619      	mov	r1, r3
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f000 fc61 	bl	800e6ac <USBD_CtlSendData>
              break;
 800ddea:	e06a      	b.n	800dec2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ddec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	da11      	bge.n	800de18 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ddf4:	7bbb      	ldrb	r3, [r7, #14]
 800ddf6:	f003 020f 	and.w	r2, r3, #15
 800ddfa:	6879      	ldr	r1, [r7, #4]
 800ddfc:	4613      	mov	r3, r2
 800ddfe:	009b      	lsls	r3, r3, #2
 800de00:	4413      	add	r3, r2
 800de02:	009b      	lsls	r3, r3, #2
 800de04:	440b      	add	r3, r1
 800de06:	3324      	adds	r3, #36	@ 0x24
 800de08:	881b      	ldrh	r3, [r3, #0]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d117      	bne.n	800de3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800de0e:	6839      	ldr	r1, [r7, #0]
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f000 fbda 	bl	800e5ca <USBD_CtlError>
                  break;
 800de16:	e054      	b.n	800dec2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800de18:	7bbb      	ldrb	r3, [r7, #14]
 800de1a:	f003 020f 	and.w	r2, r3, #15
 800de1e:	6879      	ldr	r1, [r7, #4]
 800de20:	4613      	mov	r3, r2
 800de22:	009b      	lsls	r3, r3, #2
 800de24:	4413      	add	r3, r2
 800de26:	009b      	lsls	r3, r3, #2
 800de28:	440b      	add	r3, r1
 800de2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800de2e:	881b      	ldrh	r3, [r3, #0]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d104      	bne.n	800de3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800de34:	6839      	ldr	r1, [r7, #0]
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f000 fbc7 	bl	800e5ca <USBD_CtlError>
                  break;
 800de3c:	e041      	b.n	800dec2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de42:	2b00      	cmp	r3, #0
 800de44:	da0b      	bge.n	800de5e <USBD_StdEPReq+0x2b2>
 800de46:	7bbb      	ldrb	r3, [r7, #14]
 800de48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800de4c:	4613      	mov	r3, r2
 800de4e:	009b      	lsls	r3, r3, #2
 800de50:	4413      	add	r3, r2
 800de52:	009b      	lsls	r3, r3, #2
 800de54:	3310      	adds	r3, #16
 800de56:	687a      	ldr	r2, [r7, #4]
 800de58:	4413      	add	r3, r2
 800de5a:	3304      	adds	r3, #4
 800de5c:	e00b      	b.n	800de76 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800de5e:	7bbb      	ldrb	r3, [r7, #14]
 800de60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de64:	4613      	mov	r3, r2
 800de66:	009b      	lsls	r3, r3, #2
 800de68:	4413      	add	r3, r2
 800de6a:	009b      	lsls	r3, r3, #2
 800de6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800de70:	687a      	ldr	r2, [r7, #4]
 800de72:	4413      	add	r3, r2
 800de74:	3304      	adds	r3, #4
 800de76:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800de78:	7bbb      	ldrb	r3, [r7, #14]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d002      	beq.n	800de84 <USBD_StdEPReq+0x2d8>
 800de7e:	7bbb      	ldrb	r3, [r7, #14]
 800de80:	2b80      	cmp	r3, #128	@ 0x80
 800de82:	d103      	bne.n	800de8c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	2200      	movs	r2, #0
 800de88:	601a      	str	r2, [r3, #0]
 800de8a:	e00e      	b.n	800deaa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800de8c:	7bbb      	ldrb	r3, [r7, #14]
 800de8e:	4619      	mov	r1, r3
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f005 fad9 	bl	8013448 <USBD_LL_IsStallEP>
 800de96:	4603      	mov	r3, r0
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d003      	beq.n	800dea4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	2201      	movs	r2, #1
 800dea0:	601a      	str	r2, [r3, #0]
 800dea2:	e002      	b.n	800deaa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	2200      	movs	r2, #0
 800dea8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	2202      	movs	r2, #2
 800deae:	4619      	mov	r1, r3
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f000 fbfb 	bl	800e6ac <USBD_CtlSendData>
              break;
 800deb6:	e004      	b.n	800dec2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800deb8:	6839      	ldr	r1, [r7, #0]
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f000 fb85 	bl	800e5ca <USBD_CtlError>
              break;
 800dec0:	bf00      	nop
          }
          break;
 800dec2:	e004      	b.n	800dece <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800dec4:	6839      	ldr	r1, [r7, #0]
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f000 fb7f 	bl	800e5ca <USBD_CtlError>
          break;
 800decc:	bf00      	nop
      }
      break;
 800dece:	e005      	b.n	800dedc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ded0:	6839      	ldr	r1, [r7, #0]
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f000 fb79 	bl	800e5ca <USBD_CtlError>
      break;
 800ded8:	e000      	b.n	800dedc <USBD_StdEPReq+0x330>
      break;
 800deda:	bf00      	nop
  }

  return ret;
 800dedc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3710      	adds	r7, #16
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
	...

0800dee8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800def2:	2300      	movs	r3, #0
 800def4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800def6:	2300      	movs	r3, #0
 800def8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800defa:	2300      	movs	r3, #0
 800defc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	885b      	ldrh	r3, [r3, #2]
 800df02:	0a1b      	lsrs	r3, r3, #8
 800df04:	b29b      	uxth	r3, r3
 800df06:	3b01      	subs	r3, #1
 800df08:	2b0e      	cmp	r3, #14
 800df0a:	f200 8152 	bhi.w	800e1b2 <USBD_GetDescriptor+0x2ca>
 800df0e:	a201      	add	r2, pc, #4	@ (adr r2, 800df14 <USBD_GetDescriptor+0x2c>)
 800df10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df14:	0800df85 	.word	0x0800df85
 800df18:	0800df9d 	.word	0x0800df9d
 800df1c:	0800dfdd 	.word	0x0800dfdd
 800df20:	0800e1b3 	.word	0x0800e1b3
 800df24:	0800e1b3 	.word	0x0800e1b3
 800df28:	0800e153 	.word	0x0800e153
 800df2c:	0800e17f 	.word	0x0800e17f
 800df30:	0800e1b3 	.word	0x0800e1b3
 800df34:	0800e1b3 	.word	0x0800e1b3
 800df38:	0800e1b3 	.word	0x0800e1b3
 800df3c:	0800e1b3 	.word	0x0800e1b3
 800df40:	0800e1b3 	.word	0x0800e1b3
 800df44:	0800e1b3 	.word	0x0800e1b3
 800df48:	0800e1b3 	.word	0x0800e1b3
 800df4c:	0800df51 	.word	0x0800df51
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df56:	69db      	ldr	r3, [r3, #28]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d00b      	beq.n	800df74 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df62:	69db      	ldr	r3, [r3, #28]
 800df64:	687a      	ldr	r2, [r7, #4]
 800df66:	7c12      	ldrb	r2, [r2, #16]
 800df68:	f107 0108 	add.w	r1, r7, #8
 800df6c:	4610      	mov	r0, r2
 800df6e:	4798      	blx	r3
 800df70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800df72:	e126      	b.n	800e1c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800df74:	6839      	ldr	r1, [r7, #0]
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f000 fb27 	bl	800e5ca <USBD_CtlError>
        err++;
 800df7c:	7afb      	ldrb	r3, [r7, #11]
 800df7e:	3301      	adds	r3, #1
 800df80:	72fb      	strb	r3, [r7, #11]
      break;
 800df82:	e11e      	b.n	800e1c2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	687a      	ldr	r2, [r7, #4]
 800df8e:	7c12      	ldrb	r2, [r2, #16]
 800df90:	f107 0108 	add.w	r1, r7, #8
 800df94:	4610      	mov	r0, r2
 800df96:	4798      	blx	r3
 800df98:	60f8      	str	r0, [r7, #12]
      break;
 800df9a:	e112      	b.n	800e1c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	7c1b      	ldrb	r3, [r3, #16]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d10d      	bne.n	800dfc0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dfaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfac:	f107 0208 	add.w	r2, r7, #8
 800dfb0:	4610      	mov	r0, r2
 800dfb2:	4798      	blx	r3
 800dfb4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	3301      	adds	r3, #1
 800dfba:	2202      	movs	r2, #2
 800dfbc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dfbe:	e100      	b.n	800e1c2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dfc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfc8:	f107 0208 	add.w	r2, r7, #8
 800dfcc:	4610      	mov	r0, r2
 800dfce:	4798      	blx	r3
 800dfd0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	2202      	movs	r2, #2
 800dfd8:	701a      	strb	r2, [r3, #0]
      break;
 800dfda:	e0f2      	b.n	800e1c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	885b      	ldrh	r3, [r3, #2]
 800dfe0:	b2db      	uxtb	r3, r3
 800dfe2:	2b05      	cmp	r3, #5
 800dfe4:	f200 80ac 	bhi.w	800e140 <USBD_GetDescriptor+0x258>
 800dfe8:	a201      	add	r2, pc, #4	@ (adr r2, 800dff0 <USBD_GetDescriptor+0x108>)
 800dfea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfee:	bf00      	nop
 800dff0:	0800e009 	.word	0x0800e009
 800dff4:	0800e03d 	.word	0x0800e03d
 800dff8:	0800e071 	.word	0x0800e071
 800dffc:	0800e0a5 	.word	0x0800e0a5
 800e000:	0800e0d9 	.word	0x0800e0d9
 800e004:	0800e10d 	.word	0x0800e10d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e00e:	685b      	ldr	r3, [r3, #4]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d00b      	beq.n	800e02c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e01a:	685b      	ldr	r3, [r3, #4]
 800e01c:	687a      	ldr	r2, [r7, #4]
 800e01e:	7c12      	ldrb	r2, [r2, #16]
 800e020:	f107 0108 	add.w	r1, r7, #8
 800e024:	4610      	mov	r0, r2
 800e026:	4798      	blx	r3
 800e028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e02a:	e091      	b.n	800e150 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e02c:	6839      	ldr	r1, [r7, #0]
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f000 facb 	bl	800e5ca <USBD_CtlError>
            err++;
 800e034:	7afb      	ldrb	r3, [r7, #11]
 800e036:	3301      	adds	r3, #1
 800e038:	72fb      	strb	r3, [r7, #11]
          break;
 800e03a:	e089      	b.n	800e150 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e042:	689b      	ldr	r3, [r3, #8]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d00b      	beq.n	800e060 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e04e:	689b      	ldr	r3, [r3, #8]
 800e050:	687a      	ldr	r2, [r7, #4]
 800e052:	7c12      	ldrb	r2, [r2, #16]
 800e054:	f107 0108 	add.w	r1, r7, #8
 800e058:	4610      	mov	r0, r2
 800e05a:	4798      	blx	r3
 800e05c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e05e:	e077      	b.n	800e150 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e060:	6839      	ldr	r1, [r7, #0]
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f000 fab1 	bl	800e5ca <USBD_CtlError>
            err++;
 800e068:	7afb      	ldrb	r3, [r7, #11]
 800e06a:	3301      	adds	r3, #1
 800e06c:	72fb      	strb	r3, [r7, #11]
          break;
 800e06e:	e06f      	b.n	800e150 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e076:	68db      	ldr	r3, [r3, #12]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d00b      	beq.n	800e094 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e082:	68db      	ldr	r3, [r3, #12]
 800e084:	687a      	ldr	r2, [r7, #4]
 800e086:	7c12      	ldrb	r2, [r2, #16]
 800e088:	f107 0108 	add.w	r1, r7, #8
 800e08c:	4610      	mov	r0, r2
 800e08e:	4798      	blx	r3
 800e090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e092:	e05d      	b.n	800e150 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e094:	6839      	ldr	r1, [r7, #0]
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f000 fa97 	bl	800e5ca <USBD_CtlError>
            err++;
 800e09c:	7afb      	ldrb	r3, [r7, #11]
 800e09e:	3301      	adds	r3, #1
 800e0a0:	72fb      	strb	r3, [r7, #11]
          break;
 800e0a2:	e055      	b.n	800e150 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e0aa:	691b      	ldr	r3, [r3, #16]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d00b      	beq.n	800e0c8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e0b6:	691b      	ldr	r3, [r3, #16]
 800e0b8:	687a      	ldr	r2, [r7, #4]
 800e0ba:	7c12      	ldrb	r2, [r2, #16]
 800e0bc:	f107 0108 	add.w	r1, r7, #8
 800e0c0:	4610      	mov	r0, r2
 800e0c2:	4798      	blx	r3
 800e0c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e0c6:	e043      	b.n	800e150 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e0c8:	6839      	ldr	r1, [r7, #0]
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f000 fa7d 	bl	800e5ca <USBD_CtlError>
            err++;
 800e0d0:	7afb      	ldrb	r3, [r7, #11]
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	72fb      	strb	r3, [r7, #11]
          break;
 800e0d6:	e03b      	b.n	800e150 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e0de:	695b      	ldr	r3, [r3, #20]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d00b      	beq.n	800e0fc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e0ea:	695b      	ldr	r3, [r3, #20]
 800e0ec:	687a      	ldr	r2, [r7, #4]
 800e0ee:	7c12      	ldrb	r2, [r2, #16]
 800e0f0:	f107 0108 	add.w	r1, r7, #8
 800e0f4:	4610      	mov	r0, r2
 800e0f6:	4798      	blx	r3
 800e0f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e0fa:	e029      	b.n	800e150 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e0fc:	6839      	ldr	r1, [r7, #0]
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f000 fa63 	bl	800e5ca <USBD_CtlError>
            err++;
 800e104:	7afb      	ldrb	r3, [r7, #11]
 800e106:	3301      	adds	r3, #1
 800e108:	72fb      	strb	r3, [r7, #11]
          break;
 800e10a:	e021      	b.n	800e150 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e112:	699b      	ldr	r3, [r3, #24]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d00b      	beq.n	800e130 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e11e:	699b      	ldr	r3, [r3, #24]
 800e120:	687a      	ldr	r2, [r7, #4]
 800e122:	7c12      	ldrb	r2, [r2, #16]
 800e124:	f107 0108 	add.w	r1, r7, #8
 800e128:	4610      	mov	r0, r2
 800e12a:	4798      	blx	r3
 800e12c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e12e:	e00f      	b.n	800e150 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e130:	6839      	ldr	r1, [r7, #0]
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 fa49 	bl	800e5ca <USBD_CtlError>
            err++;
 800e138:	7afb      	ldrb	r3, [r7, #11]
 800e13a:	3301      	adds	r3, #1
 800e13c:	72fb      	strb	r3, [r7, #11]
          break;
 800e13e:	e007      	b.n	800e150 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e140:	6839      	ldr	r1, [r7, #0]
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f000 fa41 	bl	800e5ca <USBD_CtlError>
          err++;
 800e148:	7afb      	ldrb	r3, [r7, #11]
 800e14a:	3301      	adds	r3, #1
 800e14c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e14e:	bf00      	nop
      }
      break;
 800e150:	e037      	b.n	800e1c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	7c1b      	ldrb	r3, [r3, #16]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d109      	bne.n	800e16e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e162:	f107 0208 	add.w	r2, r7, #8
 800e166:	4610      	mov	r0, r2
 800e168:	4798      	blx	r3
 800e16a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e16c:	e029      	b.n	800e1c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e16e:	6839      	ldr	r1, [r7, #0]
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f000 fa2a 	bl	800e5ca <USBD_CtlError>
        err++;
 800e176:	7afb      	ldrb	r3, [r7, #11]
 800e178:	3301      	adds	r3, #1
 800e17a:	72fb      	strb	r3, [r7, #11]
      break;
 800e17c:	e021      	b.n	800e1c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	7c1b      	ldrb	r3, [r3, #16]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d10d      	bne.n	800e1a2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e18c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e18e:	f107 0208 	add.w	r2, r7, #8
 800e192:	4610      	mov	r0, r2
 800e194:	4798      	blx	r3
 800e196:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	3301      	adds	r3, #1
 800e19c:	2207      	movs	r2, #7
 800e19e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e1a0:	e00f      	b.n	800e1c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e1a2:	6839      	ldr	r1, [r7, #0]
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	f000 fa10 	bl	800e5ca <USBD_CtlError>
        err++;
 800e1aa:	7afb      	ldrb	r3, [r7, #11]
 800e1ac:	3301      	adds	r3, #1
 800e1ae:	72fb      	strb	r3, [r7, #11]
      break;
 800e1b0:	e007      	b.n	800e1c2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e1b2:	6839      	ldr	r1, [r7, #0]
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f000 fa08 	bl	800e5ca <USBD_CtlError>
      err++;
 800e1ba:	7afb      	ldrb	r3, [r7, #11]
 800e1bc:	3301      	adds	r3, #1
 800e1be:	72fb      	strb	r3, [r7, #11]
      break;
 800e1c0:	bf00      	nop
  }

  if (err != 0U)
 800e1c2:	7afb      	ldrb	r3, [r7, #11]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d11e      	bne.n	800e206 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	88db      	ldrh	r3, [r3, #6]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d016      	beq.n	800e1fe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e1d0:	893b      	ldrh	r3, [r7, #8]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d00e      	beq.n	800e1f4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	88da      	ldrh	r2, [r3, #6]
 800e1da:	893b      	ldrh	r3, [r7, #8]
 800e1dc:	4293      	cmp	r3, r2
 800e1de:	bf28      	it	cs
 800e1e0:	4613      	movcs	r3, r2
 800e1e2:	b29b      	uxth	r3, r3
 800e1e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e1e6:	893b      	ldrh	r3, [r7, #8]
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	68f9      	ldr	r1, [r7, #12]
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f000 fa5d 	bl	800e6ac <USBD_CtlSendData>
 800e1f2:	e009      	b.n	800e208 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e1f4:	6839      	ldr	r1, [r7, #0]
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f000 f9e7 	bl	800e5ca <USBD_CtlError>
 800e1fc:	e004      	b.n	800e208 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f000 fa91 	bl	800e726 <USBD_CtlSendStatus>
 800e204:	e000      	b.n	800e208 <USBD_GetDescriptor+0x320>
    return;
 800e206:	bf00      	nop
  }
}
 800e208:	3710      	adds	r7, #16
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}
 800e20e:	bf00      	nop

0800e210 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b084      	sub	sp, #16
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
 800e218:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	889b      	ldrh	r3, [r3, #4]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d131      	bne.n	800e286 <USBD_SetAddress+0x76>
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	88db      	ldrh	r3, [r3, #6]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d12d      	bne.n	800e286 <USBD_SetAddress+0x76>
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	885b      	ldrh	r3, [r3, #2]
 800e22e:	2b7f      	cmp	r3, #127	@ 0x7f
 800e230:	d829      	bhi.n	800e286 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	885b      	ldrh	r3, [r3, #2]
 800e236:	b2db      	uxtb	r3, r3
 800e238:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e23c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e244:	b2db      	uxtb	r3, r3
 800e246:	2b03      	cmp	r3, #3
 800e248:	d104      	bne.n	800e254 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e24a:	6839      	ldr	r1, [r7, #0]
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f000 f9bc 	bl	800e5ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e252:	e01d      	b.n	800e290 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	7bfa      	ldrb	r2, [r7, #15]
 800e258:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e25c:	7bfb      	ldrb	r3, [r7, #15]
 800e25e:	4619      	mov	r1, r3
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f005 f91e 	bl	80134a2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f000 fa5d 	bl	800e726 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e26c:	7bfb      	ldrb	r3, [r7, #15]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d004      	beq.n	800e27c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2202      	movs	r2, #2
 800e276:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e27a:	e009      	b.n	800e290 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2201      	movs	r2, #1
 800e280:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e284:	e004      	b.n	800e290 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e286:	6839      	ldr	r1, [r7, #0]
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f000 f99e 	bl	800e5ca <USBD_CtlError>
  }
}
 800e28e:	bf00      	nop
 800e290:	bf00      	nop
 800e292:	3710      	adds	r7, #16
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}

0800e298 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b084      	sub	sp, #16
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
 800e2a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	885b      	ldrh	r3, [r3, #2]
 800e2aa:	b2da      	uxtb	r2, r3
 800e2ac:	4b4e      	ldr	r3, [pc, #312]	@ (800e3e8 <USBD_SetConfig+0x150>)
 800e2ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e2b0:	4b4d      	ldr	r3, [pc, #308]	@ (800e3e8 <USBD_SetConfig+0x150>)
 800e2b2:	781b      	ldrb	r3, [r3, #0]
 800e2b4:	2b01      	cmp	r3, #1
 800e2b6:	d905      	bls.n	800e2c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e2b8:	6839      	ldr	r1, [r7, #0]
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f000 f985 	bl	800e5ca <USBD_CtlError>
    return USBD_FAIL;
 800e2c0:	2303      	movs	r3, #3
 800e2c2:	e08c      	b.n	800e3de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e2ca:	b2db      	uxtb	r3, r3
 800e2cc:	2b02      	cmp	r3, #2
 800e2ce:	d002      	beq.n	800e2d6 <USBD_SetConfig+0x3e>
 800e2d0:	2b03      	cmp	r3, #3
 800e2d2:	d029      	beq.n	800e328 <USBD_SetConfig+0x90>
 800e2d4:	e075      	b.n	800e3c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e2d6:	4b44      	ldr	r3, [pc, #272]	@ (800e3e8 <USBD_SetConfig+0x150>)
 800e2d8:	781b      	ldrb	r3, [r3, #0]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d020      	beq.n	800e320 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e2de:	4b42      	ldr	r3, [pc, #264]	@ (800e3e8 <USBD_SetConfig+0x150>)
 800e2e0:	781b      	ldrb	r3, [r3, #0]
 800e2e2:	461a      	mov	r2, r3
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e2e8:	4b3f      	ldr	r3, [pc, #252]	@ (800e3e8 <USBD_SetConfig+0x150>)
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f7ff f84b 	bl	800d38a <USBD_SetClassConfig>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e2f8:	7bfb      	ldrb	r3, [r7, #15]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d008      	beq.n	800e310 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e2fe:	6839      	ldr	r1, [r7, #0]
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f000 f962 	bl	800e5ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2202      	movs	r2, #2
 800e30a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e30e:	e065      	b.n	800e3dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f000 fa08 	bl	800e726 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2203      	movs	r2, #3
 800e31a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e31e:	e05d      	b.n	800e3dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f000 fa00 	bl	800e726 <USBD_CtlSendStatus>
      break;
 800e326:	e059      	b.n	800e3dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e328:	4b2f      	ldr	r3, [pc, #188]	@ (800e3e8 <USBD_SetConfig+0x150>)
 800e32a:	781b      	ldrb	r3, [r3, #0]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d112      	bne.n	800e356 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2202      	movs	r2, #2
 800e334:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e338:	4b2b      	ldr	r3, [pc, #172]	@ (800e3e8 <USBD_SetConfig+0x150>)
 800e33a:	781b      	ldrb	r3, [r3, #0]
 800e33c:	461a      	mov	r2, r3
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e342:	4b29      	ldr	r3, [pc, #164]	@ (800e3e8 <USBD_SetConfig+0x150>)
 800e344:	781b      	ldrb	r3, [r3, #0]
 800e346:	4619      	mov	r1, r3
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f7ff f83a 	bl	800d3c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f000 f9e9 	bl	800e726 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e354:	e042      	b.n	800e3dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e356:	4b24      	ldr	r3, [pc, #144]	@ (800e3e8 <USBD_SetConfig+0x150>)
 800e358:	781b      	ldrb	r3, [r3, #0]
 800e35a:	461a      	mov	r2, r3
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	685b      	ldr	r3, [r3, #4]
 800e360:	429a      	cmp	r2, r3
 800e362:	d02a      	beq.n	800e3ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	b2db      	uxtb	r3, r3
 800e36a:	4619      	mov	r1, r3
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	f7ff f828 	bl	800d3c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e372:	4b1d      	ldr	r3, [pc, #116]	@ (800e3e8 <USBD_SetConfig+0x150>)
 800e374:	781b      	ldrb	r3, [r3, #0]
 800e376:	461a      	mov	r2, r3
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e37c:	4b1a      	ldr	r3, [pc, #104]	@ (800e3e8 <USBD_SetConfig+0x150>)
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	4619      	mov	r1, r3
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f7ff f801 	bl	800d38a <USBD_SetClassConfig>
 800e388:	4603      	mov	r3, r0
 800e38a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e38c:	7bfb      	ldrb	r3, [r7, #15]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d00f      	beq.n	800e3b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e392:	6839      	ldr	r1, [r7, #0]
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f000 f918 	bl	800e5ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	b2db      	uxtb	r3, r3
 800e3a0:	4619      	mov	r1, r3
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f7ff f80d 	bl	800d3c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2202      	movs	r2, #2
 800e3ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e3b0:	e014      	b.n	800e3dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f000 f9b7 	bl	800e726 <USBD_CtlSendStatus>
      break;
 800e3b8:	e010      	b.n	800e3dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f000 f9b3 	bl	800e726 <USBD_CtlSendStatus>
      break;
 800e3c0:	e00c      	b.n	800e3dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e3c2:	6839      	ldr	r1, [r7, #0]
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f000 f900 	bl	800e5ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e3ca:	4b07      	ldr	r3, [pc, #28]	@ (800e3e8 <USBD_SetConfig+0x150>)
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	4619      	mov	r1, r3
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	f7fe fff6 	bl	800d3c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e3d6:	2303      	movs	r3, #3
 800e3d8:	73fb      	strb	r3, [r7, #15]
      break;
 800e3da:	bf00      	nop
  }

  return ret;
 800e3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3710      	adds	r7, #16
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}
 800e3e6:	bf00      	nop
 800e3e8:	2000053c 	.word	0x2000053c

0800e3ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b082      	sub	sp, #8
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
 800e3f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	88db      	ldrh	r3, [r3, #6]
 800e3fa:	2b01      	cmp	r3, #1
 800e3fc:	d004      	beq.n	800e408 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e3fe:	6839      	ldr	r1, [r7, #0]
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f000 f8e2 	bl	800e5ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e406:	e023      	b.n	800e450 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e40e:	b2db      	uxtb	r3, r3
 800e410:	2b02      	cmp	r3, #2
 800e412:	dc02      	bgt.n	800e41a <USBD_GetConfig+0x2e>
 800e414:	2b00      	cmp	r3, #0
 800e416:	dc03      	bgt.n	800e420 <USBD_GetConfig+0x34>
 800e418:	e015      	b.n	800e446 <USBD_GetConfig+0x5a>
 800e41a:	2b03      	cmp	r3, #3
 800e41c:	d00b      	beq.n	800e436 <USBD_GetConfig+0x4a>
 800e41e:	e012      	b.n	800e446 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2200      	movs	r2, #0
 800e424:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	3308      	adds	r3, #8
 800e42a:	2201      	movs	r2, #1
 800e42c:	4619      	mov	r1, r3
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f000 f93c 	bl	800e6ac <USBD_CtlSendData>
        break;
 800e434:	e00c      	b.n	800e450 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	3304      	adds	r3, #4
 800e43a:	2201      	movs	r2, #1
 800e43c:	4619      	mov	r1, r3
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f000 f934 	bl	800e6ac <USBD_CtlSendData>
        break;
 800e444:	e004      	b.n	800e450 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e446:	6839      	ldr	r1, [r7, #0]
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f000 f8be 	bl	800e5ca <USBD_CtlError>
        break;
 800e44e:	bf00      	nop
}
 800e450:	bf00      	nop
 800e452:	3708      	adds	r7, #8
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}

0800e458 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b082      	sub	sp, #8
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e468:	b2db      	uxtb	r3, r3
 800e46a:	3b01      	subs	r3, #1
 800e46c:	2b02      	cmp	r3, #2
 800e46e:	d81e      	bhi.n	800e4ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	88db      	ldrh	r3, [r3, #6]
 800e474:	2b02      	cmp	r3, #2
 800e476:	d004      	beq.n	800e482 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e478:	6839      	ldr	r1, [r7, #0]
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f000 f8a5 	bl	800e5ca <USBD_CtlError>
        break;
 800e480:	e01a      	b.n	800e4b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2201      	movs	r2, #1
 800e486:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d005      	beq.n	800e49e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	68db      	ldr	r3, [r3, #12]
 800e496:	f043 0202 	orr.w	r2, r3, #2
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	330c      	adds	r3, #12
 800e4a2:	2202      	movs	r2, #2
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f000 f900 	bl	800e6ac <USBD_CtlSendData>
      break;
 800e4ac:	e004      	b.n	800e4b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e4ae:	6839      	ldr	r1, [r7, #0]
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f000 f88a 	bl	800e5ca <USBD_CtlError>
      break;
 800e4b6:	bf00      	nop
  }
}
 800e4b8:	bf00      	nop
 800e4ba:	3708      	adds	r7, #8
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}

0800e4c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b082      	sub	sp, #8
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
 800e4c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	885b      	ldrh	r3, [r3, #2]
 800e4ce:	2b01      	cmp	r3, #1
 800e4d0:	d107      	bne.n	800e4e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2201      	movs	r2, #1
 800e4d6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f000 f923 	bl	800e726 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e4e0:	e013      	b.n	800e50a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	885b      	ldrh	r3, [r3, #2]
 800e4e6:	2b02      	cmp	r3, #2
 800e4e8:	d10b      	bne.n	800e502 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	889b      	ldrh	r3, [r3, #4]
 800e4ee:	0a1b      	lsrs	r3, r3, #8
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	b2da      	uxtb	r2, r3
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f000 f913 	bl	800e726 <USBD_CtlSendStatus>
}
 800e500:	e003      	b.n	800e50a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e502:	6839      	ldr	r1, [r7, #0]
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	f000 f860 	bl	800e5ca <USBD_CtlError>
}
 800e50a:	bf00      	nop
 800e50c:	3708      	adds	r7, #8
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}

0800e512 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e512:	b580      	push	{r7, lr}
 800e514:	b082      	sub	sp, #8
 800e516:	af00      	add	r7, sp, #0
 800e518:	6078      	str	r0, [r7, #4]
 800e51a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e522:	b2db      	uxtb	r3, r3
 800e524:	3b01      	subs	r3, #1
 800e526:	2b02      	cmp	r3, #2
 800e528:	d80b      	bhi.n	800e542 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	885b      	ldrh	r3, [r3, #2]
 800e52e:	2b01      	cmp	r3, #1
 800e530:	d10c      	bne.n	800e54c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2200      	movs	r2, #0
 800e536:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f000 f8f3 	bl	800e726 <USBD_CtlSendStatus>
      }
      break;
 800e540:	e004      	b.n	800e54c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e542:	6839      	ldr	r1, [r7, #0]
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f000 f840 	bl	800e5ca <USBD_CtlError>
      break;
 800e54a:	e000      	b.n	800e54e <USBD_ClrFeature+0x3c>
      break;
 800e54c:	bf00      	nop
  }
}
 800e54e:	bf00      	nop
 800e550:	3708      	adds	r7, #8
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}

0800e556 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e556:	b580      	push	{r7, lr}
 800e558:	b084      	sub	sp, #16
 800e55a:	af00      	add	r7, sp, #0
 800e55c:	6078      	str	r0, [r7, #4]
 800e55e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	781a      	ldrb	r2, [r3, #0]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	3301      	adds	r3, #1
 800e570:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	781a      	ldrb	r2, [r3, #0]
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	3301      	adds	r3, #1
 800e57e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e580:	68f8      	ldr	r0, [r7, #12]
 800e582:	f7ff fa16 	bl	800d9b2 <SWAPBYTE>
 800e586:	4603      	mov	r3, r0
 800e588:	461a      	mov	r2, r3
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	3301      	adds	r3, #1
 800e592:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	3301      	adds	r3, #1
 800e598:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e59a:	68f8      	ldr	r0, [r7, #12]
 800e59c:	f7ff fa09 	bl	800d9b2 <SWAPBYTE>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	461a      	mov	r2, r3
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	3301      	adds	r3, #1
 800e5b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e5b4:	68f8      	ldr	r0, [r7, #12]
 800e5b6:	f7ff f9fc 	bl	800d9b2 <SWAPBYTE>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	461a      	mov	r2, r3
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	80da      	strh	r2, [r3, #6]
}
 800e5c2:	bf00      	nop
 800e5c4:	3710      	adds	r7, #16
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}

0800e5ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5ca:	b580      	push	{r7, lr}
 800e5cc:	b082      	sub	sp, #8
 800e5ce:	af00      	add	r7, sp, #0
 800e5d0:	6078      	str	r0, [r7, #4]
 800e5d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e5d4:	2180      	movs	r1, #128	@ 0x80
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f004 fef8 	bl	80133cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e5dc:	2100      	movs	r1, #0
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f004 fef4 	bl	80133cc <USBD_LL_StallEP>
}
 800e5e4:	bf00      	nop
 800e5e6:	3708      	adds	r7, #8
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}

0800e5ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b086      	sub	sp, #24
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	60f8      	str	r0, [r7, #12]
 800e5f4:	60b9      	str	r1, [r7, #8]
 800e5f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d036      	beq.n	800e670 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e606:	6938      	ldr	r0, [r7, #16]
 800e608:	f000 f836 	bl	800e678 <USBD_GetLen>
 800e60c:	4603      	mov	r3, r0
 800e60e:	3301      	adds	r3, #1
 800e610:	b29b      	uxth	r3, r3
 800e612:	005b      	lsls	r3, r3, #1
 800e614:	b29a      	uxth	r2, r3
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e61a:	7dfb      	ldrb	r3, [r7, #23]
 800e61c:	68ba      	ldr	r2, [r7, #8]
 800e61e:	4413      	add	r3, r2
 800e620:	687a      	ldr	r2, [r7, #4]
 800e622:	7812      	ldrb	r2, [r2, #0]
 800e624:	701a      	strb	r2, [r3, #0]
  idx++;
 800e626:	7dfb      	ldrb	r3, [r7, #23]
 800e628:	3301      	adds	r3, #1
 800e62a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e62c:	7dfb      	ldrb	r3, [r7, #23]
 800e62e:	68ba      	ldr	r2, [r7, #8]
 800e630:	4413      	add	r3, r2
 800e632:	2203      	movs	r2, #3
 800e634:	701a      	strb	r2, [r3, #0]
  idx++;
 800e636:	7dfb      	ldrb	r3, [r7, #23]
 800e638:	3301      	adds	r3, #1
 800e63a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e63c:	e013      	b.n	800e666 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e63e:	7dfb      	ldrb	r3, [r7, #23]
 800e640:	68ba      	ldr	r2, [r7, #8]
 800e642:	4413      	add	r3, r2
 800e644:	693a      	ldr	r2, [r7, #16]
 800e646:	7812      	ldrb	r2, [r2, #0]
 800e648:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e64a:	693b      	ldr	r3, [r7, #16]
 800e64c:	3301      	adds	r3, #1
 800e64e:	613b      	str	r3, [r7, #16]
    idx++;
 800e650:	7dfb      	ldrb	r3, [r7, #23]
 800e652:	3301      	adds	r3, #1
 800e654:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e656:	7dfb      	ldrb	r3, [r7, #23]
 800e658:	68ba      	ldr	r2, [r7, #8]
 800e65a:	4413      	add	r3, r2
 800e65c:	2200      	movs	r2, #0
 800e65e:	701a      	strb	r2, [r3, #0]
    idx++;
 800e660:	7dfb      	ldrb	r3, [r7, #23]
 800e662:	3301      	adds	r3, #1
 800e664:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	781b      	ldrb	r3, [r3, #0]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d1e7      	bne.n	800e63e <USBD_GetString+0x52>
 800e66e:	e000      	b.n	800e672 <USBD_GetString+0x86>
    return;
 800e670:	bf00      	nop
  }
}
 800e672:	3718      	adds	r7, #24
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}

0800e678 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e678:	b480      	push	{r7}
 800e67a:	b085      	sub	sp, #20
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e680:	2300      	movs	r3, #0
 800e682:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e688:	e005      	b.n	800e696 <USBD_GetLen+0x1e>
  {
    len++;
 800e68a:	7bfb      	ldrb	r3, [r7, #15]
 800e68c:	3301      	adds	r3, #1
 800e68e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	3301      	adds	r3, #1
 800e694:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	781b      	ldrb	r3, [r3, #0]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d1f5      	bne.n	800e68a <USBD_GetLen+0x12>
  }

  return len;
 800e69e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	3714      	adds	r7, #20
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6aa:	4770      	bx	lr

0800e6ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b084      	sub	sp, #16
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	60f8      	str	r0, [r7, #12]
 800e6b4:	60b9      	str	r1, [r7, #8]
 800e6b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	2202      	movs	r2, #2
 800e6bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	687a      	ldr	r2, [r7, #4]
 800e6c4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	687a      	ldr	r2, [r7, #4]
 800e6ca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	68ba      	ldr	r2, [r7, #8]
 800e6d0:	2100      	movs	r1, #0
 800e6d2:	68f8      	ldr	r0, [r7, #12]
 800e6d4:	f004 ff04 	bl	80134e0 <USBD_LL_Transmit>

  return USBD_OK;
 800e6d8:	2300      	movs	r3, #0
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	3710      	adds	r7, #16
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}

0800e6e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e6e2:	b580      	push	{r7, lr}
 800e6e4:	b084      	sub	sp, #16
 800e6e6:	af00      	add	r7, sp, #0
 800e6e8:	60f8      	str	r0, [r7, #12]
 800e6ea:	60b9      	str	r1, [r7, #8]
 800e6ec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	68ba      	ldr	r2, [r7, #8]
 800e6f2:	2100      	movs	r1, #0
 800e6f4:	68f8      	ldr	r0, [r7, #12]
 800e6f6:	f004 fef3 	bl	80134e0 <USBD_LL_Transmit>

  return USBD_OK;
 800e6fa:	2300      	movs	r3, #0
}
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	3710      	adds	r7, #16
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}

0800e704 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b084      	sub	sp, #16
 800e708:	af00      	add	r7, sp, #0
 800e70a:	60f8      	str	r0, [r7, #12]
 800e70c:	60b9      	str	r1, [r7, #8]
 800e70e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	68ba      	ldr	r2, [r7, #8]
 800e714:	2100      	movs	r1, #0
 800e716:	68f8      	ldr	r0, [r7, #12]
 800e718:	f004 ff03 	bl	8013522 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e71c:	2300      	movs	r3, #0
}
 800e71e:	4618      	mov	r0, r3
 800e720:	3710      	adds	r7, #16
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}

0800e726 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e726:	b580      	push	{r7, lr}
 800e728:	b082      	sub	sp, #8
 800e72a:	af00      	add	r7, sp, #0
 800e72c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2204      	movs	r2, #4
 800e732:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e736:	2300      	movs	r3, #0
 800e738:	2200      	movs	r2, #0
 800e73a:	2100      	movs	r1, #0
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f004 fecf 	bl	80134e0 <USBD_LL_Transmit>

  return USBD_OK;
 800e742:	2300      	movs	r3, #0
}
 800e744:	4618      	mov	r0, r3
 800e746:	3708      	adds	r7, #8
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}

0800e74c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b082      	sub	sp, #8
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2205      	movs	r2, #5
 800e758:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e75c:	2300      	movs	r3, #0
 800e75e:	2200      	movs	r2, #0
 800e760:	2100      	movs	r1, #0
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f004 fedd 	bl	8013522 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e768:	2300      	movs	r3, #0
}
 800e76a:	4618      	mov	r0, r3
 800e76c:	3708      	adds	r7, #8
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}

0800e772 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800e772:	b580      	push	{r7, lr}
 800e774:	b088      	sub	sp, #32
 800e776:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800e778:	2300      	movs	r3, #0
 800e77a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e77c:	f107 0308 	add.w	r3, r7, #8
 800e780:	2218      	movs	r2, #24
 800e782:	2100      	movs	r1, #0
 800e784:	4618      	mov	r0, r3
 800e786:	f001 fa8b 	bl	800fca0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e78a:	233f      	movs	r3, #63	@ 0x3f
 800e78c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800e78e:	2381      	movs	r3, #129	@ 0x81
 800e790:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e792:	1dfb      	adds	r3, r7, #7
 800e794:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e796:	2301      	movs	r3, #1
 800e798:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e79a:	f107 0308 	add.w	r3, r7, #8
 800e79e:	2100      	movs	r1, #0
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f001 fd07 	bl	80101b4 <hci_send_req>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	da01      	bge.n	800e7b0 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800e7ac:	23ff      	movs	r3, #255	@ 0xff
 800e7ae:	e000      	b.n	800e7b2 <aci_gap_set_non_discoverable+0x40>
  return status;
 800e7b0:	79fb      	ldrb	r3, [r7, #7]
}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	3720      	adds	r7, #32
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}

0800e7ba <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800e7ba:	b5b0      	push	{r4, r5, r7, lr}
 800e7bc:	b0ce      	sub	sp, #312	@ 0x138
 800e7be:	af00      	add	r7, sp, #0
 800e7c0:	4605      	mov	r5, r0
 800e7c2:	460c      	mov	r4, r1
 800e7c4:	4610      	mov	r0, r2
 800e7c6:	4619      	mov	r1, r3
 800e7c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e7cc:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800e7d0:	462a      	mov	r2, r5
 800e7d2:	701a      	strb	r2, [r3, #0]
 800e7d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e7d8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e7dc:	4622      	mov	r2, r4
 800e7de:	801a      	strh	r2, [r3, #0]
 800e7e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e7e4:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800e7e8:	4602      	mov	r2, r0
 800e7ea:	801a      	strh	r2, [r3, #0]
 800e7ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e7f0:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800e7f4:	460a      	mov	r2, r1
 800e7f6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800e7f8:	f107 0310 	add.w	r3, r7, #16
 800e7fc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800e800:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800e804:	3308      	adds	r3, #8
 800e806:	f107 0210 	add.w	r2, r7, #16
 800e80a:	4413      	add	r3, r2
 800e80c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800e810:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800e814:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800e818:	4413      	add	r3, r2
 800e81a:	3309      	adds	r3, #9
 800e81c:	f107 0210 	add.w	r2, r7, #16
 800e820:	4413      	add	r3, r2
 800e822:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e826:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e82a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e82e:	2200      	movs	r2, #0
 800e830:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e832:	2300      	movs	r3, #0
 800e834:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800e838:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e83c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800e840:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800e844:	7812      	ldrb	r2, [r2, #0]
 800e846:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e848:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e84c:	3301      	adds	r3, #1
 800e84e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800e852:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e856:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800e85a:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800e85e:	8812      	ldrh	r2, [r2, #0]
 800e860:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800e864:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e868:	3302      	adds	r3, #2
 800e86a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800e86e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e872:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800e876:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800e87a:	8812      	ldrh	r2, [r2, #0]
 800e87c:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800e880:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e884:	3302      	adds	r3, #2
 800e886:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800e88a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e88e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800e892:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800e896:	7812      	ldrb	r2, [r2, #0]
 800e898:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800e89a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e89e:	3301      	adds	r3, #1
 800e8a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800e8a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e8a8:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800e8ac:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800e8ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e8b2:	3301      	adds	r3, #1
 800e8b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800e8b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e8bc:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800e8c0:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800e8c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800e8cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e8d0:	3308      	adds	r3, #8
 800e8d2:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800e8d6:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f001 f9d0 	bl	800fc80 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800e8e0:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800e8e4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800e8e8:	4413      	add	r3, r2
 800e8ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800e8ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e8f2:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800e8f6:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800e8f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e8fc:	3301      	adds	r3, #1
 800e8fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800e902:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e906:	3301      	adds	r3, #1
 800e908:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800e90c:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800e910:	4618      	mov	r0, r3
 800e912:	f001 f9b5 	bl	800fc80 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800e916:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800e91a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800e91e:	4413      	add	r3, r2
 800e920:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800e924:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e928:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800e92c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800e92e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e932:	3302      	adds	r3, #2
 800e934:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800e938:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e93c:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800e940:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800e942:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e946:	3302      	adds	r3, #2
 800e948:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e94c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e950:	2218      	movs	r2, #24
 800e952:	2100      	movs	r1, #0
 800e954:	4618      	mov	r0, r3
 800e956:	f001 f9a3 	bl	800fca0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e95a:	233f      	movs	r3, #63	@ 0x3f
 800e95c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800e960:	2383      	movs	r3, #131	@ 0x83
 800e962:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e966:	f107 0310 	add.w	r3, r7, #16
 800e96a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e96e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e972:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800e976:	f107 030f 	add.w	r3, r7, #15
 800e97a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800e97e:	2301      	movs	r3, #1
 800e980:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e984:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e988:	2100      	movs	r1, #0
 800e98a:	4618      	mov	r0, r3
 800e98c:	f001 fc12 	bl	80101b4 <hci_send_req>
 800e990:	4603      	mov	r3, r0
 800e992:	2b00      	cmp	r3, #0
 800e994:	da01      	bge.n	800e99a <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800e996:	23ff      	movs	r3, #255	@ 0xff
 800e998:	e004      	b.n	800e9a4 <aci_gap_set_discoverable+0x1ea>
  return status;
 800e99a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e99e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e9a2:	781b      	ldrb	r3, [r3, #0]
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bdb0      	pop	{r4, r5, r7, pc}

0800e9ae <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800e9ae:	b580      	push	{r7, lr}
 800e9b0:	b0cc      	sub	sp, #304	@ 0x130
 800e9b2:	af00      	add	r7, sp, #0
 800e9b4:	4602      	mov	r2, r0
 800e9b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e9ba:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e9be:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800e9c0:	f107 0310 	add.w	r3, r7, #16
 800e9c4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e9c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e9cc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800e9da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e9de:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e9e2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800e9e6:	7812      	ldrb	r2, [r2, #0]
 800e9e8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e9ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e9f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e9f8:	2218      	movs	r2, #24
 800e9fa:	2100      	movs	r1, #0
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f001 f94f 	bl	800fca0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ea02:	233f      	movs	r3, #63	@ 0x3f
 800ea04:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800ea08:	2385      	movs	r3, #133	@ 0x85
 800ea0a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ea0e:	f107 0310 	add.w	r3, r7, #16
 800ea12:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ea16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ea1a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ea1e:	f107 030f 	add.w	r3, r7, #15
 800ea22:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ea26:	2301      	movs	r3, #1
 800ea28:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ea2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ea30:	2100      	movs	r1, #0
 800ea32:	4618      	mov	r0, r3
 800ea34:	f001 fbbe 	bl	80101b4 <hci_send_req>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	da01      	bge.n	800ea42 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800ea3e:	23ff      	movs	r3, #255	@ 0xff
 800ea40:	e004      	b.n	800ea4c <aci_gap_set_io_capability+0x9e>
  return status;
 800ea42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ea46:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ea4a:	781b      	ldrb	r3, [r3, #0]
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}

0800ea56 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800ea56:	b5b0      	push	{r4, r5, r7, lr}
 800ea58:	b0cc      	sub	sp, #304	@ 0x130
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	4605      	mov	r5, r0
 800ea5e:	460c      	mov	r4, r1
 800ea60:	4610      	mov	r0, r2
 800ea62:	4619      	mov	r1, r3
 800ea64:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ea68:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ea6c:	462a      	mov	r2, r5
 800ea6e:	701a      	strb	r2, [r3, #0]
 800ea70:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ea74:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ea78:	4622      	mov	r2, r4
 800ea7a:	701a      	strb	r2, [r3, #0]
 800ea7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ea80:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800ea84:	4602      	mov	r2, r0
 800ea86:	701a      	strb	r2, [r3, #0]
 800ea88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ea8c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ea90:	460a      	mov	r2, r1
 800ea92:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800ea94:	f107 0310 	add.w	r3, r7, #16
 800ea98:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ea9c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800eaa0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800eaae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eab2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800eab6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800eaba:	7812      	ldrb	r2, [r2, #0]
 800eabc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800eabe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eac2:	3301      	adds	r3, #1
 800eac4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800eac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eacc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ead0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ead4:	7812      	ldrb	r2, [r2, #0]
 800ead6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ead8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eadc:	3301      	adds	r3, #1
 800eade:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800eae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eae6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800eaea:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800eaee:	7812      	ldrb	r2, [r2, #0]
 800eaf0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800eaf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eaf6:	3301      	adds	r3, #1
 800eaf8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800eafc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eb00:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800eb04:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800eb08:	7812      	ldrb	r2, [r2, #0]
 800eb0a:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800eb0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eb10:	3301      	adds	r3, #1
 800eb12:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800eb16:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eb1a:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800eb1e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800eb20:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eb24:	3301      	adds	r3, #1
 800eb26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800eb2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eb2e:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800eb32:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800eb34:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eb38:	3301      	adds	r3, #1
 800eb3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800eb3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eb42:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800eb46:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800eb48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eb4c:	3301      	adds	r3, #1
 800eb4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800eb52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eb56:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800eb5a:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800eb5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eb62:	3304      	adds	r3, #4
 800eb64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800eb68:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eb6c:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800eb70:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800eb72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eb76:	3301      	adds	r3, #1
 800eb78:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800eb7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800eb80:	2218      	movs	r2, #24
 800eb82:	2100      	movs	r1, #0
 800eb84:	4618      	mov	r0, r3
 800eb86:	f001 f88b 	bl	800fca0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800eb8a:	233f      	movs	r3, #63	@ 0x3f
 800eb8c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800eb90:	2386      	movs	r3, #134	@ 0x86
 800eb92:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800eb96:	f107 0310 	add.w	r3, r7, #16
 800eb9a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800eb9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eba2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800eba6:	f107 030f 	add.w	r3, r7, #15
 800ebaa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ebae:	2301      	movs	r3, #1
 800ebb0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ebb4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ebb8:	2100      	movs	r1, #0
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f001 fafa 	bl	80101b4 <hci_send_req>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	da01      	bge.n	800ebca <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800ebc6:	23ff      	movs	r3, #255	@ 0xff
 800ebc8:	e004      	b.n	800ebd4 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800ebca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ebce:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ebd2:	781b      	ldrb	r3, [r3, #0]
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bdb0      	pop	{r4, r5, r7, pc}

0800ebde <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800ebde:	b580      	push	{r7, lr}
 800ebe0:	b0cc      	sub	sp, #304	@ 0x130
 800ebe2:	af00      	add	r7, sp, #0
 800ebe4:	4602      	mov	r2, r0
 800ebe6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ebea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ebee:	6019      	str	r1, [r3, #0]
 800ebf0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ebf4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ebf8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800ebfa:	f107 0310 	add.w	r3, r7, #16
 800ebfe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ec02:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ec06:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800ec14:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ec18:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ec1c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ec20:	8812      	ldrh	r2, [r2, #0]
 800ec22:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ec24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ec28:	3302      	adds	r3, #2
 800ec2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800ec2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ec32:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ec36:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800ec3a:	6812      	ldr	r2, [r2, #0]
 800ec3c:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800ec40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ec44:	3304      	adds	r3, #4
 800ec46:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ec4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ec4e:	2218      	movs	r2, #24
 800ec50:	2100      	movs	r1, #0
 800ec52:	4618      	mov	r0, r3
 800ec54:	f001 f824 	bl	800fca0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ec58:	233f      	movs	r3, #63	@ 0x3f
 800ec5a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800ec5e:	2388      	movs	r3, #136	@ 0x88
 800ec60:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ec64:	f107 0310 	add.w	r3, r7, #16
 800ec68:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ec6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ec70:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ec74:	f107 030f 	add.w	r3, r7, #15
 800ec78:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ec82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ec86:	2100      	movs	r1, #0
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f001 fa93 	bl	80101b4 <hci_send_req>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	da01      	bge.n	800ec98 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800ec94:	23ff      	movs	r3, #255	@ 0xff
 800ec96:	e004      	b.n	800eca2 <aci_gap_pass_key_resp+0xc4>
  return status;
 800ec98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ec9c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800eca0:	781b      	ldrb	r3, [r3, #0]
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}

0800ecac <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800ecac:	b590      	push	{r4, r7, lr}
 800ecae:	b0cd      	sub	sp, #308	@ 0x134
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	4604      	mov	r4, r0
 800ecb4:	4608      	mov	r0, r1
 800ecb6:	4611      	mov	r1, r2
 800ecb8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ecbc:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800ecc0:	6013      	str	r3, [r2, #0]
 800ecc2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ecc6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ecca:	4622      	mov	r2, r4
 800eccc:	701a      	strb	r2, [r3, #0]
 800ecce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ecd2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ecd6:	4602      	mov	r2, r0
 800ecd8:	701a      	strb	r2, [r3, #0]
 800ecda:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ecde:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800ece2:	460a      	mov	r2, r1
 800ece4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800ece6:	f107 0310 	add.w	r3, r7, #16
 800ecea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800ecee:	f107 0308 	add.w	r3, r7, #8
 800ecf2:	2207      	movs	r2, #7
 800ecf4:	2100      	movs	r1, #0
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f000 ffd2 	bl	800fca0 <Osal_MemSet>
  int index_input = 0;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800ed02:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ed06:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ed0a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800ed0e:	7812      	ldrb	r2, [r2, #0]
 800ed10:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ed12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ed16:	3301      	adds	r3, #1
 800ed18:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800ed1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ed20:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ed24:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ed28:	7812      	ldrb	r2, [r2, #0]
 800ed2a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ed2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ed30:	3301      	adds	r3, #1
 800ed32:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800ed36:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ed3a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ed3e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800ed42:	7812      	ldrb	r2, [r2, #0]
 800ed44:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ed46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ed50:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ed54:	2218      	movs	r2, #24
 800ed56:	2100      	movs	r1, #0
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f000 ffa1 	bl	800fca0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ed5e:	233f      	movs	r3, #63	@ 0x3f
 800ed60:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800ed64:	238a      	movs	r3, #138	@ 0x8a
 800ed66:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ed6a:	f107 0310 	add.w	r3, r7, #16
 800ed6e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ed72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ed76:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800ed7a:	f107 0308 	add.w	r3, r7, #8
 800ed7e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800ed82:	2307      	movs	r3, #7
 800ed84:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ed88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ed8c:	2100      	movs	r1, #0
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f001 fa10 	bl	80101b4 <hci_send_req>
 800ed94:	4603      	mov	r3, r0
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	da01      	bge.n	800ed9e <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800ed9a:	23ff      	movs	r3, #255	@ 0xff
 800ed9c:	e02e      	b.n	800edfc <aci_gap_init+0x150>
  if ( resp.Status )
 800ed9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800eda2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800eda6:	781b      	ldrb	r3, [r3, #0]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d005      	beq.n	800edb8 <aci_gap_init+0x10c>
    return resp.Status;
 800edac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800edb0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800edb4:	781b      	ldrb	r3, [r3, #0]
 800edb6:	e021      	b.n	800edfc <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800edb8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800edbc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800edc0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800edc4:	b29a      	uxth	r2, r3
 800edc6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800edca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800edd2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800edd6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800edda:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800edde:	b29a      	uxth	r2, r3
 800ede0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ede4:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800ede6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800edea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800edee:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800edf2:	b29a      	uxth	r2, r3
 800edf4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800edf8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800edfa:	2300      	movs	r3, #0
}
 800edfc:	4618      	mov	r0, r3
 800edfe:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd90      	pop	{r4, r7, pc}

0800ee06 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800ee06:	b580      	push	{r7, lr}
 800ee08:	b0cc      	sub	sp, #304	@ 0x130
 800ee0a:	af00      	add	r7, sp, #0
 800ee0c:	4602      	mov	r2, r0
 800ee0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ee12:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ee16:	6019      	str	r1, [r3, #0]
 800ee18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ee1c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ee20:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800ee22:	f107 0310 	add.w	r3, r7, #16
 800ee26:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ee2a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ee2e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ee32:	2200      	movs	r2, #0
 800ee34:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ee36:	2300      	movs	r3, #0
 800ee38:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800ee3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ee40:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ee44:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800ee48:	7812      	ldrb	r2, [r2, #0]
 800ee4a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ee4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ee50:	3301      	adds	r3, #1
 800ee52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800ee56:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ee5a:	1c58      	adds	r0, r3, #1
 800ee5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ee60:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ee64:	781a      	ldrb	r2, [r3, #0]
 800ee66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ee6a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ee6e:	6819      	ldr	r1, [r3, #0]
 800ee70:	f000 ff06 	bl	800fc80 <Osal_MemCpy>
  index_input += AdvDataLen;
 800ee74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ee78:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ee7c:	781b      	ldrb	r3, [r3, #0]
 800ee7e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800ee82:	4413      	add	r3, r2
 800ee84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ee88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ee8c:	2218      	movs	r2, #24
 800ee8e:	2100      	movs	r1, #0
 800ee90:	4618      	mov	r0, r3
 800ee92:	f000 ff05 	bl	800fca0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ee96:	233f      	movs	r3, #63	@ 0x3f
 800ee98:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800ee9c:	238e      	movs	r3, #142	@ 0x8e
 800ee9e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800eea2:	f107 0310 	add.w	r3, r7, #16
 800eea6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800eeaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eeae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800eeb2:	f107 030f 	add.w	r3, r7, #15
 800eeb6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800eeba:	2301      	movs	r3, #1
 800eebc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800eec0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800eec4:	2100      	movs	r1, #0
 800eec6:	4618      	mov	r0, r3
 800eec8:	f001 f974 	bl	80101b4 <hci_send_req>
 800eecc:	4603      	mov	r3, r0
 800eece:	2b00      	cmp	r3, #0
 800eed0:	da01      	bge.n	800eed6 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800eed2:	23ff      	movs	r3, #255	@ 0xff
 800eed4:	e004      	b.n	800eee0 <aci_gap_update_adv_data+0xda>
  return status;
 800eed6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800eeda:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800eede:	781b      	ldrb	r3, [r3, #0]
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}

0800eeea <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800eeea:	b580      	push	{r7, lr}
 800eeec:	b088      	sub	sp, #32
 800eeee:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800eef0:	2300      	movs	r3, #0
 800eef2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800eef4:	f107 0308 	add.w	r3, r7, #8
 800eef8:	2218      	movs	r2, #24
 800eefa:	2100      	movs	r1, #0
 800eefc:	4618      	mov	r0, r3
 800eefe:	f000 fecf 	bl	800fca0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ef02:	233f      	movs	r3, #63	@ 0x3f
 800ef04:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800ef06:	2392      	movs	r3, #146	@ 0x92
 800ef08:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ef0a:	1dfb      	adds	r3, r7, #7
 800ef0c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ef0e:	2301      	movs	r3, #1
 800ef10:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ef12:	f107 0308 	add.w	r3, r7, #8
 800ef16:	2100      	movs	r1, #0
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f001 f94b 	bl	80101b4 <hci_send_req>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	da01      	bge.n	800ef28 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ef24:	23ff      	movs	r3, #255	@ 0xff
 800ef26:	e000      	b.n	800ef2a <aci_gap_configure_whitelist+0x40>
  return status;
 800ef28:	79fb      	ldrb	r3, [r7, #7]
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3720      	adds	r7, #32
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}

0800ef32 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800ef32:	b580      	push	{r7, lr}
 800ef34:	b0cc      	sub	sp, #304	@ 0x130
 800ef36:	af00      	add	r7, sp, #0
 800ef38:	4602      	mov	r2, r0
 800ef3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ef3e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ef42:	801a      	strh	r2, [r3, #0]
 800ef44:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ef48:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800ef4c:	460a      	mov	r2, r1
 800ef4e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800ef50:	f107 0310 	add.w	r3, r7, #16
 800ef54:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ef58:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ef5c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ef60:	2200      	movs	r2, #0
 800ef62:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ef64:	2300      	movs	r3, #0
 800ef66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800ef6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ef6e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ef72:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ef76:	8812      	ldrh	r2, [r2, #0]
 800ef78:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ef7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ef7e:	3302      	adds	r3, #2
 800ef80:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800ef84:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ef88:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ef8c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800ef90:	7812      	ldrb	r2, [r2, #0]
 800ef92:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ef94:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ef98:	3301      	adds	r3, #1
 800ef9a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ef9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800efa2:	2218      	movs	r2, #24
 800efa4:	2100      	movs	r1, #0
 800efa6:	4618      	mov	r0, r3
 800efa8:	f000 fe7a 	bl	800fca0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800efac:	233f      	movs	r3, #63	@ 0x3f
 800efae:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800efb2:	23a5      	movs	r3, #165	@ 0xa5
 800efb4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800efb8:	f107 0310 	add.w	r3, r7, #16
 800efbc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800efc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800efc4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800efc8:	f107 030f 	add.w	r3, r7, #15
 800efcc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800efd0:	2301      	movs	r3, #1
 800efd2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800efd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800efda:	2100      	movs	r1, #0
 800efdc:	4618      	mov	r0, r3
 800efde:	f001 f8e9 	bl	80101b4 <hci_send_req>
 800efe2:	4603      	mov	r3, r0
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	da01      	bge.n	800efec <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800efe8:	23ff      	movs	r3, #255	@ 0xff
 800efea:	e004      	b.n	800eff6 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800efec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800eff0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800eff4:	781b      	ldrb	r3, [r3, #0]
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}

0800f000 <aci_gap_set_oob_data>:
                                 uint8_t Address_Type,
                                 const uint8_t* Address,
                                 uint8_t OOB_Data_Type,
                                 uint8_t OOB_Data_Len,
                                 const uint8_t* OOB_Data )
{
 800f000:	b590      	push	{r4, r7, lr}
 800f002:	b0cd      	sub	sp, #308	@ 0x134
 800f004:	af00      	add	r7, sp, #0
 800f006:	4604      	mov	r4, r0
 800f008:	4608      	mov	r0, r1
 800f00a:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800f00e:	f5a1 7198 	sub.w	r1, r1, #304	@ 0x130
 800f012:	600a      	str	r2, [r1, #0]
 800f014:	4619      	mov	r1, r3
 800f016:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f01a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f01e:	4622      	mov	r2, r4
 800f020:	701a      	strb	r2, [r3, #0]
 800f022:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f026:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f02a:	4602      	mov	r2, r0
 800f02c:	701a      	strb	r2, [r3, #0]
 800f02e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f032:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800f036:	460a      	mov	r2, r1
 800f038:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_oob_data_cp0 *cp0 = (aci_gap_set_oob_data_cp0*)(cmd_buffer);
 800f03a:	f107 0310 	add.w	r3, r7, #16
 800f03e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f042:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f046:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f04a:	2200      	movs	r2, #0
 800f04c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f04e:	2300      	movs	r3, #0
 800f050:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Device_Type = Device_Type;
 800f054:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f058:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f05c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800f060:	7812      	ldrb	r2, [r2, #0]
 800f062:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f064:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f068:	3301      	adds	r3, #1
 800f06a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Address_Type = Address_Type;
 800f06e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f072:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f076:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f07a:	7812      	ldrb	r2, [r2, #0]
 800f07c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f07e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f082:	3301      	adds	r3, #1
 800f084:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Address, (const void*)Address, 6 );
 800f088:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f08c:	1c98      	adds	r0, r3, #2
 800f08e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f092:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f096:	2206      	movs	r2, #6
 800f098:	6819      	ldr	r1, [r3, #0]
 800f09a:	f000 fdf1 	bl	800fc80 <Osal_MemCpy>
  index_input += 6;
 800f09e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f0a2:	3306      	adds	r3, #6
 800f0a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->OOB_Data_Type = OOB_Data_Type;
 800f0a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f0ac:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f0b0:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800f0b4:	7812      	ldrb	r2, [r2, #0]
 800f0b6:	721a      	strb	r2, [r3, #8]
  index_input += 1;
 800f0b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f0bc:	3301      	adds	r3, #1
 800f0be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->OOB_Data_Len = OOB_Data_Len;
 800f0c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f0c6:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800f0ca:	725a      	strb	r2, [r3, #9]
  index_input += 1;
 800f0cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f0d0:	3301      	adds	r3, #1
 800f0d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->OOB_Data, (const void*)OOB_Data, 16 );
 800f0d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f0da:	330a      	adds	r3, #10
 800f0dc:	2210      	movs	r2, #16
 800f0de:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f000 fdcc 	bl	800fc80 <Osal_MemCpy>
  index_input += 16;
 800f0e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f0ec:	3310      	adds	r3, #16
 800f0ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f0f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f0f6:	2218      	movs	r2, #24
 800f0f8:	2100      	movs	r1, #0
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f000 fdd0 	bl	800fca0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f100:	233f      	movs	r3, #63	@ 0x3f
 800f102:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a8;
 800f106:	23a8      	movs	r3, #168	@ 0xa8
 800f108:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f10c:	f107 0310 	add.w	r3, r7, #16
 800f110:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f114:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f118:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f11c:	f107 030f 	add.w	r3, r7, #15
 800f120:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f124:	2301      	movs	r3, #1
 800f126:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f12a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f12e:	2100      	movs	r1, #0
 800f130:	4618      	mov	r0, r3
 800f132:	f001 f83f 	bl	80101b4 <hci_send_req>
 800f136:	4603      	mov	r3, r0
 800f138:	2b00      	cmp	r3, #0
 800f13a:	da01      	bge.n	800f140 <aci_gap_set_oob_data+0x140>
    return BLE_STATUS_TIMEOUT;
 800f13c:	23ff      	movs	r3, #255	@ 0xff
 800f13e:	e004      	b.n	800f14a <aci_gap_set_oob_data+0x14a>
  return status;
 800f140:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f144:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f148:	781b      	ldrb	r3, [r3, #0]
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800f150:	46bd      	mov	sp, r7
 800f152:	bd90      	pop	{r4, r7, pc}

0800f154 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b088      	sub	sp, #32
 800f158:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800f15a:	2300      	movs	r3, #0
 800f15c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f15e:	f107 0308 	add.w	r3, r7, #8
 800f162:	2218      	movs	r2, #24
 800f164:	2100      	movs	r1, #0
 800f166:	4618      	mov	r0, r3
 800f168:	f000 fd9a 	bl	800fca0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f16c:	233f      	movs	r3, #63	@ 0x3f
 800f16e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800f170:	f240 1301 	movw	r3, #257	@ 0x101
 800f174:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f176:	1dfb      	adds	r3, r7, #7
 800f178:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f17a:	2301      	movs	r3, #1
 800f17c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f17e:	f107 0308 	add.w	r3, r7, #8
 800f182:	2100      	movs	r1, #0
 800f184:	4618      	mov	r0, r3
 800f186:	f001 f815 	bl	80101b4 <hci_send_req>
 800f18a:	4603      	mov	r3, r0
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	da01      	bge.n	800f194 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800f190:	23ff      	movs	r3, #255	@ 0xff
 800f192:	e000      	b.n	800f196 <aci_gatt_init+0x42>
  return status;
 800f194:	79fb      	ldrb	r3, [r7, #7]
}
 800f196:	4618      	mov	r0, r3
 800f198:	3720      	adds	r7, #32
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}

0800f19e <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800f19e:	b590      	push	{r4, r7, lr}
 800f1a0:	b0cf      	sub	sp, #316	@ 0x13c
 800f1a2:	af00      	add	r7, sp, #0
 800f1a4:	4604      	mov	r4, r0
 800f1a6:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800f1aa:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800f1ae:	6001      	str	r1, [r0, #0]
 800f1b0:	4610      	mov	r0, r2
 800f1b2:	4619      	mov	r1, r3
 800f1b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f1b8:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800f1bc:	4622      	mov	r2, r4
 800f1be:	701a      	strb	r2, [r3, #0]
 800f1c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f1c4:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800f1c8:	4602      	mov	r2, r0
 800f1ca:	701a      	strb	r2, [r3, #0]
 800f1cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f1d0:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800f1d4:	460a      	mov	r2, r1
 800f1d6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800f1d8:	f107 0310 	add.w	r3, r7, #16
 800f1dc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800f1e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f1e4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800f1e8:	781b      	ldrb	r3, [r3, #0]
 800f1ea:	2b01      	cmp	r3, #1
 800f1ec:	d00a      	beq.n	800f204 <aci_gatt_add_service+0x66>
 800f1ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f1f2:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800f1f6:	781b      	ldrb	r3, [r3, #0]
 800f1f8:	2b02      	cmp	r3, #2
 800f1fa:	d101      	bne.n	800f200 <aci_gatt_add_service+0x62>
 800f1fc:	2311      	movs	r3, #17
 800f1fe:	e002      	b.n	800f206 <aci_gatt_add_service+0x68>
 800f200:	2301      	movs	r3, #1
 800f202:	e000      	b.n	800f206 <aci_gatt_add_service+0x68>
 800f204:	2303      	movs	r3, #3
 800f206:	f107 0210 	add.w	r2, r7, #16
 800f20a:	4413      	add	r3, r2
 800f20c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800f210:	f107 030c 	add.w	r3, r7, #12
 800f214:	2203      	movs	r2, #3
 800f216:	2100      	movs	r1, #0
 800f218:	4618      	mov	r0, r3
 800f21a:	f000 fd41 	bl	800fca0 <Osal_MemSet>
  int index_input = 0;
 800f21e:	2300      	movs	r3, #0
 800f220:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800f224:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f228:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800f22c:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800f230:	7812      	ldrb	r2, [r2, #0]
 800f232:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f234:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f238:	3301      	adds	r3, #1
 800f23a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800f23e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f242:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800f246:	781b      	ldrb	r3, [r3, #0]
 800f248:	2b01      	cmp	r3, #1
 800f24a:	d002      	beq.n	800f252 <aci_gatt_add_service+0xb4>
 800f24c:	2b02      	cmp	r3, #2
 800f24e:	d004      	beq.n	800f25a <aci_gatt_add_service+0xbc>
 800f250:	e007      	b.n	800f262 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800f252:	2302      	movs	r3, #2
 800f254:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800f258:	e005      	b.n	800f266 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800f25a:	2310      	movs	r3, #16
 800f25c:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800f260:	e001      	b.n	800f266 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800f262:	2397      	movs	r3, #151	@ 0x97
 800f264:	e06c      	b.n	800f340 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800f266:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f26a:	1c58      	adds	r0, r3, #1
 800f26c:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800f270:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f274:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800f278:	6819      	ldr	r1, [r3, #0]
 800f27a:	f000 fd01 	bl	800fc80 <Osal_MemCpy>
    index_input += size;
 800f27e:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800f282:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800f286:	4413      	add	r3, r2
 800f288:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800f28c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f290:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800f294:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800f298:	7812      	ldrb	r2, [r2, #0]
 800f29a:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800f29c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f2a0:	3301      	adds	r3, #1
 800f2a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800f2a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f2aa:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800f2ae:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800f2b2:	7812      	ldrb	r2, [r2, #0]
 800f2b4:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800f2b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f2c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f2c4:	2218      	movs	r2, #24
 800f2c6:	2100      	movs	r1, #0
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f000 fce9 	bl	800fca0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f2ce:	233f      	movs	r3, #63	@ 0x3f
 800f2d0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800f2d4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800f2d8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f2dc:	f107 0310 	add.w	r3, r7, #16
 800f2e0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f2e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f2e8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800f2ec:	f107 030c 	add.w	r3, r7, #12
 800f2f0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800f2f4:	2303      	movs	r3, #3
 800f2f6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f2fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f2fe:	2100      	movs	r1, #0
 800f300:	4618      	mov	r0, r3
 800f302:	f000 ff57 	bl	80101b4 <hci_send_req>
 800f306:	4603      	mov	r3, r0
 800f308:	2b00      	cmp	r3, #0
 800f30a:	da01      	bge.n	800f310 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800f30c:	23ff      	movs	r3, #255	@ 0xff
 800f30e:	e017      	b.n	800f340 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800f310:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f314:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f318:	781b      	ldrb	r3, [r3, #0]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d005      	beq.n	800f32a <aci_gatt_add_service+0x18c>
    return resp.Status;
 800f31e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f322:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f326:	781b      	ldrb	r3, [r3, #0]
 800f328:	e00a      	b.n	800f340 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800f32a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f32e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f332:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f336:	b29a      	uxth	r2, r3
 800f338:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800f33c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800f33e:	2300      	movs	r3, #0
}
 800f340:	4618      	mov	r0, r3
 800f342:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800f346:	46bd      	mov	sp, r7
 800f348:	bd90      	pop	{r4, r7, pc}

0800f34a <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800f34a:	b590      	push	{r4, r7, lr}
 800f34c:	b0d1      	sub	sp, #324	@ 0x144
 800f34e:	af00      	add	r7, sp, #0
 800f350:	4604      	mov	r4, r0
 800f352:	4608      	mov	r0, r1
 800f354:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800f358:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800f35c:	600a      	str	r2, [r1, #0]
 800f35e:	4619      	mov	r1, r3
 800f360:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f364:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800f368:	4622      	mov	r2, r4
 800f36a:	801a      	strh	r2, [r3, #0]
 800f36c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f370:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800f374:	4602      	mov	r2, r0
 800f376:	701a      	strb	r2, [r3, #0]
 800f378:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f37c:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800f380:	460a      	mov	r2, r1
 800f382:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800f384:	f107 0318 	add.w	r3, r7, #24
 800f388:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800f38c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f390:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	2b01      	cmp	r3, #1
 800f398:	d00a      	beq.n	800f3b0 <aci_gatt_add_char+0x66>
 800f39a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f39e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	2b02      	cmp	r3, #2
 800f3a6:	d101      	bne.n	800f3ac <aci_gatt_add_char+0x62>
 800f3a8:	2313      	movs	r3, #19
 800f3aa:	e002      	b.n	800f3b2 <aci_gatt_add_char+0x68>
 800f3ac:	2303      	movs	r3, #3
 800f3ae:	e000      	b.n	800f3b2 <aci_gatt_add_char+0x68>
 800f3b0:	2305      	movs	r3, #5
 800f3b2:	f107 0218 	add.w	r2, r7, #24
 800f3b6:	4413      	add	r3, r2
 800f3b8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800f3bc:	f107 0314 	add.w	r3, r7, #20
 800f3c0:	2203      	movs	r2, #3
 800f3c2:	2100      	movs	r1, #0
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f000 fc6b 	bl	800fca0 <Osal_MemSet>
  int index_input = 0;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800f3d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800f3d4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800f3d8:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800f3dc:	8812      	ldrh	r2, [r2, #0]
 800f3de:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f3e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f3e4:	3302      	adds	r3, #2
 800f3e6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800f3ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800f3ee:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800f3f2:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800f3f6:	7812      	ldrb	r2, [r2, #0]
 800f3f8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f3fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f3fe:	3301      	adds	r3, #1
 800f400:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800f404:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f408:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800f40c:	781b      	ldrb	r3, [r3, #0]
 800f40e:	2b01      	cmp	r3, #1
 800f410:	d002      	beq.n	800f418 <aci_gatt_add_char+0xce>
 800f412:	2b02      	cmp	r3, #2
 800f414:	d004      	beq.n	800f420 <aci_gatt_add_char+0xd6>
 800f416:	e007      	b.n	800f428 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800f418:	2302      	movs	r3, #2
 800f41a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800f41e:	e005      	b.n	800f42c <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800f420:	2310      	movs	r3, #16
 800f422:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800f426:	e001      	b.n	800f42c <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800f428:	2397      	movs	r3, #151	@ 0x97
 800f42a:	e091      	b.n	800f550 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800f42c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800f430:	1cd8      	adds	r0, r3, #3
 800f432:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800f436:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f43a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800f43e:	6819      	ldr	r1, [r3, #0]
 800f440:	f000 fc1e 	bl	800fc80 <Osal_MemCpy>
    index_input += size;
 800f444:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800f448:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800f44c:	4413      	add	r3, r2
 800f44e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800f452:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f456:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800f45a:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800f45e:	8812      	ldrh	r2, [r2, #0]
 800f460:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800f462:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f466:	3302      	adds	r3, #2
 800f468:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800f46c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f470:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800f474:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800f476:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f47a:	3301      	adds	r3, #1
 800f47c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800f480:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f484:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800f488:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800f48a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f48e:	3301      	adds	r3, #1
 800f490:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800f494:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f498:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800f49c:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800f49e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f4a2:	3301      	adds	r3, #1
 800f4a4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800f4a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f4ac:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800f4b0:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800f4b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f4b6:	3301      	adds	r3, #1
 800f4b8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800f4bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f4c0:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800f4c4:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800f4c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f4ca:	3301      	adds	r3, #1
 800f4cc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f4d0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800f4d4:	2218      	movs	r2, #24
 800f4d6:	2100      	movs	r1, #0
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f000 fbe1 	bl	800fca0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f4de:	233f      	movs	r3, #63	@ 0x3f
 800f4e0:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800f4e4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800f4e8:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800f4ec:	f107 0318 	add.w	r3, r7, #24
 800f4f0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800f4f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f4f8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800f4fc:	f107 0314 	add.w	r3, r7, #20
 800f500:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800f504:	2303      	movs	r3, #3
 800f506:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f50a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800f50e:	2100      	movs	r1, #0
 800f510:	4618      	mov	r0, r3
 800f512:	f000 fe4f 	bl	80101b4 <hci_send_req>
 800f516:	4603      	mov	r3, r0
 800f518:	2b00      	cmp	r3, #0
 800f51a:	da01      	bge.n	800f520 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800f51c:	23ff      	movs	r3, #255	@ 0xff
 800f51e:	e017      	b.n	800f550 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800f520:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f524:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f528:	781b      	ldrb	r3, [r3, #0]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d005      	beq.n	800f53a <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800f52e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f532:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f536:	781b      	ldrb	r3, [r3, #0]
 800f538:	e00a      	b.n	800f550 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800f53a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f53e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f542:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f546:	b29a      	uxth	r2, r3
 800f548:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800f54c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800f54e:	2300      	movs	r3, #0
}
 800f550:	4618      	mov	r0, r3
 800f552:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800f556:	46bd      	mov	sp, r7
 800f558:	bd90      	pop	{r4, r7, pc}

0800f55a <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800f55a:	b5b0      	push	{r4, r5, r7, lr}
 800f55c:	b0cc      	sub	sp, #304	@ 0x130
 800f55e:	af00      	add	r7, sp, #0
 800f560:	4605      	mov	r5, r0
 800f562:	460c      	mov	r4, r1
 800f564:	4610      	mov	r0, r2
 800f566:	4619      	mov	r1, r3
 800f568:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f56c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f570:	462a      	mov	r2, r5
 800f572:	801a      	strh	r2, [r3, #0]
 800f574:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f578:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f57c:	4622      	mov	r2, r4
 800f57e:	801a      	strh	r2, [r3, #0]
 800f580:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f584:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800f588:	4602      	mov	r2, r0
 800f58a:	701a      	strb	r2, [r3, #0]
 800f58c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f590:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800f594:	460a      	mov	r2, r1
 800f596:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800f598:	f107 0310 	add.w	r3, r7, #16
 800f59c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f5a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f5a4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800f5b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f5b6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f5ba:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f5be:	8812      	ldrh	r2, [r2, #0]
 800f5c0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f5c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f5c6:	3302      	adds	r3, #2
 800f5c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800f5cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f5d0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f5d4:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800f5d8:	8812      	ldrh	r2, [r2, #0]
 800f5da:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800f5dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f5e0:	3302      	adds	r3, #2
 800f5e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800f5e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f5ea:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f5ee:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800f5f2:	7812      	ldrb	r2, [r2, #0]
 800f5f4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800f5f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800f600:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f604:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f608:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800f60c:	7812      	ldrb	r2, [r2, #0]
 800f60e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800f610:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f614:	3301      	adds	r3, #1
 800f616:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800f61a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f61e:	1d98      	adds	r0, r3, #6
 800f620:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f624:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800f628:	781b      	ldrb	r3, [r3, #0]
 800f62a:	461a      	mov	r2, r3
 800f62c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800f630:	f000 fb26 	bl	800fc80 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800f634:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f638:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800f63c:	781b      	ldrb	r3, [r3, #0]
 800f63e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800f642:	4413      	add	r3, r2
 800f644:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f648:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f64c:	2218      	movs	r2, #24
 800f64e:	2100      	movs	r1, #0
 800f650:	4618      	mov	r0, r3
 800f652:	f000 fb25 	bl	800fca0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f656:	233f      	movs	r3, #63	@ 0x3f
 800f658:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800f65c:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800f660:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f664:	f107 0310 	add.w	r3, r7, #16
 800f668:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f66c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f670:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f674:	f107 030f 	add.w	r3, r7, #15
 800f678:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f67c:	2301      	movs	r3, #1
 800f67e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f682:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f686:	2100      	movs	r1, #0
 800f688:	4618      	mov	r0, r3
 800f68a:	f000 fd93 	bl	80101b4 <hci_send_req>
 800f68e:	4603      	mov	r3, r0
 800f690:	2b00      	cmp	r3, #0
 800f692:	da01      	bge.n	800f698 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800f694:	23ff      	movs	r3, #255	@ 0xff
 800f696:	e004      	b.n	800f6a2 <aci_gatt_update_char_value+0x148>
  return status;
 800f698:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f69c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f6a0:	781b      	ldrb	r3, [r3, #0]
}
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bdb0      	pop	{r4, r5, r7, pc}

0800f6ac <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b0cc      	sub	sp, #304	@ 0x130
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f6b6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f6ba:	601a      	str	r2, [r3, #0]
 800f6bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f6c0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f6c4:	4602      	mov	r2, r0
 800f6c6:	701a      	strb	r2, [r3, #0]
 800f6c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f6cc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f6d0:	460a      	mov	r2, r1
 800f6d2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800f6d4:	f107 0310 	add.w	r3, r7, #16
 800f6d8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f6dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f6e0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800f6ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f6f2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f6f6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800f6fa:	7812      	ldrb	r2, [r2, #0]
 800f6fc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f6fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f702:	3301      	adds	r3, #1
 800f704:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800f708:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f70c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f710:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f714:	7812      	ldrb	r2, [r2, #0]
 800f716:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f718:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f71c:	3301      	adds	r3, #1
 800f71e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800f722:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f726:	1c98      	adds	r0, r3, #2
 800f728:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f72c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f730:	781a      	ldrb	r2, [r3, #0]
 800f732:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f736:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f73a:	6819      	ldr	r1, [r3, #0]
 800f73c:	f000 faa0 	bl	800fc80 <Osal_MemCpy>
  index_input += Length;
 800f740:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f744:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f748:	781b      	ldrb	r3, [r3, #0]
 800f74a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800f74e:	4413      	add	r3, r2
 800f750:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f754:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f758:	2218      	movs	r2, #24
 800f75a:	2100      	movs	r1, #0
 800f75c:	4618      	mov	r0, r3
 800f75e:	f000 fa9f 	bl	800fca0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f762:	233f      	movs	r3, #63	@ 0x3f
 800f764:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800f768:	230c      	movs	r3, #12
 800f76a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f76e:	f107 0310 	add.w	r3, r7, #16
 800f772:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f776:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f77a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f77e:	f107 030f 	add.w	r3, r7, #15
 800f782:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f786:	2301      	movs	r3, #1
 800f788:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f78c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f790:	2100      	movs	r1, #0
 800f792:	4618      	mov	r0, r3
 800f794:	f000 fd0e 	bl	80101b4 <hci_send_req>
 800f798:	4603      	mov	r3, r0
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	da01      	bge.n	800f7a2 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800f79e:	23ff      	movs	r3, #255	@ 0xff
 800f7a0:	e004      	b.n	800f7ac <aci_hal_write_config_data+0x100>
  return status;
 800f7a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f7a6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f7aa:	781b      	ldrb	r3, [r3, #0]
}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}

0800f7b6 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800f7b6:	b580      	push	{r7, lr}
 800f7b8:	b0cc      	sub	sp, #304	@ 0x130
 800f7ba:	af00      	add	r7, sp, #0
 800f7bc:	4602      	mov	r2, r0
 800f7be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f7c2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f7c6:	701a      	strb	r2, [r3, #0]
 800f7c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f7cc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f7d0:	460a      	mov	r2, r1
 800f7d2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800f7d4:	f107 0310 	add.w	r3, r7, #16
 800f7d8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f7dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f7e0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800f7ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f7f2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f7f6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800f7fa:	7812      	ldrb	r2, [r2, #0]
 800f7fc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f7fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f802:	3301      	adds	r3, #1
 800f804:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800f808:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f80c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f810:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f814:	7812      	ldrb	r2, [r2, #0]
 800f816:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f818:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f81c:	3301      	adds	r3, #1
 800f81e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f822:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f826:	2218      	movs	r2, #24
 800f828:	2100      	movs	r1, #0
 800f82a:	4618      	mov	r0, r3
 800f82c:	f000 fa38 	bl	800fca0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f830:	233f      	movs	r3, #63	@ 0x3f
 800f832:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800f836:	230f      	movs	r3, #15
 800f838:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f83c:	f107 0310 	add.w	r3, r7, #16
 800f840:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f844:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f848:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f84c:	f107 030f 	add.w	r3, r7, #15
 800f850:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f854:	2301      	movs	r3, #1
 800f856:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f85a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f85e:	2100      	movs	r1, #0
 800f860:	4618      	mov	r0, r3
 800f862:	f000 fca7 	bl	80101b4 <hci_send_req>
 800f866:	4603      	mov	r3, r0
 800f868:	2b00      	cmp	r3, #0
 800f86a:	da01      	bge.n	800f870 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800f86c:	23ff      	movs	r3, #255	@ 0xff
 800f86e:	e004      	b.n	800f87a <aci_hal_set_tx_power_level+0xc4>
  return status;
 800f870:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f874:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f878:	781b      	ldrb	r3, [r3, #0]
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}

0800f884 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b0cc      	sub	sp, #304	@ 0x130
 800f888:	af00      	add	r7, sp, #0
 800f88a:	4602      	mov	r2, r0
 800f88c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f890:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f894:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800f896:	f107 0310 	add.w	r3, r7, #16
 800f89a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f89e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f8a2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800f8b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f8b4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f8b8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f8bc:	8812      	ldrh	r2, [r2, #0]
 800f8be:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f8c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f8c4:	3302      	adds	r3, #2
 800f8c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f8ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f8ce:	2218      	movs	r2, #24
 800f8d0:	2100      	movs	r1, #0
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f000 f9e4 	bl	800fca0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f8d8:	233f      	movs	r3, #63	@ 0x3f
 800f8da:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800f8de:	2318      	movs	r3, #24
 800f8e0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f8e4:	f107 0310 	add.w	r3, r7, #16
 800f8e8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f8ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f8f0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f8f4:	f107 030f 	add.w	r3, r7, #15
 800f8f8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f902:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f906:	2100      	movs	r1, #0
 800f908:	4618      	mov	r0, r3
 800f90a:	f000 fc53 	bl	80101b4 <hci_send_req>
 800f90e:	4603      	mov	r3, r0
 800f910:	2b00      	cmp	r3, #0
 800f912:	da01      	bge.n	800f918 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800f914:	23ff      	movs	r3, #255	@ 0xff
 800f916:	e004      	b.n	800f922 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800f918:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f91c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f920:	781b      	ldrb	r3, [r3, #0]
}
 800f922:	4618      	mov	r0, r3
 800f924:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}

0800f92c <hci_disconnect>:

#include "ble_hci_le.h"

tBleStatus hci_disconnect( uint16_t Connection_Handle,
                           uint8_t Reason )
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b0cc      	sub	sp, #304	@ 0x130
 800f930:	af00      	add	r7, sp, #0
 800f932:	4602      	mov	r2, r0
 800f934:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f938:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f93c:	801a      	strh	r2, [r3, #0]
 800f93e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f942:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800f946:	460a      	mov	r2, r1
 800f948:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_disconnect_cp0 *cp0 = (hci_disconnect_cp0*)(cmd_buffer);
 800f94a:	f107 0310 	add.w	r3, r7, #16
 800f94e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f952:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f956:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f95a:	2200      	movs	r2, #0
 800f95c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f95e:	2300      	movs	r3, #0
 800f960:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800f964:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f968:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f96c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f970:	8812      	ldrh	r2, [r2, #0]
 800f972:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f974:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f978:	3302      	adds	r3, #2
 800f97a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Reason = Reason;
 800f97e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f982:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f986:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800f98a:	7812      	ldrb	r2, [r2, #0]
 800f98c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f98e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f992:	3301      	adds	r3, #1
 800f994:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f998:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f99c:	2218      	movs	r2, #24
 800f99e:	2100      	movs	r1, #0
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f000 f97d 	bl	800fca0 <Osal_MemSet>
  rq.ogf = 0x01;
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x006;
 800f9ac:	2306      	movs	r3, #6
 800f9ae:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 800f9b2:	230f      	movs	r3, #15
 800f9b4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 800f9b8:	f107 0310 	add.w	r3, r7, #16
 800f9bc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f9c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f9c4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f9c8:	f107 030f 	add.w	r3, r7, #15
 800f9cc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f9d0:	2301      	movs	r3, #1
 800f9d2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f9d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f9da:	2100      	movs	r1, #0
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f000 fbe9 	bl	80101b4 <hci_send_req>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	da01      	bge.n	800f9ec <hci_disconnect+0xc0>
    return BLE_STATUS_TIMEOUT;
 800f9e8:	23ff      	movs	r3, #255	@ 0xff
 800f9ea:	e004      	b.n	800f9f6 <hci_disconnect+0xca>
  return status;
 800f9ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f9f0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f9f4:	781b      	ldrb	r3, [r3, #0]
}
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}

0800fa00 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b088      	sub	sp, #32
 800fa04:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800fa06:	2300      	movs	r3, #0
 800fa08:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fa0a:	f107 0308 	add.w	r3, r7, #8
 800fa0e:	2218      	movs	r2, #24
 800fa10:	2100      	movs	r1, #0
 800fa12:	4618      	mov	r0, r3
 800fa14:	f000 f944 	bl	800fca0 <Osal_MemSet>
  rq.ogf = 0x03;
 800fa18:	2303      	movs	r3, #3
 800fa1a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800fa1c:	2303      	movs	r3, #3
 800fa1e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800fa20:	1dfb      	adds	r3, r7, #7
 800fa22:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800fa24:	2301      	movs	r3, #1
 800fa26:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fa28:	f107 0308 	add.w	r3, r7, #8
 800fa2c:	2100      	movs	r1, #0
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f000 fbc0 	bl	80101b4 <hci_send_req>
 800fa34:	4603      	mov	r3, r0
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	da01      	bge.n	800fa3e <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800fa3a:	23ff      	movs	r3, #255	@ 0xff
 800fa3c:	e000      	b.n	800fa40 <hci_reset+0x40>
  return status;
 800fa3e:	79fb      	ldrb	r3, [r7, #7]
}
 800fa40:	4618      	mov	r0, r3
 800fa42:	3720      	adds	r7, #32
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}

0800fa48 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800fa48:	b590      	push	{r4, r7, lr}
 800fa4a:	b0cd      	sub	sp, #308	@ 0x134
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	4604      	mov	r4, r0
 800fa50:	4608      	mov	r0, r1
 800fa52:	4611      	mov	r1, r2
 800fa54:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fa58:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800fa5c:	4622      	mov	r2, r4
 800fa5e:	701a      	strb	r2, [r3, #0]
 800fa60:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fa64:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800fa68:	4602      	mov	r2, r0
 800fa6a:	701a      	strb	r2, [r3, #0]
 800fa6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fa70:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800fa74:	460a      	mov	r2, r1
 800fa76:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800fa78:	f107 0310 	add.w	r3, r7, #16
 800fa7c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800fa80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fa84:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fa88:	2200      	movs	r2, #0
 800fa8a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800fa92:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fa96:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fa9a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800fa9e:	7812      	ldrb	r2, [r2, #0]
 800faa0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800faa2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800faa6:	3301      	adds	r3, #1
 800faa8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800faac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fab0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fab4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800fab8:	7812      	ldrb	r2, [r2, #0]
 800faba:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800fabc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fac0:	3301      	adds	r3, #1
 800fac2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800fac6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800faca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800face:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800fad2:	7812      	ldrb	r2, [r2, #0]
 800fad4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800fad6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fada:	3301      	adds	r3, #1
 800fadc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fae0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fae4:	2218      	movs	r2, #24
 800fae6:	2100      	movs	r1, #0
 800fae8:	4618      	mov	r0, r3
 800faea:	f000 f8d9 	bl	800fca0 <Osal_MemSet>
  rq.ogf = 0x08;
 800faee:	2308      	movs	r3, #8
 800faf0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800faf4:	2331      	movs	r3, #49	@ 0x31
 800faf6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fafa:	f107 0310 	add.w	r3, r7, #16
 800fafe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fb02:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fb06:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800fb0a:	f107 030f 	add.w	r3, r7, #15
 800fb0e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800fb12:	2301      	movs	r3, #1
 800fb14:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fb18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fb1c:	2100      	movs	r1, #0
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f000 fb48 	bl	80101b4 <hci_send_req>
 800fb24:	4603      	mov	r3, r0
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	da01      	bge.n	800fb2e <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800fb2a:	23ff      	movs	r3, #255	@ 0xff
 800fb2c:	e004      	b.n	800fb38 <hci_le_set_default_phy+0xf0>
  return status;
 800fb2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fb32:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fb36:	781b      	ldrb	r3, [r3, #0]
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	bd90      	pop	{r4, r7, pc}

0800fb42 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Slave_latency,
                                                      uint16_t Timeout_Multiplier )
{
 800fb42:	b5b0      	push	{r4, r5, r7, lr}
 800fb44:	b0cc      	sub	sp, #304	@ 0x130
 800fb46:	af00      	add	r7, sp, #0
 800fb48:	4605      	mov	r5, r0
 800fb4a:	460c      	mov	r4, r1
 800fb4c:	4610      	mov	r0, r2
 800fb4e:	4619      	mov	r1, r3
 800fb50:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fb54:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800fb58:	462a      	mov	r2, r5
 800fb5a:	801a      	strh	r2, [r3, #0]
 800fb5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fb60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800fb64:	4622      	mov	r2, r4
 800fb66:	801a      	strh	r2, [r3, #0]
 800fb68:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fb6c:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800fb70:	4602      	mov	r2, r0
 800fb72:	801a      	strh	r2, [r3, #0]
 800fb74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fb78:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800fb7c:	460a      	mov	r2, r1
 800fb7e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 800fb80:	f107 0310 	add.w	r3, r7, #16
 800fb84:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800fb88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fb8c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fb90:	2200      	movs	r2, #0
 800fb92:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fb94:	2300      	movs	r3, #0
 800fb96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800fb9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fb9e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fba2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800fba6:	8812      	ldrh	r2, [r2, #0]
 800fba8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800fbaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fbae:	3302      	adds	r3, #2
 800fbb0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 800fbb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fbb8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fbbc:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800fbc0:	8812      	ldrh	r2, [r2, #0]
 800fbc2:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800fbc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fbc8:	3302      	adds	r3, #2
 800fbca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 800fbce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fbd2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fbd6:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800fbda:	8812      	ldrh	r2, [r2, #0]
 800fbdc:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800fbde:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fbe2:	3302      	adds	r3, #2
 800fbe4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Slave_latency = Slave_latency;
 800fbe8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fbec:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fbf0:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800fbf4:	8812      	ldrh	r2, [r2, #0]
 800fbf6:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 800fbf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fbfc:	3302      	adds	r3, #2
 800fbfe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 800fc02:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fc06:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 800fc0a:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 800fc0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fc10:	3302      	adds	r3, #2
 800fc12:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fc16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fc1a:	2218      	movs	r2, #24
 800fc1c:	2100      	movs	r1, #0
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f000 f83e 	bl	800fca0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800fc24:	233f      	movs	r3, #63	@ 0x3f
 800fc26:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x181;
 800fc2a:	f240 1381 	movw	r3, #385	@ 0x181
 800fc2e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 800fc32:	230f      	movs	r3, #15
 800fc34:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 800fc38:	f107 0310 	add.w	r3, r7, #16
 800fc3c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fc40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fc44:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800fc48:	f107 030f 	add.w	r3, r7, #15
 800fc4c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800fc50:	2301      	movs	r3, #1
 800fc52:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fc56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fc5a:	2100      	movs	r1, #0
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f000 faa9 	bl	80101b4 <hci_send_req>
 800fc62:	4603      	mov	r3, r0
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	da01      	bge.n	800fc6c <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 800fc68:	23ff      	movs	r3, #255	@ 0xff
 800fc6a:	e004      	b.n	800fc76 <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 800fc6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fc70:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fc74:	781b      	ldrb	r3, [r3, #0]
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bdb0      	pop	{r4, r5, r7, pc}

0800fc80 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b084      	sub	sp, #16
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	60f8      	str	r0, [r7, #12]
 800fc88:	60b9      	str	r1, [r7, #8]
 800fc8a:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800fc8c:	687a      	ldr	r2, [r7, #4]
 800fc8e:	68b9      	ldr	r1, [r7, #8]
 800fc90:	68f8      	ldr	r0, [r7, #12]
 800fc92:	f004 f8f2 	bl	8013e7a <memcpy>
 800fc96:	4603      	mov	r3, r0
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3710      	adds	r7, #16
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}

0800fca0 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b084      	sub	sp, #16
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	60f8      	str	r0, [r7, #12]
 800fca8:	60b9      	str	r1, [r7, #8]
 800fcaa:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800fcac:	687a      	ldr	r2, [r7, #4]
 800fcae:	68b9      	ldr	r1, [r7, #8]
 800fcb0:	68f8      	ldr	r0, [r7, #12]
 800fcb2:	f004 f8ad 	bl	8013e10 <memset>
 800fcb6:	4603      	mov	r3, r0
}
 800fcb8:	4618      	mov	r0, r3
 800fcba:	3710      	adds	r7, #16
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}

0800fcc0 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800fcc0:	b480      	push	{r7}
 800fcc2:	af00      	add	r7, sp, #0
  return;
 800fcc4:	bf00      	nop
}
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fccc:	4770      	bx	lr

0800fcce <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800fcce:	b480      	push	{r7}
 800fcd0:	af00      	add	r7, sp, #0
  return;
 800fcd2:	bf00      	nop
}
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcda:	4770      	bx	lr

0800fcdc <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800fcdc:	b480      	push	{r7}
 800fcde:	af00      	add	r7, sp, #0
  return;
 800fce0:	bf00      	nop
}
 800fce2:	46bd      	mov	sp, r7
 800fce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce8:	4770      	bx	lr

0800fcea <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800fcea:	b480      	push	{r7}
 800fcec:	af00      	add	r7, sp, #0
  return;
 800fcee:	bf00      	nop
}
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf6:	4770      	bx	lr

0800fcf8 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	af00      	add	r7, sp, #0
  return;
 800fcfc:	bf00      	nop
}
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd04:	4770      	bx	lr

0800fd06 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800fd06:	b480      	push	{r7}
 800fd08:	af00      	add	r7, sp, #0
  return;
 800fd0a:	bf00      	nop
}
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd12:	4770      	bx	lr

0800fd14 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800fd14:	b480      	push	{r7}
 800fd16:	af00      	add	r7, sp, #0
  return;
 800fd18:	bf00      	nop
}
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd20:	4770      	bx	lr

0800fd22 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800fd22:	b480      	push	{r7}
 800fd24:	af00      	add	r7, sp, #0
  return;
 800fd26:	bf00      	nop
}
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2e:	4770      	bx	lr

0800fd30 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800fd30:	b480      	push	{r7}
 800fd32:	af00      	add	r7, sp, #0
  return;
 800fd34:	bf00      	nop
}
 800fd36:	46bd      	mov	sp, r7
 800fd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3c:	4770      	bx	lr

0800fd3e <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800fd3e:	b480      	push	{r7}
 800fd40:	af00      	add	r7, sp, #0
  return;
 800fd42:	bf00      	nop
}
 800fd44:	46bd      	mov	sp, r7
 800fd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4a:	4770      	bx	lr

0800fd4c <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800fd4c:	b480      	push	{r7}
 800fd4e:	af00      	add	r7, sp, #0
  return;
 800fd50:	bf00      	nop
}
 800fd52:	46bd      	mov	sp, r7
 800fd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd58:	4770      	bx	lr

0800fd5a <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800fd5a:	b480      	push	{r7}
 800fd5c:	af00      	add	r7, sp, #0
  return;
 800fd5e:	bf00      	nop
}
 800fd60:	46bd      	mov	sp, r7
 800fd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd66:	4770      	bx	lr

0800fd68 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800fd68:	b480      	push	{r7}
 800fd6a:	af00      	add	r7, sp, #0
  return;
 800fd6c:	bf00      	nop
}
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd74:	4770      	bx	lr

0800fd76 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800fd76:	b480      	push	{r7}
 800fd78:	af00      	add	r7, sp, #0
  return;
 800fd7a:	bf00      	nop
}
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd82:	4770      	bx	lr

0800fd84 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800fd84:	b480      	push	{r7}
 800fd86:	af00      	add	r7, sp, #0
  return;
 800fd88:	bf00      	nop
}
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd90:	4770      	bx	lr

0800fd92 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800fd92:	b480      	push	{r7}
 800fd94:	af00      	add	r7, sp, #0
  return;
 800fd96:	bf00      	nop
}
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9e:	4770      	bx	lr

0800fda0 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800fda0:	b480      	push	{r7}
 800fda2:	af00      	add	r7, sp, #0
  return;
 800fda4:	bf00      	nop
}
 800fda6:	46bd      	mov	sp, r7
 800fda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdac:	4770      	bx	lr
	...

0800fdb0 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800fdb4:	4b04      	ldr	r3, [pc, #16]	@ (800fdc8 <SVCCTL_Init+0x18>)
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800fdba:	4b04      	ldr	r3, [pc, #16]	@ (800fdcc <SVCCTL_Init+0x1c>)
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800fdc0:	f000 f806 	bl	800fdd0 <SVCCTL_SvcInit>

  return;
 800fdc4:	bf00      	nop
}
 800fdc6:	bd80      	pop	{r7, pc}
 800fdc8:	200001c0 	.word	0x200001c0
 800fdcc:	200001e0 	.word	0x200001e0

0800fdd0 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	af00      	add	r7, sp, #0
  BAS_Init();
 800fdd4:	f7ff ff74 	bl	800fcc0 <BAS_Init>

  BLS_Init();
 800fdd8:	f7ff ff79 	bl	800fcce <BLS_Init>

  CRS_STM_Init();
 800fddc:	f7ff ff7e 	bl	800fcdc <CRS_STM_Init>

  DIS_Init();
 800fde0:	f7ff ff83 	bl	800fcea <DIS_Init>

  EDS_STM_Init();
 800fde4:	f7ff ff88 	bl	800fcf8 <EDS_STM_Init>

  HIDS_Init();
 800fde8:	f7ff ff8d 	bl	800fd06 <HIDS_Init>

  HRS_Init();
 800fdec:	f7ff ff92 	bl	800fd14 <HRS_Init>

  HTS_Init();
 800fdf0:	f7ff ff97 	bl	800fd22 <HTS_Init>

  IAS_Init();
 800fdf4:	f7ff ff9c 	bl	800fd30 <IAS_Init>

  LLS_Init();
 800fdf8:	f7ff ffa1 	bl	800fd3e <LLS_Init>

  TPS_Init();
 800fdfc:	f7ff ffa6 	bl	800fd4c <TPS_Init>

  MOTENV_STM_Init();
 800fe00:	f7ff ffab 	bl	800fd5a <MOTENV_STM_Init>

  P2PS_STM_Init();
 800fe04:	f7ff ffb0 	bl	800fd68 <P2PS_STM_Init>

  ZDD_STM_Init();
 800fe08:	f7ff ffb5 	bl	800fd76 <ZDD_STM_Init>

  OTAS_STM_Init();
 800fe0c:	f7ff ffba 	bl	800fd84 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800fe10:	f7ff ffc6 	bl	800fda0 <BVOPUS_STM_Init>

  MESH_Init();
 800fe14:	f7ff ffbd 	bl	800fd92 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800fe18:	f002 fc46 	bl	80126a8 <SVCCTL_InitCustomSvc>
  
  return;
 800fe1c:	bf00      	nop
}
 800fe1e:	bd80      	pop	{r7, pc}

0800fe20 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800fe20:	b480      	push	{r7}
 800fe22:	b083      	sub	sp, #12
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800fe28:	4b09      	ldr	r3, [pc, #36]	@ (800fe50 <SVCCTL_RegisterSvcHandler+0x30>)
 800fe2a:	7f1b      	ldrb	r3, [r3, #28]
 800fe2c:	4619      	mov	r1, r3
 800fe2e:	4a08      	ldr	r2, [pc, #32]	@ (800fe50 <SVCCTL_RegisterSvcHandler+0x30>)
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800fe36:	4b06      	ldr	r3, [pc, #24]	@ (800fe50 <SVCCTL_RegisterSvcHandler+0x30>)
 800fe38:	7f1b      	ldrb	r3, [r3, #28]
 800fe3a:	3301      	adds	r3, #1
 800fe3c:	b2da      	uxtb	r2, r3
 800fe3e:	4b04      	ldr	r3, [pc, #16]	@ (800fe50 <SVCCTL_RegisterSvcHandler+0x30>)
 800fe40:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800fe42:	bf00      	nop
}
 800fe44:	370c      	adds	r7, #12
 800fe46:	46bd      	mov	sp, r7
 800fe48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4c:	4770      	bx	lr
 800fe4e:	bf00      	nop
 800fe50:	200001c0 	.word	0x200001c0

0800fe54 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b086      	sub	sp, #24
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	3301      	adds	r3, #1
 800fe60:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800fe62:	2300      	movs	r3, #0
 800fe64:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800fe66:	693b      	ldr	r3, [r7, #16]
 800fe68:	781b      	ldrb	r3, [r3, #0]
 800fe6a:	2bff      	cmp	r3, #255	@ 0xff
 800fe6c:	d125      	bne.n	800feba <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800fe6e:	693b      	ldr	r3, [r7, #16]
 800fe70:	3302      	adds	r3, #2
 800fe72:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	881b      	ldrh	r3, [r3, #0]
 800fe78:	b29b      	uxth	r3, r3
 800fe7a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fe7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800fe82:	d118      	bne.n	800feb6 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800fe84:	2300      	movs	r3, #0
 800fe86:	757b      	strb	r3, [r7, #21]
 800fe88:	e00d      	b.n	800fea6 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800fe8a:	7d7b      	ldrb	r3, [r7, #21]
 800fe8c:	4a1a      	ldr	r2, [pc, #104]	@ (800fef8 <SVCCTL_UserEvtRx+0xa4>)
 800fe8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe92:	6878      	ldr	r0, [r7, #4]
 800fe94:	4798      	blx	r3
 800fe96:	4603      	mov	r3, r0
 800fe98:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800fe9a:	7dfb      	ldrb	r3, [r7, #23]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d108      	bne.n	800feb2 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800fea0:	7d7b      	ldrb	r3, [r7, #21]
 800fea2:	3301      	adds	r3, #1
 800fea4:	757b      	strb	r3, [r7, #21]
 800fea6:	4b14      	ldr	r3, [pc, #80]	@ (800fef8 <SVCCTL_UserEvtRx+0xa4>)
 800fea8:	7f1b      	ldrb	r3, [r3, #28]
 800feaa:	7d7a      	ldrb	r2, [r7, #21]
 800feac:	429a      	cmp	r2, r3
 800feae:	d3ec      	bcc.n	800fe8a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800feb0:	e002      	b.n	800feb8 <SVCCTL_UserEvtRx+0x64>
              break;
 800feb2:	bf00      	nop
          break;
 800feb4:	e000      	b.n	800feb8 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800feb6:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800feb8:	e000      	b.n	800febc <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800feba:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800febc:	7dfb      	ldrb	r3, [r7, #23]
 800febe:	2b02      	cmp	r3, #2
 800fec0:	d00f      	beq.n	800fee2 <SVCCTL_UserEvtRx+0x8e>
 800fec2:	2b02      	cmp	r3, #2
 800fec4:	dc10      	bgt.n	800fee8 <SVCCTL_UserEvtRx+0x94>
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d002      	beq.n	800fed0 <SVCCTL_UserEvtRx+0x7c>
 800feca:	2b01      	cmp	r3, #1
 800fecc:	d006      	beq.n	800fedc <SVCCTL_UserEvtRx+0x88>
 800fece:	e00b      	b.n	800fee8 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f001 fc77 	bl	80117c4 <SVCCTL_App_Notification>
 800fed6:	4603      	mov	r3, r0
 800fed8:	75bb      	strb	r3, [r7, #22]
      break;
 800feda:	e008      	b.n	800feee <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800fedc:	2301      	movs	r3, #1
 800fede:	75bb      	strb	r3, [r7, #22]
      break;
 800fee0:	e005      	b.n	800feee <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800fee2:	2300      	movs	r3, #0
 800fee4:	75bb      	strb	r3, [r7, #22]
      break;
 800fee6:	e002      	b.n	800feee <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800fee8:	2301      	movs	r3, #1
 800feea:	75bb      	strb	r3, [r7, #22]
      break;
 800feec:	bf00      	nop
  }

  return (return_status);
 800feee:	7dbb      	ldrb	r3, [r7, #22]
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	3718      	adds	r7, #24
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}
 800fef8:	200001c0 	.word	0x200001c0

0800fefc <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b088      	sub	sp, #32
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ff04:	f107 030c 	add.w	r3, r7, #12
 800ff08:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800ff10:	69fb      	ldr	r3, [r7, #28]
 800ff12:	212e      	movs	r1, #46	@ 0x2e
 800ff14:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800ff18:	f000 fae2 	bl	80104e0 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ff1c:	69fb      	ldr	r3, [r7, #28]
 800ff1e:	330b      	adds	r3, #11
 800ff20:	78db      	ldrb	r3, [r3, #3]
}
 800ff22:	4618      	mov	r0, r3
 800ff24:	3720      	adds	r7, #32
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}

0800ff2a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800ff2a:	b580      	push	{r7, lr}
 800ff2c:	b088      	sub	sp, #32
 800ff2e:	af00      	add	r7, sp, #0
 800ff30:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ff32:	f107 030c 	add.w	r3, r7, #12
 800ff36:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800ff3e:	69fb      	ldr	r3, [r7, #28]
 800ff40:	210f      	movs	r1, #15
 800ff42:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800ff46:	f000 facb 	bl	80104e0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ff4a:	69fb      	ldr	r3, [r7, #28]
 800ff4c:	330b      	adds	r3, #11
 800ff4e:	78db      	ldrb	r3, [r3, #3]
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	3720      	adds	r7, #32
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}

0800ff58 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b088      	sub	sp, #32
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ff60:	f107 030c 	add.w	r3, r7, #12
 800ff64:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800ff66:	69fb      	ldr	r3, [r7, #28]
 800ff68:	687a      	ldr	r2, [r7, #4]
 800ff6a:	2110      	movs	r1, #16
 800ff6c:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800ff70:	f000 fab6 	bl	80104e0 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ff74:	69fb      	ldr	r3, [r7, #28]
 800ff76:	330b      	adds	r3, #11
 800ff78:	78db      	ldrb	r3, [r3, #3]
}
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	3720      	adds	r7, #32
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}
	...

0800ff84 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800ff84:	b480      	push	{r7}
 800ff86:	b08b      	sub	sp, #44	@ 0x2c
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800ff90:	2300      	movs	r3, #0
 800ff92:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800ff94:	2300      	movs	r3, #0
 800ff96:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800ff98:	2300      	movs	r3, #0
 800ff9a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800ffac:	4b4a      	ldr	r3, [pc, #296]	@ (80100d8 <SHCI_GetWirelessFwInfo+0x154>)
 800ffae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffb0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ffb4:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800ffb6:	693b      	ldr	r3, [r7, #16]
 800ffb8:	009b      	lsls	r3, r3, #2
 800ffba:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800ffbe:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	4a44      	ldr	r2, [pc, #272]	@ (80100dc <SHCI_GetWirelessFwInfo+0x158>)
 800ffcc:	4293      	cmp	r3, r2
 800ffce:	d10f      	bne.n	800fff0 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	695b      	ldr	r3, [r3, #20]
 800ffd4:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	699b      	ldr	r3, [r3, #24]
 800ffda:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	69db      	ldr	r3, [r3, #28]
 800ffe0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800ffe2:	68bb      	ldr	r3, [r7, #8]
 800ffe4:	68db      	ldr	r3, [r3, #12]
 800ffe6:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	691b      	ldr	r3, [r3, #16]
 800ffec:	617b      	str	r3, [r7, #20]
 800ffee:	e01a      	b.n	8010026 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800fff0:	693b      	ldr	r3, [r7, #16]
 800fff2:	009b      	lsls	r3, r3, #2
 800fff4:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800fff8:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800fffc:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	691b      	ldr	r3, [r3, #16]
 8010004:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	695b      	ldr	r3, [r3, #20]
 801000c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	699b      	ldr	r3, [r3, #24]
 8010014:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	685b      	ldr	r3, [r3, #4]
 801001c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	689b      	ldr	r3, [r3, #8]
 8010024:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8010026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010028:	0e1b      	lsrs	r3, r3, #24
 801002a:	b2da      	uxtb	r2, r3
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8010030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010032:	0c1b      	lsrs	r3, r3, #16
 8010034:	b2da      	uxtb	r2, r3
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 801003a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801003c:	0a1b      	lsrs	r3, r3, #8
 801003e:	b2da      	uxtb	r2, r3
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8010044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010046:	091b      	lsrs	r3, r3, #4
 8010048:	b2db      	uxtb	r3, r3
 801004a:	f003 030f 	and.w	r3, r3, #15
 801004e:	b2da      	uxtb	r2, r3
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8010054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010056:	b2db      	uxtb	r3, r3
 8010058:	f003 030f 	and.w	r3, r3, #15
 801005c:	b2da      	uxtb	r2, r3
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8010062:	6a3b      	ldr	r3, [r7, #32]
 8010064:	0e1b      	lsrs	r3, r3, #24
 8010066:	b2da      	uxtb	r2, r3
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 801006c:	6a3b      	ldr	r3, [r7, #32]
 801006e:	0c1b      	lsrs	r3, r3, #16
 8010070:	b2da      	uxtb	r2, r3
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8010076:	6a3b      	ldr	r3, [r7, #32]
 8010078:	0a1b      	lsrs	r3, r3, #8
 801007a:	b2da      	uxtb	r2, r3
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8010080:	6a3b      	ldr	r3, [r7, #32]
 8010082:	b2da      	uxtb	r2, r3
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8010088:	69fb      	ldr	r3, [r7, #28]
 801008a:	b2da      	uxtb	r2, r3
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8010090:	69bb      	ldr	r3, [r7, #24]
 8010092:	0e1b      	lsrs	r3, r3, #24
 8010094:	b2da      	uxtb	r2, r3
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 801009a:	69bb      	ldr	r3, [r7, #24]
 801009c:	0c1b      	lsrs	r3, r3, #16
 801009e:	b2da      	uxtb	r2, r3
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80100a4:	69bb      	ldr	r3, [r7, #24]
 80100a6:	0a1b      	lsrs	r3, r3, #8
 80100a8:	b2da      	uxtb	r2, r3
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80100ae:	697b      	ldr	r3, [r7, #20]
 80100b0:	0e1b      	lsrs	r3, r3, #24
 80100b2:	b2da      	uxtb	r2, r3
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80100b8:	697b      	ldr	r3, [r7, #20]
 80100ba:	0c1b      	lsrs	r3, r3, #16
 80100bc:	b2da      	uxtb	r2, r3
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	b2da      	uxtb	r2, r3
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80100ca:	2300      	movs	r3, #0
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	372c      	adds	r7, #44	@ 0x2c
 80100d0:	46bd      	mov	sp, r7
 80100d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d6:	4770      	bx	lr
 80100d8:	58004000 	.word	0x58004000
 80100dc:	a94656b9 	.word	0xa94656b9

080100e0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b082      	sub	sp, #8
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
 80100e8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	685b      	ldr	r3, [r3, #4]
 80100ee:	4a08      	ldr	r2, [pc, #32]	@ (8010110 <hci_init+0x30>)
 80100f0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80100f2:	4a08      	ldr	r2, [pc, #32]	@ (8010114 <hci_init+0x34>)
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80100f8:	4806      	ldr	r0, [pc, #24]	@ (8010114 <hci_init+0x34>)
 80100fa:	f000 f973 	bl	80103e4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80100fe:	683b      	ldr	r3, [r7, #0]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	4618      	mov	r0, r3
 8010104:	f000 f8d4 	bl	80102b0 <TlInit>

  return;
 8010108:	bf00      	nop
}
 801010a:	3708      	adds	r7, #8
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}
 8010110:	20000568 	.word	0x20000568
 8010114:	20000540 	.word	0x20000540

08010118 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b084      	sub	sp, #16
 801011c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 801011e:	4822      	ldr	r0, [pc, #136]	@ (80101a8 <hci_user_evt_proc+0x90>)
 8010120:	f000 fdde 	bl	8010ce0 <LST_is_empty>
 8010124:	4603      	mov	r3, r0
 8010126:	2b00      	cmp	r3, #0
 8010128:	d12b      	bne.n	8010182 <hci_user_evt_proc+0x6a>
 801012a:	4b20      	ldr	r3, [pc, #128]	@ (80101ac <hci_user_evt_proc+0x94>)
 801012c:	781b      	ldrb	r3, [r3, #0]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d027      	beq.n	8010182 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8010132:	f107 030c 	add.w	r3, r7, #12
 8010136:	4619      	mov	r1, r3
 8010138:	481b      	ldr	r0, [pc, #108]	@ (80101a8 <hci_user_evt_proc+0x90>)
 801013a:	f000 fe60 	bl	8010dfe <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 801013e:	4b1c      	ldr	r3, [pc, #112]	@ (80101b0 <hci_user_evt_proc+0x98>)
 8010140:	69db      	ldr	r3, [r3, #28]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d00c      	beq.n	8010160 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 801014a:	2301      	movs	r3, #1
 801014c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 801014e:	4b18      	ldr	r3, [pc, #96]	@ (80101b0 <hci_user_evt_proc+0x98>)
 8010150:	69db      	ldr	r3, [r3, #28]
 8010152:	1d3a      	adds	r2, r7, #4
 8010154:	4610      	mov	r0, r2
 8010156:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8010158:	793a      	ldrb	r2, [r7, #4]
 801015a:	4b14      	ldr	r3, [pc, #80]	@ (80101ac <hci_user_evt_proc+0x94>)
 801015c:	701a      	strb	r2, [r3, #0]
 801015e:	e002      	b.n	8010166 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8010160:	4b12      	ldr	r3, [pc, #72]	@ (80101ac <hci_user_evt_proc+0x94>)
 8010162:	2201      	movs	r2, #1
 8010164:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8010166:	4b11      	ldr	r3, [pc, #68]	@ (80101ac <hci_user_evt_proc+0x94>)
 8010168:	781b      	ldrb	r3, [r3, #0]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d004      	beq.n	8010178 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	4618      	mov	r0, r3
 8010172:	f000 fc03 	bl	801097c <TL_MM_EvtDone>
 8010176:	e004      	b.n	8010182 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	4619      	mov	r1, r3
 801017c:	480a      	ldr	r0, [pc, #40]	@ (80101a8 <hci_user_evt_proc+0x90>)
 801017e:	f000 fdd1 	bl	8010d24 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8010182:	4809      	ldr	r0, [pc, #36]	@ (80101a8 <hci_user_evt_proc+0x90>)
 8010184:	f000 fdac 	bl	8010ce0 <LST_is_empty>
 8010188:	4603      	mov	r3, r0
 801018a:	2b00      	cmp	r3, #0
 801018c:	d107      	bne.n	801019e <hci_user_evt_proc+0x86>
 801018e:	4b07      	ldr	r3, [pc, #28]	@ (80101ac <hci_user_evt_proc+0x94>)
 8010190:	781b      	ldrb	r3, [r3, #0]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d003      	beq.n	801019e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8010196:	4804      	ldr	r0, [pc, #16]	@ (80101a8 <hci_user_evt_proc+0x90>)
 8010198:	f002 f898 	bl	80122cc <hci_notify_asynch_evt>
  }


  return;
 801019c:	bf00      	nop
 801019e:	bf00      	nop
}
 80101a0:	3710      	adds	r7, #16
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}
 80101a6:	bf00      	nop
 80101a8:	200001e8 	.word	0x200001e8
 80101ac:	200001f4 	.word	0x200001f4
 80101b0:	20000540 	.word	0x20000540

080101b4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b088      	sub	sp, #32
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
 80101bc:	460b      	mov	r3, r1
 80101be:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80101c0:	2000      	movs	r0, #0
 80101c2:	f000 f8cb 	bl	801035c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80101c6:	2300      	movs	r3, #0
 80101c8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	885b      	ldrh	r3, [r3, #2]
 80101ce:	b21b      	sxth	r3, r3
 80101d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80101d4:	b21a      	sxth	r2, r3
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	881b      	ldrh	r3, [r3, #0]
 80101da:	029b      	lsls	r3, r3, #10
 80101dc:	b21b      	sxth	r3, r3
 80101de:	4313      	orrs	r3, r2
 80101e0:	b21b      	sxth	r3, r3
 80101e2:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	68db      	ldr	r3, [r3, #12]
 80101e8:	b2d9      	uxtb	r1, r3
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	689a      	ldr	r2, [r3, #8]
 80101ee:	8bbb      	ldrh	r3, [r7, #28]
 80101f0:	4618      	mov	r0, r3
 80101f2:	f000 f88d 	bl	8010310 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80101f6:	e04e      	b.n	8010296 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80101f8:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80101fc:	f002 f87d 	bl	80122fa <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8010200:	e043      	b.n	801028a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8010202:	f107 030c 	add.w	r3, r7, #12
 8010206:	4619      	mov	r1, r3
 8010208:	4828      	ldr	r0, [pc, #160]	@ (80102ac <hci_send_req+0xf8>)
 801020a:	f000 fdf8 	bl	8010dfe <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	7a5b      	ldrb	r3, [r3, #9]
 8010212:	2b0f      	cmp	r3, #15
 8010214:	d114      	bne.n	8010240 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	330b      	adds	r3, #11
 801021a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 801021c:	693b      	ldr	r3, [r7, #16]
 801021e:	885b      	ldrh	r3, [r3, #2]
 8010220:	b29b      	uxth	r3, r3
 8010222:	8bba      	ldrh	r2, [r7, #28]
 8010224:	429a      	cmp	r2, r3
 8010226:	d104      	bne.n	8010232 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	691b      	ldr	r3, [r3, #16]
 801022c:	693a      	ldr	r2, [r7, #16]
 801022e:	7812      	ldrb	r2, [r2, #0]
 8010230:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8010232:	693b      	ldr	r3, [r7, #16]
 8010234:	785b      	ldrb	r3, [r3, #1]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d027      	beq.n	801028a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 801023a:	2301      	movs	r3, #1
 801023c:	77fb      	strb	r3, [r7, #31]
 801023e:	e024      	b.n	801028a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	330b      	adds	r3, #11
 8010244:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8010246:	69bb      	ldr	r3, [r7, #24]
 8010248:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801024c:	b29b      	uxth	r3, r3
 801024e:	8bba      	ldrh	r2, [r7, #28]
 8010250:	429a      	cmp	r2, r3
 8010252:	d114      	bne.n	801027e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	7a9b      	ldrb	r3, [r3, #10]
 8010258:	3b03      	subs	r3, #3
 801025a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	695a      	ldr	r2, [r3, #20]
 8010260:	7dfb      	ldrb	r3, [r7, #23]
 8010262:	429a      	cmp	r2, r3
 8010264:	bfa8      	it	ge
 8010266:	461a      	movge	r2, r3
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	6918      	ldr	r0, [r3, #16]
 8010270:	69bb      	ldr	r3, [r7, #24]
 8010272:	1cd9      	adds	r1, r3, #3
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	695b      	ldr	r3, [r3, #20]
 8010278:	461a      	mov	r2, r3
 801027a:	f003 fdfe 	bl	8013e7a <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 801027e:	69bb      	ldr	r3, [r7, #24]
 8010280:	781b      	ldrb	r3, [r3, #0]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d001      	beq.n	801028a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8010286:	2301      	movs	r3, #1
 8010288:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 801028a:	4808      	ldr	r0, [pc, #32]	@ (80102ac <hci_send_req+0xf8>)
 801028c:	f000 fd28 	bl	8010ce0 <LST_is_empty>
 8010290:	4603      	mov	r3, r0
 8010292:	2b00      	cmp	r3, #0
 8010294:	d0b5      	beq.n	8010202 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8010296:	7ffb      	ldrb	r3, [r7, #31]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d0ad      	beq.n	80101f8 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 801029c:	2001      	movs	r0, #1
 801029e:	f000 f85d 	bl	801035c <NotifyCmdStatus>

  return 0;
 80102a2:	2300      	movs	r3, #0
}
 80102a4:	4618      	mov	r0, r3
 80102a6:	3720      	adds	r7, #32
 80102a8:	46bd      	mov	sp, r7
 80102aa:	bd80      	pop	{r7, pc}
 80102ac:	20000560 	.word	0x20000560

080102b0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b086      	sub	sp, #24
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80102b8:	480f      	ldr	r0, [pc, #60]	@ (80102f8 <TlInit+0x48>)
 80102ba:	f000 fd01 	bl	8010cc0 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80102be:	4a0f      	ldr	r2, [pc, #60]	@ (80102fc <TlInit+0x4c>)
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80102c4:	480e      	ldr	r0, [pc, #56]	@ (8010300 <TlInit+0x50>)
 80102c6:	f000 fcfb 	bl	8010cc0 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80102ca:	4b0e      	ldr	r3, [pc, #56]	@ (8010304 <TlInit+0x54>)
 80102cc:	2201      	movs	r2, #1
 80102ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80102d0:	4b0d      	ldr	r3, [pc, #52]	@ (8010308 <TlInit+0x58>)
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d00a      	beq.n	80102ee <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80102dc:	4b0b      	ldr	r3, [pc, #44]	@ (801030c <TlInit+0x5c>)
 80102de:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80102e0:	4b09      	ldr	r3, [pc, #36]	@ (8010308 <TlInit+0x58>)
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	f107 0208 	add.w	r2, r7, #8
 80102e8:	4610      	mov	r0, r2
 80102ea:	4798      	blx	r3
  }

  return;
 80102ec:	bf00      	nop
 80102ee:	bf00      	nop
}
 80102f0:	3718      	adds	r7, #24
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd80      	pop	{r7, pc}
 80102f6:	bf00      	nop
 80102f8:	20000560 	.word	0x20000560
 80102fc:	200001f0 	.word	0x200001f0
 8010300:	200001e8 	.word	0x200001e8
 8010304:	200001f4 	.word	0x200001f4
 8010308:	20000540 	.word	0x20000540
 801030c:	0801039d 	.word	0x0801039d

08010310 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b082      	sub	sp, #8
 8010314:	af00      	add	r7, sp, #0
 8010316:	4603      	mov	r3, r0
 8010318:	603a      	str	r2, [r7, #0]
 801031a:	80fb      	strh	r3, [r7, #6]
 801031c:	460b      	mov	r3, r1
 801031e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8010320:	4b0c      	ldr	r3, [pc, #48]	@ (8010354 <SendCmd+0x44>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	88fa      	ldrh	r2, [r7, #6]
 8010326:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 801032a:	4b0a      	ldr	r3, [pc, #40]	@ (8010354 <SendCmd+0x44>)
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	797a      	ldrb	r2, [r7, #5]
 8010330:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8010332:	4b08      	ldr	r3, [pc, #32]	@ (8010354 <SendCmd+0x44>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	330c      	adds	r3, #12
 8010338:	797a      	ldrb	r2, [r7, #5]
 801033a:	6839      	ldr	r1, [r7, #0]
 801033c:	4618      	mov	r0, r3
 801033e:	f003 fd9c 	bl	8013e7a <memcpy>

  hciContext.io.Send(0,0);
 8010342:	4b05      	ldr	r3, [pc, #20]	@ (8010358 <SendCmd+0x48>)
 8010344:	691b      	ldr	r3, [r3, #16]
 8010346:	2100      	movs	r1, #0
 8010348:	2000      	movs	r0, #0
 801034a:	4798      	blx	r3

  return;
 801034c:	bf00      	nop
}
 801034e:	3708      	adds	r7, #8
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}
 8010354:	200001f0 	.word	0x200001f0
 8010358:	20000540 	.word	0x20000540

0801035c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b082      	sub	sp, #8
 8010360:	af00      	add	r7, sp, #0
 8010362:	4603      	mov	r3, r0
 8010364:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8010366:	79fb      	ldrb	r3, [r7, #7]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d108      	bne.n	801037e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 801036c:	4b0a      	ldr	r3, [pc, #40]	@ (8010398 <NotifyCmdStatus+0x3c>)
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d00d      	beq.n	8010390 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8010374:	4b08      	ldr	r3, [pc, #32]	@ (8010398 <NotifyCmdStatus+0x3c>)
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	2000      	movs	r0, #0
 801037a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 801037c:	e008      	b.n	8010390 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 801037e:	4b06      	ldr	r3, [pc, #24]	@ (8010398 <NotifyCmdStatus+0x3c>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d004      	beq.n	8010390 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8010386:	4b04      	ldr	r3, [pc, #16]	@ (8010398 <NotifyCmdStatus+0x3c>)
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	2001      	movs	r0, #1
 801038c:	4798      	blx	r3
  return;
 801038e:	bf00      	nop
 8010390:	bf00      	nop
}
 8010392:	3708      	adds	r7, #8
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}
 8010398:	20000568 	.word	0x20000568

0801039c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b082      	sub	sp, #8
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	7a5b      	ldrb	r3, [r3, #9]
 80103a8:	2b0f      	cmp	r3, #15
 80103aa:	d003      	beq.n	80103b4 <TlEvtReceived+0x18>
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	7a5b      	ldrb	r3, [r3, #9]
 80103b0:	2b0e      	cmp	r3, #14
 80103b2:	d107      	bne.n	80103c4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80103b4:	6879      	ldr	r1, [r7, #4]
 80103b6:	4809      	ldr	r0, [pc, #36]	@ (80103dc <TlEvtReceived+0x40>)
 80103b8:	f000 fcda 	bl	8010d70 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80103bc:	2000      	movs	r0, #0
 80103be:	f001 ff91 	bl	80122e4 <hci_cmd_resp_release>
 80103c2:	e006      	b.n	80103d2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80103c4:	6879      	ldr	r1, [r7, #4]
 80103c6:	4806      	ldr	r0, [pc, #24]	@ (80103e0 <TlEvtReceived+0x44>)
 80103c8:	f000 fcd2 	bl	8010d70 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80103cc:	4804      	ldr	r0, [pc, #16]	@ (80103e0 <TlEvtReceived+0x44>)
 80103ce:	f001 ff7d 	bl	80122cc <hci_notify_asynch_evt>
  }

  return;
 80103d2:	bf00      	nop
}
 80103d4:	3708      	adds	r7, #8
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}
 80103da:	bf00      	nop
 80103dc:	20000560 	.word	0x20000560
 80103e0:	200001e8 	.word	0x200001e8

080103e4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80103e4:	b480      	push	{r7}
 80103e6:	b083      	sub	sp, #12
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	4a05      	ldr	r2, [pc, #20]	@ (8010404 <hci_register_io_bus+0x20>)
 80103f0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	4a04      	ldr	r2, [pc, #16]	@ (8010408 <hci_register_io_bus+0x24>)
 80103f6:	611a      	str	r2, [r3, #16]

  return;
 80103f8:	bf00      	nop
}
 80103fa:	370c      	adds	r7, #12
 80103fc:	46bd      	mov	sp, r7
 80103fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010402:	4770      	bx	lr
 8010404:	080106f5 	.word	0x080106f5
 8010408:	0801075d 	.word	0x0801075d

0801040c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b082      	sub	sp, #8
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
 8010414:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	685b      	ldr	r3, [r3, #4]
 801041a:	4a08      	ldr	r2, [pc, #32]	@ (801043c <shci_init+0x30>)
 801041c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 801041e:	4a08      	ldr	r2, [pc, #32]	@ (8010440 <shci_init+0x34>)
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8010424:	4806      	ldr	r0, [pc, #24]	@ (8010440 <shci_init+0x34>)
 8010426:	f000 f911 	bl	801064c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801042a:	683b      	ldr	r3, [r7, #0]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	4618      	mov	r0, r3
 8010430:	f000 f894 	bl	801055c <TlInit>

  return;
 8010434:	bf00      	nop
}
 8010436:	3708      	adds	r7, #8
 8010438:	46bd      	mov	sp, r7
 801043a:	bd80      	pop	{r7, pc}
 801043c:	2000058c 	.word	0x2000058c
 8010440:	2000056c 	.word	0x2000056c

08010444 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b084      	sub	sp, #16
 8010448:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801044a:	4822      	ldr	r0, [pc, #136]	@ (80104d4 <shci_user_evt_proc+0x90>)
 801044c:	f000 fc48 	bl	8010ce0 <LST_is_empty>
 8010450:	4603      	mov	r3, r0
 8010452:	2b00      	cmp	r3, #0
 8010454:	d12b      	bne.n	80104ae <shci_user_evt_proc+0x6a>
 8010456:	4b20      	ldr	r3, [pc, #128]	@ (80104d8 <shci_user_evt_proc+0x94>)
 8010458:	781b      	ldrb	r3, [r3, #0]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d027      	beq.n	80104ae <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 801045e:	f107 030c 	add.w	r3, r7, #12
 8010462:	4619      	mov	r1, r3
 8010464:	481b      	ldr	r0, [pc, #108]	@ (80104d4 <shci_user_evt_proc+0x90>)
 8010466:	f000 fcca 	bl	8010dfe <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 801046a:	4b1c      	ldr	r3, [pc, #112]	@ (80104dc <shci_user_evt_proc+0x98>)
 801046c:	69db      	ldr	r3, [r3, #28]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d00c      	beq.n	801048c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8010476:	2301      	movs	r3, #1
 8010478:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 801047a:	4b18      	ldr	r3, [pc, #96]	@ (80104dc <shci_user_evt_proc+0x98>)
 801047c:	69db      	ldr	r3, [r3, #28]
 801047e:	1d3a      	adds	r2, r7, #4
 8010480:	4610      	mov	r0, r2
 8010482:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8010484:	793a      	ldrb	r2, [r7, #4]
 8010486:	4b14      	ldr	r3, [pc, #80]	@ (80104d8 <shci_user_evt_proc+0x94>)
 8010488:	701a      	strb	r2, [r3, #0]
 801048a:	e002      	b.n	8010492 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 801048c:	4b12      	ldr	r3, [pc, #72]	@ (80104d8 <shci_user_evt_proc+0x94>)
 801048e:	2201      	movs	r2, #1
 8010490:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8010492:	4b11      	ldr	r3, [pc, #68]	@ (80104d8 <shci_user_evt_proc+0x94>)
 8010494:	781b      	ldrb	r3, [r3, #0]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d004      	beq.n	80104a4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	4618      	mov	r0, r3
 801049e:	f000 fa6d 	bl	801097c <TL_MM_EvtDone>
 80104a2:	e004      	b.n	80104ae <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	4619      	mov	r1, r3
 80104a8:	480a      	ldr	r0, [pc, #40]	@ (80104d4 <shci_user_evt_proc+0x90>)
 80104aa:	f000 fc3b 	bl	8010d24 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80104ae:	4809      	ldr	r0, [pc, #36]	@ (80104d4 <shci_user_evt_proc+0x90>)
 80104b0:	f000 fc16 	bl	8010ce0 <LST_is_empty>
 80104b4:	4603      	mov	r3, r0
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d107      	bne.n	80104ca <shci_user_evt_proc+0x86>
 80104ba:	4b07      	ldr	r3, [pc, #28]	@ (80104d8 <shci_user_evt_proc+0x94>)
 80104bc:	781b      	ldrb	r3, [r3, #0]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d003      	beq.n	80104ca <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80104c2:	4804      	ldr	r0, [pc, #16]	@ (80104d4 <shci_user_evt_proc+0x90>)
 80104c4:	f7f0 ffd6 	bl	8001474 <shci_notify_asynch_evt>
  }


  return;
 80104c8:	bf00      	nop
 80104ca:	bf00      	nop
}
 80104cc:	3710      	adds	r7, #16
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}
 80104d2:	bf00      	nop
 80104d4:	200001f8 	.word	0x200001f8
 80104d8:	20000208 	.word	0x20000208
 80104dc:	2000056c 	.word	0x2000056c

080104e0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b084      	sub	sp, #16
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	60ba      	str	r2, [r7, #8]
 80104e8:	607b      	str	r3, [r7, #4]
 80104ea:	4603      	mov	r3, r0
 80104ec:	81fb      	strh	r3, [r7, #14]
 80104ee:	460b      	mov	r3, r1
 80104f0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80104f2:	2000      	movs	r0, #0
 80104f4:	f000 f864 	bl	80105c0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80104f8:	4b16      	ldr	r3, [pc, #88]	@ (8010554 <shci_send+0x74>)
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	89fa      	ldrh	r2, [r7, #14]
 80104fe:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8010502:	4b14      	ldr	r3, [pc, #80]	@ (8010554 <shci_send+0x74>)
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	7b7a      	ldrb	r2, [r7, #13]
 8010508:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 801050a:	4b12      	ldr	r3, [pc, #72]	@ (8010554 <shci_send+0x74>)
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	330c      	adds	r3, #12
 8010510:	7b7a      	ldrb	r2, [r7, #13]
 8010512:	68b9      	ldr	r1, [r7, #8]
 8010514:	4618      	mov	r0, r3
 8010516:	f003 fcb0 	bl	8013e7a <memcpy>

  shciContext.io.Send(0,0);
 801051a:	4b0f      	ldr	r3, [pc, #60]	@ (8010558 <shci_send+0x78>)
 801051c:	691b      	ldr	r3, [r3, #16]
 801051e:	2100      	movs	r1, #0
 8010520:	2000      	movs	r0, #0
 8010522:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8010524:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8010528:	f7f0 ffbb 	bl	80014a2 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	f103 0008 	add.w	r0, r3, #8
 8010532:	4b08      	ldr	r3, [pc, #32]	@ (8010554 <shci_send+0x74>)
 8010534:	6819      	ldr	r1, [r3, #0]
 8010536:	4b07      	ldr	r3, [pc, #28]	@ (8010554 <shci_send+0x74>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	789b      	ldrb	r3, [r3, #2]
 801053c:	3303      	adds	r3, #3
 801053e:	461a      	mov	r2, r3
 8010540:	f003 fc9b 	bl	8013e7a <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8010544:	2001      	movs	r0, #1
 8010546:	f000 f83b 	bl	80105c0 <Cmd_SetStatus>

  return;
 801054a:	bf00      	nop
}
 801054c:	3710      	adds	r7, #16
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}
 8010552:	bf00      	nop
 8010554:	20000204 	.word	0x20000204
 8010558:	2000056c 	.word	0x2000056c

0801055c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b086      	sub	sp, #24
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8010564:	4a10      	ldr	r2, [pc, #64]	@ (80105a8 <TlInit+0x4c>)
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 801056a:	4810      	ldr	r0, [pc, #64]	@ (80105ac <TlInit+0x50>)
 801056c:	f000 fba8 	bl	8010cc0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8010570:	2001      	movs	r0, #1
 8010572:	f000 f825 	bl	80105c0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8010576:	4b0e      	ldr	r3, [pc, #56]	@ (80105b0 <TlInit+0x54>)
 8010578:	2201      	movs	r2, #1
 801057a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 801057c:	4b0d      	ldr	r3, [pc, #52]	@ (80105b4 <TlInit+0x58>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d00c      	beq.n	801059e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8010588:	4b0b      	ldr	r3, [pc, #44]	@ (80105b8 <TlInit+0x5c>)
 801058a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 801058c:	4b0b      	ldr	r3, [pc, #44]	@ (80105bc <TlInit+0x60>)
 801058e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8010590:	4b08      	ldr	r3, [pc, #32]	@ (80105b4 <TlInit+0x58>)
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	f107 020c 	add.w	r2, r7, #12
 8010598:	4610      	mov	r0, r2
 801059a:	4798      	blx	r3
  }

  return;
 801059c:	bf00      	nop
 801059e:	bf00      	nop
}
 80105a0:	3718      	adds	r7, #24
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}
 80105a6:	bf00      	nop
 80105a8:	20000204 	.word	0x20000204
 80105ac:	200001f8 	.word	0x200001f8
 80105b0:	20000208 	.word	0x20000208
 80105b4:	2000056c 	.word	0x2000056c
 80105b8:	08010611 	.word	0x08010611
 80105bc:	08010629 	.word	0x08010629

080105c0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b082      	sub	sp, #8
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	4603      	mov	r3, r0
 80105c8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80105ca:	79fb      	ldrb	r3, [r7, #7]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d10b      	bne.n	80105e8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80105d0:	4b0d      	ldr	r3, [pc, #52]	@ (8010608 <Cmd_SetStatus+0x48>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d003      	beq.n	80105e0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80105d8:	4b0b      	ldr	r3, [pc, #44]	@ (8010608 <Cmd_SetStatus+0x48>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	2000      	movs	r0, #0
 80105de:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80105e0:	4b0a      	ldr	r3, [pc, #40]	@ (801060c <Cmd_SetStatus+0x4c>)
 80105e2:	2200      	movs	r2, #0
 80105e4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80105e6:	e00b      	b.n	8010600 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80105e8:	4b08      	ldr	r3, [pc, #32]	@ (801060c <Cmd_SetStatus+0x4c>)
 80105ea:	2201      	movs	r2, #1
 80105ec:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80105ee:	4b06      	ldr	r3, [pc, #24]	@ (8010608 <Cmd_SetStatus+0x48>)
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d004      	beq.n	8010600 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80105f6:	4b04      	ldr	r3, [pc, #16]	@ (8010608 <Cmd_SetStatus+0x48>)
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	2001      	movs	r0, #1
 80105fc:	4798      	blx	r3
  return;
 80105fe:	bf00      	nop
 8010600:	bf00      	nop
}
 8010602:	3708      	adds	r7, #8
 8010604:	46bd      	mov	sp, r7
 8010606:	bd80      	pop	{r7, pc}
 8010608:	2000058c 	.word	0x2000058c
 801060c:	20000200 	.word	0x20000200

08010610 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b082      	sub	sp, #8
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8010618:	2000      	movs	r0, #0
 801061a:	f7f0 ff37 	bl	800148c <shci_cmd_resp_release>

  return;
 801061e:	bf00      	nop
}
 8010620:	3708      	adds	r7, #8
 8010622:	46bd      	mov	sp, r7
 8010624:	bd80      	pop	{r7, pc}
	...

08010628 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b082      	sub	sp, #8
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8010630:	6879      	ldr	r1, [r7, #4]
 8010632:	4805      	ldr	r0, [pc, #20]	@ (8010648 <TlUserEvtReceived+0x20>)
 8010634:	f000 fb9c 	bl	8010d70 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8010638:	4803      	ldr	r0, [pc, #12]	@ (8010648 <TlUserEvtReceived+0x20>)
 801063a:	f7f0 ff1b 	bl	8001474 <shci_notify_asynch_evt>

  return;
 801063e:	bf00      	nop
}
 8010640:	3708      	adds	r7, #8
 8010642:	46bd      	mov	sp, r7
 8010644:	bd80      	pop	{r7, pc}
 8010646:	bf00      	nop
 8010648:	200001f8 	.word	0x200001f8

0801064c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 801064c:	b480      	push	{r7}
 801064e:	b083      	sub	sp, #12
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	4a05      	ldr	r2, [pc, #20]	@ (801066c <shci_register_io_bus+0x20>)
 8010658:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	4a04      	ldr	r2, [pc, #16]	@ (8010670 <shci_register_io_bus+0x24>)
 801065e:	611a      	str	r2, [r3, #16]

  return;
 8010660:	bf00      	nop
}
 8010662:	370c      	adds	r7, #12
 8010664:	46bd      	mov	sp, r7
 8010666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066a:	4770      	bx	lr
 801066c:	08010809 	.word	0x08010809
 8010670:	0801085d 	.word	0x0801085d

08010674 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8010674:	b580      	push	{r7, lr}
 8010676:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8010678:	f002 fac6 	bl	8012c08 <HW_IPCC_Enable>

  return;
 801067c:	bf00      	nop
}
 801067e:	bd80      	pop	{r7, pc}

08010680 <TL_Init>:


void TL_Init( void )
{
 8010680:	b580      	push	{r7, lr}
 8010682:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8010684:	4b10      	ldr	r3, [pc, #64]	@ (80106c8 <TL_Init+0x48>)
 8010686:	4a11      	ldr	r2, [pc, #68]	@ (80106cc <TL_Init+0x4c>)
 8010688:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 801068a:	4b0f      	ldr	r3, [pc, #60]	@ (80106c8 <TL_Init+0x48>)
 801068c:	4a10      	ldr	r2, [pc, #64]	@ (80106d0 <TL_Init+0x50>)
 801068e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8010690:	4b0d      	ldr	r3, [pc, #52]	@ (80106c8 <TL_Init+0x48>)
 8010692:	4a10      	ldr	r2, [pc, #64]	@ (80106d4 <TL_Init+0x54>)
 8010694:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8010696:	4b0c      	ldr	r3, [pc, #48]	@ (80106c8 <TL_Init+0x48>)
 8010698:	4a0f      	ldr	r2, [pc, #60]	@ (80106d8 <TL_Init+0x58>)
 801069a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 801069c:	4b0a      	ldr	r3, [pc, #40]	@ (80106c8 <TL_Init+0x48>)
 801069e:	4a0f      	ldr	r2, [pc, #60]	@ (80106dc <TL_Init+0x5c>)
 80106a0:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80106a2:	4b09      	ldr	r3, [pc, #36]	@ (80106c8 <TL_Init+0x48>)
 80106a4:	4a0e      	ldr	r2, [pc, #56]	@ (80106e0 <TL_Init+0x60>)
 80106a6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80106a8:	4b07      	ldr	r3, [pc, #28]	@ (80106c8 <TL_Init+0x48>)
 80106aa:	4a0e      	ldr	r2, [pc, #56]	@ (80106e4 <TL_Init+0x64>)
 80106ac:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80106ae:	4b06      	ldr	r3, [pc, #24]	@ (80106c8 <TL_Init+0x48>)
 80106b0:	4a0d      	ldr	r2, [pc, #52]	@ (80106e8 <TL_Init+0x68>)
 80106b2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80106b4:	4b04      	ldr	r3, [pc, #16]	@ (80106c8 <TL_Init+0x48>)
 80106b6:	4a0d      	ldr	r2, [pc, #52]	@ (80106ec <TL_Init+0x6c>)
 80106b8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80106ba:	4b03      	ldr	r3, [pc, #12]	@ (80106c8 <TL_Init+0x48>)
 80106bc:	4a0c      	ldr	r2, [pc, #48]	@ (80106f0 <TL_Init+0x70>)
 80106be:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80106c0:	f002 fab6 	bl	8012c30 <HW_IPCC_Init>

  return;
 80106c4:	bf00      	nop
}
 80106c6:	bd80      	pop	{r7, pc}
 80106c8:	20030000 	.word	0x20030000
 80106cc:	20030028 	.word	0x20030028
 80106d0:	20030048 	.word	0x20030048
 80106d4:	20030058 	.word	0x20030058
 80106d8:	20030068 	.word	0x20030068
 80106dc:	20030070 	.word	0x20030070
 80106e0:	20030078 	.word	0x20030078
 80106e4:	20030080 	.word	0x20030080
 80106e8:	2003009c 	.word	0x2003009c
 80106ec:	200300a0 	.word	0x200300a0
 80106f0:	200300ac 	.word	0x200300ac

080106f4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b084      	sub	sp, #16
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8010700:	4811      	ldr	r0, [pc, #68]	@ (8010748 <TL_BLE_Init+0x54>)
 8010702:	f000 fadd 	bl	8010cc0 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8010706:	4b11      	ldr	r3, [pc, #68]	@ (801074c <TL_BLE_Init+0x58>)
 8010708:	685b      	ldr	r3, [r3, #4]
 801070a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	689a      	ldr	r2, [r3, #8]
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	68da      	ldr	r2, [r3, #12]
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 801071c:	68bb      	ldr	r3, [r7, #8]
 801071e:	4a0c      	ldr	r2, [pc, #48]	@ (8010750 <TL_BLE_Init+0x5c>)
 8010720:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8010722:	68bb      	ldr	r3, [r7, #8]
 8010724:	4a08      	ldr	r2, [pc, #32]	@ (8010748 <TL_BLE_Init+0x54>)
 8010726:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8010728:	f002 fa98 	bl	8012c5c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	4a08      	ldr	r2, [pc, #32]	@ (8010754 <TL_BLE_Init+0x60>)
 8010732:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	685b      	ldr	r3, [r3, #4]
 8010738:	4a07      	ldr	r2, [pc, #28]	@ (8010758 <TL_BLE_Init+0x64>)
 801073a:	6013      	str	r3, [r2, #0]

  return 0;
 801073c:	2300      	movs	r3, #0
}
 801073e:	4618      	mov	r0, r3
 8010740:	3710      	adds	r7, #16
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}
 8010746:	bf00      	nop
 8010748:	200300c8 	.word	0x200300c8
 801074c:	20030000 	.word	0x20030000
 8010750:	20030a58 	.word	0x20030a58
 8010754:	20000598 	.word	0x20000598
 8010758:	2000059c 	.word	0x2000059c

0801075c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b082      	sub	sp, #8
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
 8010764:	460b      	mov	r3, r1
 8010766:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8010768:	4b09      	ldr	r3, [pc, #36]	@ (8010790 <TL_BLE_SendCmd+0x34>)
 801076a:	685b      	ldr	r3, [r3, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	2201      	movs	r2, #1
 8010770:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8010772:	4b07      	ldr	r3, [pc, #28]	@ (8010790 <TL_BLE_SendCmd+0x34>)
 8010774:	685b      	ldr	r3, [r3, #4]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	4619      	mov	r1, r3
 801077a:	2001      	movs	r0, #1
 801077c:	f000 f96c 	bl	8010a58 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8010780:	f002 fa76 	bl	8012c70 <HW_IPCC_BLE_SendCmd>

  return 0;
 8010784:	2300      	movs	r3, #0
}
 8010786:	4618      	mov	r0, r3
 8010788:	3708      	adds	r7, #8
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}
 801078e:	bf00      	nop
 8010790:	20030000 	.word	0x20030000

08010794 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b082      	sub	sp, #8
 8010798:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 801079a:	e01c      	b.n	80107d6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 801079c:	1d3b      	adds	r3, r7, #4
 801079e:	4619      	mov	r1, r3
 80107a0:	4812      	ldr	r0, [pc, #72]	@ (80107ec <HW_IPCC_BLE_RxEvtNot+0x58>)
 80107a2:	f000 fb2c 	bl	8010dfe <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	7a5b      	ldrb	r3, [r3, #9]
 80107aa:	2b0f      	cmp	r3, #15
 80107ac:	d003      	beq.n	80107b6 <HW_IPCC_BLE_RxEvtNot+0x22>
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	7a5b      	ldrb	r3, [r3, #9]
 80107b2:	2b0e      	cmp	r3, #14
 80107b4:	d105      	bne.n	80107c2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	4619      	mov	r1, r3
 80107ba:	2002      	movs	r0, #2
 80107bc:	f000 f94c 	bl	8010a58 <OutputDbgTrace>
 80107c0:	e004      	b.n	80107cc <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	4619      	mov	r1, r3
 80107c6:	2003      	movs	r0, #3
 80107c8:	f000 f946 	bl	8010a58 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80107cc:	4b08      	ldr	r3, [pc, #32]	@ (80107f0 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	687a      	ldr	r2, [r7, #4]
 80107d2:	4610      	mov	r0, r2
 80107d4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80107d6:	4805      	ldr	r0, [pc, #20]	@ (80107ec <HW_IPCC_BLE_RxEvtNot+0x58>)
 80107d8:	f000 fa82 	bl	8010ce0 <LST_is_empty>
 80107dc:	4603      	mov	r3, r0
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d0dc      	beq.n	801079c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80107e2:	bf00      	nop
}
 80107e4:	3708      	adds	r7, #8
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bd80      	pop	{r7, pc}
 80107ea:	bf00      	nop
 80107ec:	200300c8 	.word	0x200300c8
 80107f0:	20000598 	.word	0x20000598

080107f4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80107f8:	4b02      	ldr	r3, [pc, #8]	@ (8010804 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	4798      	blx	r3

  return;
 80107fe:	bf00      	nop
}
 8010800:	bd80      	pop	{r7, pc}
 8010802:	bf00      	nop
 8010804:	2000059c 	.word	0x2000059c

08010808 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b084      	sub	sp, #16
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8010814:	480d      	ldr	r0, [pc, #52]	@ (801084c <TL_SYS_Init+0x44>)
 8010816:	f000 fa53 	bl	8010cc0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 801081a:	4b0d      	ldr	r3, [pc, #52]	@ (8010850 <TL_SYS_Init+0x48>)
 801081c:	68db      	ldr	r3, [r3, #12]
 801081e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	689a      	ldr	r2, [r3, #8]
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	4a08      	ldr	r2, [pc, #32]	@ (801084c <TL_SYS_Init+0x44>)
 801082c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 801082e:	f002 fa41 	bl	8012cb4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	4a07      	ldr	r2, [pc, #28]	@ (8010854 <TL_SYS_Init+0x4c>)
 8010838:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	685b      	ldr	r3, [r3, #4]
 801083e:	4a06      	ldr	r2, [pc, #24]	@ (8010858 <TL_SYS_Init+0x50>)
 8010840:	6013      	str	r3, [r2, #0]

  return 0;
 8010842:	2300      	movs	r3, #0
}
 8010844:	4618      	mov	r0, r3
 8010846:	3710      	adds	r7, #16
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}
 801084c:	200300d0 	.word	0x200300d0
 8010850:	20030000 	.word	0x20030000
 8010854:	200005a0 	.word	0x200005a0
 8010858:	200005a4 	.word	0x200005a4

0801085c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b082      	sub	sp, #8
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
 8010864:	460b      	mov	r3, r1
 8010866:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8010868:	4b09      	ldr	r3, [pc, #36]	@ (8010890 <TL_SYS_SendCmd+0x34>)
 801086a:	68db      	ldr	r3, [r3, #12]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	2210      	movs	r2, #16
 8010870:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8010872:	4b07      	ldr	r3, [pc, #28]	@ (8010890 <TL_SYS_SendCmd+0x34>)
 8010874:	68db      	ldr	r3, [r3, #12]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	4619      	mov	r1, r3
 801087a:	2004      	movs	r0, #4
 801087c:	f000 f8ec 	bl	8010a58 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8010880:	f002 fa22 	bl	8012cc8 <HW_IPCC_SYS_SendCmd>

  return 0;
 8010884:	2300      	movs	r3, #0
}
 8010886:	4618      	mov	r0, r3
 8010888:	3708      	adds	r7, #8
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}
 801088e:	bf00      	nop
 8010890:	20030000 	.word	0x20030000

08010894 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8010898:	4b07      	ldr	r3, [pc, #28]	@ (80108b8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 801089a:	68db      	ldr	r3, [r3, #12]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	4619      	mov	r1, r3
 80108a0:	2005      	movs	r0, #5
 80108a2:	f000 f8d9 	bl	8010a58 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80108a6:	4b05      	ldr	r3, [pc, #20]	@ (80108bc <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	4a03      	ldr	r2, [pc, #12]	@ (80108b8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80108ac:	68d2      	ldr	r2, [r2, #12]
 80108ae:	6812      	ldr	r2, [r2, #0]
 80108b0:	4610      	mov	r0, r2
 80108b2:	4798      	blx	r3

  return;
 80108b4:	bf00      	nop
}
 80108b6:	bd80      	pop	{r7, pc}
 80108b8:	20030000 	.word	0x20030000
 80108bc:	200005a0 	.word	0x200005a0

080108c0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b082      	sub	sp, #8
 80108c4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80108c6:	e00e      	b.n	80108e6 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80108c8:	1d3b      	adds	r3, r7, #4
 80108ca:	4619      	mov	r1, r3
 80108cc:	480b      	ldr	r0, [pc, #44]	@ (80108fc <HW_IPCC_SYS_EvtNot+0x3c>)
 80108ce:	f000 fa96 	bl	8010dfe <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	4619      	mov	r1, r3
 80108d6:	2006      	movs	r0, #6
 80108d8:	f000 f8be 	bl	8010a58 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80108dc:	4b08      	ldr	r3, [pc, #32]	@ (8010900 <HW_IPCC_SYS_EvtNot+0x40>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	687a      	ldr	r2, [r7, #4]
 80108e2:	4610      	mov	r0, r2
 80108e4:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80108e6:	4805      	ldr	r0, [pc, #20]	@ (80108fc <HW_IPCC_SYS_EvtNot+0x3c>)
 80108e8:	f000 f9fa 	bl	8010ce0 <LST_is_empty>
 80108ec:	4603      	mov	r3, r0
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d0ea      	beq.n	80108c8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80108f2:	bf00      	nop
}
 80108f4:	3708      	adds	r7, #8
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd80      	pop	{r7, pc}
 80108fa:	bf00      	nop
 80108fc:	200300d0 	.word	0x200300d0
 8010900:	200005a4 	.word	0x200005a4

08010904 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b082      	sub	sp, #8
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 801090c:	4817      	ldr	r0, [pc, #92]	@ (801096c <TL_MM_Init+0x68>)
 801090e:	f000 f9d7 	bl	8010cc0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8010912:	4817      	ldr	r0, [pc, #92]	@ (8010970 <TL_MM_Init+0x6c>)
 8010914:	f000 f9d4 	bl	8010cc0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8010918:	4b16      	ldr	r3, [pc, #88]	@ (8010974 <TL_MM_Init+0x70>)
 801091a:	691b      	ldr	r3, [r3, #16]
 801091c:	4a16      	ldr	r2, [pc, #88]	@ (8010978 <TL_MM_Init+0x74>)
 801091e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8010920:	4b15      	ldr	r3, [pc, #84]	@ (8010978 <TL_MM_Init+0x74>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	687a      	ldr	r2, [r7, #4]
 8010926:	6892      	ldr	r2, [r2, #8]
 8010928:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 801092a:	4b13      	ldr	r3, [pc, #76]	@ (8010978 <TL_MM_Init+0x74>)
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	687a      	ldr	r2, [r7, #4]
 8010930:	68d2      	ldr	r2, [r2, #12]
 8010932:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8010934:	4b10      	ldr	r3, [pc, #64]	@ (8010978 <TL_MM_Init+0x74>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	4a0c      	ldr	r2, [pc, #48]	@ (801096c <TL_MM_Init+0x68>)
 801093a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 801093c:	4b0e      	ldr	r3, [pc, #56]	@ (8010978 <TL_MM_Init+0x74>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	687a      	ldr	r2, [r7, #4]
 8010942:	6812      	ldr	r2, [r2, #0]
 8010944:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8010946:	4b0c      	ldr	r3, [pc, #48]	@ (8010978 <TL_MM_Init+0x74>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	687a      	ldr	r2, [r7, #4]
 801094c:	6852      	ldr	r2, [r2, #4]
 801094e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8010950:	4b09      	ldr	r3, [pc, #36]	@ (8010978 <TL_MM_Init+0x74>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	687a      	ldr	r2, [r7, #4]
 8010956:	6912      	ldr	r2, [r2, #16]
 8010958:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 801095a:	4b07      	ldr	r3, [pc, #28]	@ (8010978 <TL_MM_Init+0x74>)
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	687a      	ldr	r2, [r7, #4]
 8010960:	6952      	ldr	r2, [r2, #20]
 8010962:	619a      	str	r2, [r3, #24]

  return;
 8010964:	bf00      	nop
}
 8010966:	3708      	adds	r7, #8
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}
 801096c:	200300b8 	.word	0x200300b8
 8010970:	20000590 	.word	0x20000590
 8010974:	20030000 	.word	0x20030000
 8010978:	200005a8 	.word	0x200005a8

0801097c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b082      	sub	sp, #8
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8010984:	6879      	ldr	r1, [r7, #4]
 8010986:	4807      	ldr	r0, [pc, #28]	@ (80109a4 <TL_MM_EvtDone+0x28>)
 8010988:	f000 f9f2 	bl	8010d70 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 801098c:	6879      	ldr	r1, [r7, #4]
 801098e:	2000      	movs	r0, #0
 8010990:	f000 f862 	bl	8010a58 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8010994:	4804      	ldr	r0, [pc, #16]	@ (80109a8 <TL_MM_EvtDone+0x2c>)
 8010996:	f002 f9bd 	bl	8012d14 <HW_IPCC_MM_SendFreeBuf>

  return;
 801099a:	bf00      	nop
}
 801099c:	3708      	adds	r7, #8
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}
 80109a2:	bf00      	nop
 80109a4:	20000590 	.word	0x20000590
 80109a8:	080109ad 	.word	0x080109ad

080109ac <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b082      	sub	sp, #8
 80109b0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80109b2:	e00c      	b.n	80109ce <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80109b4:	1d3b      	adds	r3, r7, #4
 80109b6:	4619      	mov	r1, r3
 80109b8:	480a      	ldr	r0, [pc, #40]	@ (80109e4 <SendFreeBuf+0x38>)
 80109ba:	f000 fa20 	bl	8010dfe <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80109be:	4b0a      	ldr	r3, [pc, #40]	@ (80109e8 <SendFreeBuf+0x3c>)
 80109c0:	691b      	ldr	r3, [r3, #16]
 80109c2:	691b      	ldr	r3, [r3, #16]
 80109c4:	687a      	ldr	r2, [r7, #4]
 80109c6:	4611      	mov	r1, r2
 80109c8:	4618      	mov	r0, r3
 80109ca:	f000 f9d1 	bl	8010d70 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80109ce:	4805      	ldr	r0, [pc, #20]	@ (80109e4 <SendFreeBuf+0x38>)
 80109d0:	f000 f986 	bl	8010ce0 <LST_is_empty>
 80109d4:	4603      	mov	r3, r0
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d0ec      	beq.n	80109b4 <SendFreeBuf+0x8>
  }

  return;
 80109da:	bf00      	nop
}
 80109dc:	3708      	adds	r7, #8
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}
 80109e2:	bf00      	nop
 80109e4:	20000590 	.word	0x20000590
 80109e8:	20030000 	.word	0x20030000

080109ec <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80109f0:	4805      	ldr	r0, [pc, #20]	@ (8010a08 <TL_TRACES_Init+0x1c>)
 80109f2:	f000 f965 	bl	8010cc0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80109f6:	4b05      	ldr	r3, [pc, #20]	@ (8010a0c <TL_TRACES_Init+0x20>)
 80109f8:	695b      	ldr	r3, [r3, #20]
 80109fa:	4a03      	ldr	r2, [pc, #12]	@ (8010a08 <TL_TRACES_Init+0x1c>)
 80109fc:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80109fe:	f002 f9bf 	bl	8012d80 <HW_IPCC_TRACES_Init>

  return;
 8010a02:	bf00      	nop
}
 8010a04:	bd80      	pop	{r7, pc}
 8010a06:	bf00      	nop
 8010a08:	200300c0 	.word	0x200300c0
 8010a0c:	20030000 	.word	0x20030000

08010a10 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b082      	sub	sp, #8
 8010a14:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8010a16:	e008      	b.n	8010a2a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8010a18:	1d3b      	adds	r3, r7, #4
 8010a1a:	4619      	mov	r1, r3
 8010a1c:	4808      	ldr	r0, [pc, #32]	@ (8010a40 <HW_IPCC_TRACES_EvtNot+0x30>)
 8010a1e:	f000 f9ee 	bl	8010dfe <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	4618      	mov	r0, r3
 8010a26:	f000 f80d 	bl	8010a44 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8010a2a:	4805      	ldr	r0, [pc, #20]	@ (8010a40 <HW_IPCC_TRACES_EvtNot+0x30>)
 8010a2c:	f000 f958 	bl	8010ce0 <LST_is_empty>
 8010a30:	4603      	mov	r3, r0
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d0f0      	beq.n	8010a18 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8010a36:	bf00      	nop
}
 8010a38:	3708      	adds	r7, #8
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bd80      	pop	{r7, pc}
 8010a3e:	bf00      	nop
 8010a40:	200300c0 	.word	0x200300c0

08010a44 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8010a44:	b480      	push	{r7}
 8010a46:	b083      	sub	sp, #12
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8010a4c:	bf00      	nop
 8010a4e:	370c      	adds	r7, #12
 8010a50:	46bd      	mov	sp, r7
 8010a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a56:	4770      	bx	lr

08010a58 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8010a58:	b480      	push	{r7}
 8010a5a:	b085      	sub	sp, #20
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	4603      	mov	r3, r0
 8010a60:	6039      	str	r1, [r7, #0]
 8010a62:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8010a64:	79fb      	ldrb	r3, [r7, #7]
 8010a66:	2b06      	cmp	r3, #6
 8010a68:	d845      	bhi.n	8010af6 <OutputDbgTrace+0x9e>
 8010a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8010a70 <OutputDbgTrace+0x18>)
 8010a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a70:	08010a8d 	.word	0x08010a8d
 8010a74:	08010ab1 	.word	0x08010ab1
 8010a78:	08010ab7 	.word	0x08010ab7
 8010a7c:	08010acb 	.word	0x08010acb
 8010a80:	08010ad7 	.word	0x08010ad7
 8010a84:	08010add 	.word	0x08010add
 8010a88:	08010aeb 	.word	0x08010aeb
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	7a5b      	ldrb	r3, [r3, #9]
 8010a94:	2bff      	cmp	r3, #255	@ 0xff
 8010a96:	d005      	beq.n	8010aa4 <OutputDbgTrace+0x4c>
 8010a98:	2bff      	cmp	r3, #255	@ 0xff
 8010a9a:	dc05      	bgt.n	8010aa8 <OutputDbgTrace+0x50>
 8010a9c:	2b0e      	cmp	r3, #14
 8010a9e:	d005      	beq.n	8010aac <OutputDbgTrace+0x54>
 8010aa0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8010aa2:	e001      	b.n	8010aa8 <OutputDbgTrace+0x50>
          break;
 8010aa4:	bf00      	nop
 8010aa6:	e027      	b.n	8010af8 <OutputDbgTrace+0xa0>
          break;
 8010aa8:	bf00      	nop
 8010aaa:	e025      	b.n	8010af8 <OutputDbgTrace+0xa0>
          break;
 8010aac:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8010aae:	e023      	b.n	8010af8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8010ab4:	e020      	b.n	8010af8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	7a5b      	ldrb	r3, [r3, #9]
 8010abe:	2b0e      	cmp	r3, #14
 8010ac0:	d001      	beq.n	8010ac6 <OutputDbgTrace+0x6e>
 8010ac2:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8010ac4:	e000      	b.n	8010ac8 <OutputDbgTrace+0x70>
          break;
 8010ac6:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010ac8:	e016      	b.n	8010af8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	7a5b      	ldrb	r3, [r3, #9]
 8010ad2:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010ad4:	e010      	b.n	8010af8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8010ada:	e00d      	b.n	8010af8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	7a5b      	ldrb	r3, [r3, #9]
 8010ae4:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8010ae6:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010ae8:	e006      	b.n	8010af8 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	7a5b      	ldrb	r3, [r3, #9]
 8010af2:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010af4:	e000      	b.n	8010af8 <OutputDbgTrace+0xa0>

    default:
      break;
 8010af6:	bf00      	nop
  }

  return;
 8010af8:	bf00      	nop
}
 8010afa:	3714      	adds	r7, #20
 8010afc:	46bd      	mov	sp, r7
 8010afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b02:	4770      	bx	lr

08010b04 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b086      	sub	sp, #24
 8010b08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b0a:	f3ef 8310 	mrs	r3, PRIMASK
 8010b0e:	60fb      	str	r3, [r7, #12]
  return(result);
 8010b10:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8010b12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010b14:	b672      	cpsid	i
}
 8010b16:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8010b18:	1cbb      	adds	r3, r7, #2
 8010b1a:	4619      	mov	r1, r3
 8010b1c:	4812      	ldr	r0, [pc, #72]	@ (8010b68 <DbgTrace_TxCpltCallback+0x64>)
 8010b1e:	f000 fbe5 	bl	80112ec <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8010b22:	1cbb      	adds	r3, r7, #2
 8010b24:	4619      	mov	r1, r3
 8010b26:	4810      	ldr	r0, [pc, #64]	@ (8010b68 <DbgTrace_TxCpltCallback+0x64>)
 8010b28:	f000 fccf 	bl	80114ca <CircularQueue_Sense>
 8010b2c:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d00c      	beq.n	8010b4e <DbgTrace_TxCpltCallback+0x4a>
 8010b34:	697b      	ldr	r3, [r7, #20]
 8010b36:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010b38:	68bb      	ldr	r3, [r7, #8]
 8010b3a:	f383 8810 	msr	PRIMASK, r3
}
 8010b3e:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8010b40:	887b      	ldrh	r3, [r7, #2]
 8010b42:	4a0a      	ldr	r2, [pc, #40]	@ (8010b6c <DbgTrace_TxCpltCallback+0x68>)
 8010b44:	4619      	mov	r1, r3
 8010b46:	6938      	ldr	r0, [r7, #16]
 8010b48:	f7f0 f8f7 	bl	8000d3a <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8010b4c:	e008      	b.n	8010b60 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8010b4e:	4b08      	ldr	r3, [pc, #32]	@ (8010b70 <DbgTrace_TxCpltCallback+0x6c>)
 8010b50:	2201      	movs	r2, #1
 8010b52:	701a      	strb	r2, [r3, #0]
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f383 8810 	msr	PRIMASK, r3
}
 8010b5e:	bf00      	nop
}
 8010b60:	bf00      	nop
 8010b62:	3718      	adds	r7, #24
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bd80      	pop	{r7, pc}
 8010b68:	200005ac 	.word	0x200005ac
 8010b6c:	08010b05 	.word	0x08010b05
 8010b70:	200000e0 	.word	0x200000e0

08010b74 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b082      	sub	sp, #8
 8010b78:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8010b7a:	f7f0 f8d8 	bl	8000d2e <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8010b7e:	2302      	movs	r3, #2
 8010b80:	9300      	str	r3, [sp, #0]
 8010b82:	2300      	movs	r3, #0
 8010b84:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8010b88:	4903      	ldr	r1, [pc, #12]	@ (8010b98 <DbgTraceInit+0x24>)
 8010b8a:	4804      	ldr	r0, [pc, #16]	@ (8010b9c <DbgTraceInit+0x28>)
 8010b8c:	f000 f956 	bl	8010e3c <CircularQueue_Init>
#endif 
#endif
  return;
 8010b90:	bf00      	nop
}
 8010b92:	46bd      	mov	sp, r7
 8010b94:	bd80      	pop	{r7, pc}
 8010b96:	bf00      	nop
 8010b98:	200005cc 	.word	0x200005cc
 8010b9c:	200005ac 	.word	0x200005ac

08010ba0 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b084      	sub	sp, #16
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	60f8      	str	r0, [r7, #12]
 8010ba8:	60b9      	str	r1, [r7, #8]
 8010baa:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8010bac:	687a      	ldr	r2, [r7, #4]
 8010bae:	68b9      	ldr	r1, [r7, #8]
 8010bb0:	68f8      	ldr	r0, [r7, #12]
 8010bb2:	f000 f805 	bl	8010bc0 <DbgTraceWrite>
 8010bb6:	4603      	mov	r3, r0
}
 8010bb8:	4618      	mov	r0, r3
 8010bba:	3710      	adds	r7, #16
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	bd80      	pop	{r7, pc}

08010bc0 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b08a      	sub	sp, #40	@ 0x28
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	60f8      	str	r0, [r7, #12]
 8010bc8:	60b9      	str	r1, [r7, #8]
 8010bca:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8010bcc:	2300      	movs	r3, #0
 8010bce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010bd0:	f3ef 8310 	mrs	r3, PRIMASK
 8010bd4:	61bb      	str	r3, [r7, #24]
  return(result);
 8010bd6:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8010bd8:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010be0:	d102      	bne.n	8010be8 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8010be2:	2300      	movs	r3, #0
 8010be4:	627b      	str	r3, [r7, #36]	@ 0x24
 8010be6:	e037      	b.n	8010c58 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	2b01      	cmp	r3, #1
 8010bec:	d006      	beq.n	8010bfc <DbgTraceWrite+0x3c>
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	2b02      	cmp	r3, #2
 8010bf2:	d003      	beq.n	8010bfc <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8010bf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8010bfa:	e02d      	b.n	8010c58 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d02a      	beq.n	8010c58 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8010c06:	b672      	cpsid	i
}
 8010c08:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	b29a      	uxth	r2, r3
 8010c0e:	2301      	movs	r3, #1
 8010c10:	68b9      	ldr	r1, [r7, #8]
 8010c12:	4814      	ldr	r0, [pc, #80]	@ (8010c64 <DbgTraceWrite+0xa4>)
 8010c14:	f000 f944 	bl	8010ea0 <CircularQueue_Add>
 8010c18:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8010c1a:	69fb      	ldr	r3, [r7, #28]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d015      	beq.n	8010c4c <DbgTraceWrite+0x8c>
 8010c20:	4b11      	ldr	r3, [pc, #68]	@ (8010c68 <DbgTraceWrite+0xa8>)
 8010c22:	781b      	ldrb	r3, [r3, #0]
 8010c24:	b2db      	uxtb	r3, r3
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d010      	beq.n	8010c4c <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8010c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8010c68 <DbgTraceWrite+0xa8>)
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	701a      	strb	r2, [r3, #0]
 8010c30:	6a3b      	ldr	r3, [r7, #32]
 8010c32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	f383 8810 	msr	PRIMASK, r3
}
 8010c3a:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	b29b      	uxth	r3, r3
 8010c40:	4a0a      	ldr	r2, [pc, #40]	@ (8010c6c <DbgTraceWrite+0xac>)
 8010c42:	4619      	mov	r1, r3
 8010c44:	69f8      	ldr	r0, [r7, #28]
 8010c46:	f7f0 f878 	bl	8000d3a <DbgOutputTraces>
 8010c4a:	e005      	b.n	8010c58 <DbgTraceWrite+0x98>
 8010c4c:	6a3b      	ldr	r3, [r7, #32]
 8010c4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010c50:	693b      	ldr	r3, [r7, #16]
 8010c52:	f383 8810 	msr	PRIMASK, r3
}
 8010c56:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8010c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3728      	adds	r7, #40	@ 0x28
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}
 8010c62:	bf00      	nop
 8010c64:	200005ac 	.word	0x200005ac
 8010c68:	200000e0 	.word	0x200000e0
 8010c6c:	08010b05 	.word	0x08010b05

08010c70 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8010c70:	b480      	push	{r7}
 8010c72:	b085      	sub	sp, #20
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	4603      	mov	r3, r0
 8010c78:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8010c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8010cb8 <OTP_Read+0x48>)
 8010c7c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8010c7e:	e002      	b.n	8010c86 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	3b08      	subs	r3, #8
 8010c84:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	3307      	adds	r3, #7
 8010c8a:	781b      	ldrb	r3, [r3, #0]
 8010c8c:	79fa      	ldrb	r2, [r7, #7]
 8010c8e:	429a      	cmp	r2, r3
 8010c90:	d003      	beq.n	8010c9a <OTP_Read+0x2a>
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	4a09      	ldr	r2, [pc, #36]	@ (8010cbc <OTP_Read+0x4c>)
 8010c96:	4293      	cmp	r3, r2
 8010c98:	d1f2      	bne.n	8010c80 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	3307      	adds	r3, #7
 8010c9e:	781b      	ldrb	r3, [r3, #0]
 8010ca0:	79fa      	ldrb	r2, [r7, #7]
 8010ca2:	429a      	cmp	r2, r3
 8010ca4:	d001      	beq.n	8010caa <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8010caa:	68fb      	ldr	r3, [r7, #12]
}
 8010cac:	4618      	mov	r0, r3
 8010cae:	3714      	adds	r7, #20
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb6:	4770      	bx	lr
 8010cb8:	1fff73f8 	.word	0x1fff73f8
 8010cbc:	1fff7000 	.word	0x1fff7000

08010cc0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8010cc0:	b480      	push	{r7}
 8010cc2:	b083      	sub	sp, #12
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	687a      	ldr	r2, [r7, #4]
 8010ccc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	687a      	ldr	r2, [r7, #4]
 8010cd2:	605a      	str	r2, [r3, #4]
}
 8010cd4:	bf00      	nop
 8010cd6:	370c      	adds	r7, #12
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cde:	4770      	bx	lr

08010ce0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8010ce0:	b480      	push	{r7}
 8010ce2:	b087      	sub	sp, #28
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ce8:	f3ef 8310 	mrs	r3, PRIMASK
 8010cec:	60fb      	str	r3, [r7, #12]
  return(result);
 8010cee:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010cf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8010cf2:	b672      	cpsid	i
}
 8010cf4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	687a      	ldr	r2, [r7, #4]
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	d102      	bne.n	8010d06 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8010d00:	2301      	movs	r3, #1
 8010d02:	75fb      	strb	r3, [r7, #23]
 8010d04:	e001      	b.n	8010d0a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8010d06:	2300      	movs	r3, #0
 8010d08:	75fb      	strb	r3, [r7, #23]
 8010d0a:	693b      	ldr	r3, [r7, #16]
 8010d0c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	f383 8810 	msr	PRIMASK, r3
}
 8010d14:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8010d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d18:	4618      	mov	r0, r3
 8010d1a:	371c      	adds	r7, #28
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d22:	4770      	bx	lr

08010d24 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8010d24:	b480      	push	{r7}
 8010d26:	b087      	sub	sp, #28
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
 8010d2c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8010d32:	60fb      	str	r3, [r7, #12]
  return(result);
 8010d34:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010d36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010d38:	b672      	cpsid	i
}
 8010d3a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681a      	ldr	r2, [r3, #0]
 8010d40:	683b      	ldr	r3, [r7, #0]
 8010d42:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	687a      	ldr	r2, [r7, #4]
 8010d48:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	683a      	ldr	r2, [r7, #0]
 8010d4e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	683a      	ldr	r2, [r7, #0]
 8010d56:	605a      	str	r2, [r3, #4]
 8010d58:	697b      	ldr	r3, [r7, #20]
 8010d5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010d5c:	693b      	ldr	r3, [r7, #16]
 8010d5e:	f383 8810 	msr	PRIMASK, r3
}
 8010d62:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010d64:	bf00      	nop
 8010d66:	371c      	adds	r7, #28
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6e:	4770      	bx	lr

08010d70 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8010d70:	b480      	push	{r7}
 8010d72:	b087      	sub	sp, #28
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
 8010d78:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8010d7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8010d80:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010d82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010d84:	b672      	cpsid	i
}
 8010d86:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8010d88:	683b      	ldr	r3, [r7, #0]
 8010d8a:	687a      	ldr	r2, [r7, #4]
 8010d8c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	685a      	ldr	r2, [r3, #4]
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	683a      	ldr	r2, [r7, #0]
 8010d9a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	685b      	ldr	r3, [r3, #4]
 8010da0:	683a      	ldr	r2, [r7, #0]
 8010da2:	601a      	str	r2, [r3, #0]
 8010da4:	697b      	ldr	r3, [r7, #20]
 8010da6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010da8:	693b      	ldr	r3, [r7, #16]
 8010daa:	f383 8810 	msr	PRIMASK, r3
}
 8010dae:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010db0:	bf00      	nop
 8010db2:	371c      	adds	r7, #28
 8010db4:	46bd      	mov	sp, r7
 8010db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dba:	4770      	bx	lr

08010dbc <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8010dbc:	b480      	push	{r7}
 8010dbe:	b087      	sub	sp, #28
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010dc4:	f3ef 8310 	mrs	r3, PRIMASK
 8010dc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8010dca:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010dcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010dce:	b672      	cpsid	i
}
 8010dd0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	685b      	ldr	r3, [r3, #4]
 8010dd6:	687a      	ldr	r2, [r7, #4]
 8010dd8:	6812      	ldr	r2, [r2, #0]
 8010dda:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	687a      	ldr	r2, [r7, #4]
 8010de2:	6852      	ldr	r2, [r2, #4]
 8010de4:	605a      	str	r2, [r3, #4]
 8010de6:	697b      	ldr	r3, [r7, #20]
 8010de8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010dea:	693b      	ldr	r3, [r7, #16]
 8010dec:	f383 8810 	msr	PRIMASK, r3
}
 8010df0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010df2:	bf00      	nop
 8010df4:	371c      	adds	r7, #28
 8010df6:	46bd      	mov	sp, r7
 8010df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfc:	4770      	bx	lr

08010dfe <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8010dfe:	b580      	push	{r7, lr}
 8010e00:	b086      	sub	sp, #24
 8010e02:	af00      	add	r7, sp, #0
 8010e04:	6078      	str	r0, [r7, #4]
 8010e06:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e08:	f3ef 8310 	mrs	r3, PRIMASK
 8010e0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8010e0e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010e10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010e12:	b672      	cpsid	i
}
 8010e14:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681a      	ldr	r2, [r3, #0]
 8010e1a:	683b      	ldr	r3, [r7, #0]
 8010e1c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	4618      	mov	r0, r3
 8010e24:	f7ff ffca 	bl	8010dbc <LST_remove_node>
 8010e28:	697b      	ldr	r3, [r7, #20]
 8010e2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010e2c:	693b      	ldr	r3, [r7, #16]
 8010e2e:	f383 8810 	msr	PRIMASK, r3
}
 8010e32:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010e34:	bf00      	nop
 8010e36:	3718      	adds	r7, #24
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}

08010e3c <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8010e3c:	b480      	push	{r7}
 8010e3e:	b085      	sub	sp, #20
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	60f8      	str	r0, [r7, #12]
 8010e44:	60b9      	str	r1, [r7, #8]
 8010e46:	607a      	str	r2, [r7, #4]
 8010e48:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	68ba      	ldr	r2, [r7, #8]
 8010e4e:	601a      	str	r2, [r3, #0]
  q->first = 0;
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	2200      	movs	r2, #0
 8010e54:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	2200      	movs	r2, #0
 8010e5a:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	2200      	movs	r2, #0
 8010e60:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	2200      	movs	r2, #0
 8010e66:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	687a      	ldr	r2, [r7, #4]
 8010e6c:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	887a      	ldrh	r2, [r7, #2]
 8010e72:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	7e3a      	ldrb	r2, [r7, #24]
 8010e78:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 8010e7a:	7e3b      	ldrb	r3, [r7, #24]
 8010e7c:	f003 0302 	and.w	r3, r3, #2
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d006      	beq.n	8010e92 <CircularQueue_Init+0x56>
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	891b      	ldrh	r3, [r3, #8]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d002      	beq.n	8010e92 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 8010e8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010e90:	e000      	b.n	8010e94 <CircularQueue_Init+0x58>
  }
  return 0;
 8010e92:	2300      	movs	r3, #0
}
 8010e94:	4618      	mov	r0, r3
 8010e96:	3714      	adds	r7, #20
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9e:	4770      	bx	lr

08010ea0 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b08e      	sub	sp, #56	@ 0x38
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	60f8      	str	r0, [r7, #12]
 8010ea8:	60b9      	str	r1, [r7, #8]
 8010eaa:	603b      	str	r3, [r7, #0]
 8010eac:	4613      	mov	r3, r2
 8010eae:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 8010eb8:	2300      	movs	r3, #0
 8010eba:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8010ec8:	2300      	movs	r3, #0
 8010eca:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	891b      	ldrh	r3, [r3, #8]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d101      	bne.n	8010ed8 <CircularQueue_Add+0x38>
 8010ed4:	2302      	movs	r3, #2
 8010ed6:	e000      	b.n	8010eda <CircularQueue_Add+0x3a>
 8010ed8:	2300      	movs	r3, #0
 8010eda:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	695b      	ldr	r3, [r3, #20]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d029      	beq.n	8010f38 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	891b      	ldrh	r3, [r3, #8]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d122      	bne.n	8010f32 <CircularQueue_Add+0x92>
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	681a      	ldr	r2, [r3, #0]
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	691b      	ldr	r3, [r3, #16]
 8010ef4:	4413      	add	r3, r2
 8010ef6:	781b      	ldrb	r3, [r3, #0]
 8010ef8:	4618      	mov	r0, r3
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	681a      	ldr	r2, [r3, #0]
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	691b      	ldr	r3, [r3, #16]
 8010f02:	1c59      	adds	r1, r3, #1
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	685b      	ldr	r3, [r3, #4]
 8010f08:	4299      	cmp	r1, r3
 8010f0a:	d306      	bcc.n	8010f1a <CircularQueue_Add+0x7a>
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	6919      	ldr	r1, [r3, #16]
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	685b      	ldr	r3, [r3, #4]
 8010f14:	1acb      	subs	r3, r1, r3
 8010f16:	3301      	adds	r3, #1
 8010f18:	e002      	b.n	8010f20 <CircularQueue_Add+0x80>
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	691b      	ldr	r3, [r3, #16]
 8010f1e:	3301      	adds	r3, #1
 8010f20:	4413      	add	r3, r2
 8010f22:	781b      	ldrb	r3, [r3, #0]
 8010f24:	021b      	lsls	r3, r3, #8
 8010f26:	b29b      	uxth	r3, r3
 8010f28:	4403      	add	r3, r0
 8010f2a:	b29b      	uxth	r3, r3
 8010f2c:	3302      	adds	r3, #2
 8010f2e:	b29b      	uxth	r3, r3
 8010f30:	e001      	b.n	8010f36 <CircularQueue_Add+0x96>
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	891b      	ldrh	r3, [r3, #8]
 8010f36:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	891b      	ldrh	r3, [r3, #8]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d002      	beq.n	8010f46 <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	891b      	ldrh	r3, [r3, #8]
 8010f44:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	691a      	ldr	r2, [r3, #16]
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	68db      	ldr	r3, [r3, #12]
 8010f4e:	429a      	cmp	r2, r3
 8010f50:	d307      	bcc.n	8010f62 <CircularQueue_Add+0xc2>
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	685a      	ldr	r2, [r3, #4]
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	6919      	ldr	r1, [r3, #16]
 8010f5a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010f5c:	440b      	add	r3, r1
 8010f5e:	1ad3      	subs	r3, r2, r3
 8010f60:	e000      	b.n	8010f64 <CircularQueue_Add+0xc4>
 8010f62:	2300      	movs	r3, #0
 8010f64:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8010f66:	88fa      	ldrh	r2, [r7, #6]
 8010f68:	7ffb      	ldrb	r3, [r7, #31]
 8010f6a:	4413      	add	r3, r2
 8010f6c:	461a      	mov	r2, r3
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	fb02 f303 	mul.w	r3, r2, r3
 8010f74:	69ba      	ldr	r2, [r7, #24]
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d80b      	bhi.n	8010f92 <CircularQueue_Add+0xf2>
 8010f7a:	88fa      	ldrh	r2, [r7, #6]
 8010f7c:	7ffb      	ldrb	r3, [r7, #31]
 8010f7e:	4413      	add	r3, r2
 8010f80:	461a      	mov	r2, r3
 8010f82:	69bb      	ldr	r3, [r7, #24]
 8010f84:	fbb3 f1f2 	udiv	r1, r3, r2
 8010f88:	fb01 f202 	mul.w	r2, r1, r2
 8010f8c:	1a9b      	subs	r3, r3, r2
 8010f8e:	b2db      	uxtb	r3, r3
 8010f90:	e000      	b.n	8010f94 <CircularQueue_Add+0xf4>
 8010f92:	2300      	movs	r3, #0
 8010f94:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8010f96:	7dfa      	ldrb	r2, [r7, #23]
 8010f98:	7ffb      	ldrb	r3, [r7, #31]
 8010f9a:	429a      	cmp	r2, r3
 8010f9c:	bf8c      	ite	hi
 8010f9e:	2301      	movhi	r3, #1
 8010fa0:	2300      	movls	r3, #0
 8010fa2:	b2db      	uxtb	r3, r3
 8010fa4:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8010fa6:	7fbb      	ldrb	r3, [r7, #30]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d008      	beq.n	8010fbe <CircularQueue_Add+0x11e>
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	7f1b      	ldrb	r3, [r3, #28]
 8010fb0:	f003 0301 	and.w	r3, r3, #1
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d002      	beq.n	8010fbe <CircularQueue_Add+0x11e>
 8010fb8:	7dfb      	ldrb	r3, [r7, #23]
 8010fba:	b29b      	uxth	r3, r3
 8010fbc:	e000      	b.n	8010fc0 <CircularQueue_Add+0x120>
 8010fbe:	8bbb      	ldrh	r3, [r7, #28]
 8010fc0:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8010fc2:	7fbb      	ldrb	r3, [r7, #30]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d008      	beq.n	8010fda <CircularQueue_Add+0x13a>
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	7f1b      	ldrb	r3, [r3, #28]
 8010fcc:	f003 0302 	and.w	r3, r3, #2
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d002      	beq.n	8010fda <CircularQueue_Add+0x13a>
 8010fd4:	7ffb      	ldrb	r3, [r7, #31]
 8010fd6:	b29b      	uxth	r3, r3
 8010fd8:	e000      	b.n	8010fdc <CircularQueue_Add+0x13c>
 8010fda:	8bbb      	ldrh	r3, [r7, #28]
 8010fdc:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8010fde:	88fb      	ldrh	r3, [r7, #6]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	f000 817e 	beq.w	80112e2 <CircularQueue_Add+0x442>
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	695a      	ldr	r2, [r3, #20]
 8010fea:	88f9      	ldrh	r1, [r7, #6]
 8010fec:	7ffb      	ldrb	r3, [r7, #31]
 8010fee:	440b      	add	r3, r1
 8010ff0:	4619      	mov	r1, r3
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	fb01 f303 	mul.w	r3, r1, r3
 8010ff8:	441a      	add	r2, r3
 8010ffa:	8bbb      	ldrh	r3, [r7, #28]
 8010ffc:	441a      	add	r2, r3
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	685b      	ldr	r3, [r3, #4]
 8011002:	429a      	cmp	r2, r3
 8011004:	f200 816d 	bhi.w	80112e2 <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8011008:	2300      	movs	r3, #0
 801100a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801100c:	e14a      	b.n	80112a4 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	691a      	ldr	r2, [r3, #16]
 8011012:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011014:	441a      	add	r2, r3
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	685b      	ldr	r3, [r3, #4]
 801101a:	429a      	cmp	r2, r3
 801101c:	d307      	bcc.n	801102e <CircularQueue_Add+0x18e>
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	691a      	ldr	r2, [r3, #16]
 8011022:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011024:	441a      	add	r2, r3
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	685b      	ldr	r3, [r3, #4]
 801102a:	1ad3      	subs	r3, r2, r3
 801102c:	e003      	b.n	8011036 <CircularQueue_Add+0x196>
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	691a      	ldr	r2, [r3, #16]
 8011032:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011034:	4413      	add	r3, r2
 8011036:	68fa      	ldr	r2, [r7, #12]
 8011038:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	691b      	ldr	r3, [r3, #16]
 801103e:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	891b      	ldrh	r3, [r3, #8]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d130      	bne.n	80110aa <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	681a      	ldr	r2, [r3, #0]
 801104c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801104e:	1c59      	adds	r1, r3, #1
 8011050:	6339      	str	r1, [r7, #48]	@ 0x30
 8011052:	4413      	add	r3, r2
 8011054:	88fa      	ldrh	r2, [r7, #6]
 8011056:	b2d2      	uxtb	r2, r2
 8011058:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	685b      	ldr	r3, [r3, #4]
 801105e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011060:	429a      	cmp	r2, r3
 8011062:	d304      	bcc.n	801106e <CircularQueue_Add+0x1ce>
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	685b      	ldr	r3, [r3, #4]
 8011068:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801106a:	1ad3      	subs	r3, r2, r3
 801106c:	e000      	b.n	8011070 <CircularQueue_Add+0x1d0>
 801106e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011070:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8011072:	88fb      	ldrh	r3, [r7, #6]
 8011074:	0a1b      	lsrs	r3, r3, #8
 8011076:	b298      	uxth	r0, r3
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	681a      	ldr	r2, [r3, #0]
 801107c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801107e:	1c59      	adds	r1, r3, #1
 8011080:	6339      	str	r1, [r7, #48]	@ 0x30
 8011082:	4413      	add	r3, r2
 8011084:	b2c2      	uxtb	r2, r0
 8011086:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	685b      	ldr	r3, [r3, #4]
 801108c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801108e:	429a      	cmp	r2, r3
 8011090:	d304      	bcc.n	801109c <CircularQueue_Add+0x1fc>
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	685b      	ldr	r3, [r3, #4]
 8011096:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011098:	1ad3      	subs	r3, r2, r3
 801109a:	e000      	b.n	801109e <CircularQueue_Add+0x1fe>
 801109c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801109e:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	695b      	ldr	r3, [r3, #20]
 80110a4:	1c9a      	adds	r2, r3, #2
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 80110aa:	88fa      	ldrh	r2, [r7, #6]
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	6859      	ldr	r1, [r3, #4]
 80110b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110b2:	1acb      	subs	r3, r1, r3
 80110b4:	4293      	cmp	r3, r2
 80110b6:	bf28      	it	cs
 80110b8:	4613      	movcs	r3, r2
 80110ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 80110bc:	88fb      	ldrh	r3, [r7, #6]
 80110be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80110c0:	429a      	cmp	r2, r3
 80110c2:	d007      	beq.n	80110d4 <CircularQueue_Add+0x234>
 80110c4:	88fb      	ldrh	r3, [r7, #6]
 80110c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80110c8:	429a      	cmp	r2, r3
 80110ca:	d225      	bcs.n	8011118 <CircularQueue_Add+0x278>
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	7f1b      	ldrb	r3, [r3, #28]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d121      	bne.n	8011118 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	681a      	ldr	r2, [r3, #0]
 80110d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110da:	18d0      	adds	r0, r2, r3
 80110dc:	88fb      	ldrh	r3, [r7, #6]
 80110de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80110e0:	fb02 f303 	mul.w	r3, r2, r3
 80110e4:	68ba      	ldr	r2, [r7, #8]
 80110e6:	4413      	add	r3, r2
 80110e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80110ea:	4619      	mov	r1, r3
 80110ec:	f002 fec5 	bl	8013e7a <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	695a      	ldr	r2, [r3, #20]
 80110f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110f6:	441a      	add	r2, r3
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 80110fc:	2300      	movs	r3, #0
 80110fe:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8011100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011102:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8011104:	88fa      	ldrh	r2, [r7, #6]
 8011106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011108:	1ad3      	subs	r3, r2, r3
 801110a:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 801110c:	7ffb      	ldrb	r3, [r7, #31]
 801110e:	b29a      	uxth	r2, r3
 8011110:	88fb      	ldrh	r3, [r7, #6]
 8011112:	4413      	add	r3, r2
 8011114:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011116:	e0a4      	b.n	8011262 <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8011118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801111a:	2b00      	cmp	r3, #0
 801111c:	f000 80a1 	beq.w	8011262 <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	7f1b      	ldrb	r3, [r3, #28]
 8011124:	f003 0301 	and.w	r3, r3, #1
 8011128:	2b00      	cmp	r3, #0
 801112a:	d03a      	beq.n	80111a2 <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	891b      	ldrh	r3, [r3, #8]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d10d      	bne.n	8011150 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	681a      	ldr	r2, [r3, #0]
 8011138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801113a:	3b02      	subs	r3, #2
 801113c:	4413      	add	r3, r2
 801113e:	22ff      	movs	r2, #255	@ 0xff
 8011140:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	681a      	ldr	r2, [r3, #0]
 8011146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011148:	3b01      	subs	r3, #1
 801114a:	4413      	add	r3, r2
 801114c:	22ff      	movs	r2, #255	@ 0xff
 801114e:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	695a      	ldr	r2, [r3, #20]
 8011154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011156:	441a      	add	r2, r3
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 801115c:	2300      	movs	r3, #0
 801115e:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8011160:	88fb      	ldrh	r3, [r7, #6]
 8011162:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8011164:	2300      	movs	r3, #0
 8011166:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	891b      	ldrh	r3, [r3, #8]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d16f      	bne.n	8011250 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	681a      	ldr	r2, [r3, #0]
 8011174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011176:	1c59      	adds	r1, r3, #1
 8011178:	6339      	str	r1, [r7, #48]	@ 0x30
 801117a:	4413      	add	r3, r2
 801117c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801117e:	b2d2      	uxtb	r2, r2
 8011180:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8011182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011184:	0a18      	lsrs	r0, r3, #8
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	681a      	ldr	r2, [r3, #0]
 801118a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801118c:	1c59      	adds	r1, r3, #1
 801118e:	6339      	str	r1, [r7, #48]	@ 0x30
 8011190:	4413      	add	r3, r2
 8011192:	b2c2      	uxtb	r2, r0
 8011194:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	695b      	ldr	r3, [r3, #20]
 801119a:	1c9a      	adds	r2, r3, #2
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	615a      	str	r2, [r3, #20]
 80111a0:	e056      	b.n	8011250 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	7f1b      	ldrb	r3, [r3, #28]
 80111a6:	f003 0302 	and.w	r3, r3, #2
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d050      	beq.n	8011250 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	891b      	ldrh	r3, [r3, #8]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d14a      	bne.n	801124c <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	681a      	ldr	r2, [r3, #0]
 80111ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111bc:	3b02      	subs	r3, #2
 80111be:	4413      	add	r3, r2
 80111c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80111c2:	b2d2      	uxtb	r2, r2
 80111c4:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80111c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111c8:	0a19      	lsrs	r1, r3, #8
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	681a      	ldr	r2, [r3, #0]
 80111ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111d0:	3b01      	subs	r3, #1
 80111d2:	4413      	add	r3, r2
 80111d4:	b2ca      	uxtb	r2, r1
 80111d6:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	681a      	ldr	r2, [r3, #0]
 80111dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111de:	18d0      	adds	r0, r2, r3
 80111e0:	88fb      	ldrh	r3, [r7, #6]
 80111e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80111e4:	fb02 f303 	mul.w	r3, r2, r3
 80111e8:	68ba      	ldr	r2, [r7, #8]
 80111ea:	4413      	add	r3, r2
 80111ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80111ee:	4619      	mov	r1, r3
 80111f0:	f002 fe43 	bl	8013e7a <memcpy>
             q->byteCount += NbBytesToCopy; 
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	695a      	ldr	r2, [r3, #20]
 80111f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111fa:	441a      	add	r2, r3
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8011200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011202:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8011204:	88fa      	ldrh	r2, [r7, #6]
 8011206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011208:	1ad3      	subs	r3, r2, r3
 801120a:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	699b      	ldr	r3, [r3, #24]
 8011210:	1c5a      	adds	r2, r3, #1
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8011216:	2300      	movs	r3, #0
 8011218:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	681a      	ldr	r2, [r3, #0]
 801121e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011220:	1c59      	adds	r1, r3, #1
 8011222:	6339      	str	r1, [r7, #48]	@ 0x30
 8011224:	4413      	add	r3, r2
 8011226:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011228:	b2d2      	uxtb	r2, r2
 801122a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 801122c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801122e:	0a18      	lsrs	r0, r3, #8
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	681a      	ldr	r2, [r3, #0]
 8011234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011236:	1c59      	adds	r1, r3, #1
 8011238:	6339      	str	r1, [r7, #48]	@ 0x30
 801123a:	4413      	add	r3, r2
 801123c:	b2c2      	uxtb	r2, r0
 801123e:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	695b      	ldr	r3, [r3, #20]
 8011244:	1c9a      	adds	r2, r3, #2
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	615a      	str	r2, [r3, #20]
 801124a:	e001      	b.n	8011250 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 801124c:	2300      	movs	r3, #0
 801124e:	e049      	b.n	80112e4 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8011250:	7ffb      	ldrb	r3, [r7, #31]
 8011252:	b29a      	uxth	r2, r3
 8011254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011256:	b29b      	uxth	r3, r3
 8011258:	4413      	add	r3, r2
 801125a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	2200      	movs	r2, #0
 8011260:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 8011262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011264:	2b00      	cmp	r3, #0
 8011266:	d015      	beq.n	8011294 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	681a      	ldr	r2, [r3, #0]
 801126c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801126e:	18d0      	adds	r0, r2, r3
 8011270:	88fb      	ldrh	r3, [r7, #6]
 8011272:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011274:	fb03 f202 	mul.w	r2, r3, r2
 8011278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801127a:	4413      	add	r3, r2
 801127c:	68ba      	ldr	r2, [r7, #8]
 801127e:	4413      	add	r3, r2
 8011280:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011282:	4619      	mov	r1, r3
 8011284:	f002 fdf9 	bl	8013e7a <memcpy>
        q->byteCount += NbBytesToCopy;
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	695a      	ldr	r2, [r3, #20]
 801128c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801128e:	441a      	add	r2, r3
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	699b      	ldr	r3, [r3, #24]
 8011298:	1c5a      	adds	r2, r3, #1
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 801129e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112a0:	3301      	adds	r3, #1
 80112a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80112a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	429a      	cmp	r2, r3
 80112aa:	f4ff aeb0 	bcc.w	801100e <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	681a      	ldr	r2, [r3, #0]
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	6919      	ldr	r1, [r3, #16]
 80112b6:	7ffb      	ldrb	r3, [r7, #31]
 80112b8:	4419      	add	r1, r3
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	685b      	ldr	r3, [r3, #4]
 80112be:	4299      	cmp	r1, r3
 80112c0:	d307      	bcc.n	80112d2 <CircularQueue_Add+0x432>
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	6919      	ldr	r1, [r3, #16]
 80112c6:	7ffb      	ldrb	r3, [r7, #31]
 80112c8:	4419      	add	r1, r3
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	685b      	ldr	r3, [r3, #4]
 80112ce:	1acb      	subs	r3, r1, r3
 80112d0:	e003      	b.n	80112da <CircularQueue_Add+0x43a>
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	6919      	ldr	r1, [r3, #16]
 80112d6:	7ffb      	ldrb	r3, [r7, #31]
 80112d8:	440b      	add	r3, r1
 80112da:	4413      	add	r3, r2
 80112dc:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 80112de:	6a3b      	ldr	r3, [r7, #32]
 80112e0:	e000      	b.n	80112e4 <CircularQueue_Add+0x444>
    return NULL;
 80112e2:	2300      	movs	r3, #0
}
 80112e4:	4618      	mov	r0, r3
 80112e6:	3738      	adds	r7, #56	@ 0x38
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bd80      	pop	{r7, pc}

080112ec <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 80112ec:	b480      	push	{r7}
 80112ee:	b085      	sub	sp, #20
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
 80112f4:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 80112f6:	2300      	movs	r3, #0
 80112f8:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 80112fa:	2300      	movs	r3, #0
 80112fc:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	891b      	ldrh	r3, [r3, #8]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d101      	bne.n	801130a <CircularQueue_Remove+0x1e>
 8011306:	2302      	movs	r3, #2
 8011308:	e000      	b.n	801130c <CircularQueue_Remove+0x20>
 801130a:	2300      	movs	r3, #0
 801130c:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 801130e:	2300      	movs	r3, #0
 8011310:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	695b      	ldr	r3, [r3, #20]
 8011316:	2b00      	cmp	r3, #0
 8011318:	f000 80ca 	beq.w	80114b0 <CircularQueue_Remove+0x1c4>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	891b      	ldrh	r3, [r3, #8]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d120      	bne.n	8011366 <CircularQueue_Remove+0x7a>
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	681a      	ldr	r2, [r3, #0]
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	68db      	ldr	r3, [r3, #12]
 801132c:	4413      	add	r3, r2
 801132e:	781b      	ldrb	r3, [r3, #0]
 8011330:	4618      	mov	r0, r3
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	681a      	ldr	r2, [r3, #0]
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	68db      	ldr	r3, [r3, #12]
 801133a:	1c59      	adds	r1, r3, #1
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	685b      	ldr	r3, [r3, #4]
 8011340:	4299      	cmp	r1, r3
 8011342:	d306      	bcc.n	8011352 <CircularQueue_Remove+0x66>
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	68d9      	ldr	r1, [r3, #12]
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	685b      	ldr	r3, [r3, #4]
 801134c:	1acb      	subs	r3, r1, r3
 801134e:	3301      	adds	r3, #1
 8011350:	e002      	b.n	8011358 <CircularQueue_Remove+0x6c>
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	68db      	ldr	r3, [r3, #12]
 8011356:	3301      	adds	r3, #1
 8011358:	4413      	add	r3, r2
 801135a:	781b      	ldrb	r3, [r3, #0]
 801135c:	021b      	lsls	r3, r3, #8
 801135e:	b29b      	uxth	r3, r3
 8011360:	4403      	add	r3, r0
 8011362:	b29b      	uxth	r3, r3
 8011364:	e001      	b.n	801136a <CircularQueue_Remove+0x7e>
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	891b      	ldrh	r3, [r3, #8]
 801136a:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	7f1b      	ldrb	r3, [r3, #28]
 8011370:	f003 0301 	and.w	r3, r3, #1
 8011374:	2b00      	cmp	r3, #0
 8011376:	d056      	beq.n	8011426 <CircularQueue_Remove+0x13a>
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	7f1b      	ldrb	r3, [r3, #28]
 801137c:	f003 0302 	and.w	r3, r3, #2
 8011380:	2b00      	cmp	r3, #0
 8011382:	d150      	bne.n	8011426 <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8011384:	897b      	ldrh	r3, [r7, #10]
 8011386:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801138a:	4293      	cmp	r3, r2
 801138c:	d103      	bne.n	8011396 <CircularQueue_Remove+0xaa>
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	891b      	ldrh	r3, [r3, #8]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d012      	beq.n	80113bc <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	68da      	ldr	r2, [r3, #12]
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801139e:	429a      	cmp	r2, r3
 80113a0:	d941      	bls.n	8011426 <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	891b      	ldrh	r3, [r3, #8]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d03d      	beq.n	8011426 <CircularQueue_Remove+0x13a>
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	685a      	ldr	r2, [r3, #4]
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	68db      	ldr	r3, [r3, #12]
 80113b2:	1ad3      	subs	r3, r2, r3
 80113b4:	687a      	ldr	r2, [r7, #4]
 80113b6:	8912      	ldrh	r2, [r2, #8]
 80113b8:	4293      	cmp	r3, r2
 80113ba:	d234      	bcs.n	8011426 <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	695a      	ldr	r2, [r3, #20]
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	68d9      	ldr	r1, [r3, #12]
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	685b      	ldr	r3, [r3, #4]
 80113c8:	1acb      	subs	r3, r1, r3
 80113ca:	441a      	add	r2, r3
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	2200      	movs	r2, #0
 80113d4:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	891b      	ldrh	r3, [r3, #8]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d120      	bne.n	8011420 <CircularQueue_Remove+0x134>
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	681a      	ldr	r2, [r3, #0]
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	68db      	ldr	r3, [r3, #12]
 80113e6:	4413      	add	r3, r2
 80113e8:	781b      	ldrb	r3, [r3, #0]
 80113ea:	4618      	mov	r0, r3
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	681a      	ldr	r2, [r3, #0]
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	68db      	ldr	r3, [r3, #12]
 80113f4:	1c59      	adds	r1, r3, #1
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	685b      	ldr	r3, [r3, #4]
 80113fa:	4299      	cmp	r1, r3
 80113fc:	d306      	bcc.n	801140c <CircularQueue_Remove+0x120>
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	68d9      	ldr	r1, [r3, #12]
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	685b      	ldr	r3, [r3, #4]
 8011406:	1acb      	subs	r3, r1, r3
 8011408:	3301      	adds	r3, #1
 801140a:	e002      	b.n	8011412 <CircularQueue_Remove+0x126>
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	68db      	ldr	r3, [r3, #12]
 8011410:	3301      	adds	r3, #1
 8011412:	4413      	add	r3, r2
 8011414:	781b      	ldrb	r3, [r3, #0]
 8011416:	021b      	lsls	r3, r3, #8
 8011418:	b29b      	uxth	r3, r3
 801141a:	4403      	add	r3, r0
 801141c:	b29b      	uxth	r3, r3
 801141e:	e001      	b.n	8011424 <CircularQueue_Remove+0x138>
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	891b      	ldrh	r3, [r3, #8]
 8011424:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	681a      	ldr	r2, [r3, #0]
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	68d9      	ldr	r1, [r3, #12]
 801142e:	7a7b      	ldrb	r3, [r7, #9]
 8011430:	4419      	add	r1, r3
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	685b      	ldr	r3, [r3, #4]
 8011436:	4299      	cmp	r1, r3
 8011438:	d307      	bcc.n	801144a <CircularQueue_Remove+0x15e>
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	68d9      	ldr	r1, [r3, #12]
 801143e:	7a7b      	ldrb	r3, [r7, #9]
 8011440:	4419      	add	r1, r3
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	685b      	ldr	r3, [r3, #4]
 8011446:	1acb      	subs	r3, r1, r3
 8011448:	e003      	b.n	8011452 <CircularQueue_Remove+0x166>
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	68d9      	ldr	r1, [r3, #12]
 801144e:	7a7b      	ldrb	r3, [r7, #9]
 8011450:	440b      	add	r3, r1
 8011452:	4413      	add	r3, r2
 8011454:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	695b      	ldr	r3, [r3, #20]
 801145a:	8979      	ldrh	r1, [r7, #10]
 801145c:	7a7a      	ldrb	r2, [r7, #9]
 801145e:	440a      	add	r2, r1
 8011460:	1a9a      	subs	r2, r3, r2
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	695b      	ldr	r3, [r3, #20]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d01b      	beq.n	80114a6 <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	68da      	ldr	r2, [r3, #12]
 8011472:	897b      	ldrh	r3, [r7, #10]
 8011474:	441a      	add	r2, r3
 8011476:	7a7b      	ldrb	r3, [r7, #9]
 8011478:	441a      	add	r2, r3
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	685b      	ldr	r3, [r3, #4]
 801147e:	429a      	cmp	r2, r3
 8011480:	d309      	bcc.n	8011496 <CircularQueue_Remove+0x1aa>
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	68da      	ldr	r2, [r3, #12]
 8011486:	897b      	ldrh	r3, [r7, #10]
 8011488:	441a      	add	r2, r3
 801148a:	7a7b      	ldrb	r3, [r7, #9]
 801148c:	441a      	add	r2, r3
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	685b      	ldr	r3, [r3, #4]
 8011492:	1ad3      	subs	r3, r2, r3
 8011494:	e005      	b.n	80114a2 <CircularQueue_Remove+0x1b6>
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	68da      	ldr	r2, [r3, #12]
 801149a:	897b      	ldrh	r3, [r7, #10]
 801149c:	441a      	add	r2, r3
 801149e:	7a7b      	ldrb	r3, [r7, #9]
 80114a0:	4413      	add	r3, r2
 80114a2:	687a      	ldr	r2, [r7, #4]
 80114a4:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	699b      	ldr	r3, [r3, #24]
 80114aa:	1e5a      	subs	r2, r3, #1
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 80114b0:	683b      	ldr	r3, [r7, #0]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d002      	beq.n	80114bc <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 80114b6:	683b      	ldr	r3, [r7, #0]
 80114b8:	897a      	ldrh	r2, [r7, #10]
 80114ba:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 80114bc:	68fb      	ldr	r3, [r7, #12]
}
 80114be:	4618      	mov	r0, r3
 80114c0:	3714      	adds	r7, #20
 80114c2:	46bd      	mov	sp, r7
 80114c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c8:	4770      	bx	lr

080114ca <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 80114ca:	b480      	push	{r7}
 80114cc:	b087      	sub	sp, #28
 80114ce:	af00      	add	r7, sp, #0
 80114d0:	6078      	str	r0, [r7, #4]
 80114d2:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 80114d4:	2300      	movs	r3, #0
 80114d6:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 80114d8:	2300      	movs	r3, #0
 80114da:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	891b      	ldrh	r3, [r3, #8]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d101      	bne.n	80114e8 <CircularQueue_Sense+0x1e>
 80114e4:	2302      	movs	r3, #2
 80114e6:	e000      	b.n	80114ea <CircularQueue_Sense+0x20>
 80114e8:	2300      	movs	r3, #0
 80114ea:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 80114ec:	2300      	movs	r3, #0
 80114ee:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 80114f0:	2300      	movs	r3, #0
 80114f2:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	695b      	ldr	r3, [r3, #20]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	f000 808e 	beq.w	801161a <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	68db      	ldr	r3, [r3, #12]
 8011502:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	891b      	ldrh	r3, [r3, #8]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d120      	bne.n	801154e <CircularQueue_Sense+0x84>
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	681a      	ldr	r2, [r3, #0]
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	68db      	ldr	r3, [r3, #12]
 8011514:	4413      	add	r3, r2
 8011516:	781b      	ldrb	r3, [r3, #0]
 8011518:	4618      	mov	r0, r3
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681a      	ldr	r2, [r3, #0]
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	68db      	ldr	r3, [r3, #12]
 8011522:	1c59      	adds	r1, r3, #1
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	685b      	ldr	r3, [r3, #4]
 8011528:	4299      	cmp	r1, r3
 801152a:	d306      	bcc.n	801153a <CircularQueue_Sense+0x70>
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	68d9      	ldr	r1, [r3, #12]
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	685b      	ldr	r3, [r3, #4]
 8011534:	1acb      	subs	r3, r1, r3
 8011536:	3301      	adds	r3, #1
 8011538:	e002      	b.n	8011540 <CircularQueue_Sense+0x76>
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	68db      	ldr	r3, [r3, #12]
 801153e:	3301      	adds	r3, #1
 8011540:	4413      	add	r3, r2
 8011542:	781b      	ldrb	r3, [r3, #0]
 8011544:	021b      	lsls	r3, r3, #8
 8011546:	b29b      	uxth	r3, r3
 8011548:	4403      	add	r3, r0
 801154a:	b29b      	uxth	r3, r3
 801154c:	e001      	b.n	8011552 <CircularQueue_Sense+0x88>
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	891b      	ldrh	r3, [r3, #8]
 8011552:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	7f1b      	ldrb	r3, [r3, #28]
 8011558:	f003 0301 	and.w	r3, r3, #1
 801155c:	2b00      	cmp	r3, #0
 801155e:	d047      	beq.n	80115f0 <CircularQueue_Sense+0x126>
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	7f1b      	ldrb	r3, [r3, #28]
 8011564:	f003 0302 	and.w	r3, r3, #2
 8011568:	2b00      	cmp	r3, #0
 801156a:	d141      	bne.n	80115f0 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801156c:	8a7b      	ldrh	r3, [r7, #18]
 801156e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011572:	4293      	cmp	r3, r2
 8011574:	d103      	bne.n	801157e <CircularQueue_Sense+0xb4>
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	891b      	ldrh	r3, [r3, #8]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d012      	beq.n	80115a4 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	68da      	ldr	r2, [r3, #12]
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8011586:	429a      	cmp	r2, r3
 8011588:	d932      	bls.n	80115f0 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	891b      	ldrh	r3, [r3, #8]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d02e      	beq.n	80115f0 <CircularQueue_Sense+0x126>
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	685a      	ldr	r2, [r3, #4]
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	68db      	ldr	r3, [r3, #12]
 801159a:	1ad3      	subs	r3, r2, r3
 801159c:	687a      	ldr	r2, [r7, #4]
 801159e:	8912      	ldrh	r2, [r2, #8]
 80115a0:	4293      	cmp	r3, r2
 80115a2:	d225      	bcs.n	80115f0 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 80115a4:	2300      	movs	r3, #0
 80115a6:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	891b      	ldrh	r3, [r3, #8]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d11c      	bne.n	80115ea <CircularQueue_Sense+0x120>
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	681a      	ldr	r2, [r3, #0]
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	4413      	add	r3, r2
 80115b8:	781b      	ldrb	r3, [r3, #0]
 80115ba:	4618      	mov	r0, r3
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681a      	ldr	r2, [r3, #0]
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	1c59      	adds	r1, r3, #1
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	685b      	ldr	r3, [r3, #4]
 80115c8:	4299      	cmp	r1, r3
 80115ca:	d305      	bcc.n	80115d8 <CircularQueue_Sense+0x10e>
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	685b      	ldr	r3, [r3, #4]
 80115d0:	68f9      	ldr	r1, [r7, #12]
 80115d2:	1acb      	subs	r3, r1, r3
 80115d4:	3301      	adds	r3, #1
 80115d6:	e001      	b.n	80115dc <CircularQueue_Sense+0x112>
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	3301      	adds	r3, #1
 80115dc:	4413      	add	r3, r2
 80115de:	781b      	ldrb	r3, [r3, #0]
 80115e0:	021b      	lsls	r3, r3, #8
 80115e2:	b29b      	uxth	r3, r3
 80115e4:	4403      	add	r3, r0
 80115e6:	b29b      	uxth	r3, r3
 80115e8:	e001      	b.n	80115ee <CircularQueue_Sense+0x124>
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	891b      	ldrh	r3, [r3, #8]
 80115ee:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	681a      	ldr	r2, [r3, #0]
 80115f4:	7af9      	ldrb	r1, [r7, #11]
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	4419      	add	r1, r3
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	685b      	ldr	r3, [r3, #4]
 80115fe:	4299      	cmp	r1, r3
 8011600:	d306      	bcc.n	8011610 <CircularQueue_Sense+0x146>
 8011602:	7af9      	ldrb	r1, [r7, #11]
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	4419      	add	r1, r3
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	685b      	ldr	r3, [r3, #4]
 801160c:	1acb      	subs	r3, r1, r3
 801160e:	e002      	b.n	8011616 <CircularQueue_Sense+0x14c>
 8011610:	7af9      	ldrb	r1, [r7, #11]
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	440b      	add	r3, r1
 8011616:	4413      	add	r3, r2
 8011618:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 801161a:	683b      	ldr	r3, [r7, #0]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d002      	beq.n	8011626 <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	8a7a      	ldrh	r2, [r7, #18]
 8011624:	801a      	strh	r2, [r3, #0]
  }
  return x;
 8011626:	697b      	ldr	r3, [r7, #20]
}
 8011628:	4618      	mov	r0, r3
 801162a:	371c      	adds	r7, #28
 801162c:	46bd      	mov	sp, r7
 801162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011632:	4770      	bx	lr

08011634 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8011634:	b480      	push	{r7}
 8011636:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8011638:	4b03      	ldr	r3, [pc, #12]	@ (8011648 <LL_FLASH_GetUDN+0x14>)
 801163a:	681b      	ldr	r3, [r3, #0]
}
 801163c:	4618      	mov	r0, r3
 801163e:	46bd      	mov	sp, r7
 8011640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011644:	4770      	bx	lr
 8011646:	bf00      	nop
 8011648:	1fff7580 	.word	0x1fff7580

0801164c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 801164c:	b480      	push	{r7}
 801164e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8011650:	4b03      	ldr	r3, [pc, #12]	@ (8011660 <LL_FLASH_GetDeviceID+0x14>)
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	b2db      	uxtb	r3, r3
}
 8011656:	4618      	mov	r0, r3
 8011658:	46bd      	mov	sp, r7
 801165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165e:	4770      	bx	lr
 8011660:	1fff7584 	.word	0x1fff7584

08011664 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8011664:	b480      	push	{r7}
 8011666:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8011668:	4b03      	ldr	r3, [pc, #12]	@ (8011678 <LL_FLASH_GetSTCompanyID+0x14>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	0a1b      	lsrs	r3, r3, #8
}
 801166e:	4618      	mov	r0, r3
 8011670:	46bd      	mov	sp, r7
 8011672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011676:	4770      	bx	lr
 8011678:	1fff7584 	.word	0x1fff7584

0801167c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 801167c:	b5b0      	push	{r4, r5, r7, lr}
 801167e:	b090      	sub	sp, #64	@ 0x40
 8011680:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8011682:	2392      	movs	r3, #146	@ 0x92
 8011684:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8011688:	4b3f      	ldr	r3, [pc, #252]	@ (8011788 <APP_BLE_Init+0x10c>)
 801168a:	1d3c      	adds	r4, r7, #4
 801168c:	461d      	mov	r5, r3
 801168e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011692:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801169a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801169e:	c403      	stmia	r4!, {r0, r1}
 80116a0:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80116a2:	f000 fa83 	bl	8011bac <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80116a6:	2101      	movs	r1, #1
 80116a8:	2002      	movs	r0, #2
 80116aa:	f001 ffed 	bl	8013688 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80116ae:	4a37      	ldr	r2, [pc, #220]	@ (801178c <APP_BLE_Init+0x110>)
 80116b0:	2100      	movs	r1, #0
 80116b2:	2004      	movs	r0, #4
 80116b4:	f002 f914 	bl	80138e0 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80116b8:	1d3b      	adds	r3, r7, #4
 80116ba:	4618      	mov	r0, r3
 80116bc:	f7fe fc1e 	bl	800fefc <SHCI_C2_BLE_Init>
 80116c0:	4603      	mov	r3, r0
 80116c2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 80116c6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d008      	beq.n	80116e0 <APP_BLE_Init+0x64>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 80116ce:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80116d2:	4619      	mov	r1, r3
 80116d4:	482e      	ldr	r0, [pc, #184]	@ (8011790 <APP_BLE_Init+0x114>)
 80116d6:	f002 fb23 	bl	8013d20 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80116da:	f7f1 f9a5 	bl	8002a28 <Error_Handler>
 80116de:	e002      	b.n	80116e6 <APP_BLE_Init+0x6a>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 80116e0:	482c      	ldr	r0, [pc, #176]	@ (8011794 <APP_BLE_Init+0x118>)
 80116e2:	f002 fb1d 	bl	8013d20 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80116e6:	f000 fa77 	bl	8011bd8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80116ea:	f7fe fb61 	bl	800fdb0 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80116ee:	4b2a      	ldr	r3, [pc, #168]	@ (8011798 <APP_BLE_Init+0x11c>)
 80116f0:	2200      	movs	r2, #0
 80116f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80116f6:	4b28      	ldr	r3, [pc, #160]	@ (8011798 <APP_BLE_Init+0x11c>)
 80116f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80116fc:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80116fe:	4a27      	ldr	r2, [pc, #156]	@ (801179c <APP_BLE_Init+0x120>)
 8011700:	2100      	movs	r1, #0
 8011702:	2001      	movs	r0, #1
 8011704:	f002 f8ec 	bl	80138e0 <UTIL_SEQ_RegTask>

  /* USER CODE BEGIN APP_BLE_Init_4 */
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_UPDATE_REG_ID, UTIL_SEQ_RFU, Connection_Interval_Update_Req);
 8011708:	4a25      	ldr	r2, [pc, #148]	@ (80117a0 <APP_BLE_Init+0x124>)
 801170a:	2100      	movs	r1, #0
 801170c:	2002      	movs	r0, #2
 801170e:	f002 f8e7 	bl	80138e0 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8011712:	2006      	movs	r0, #6
 8011714:	f7fe f8b6 	bl	800f884 <aci_hal_set_radio_activity_mask>
 8011718:	4603      	mov	r3, r0
 801171a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 801171e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011722:	2b00      	cmp	r3, #0
 8011724:	d006      	beq.n	8011734 <APP_BLE_Init+0xb8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8011726:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801172a:	4619      	mov	r1, r3
 801172c:	481d      	ldr	r0, [pc, #116]	@ (80117a4 <APP_BLE_Init+0x128>)
 801172e:	f002 faf7 	bl	8013d20 <iprintf>
 8011732:	e002      	b.n	801173a <APP_BLE_Init+0xbe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8011734:	481c      	ldr	r0, [pc, #112]	@ (80117a8 <APP_BLE_Init+0x12c>)
 8011736:	f002 faf3 	bl	8013d20 <iprintf>
  }
#endif /* RADIO_ACTIVITY_EVENT != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  index_con_int = 0;
 801173a:	4b1c      	ldr	r3, [pc, #112]	@ (80117ac <APP_BLE_Init+0x130>)
 801173c:	2200      	movs	r2, #0
 801173e:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 8011740:	4b1b      	ldr	r3, [pc, #108]	@ (80117b0 <APP_BLE_Init+0x134>)
 8011742:	2201      	movs	r2, #1
 8011744:	701a      	strb	r2, [r3, #0]
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8011746:	f000 fee7 	bl	8012518 <Custom_APP_Init>

  /* USER CODE BEGIN APP_BLE_Init_3 */
  UTIL_SEQ_RegTask(1<<CFG_TASK_SEND_OOB_DATA_ID, UTIL_SEQ_RFU, send_oob_data); // [STM]
 801174a:	4a1a      	ldr	r2, [pc, #104]	@ (80117b4 <APP_BLE_Init+0x138>)
 801174c:	2100      	movs	r1, #0
 801174e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8011752:	f002 f8c5 	bl	80138e0 <UTIL_SEQ_RegTask>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8011756:	4b10      	ldr	r3, [pc, #64]	@ (8011798 <APP_BLE_Init+0x11c>)
 8011758:	2200      	movs	r2, #0
 801175a:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 801175c:	4b0e      	ldr	r3, [pc, #56]	@ (8011798 <APP_BLE_Init+0x11c>)
 801175e:	2200      	movs	r2, #0
 8011760:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8011762:	2001      	movs	r0, #1
 8011764:	f000 fbec 	bl	8011f40 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */
  UTIL_SEQ_RegTask(1<<CFG_TASK_OOB_PROCESS_ID, UTIL_SEQ_RFU, ble_oob_process);
 8011768:	4a13      	ldr	r2, [pc, #76]	@ (80117b8 <APP_BLE_Init+0x13c>)
 801176a:	2100      	movs	r1, #0
 801176c:	2040      	movs	r0, #64	@ 0x40
 801176e:	f002 f8b7 	bl	80138e0 <UTIL_SEQ_RegTask>
  
  HW_UART_Receive_IT(hw_uart1, (uint8_t *)&m_oob_uart_data, sizeof(m_oob_uart_data), uart_rx_callback);
 8011772:	4b12      	ldr	r3, [pc, #72]	@ (80117bc <APP_BLE_Init+0x140>)
 8011774:	2218      	movs	r2, #24
 8011776:	4912      	ldr	r1, [pc, #72]	@ (80117c0 <APP_BLE_Init+0x144>)
 8011778:	2000      	movs	r0, #0
 801177a:	f7f0 fca3 	bl	80020c4 <HW_UART_Receive_IT>
  /* USER CODE END APP_BLE_Init_2 */

  return;
 801177e:	bf00      	nop
}
 8011780:	3740      	adds	r7, #64	@ 0x40
 8011782:	46bd      	mov	sp, r7
 8011784:	bdb0      	pop	{r4, r5, r7, pc}
 8011786:	bf00      	nop
 8011788:	08015314 	.word	0x08015314
 801178c:	08010119 	.word	0x08010119
 8011790:	08015238 	.word	0x08015238
 8011794:	08015270 	.word	0x08015270
 8011798:	200015d4 	.word	0x200015d4
 801179c:	08012069 	.word	0x08012069
 80117a0:	08012189 	.word	0x08012189
 80117a4:	08015298 	.word	0x08015298
 80117a8:	080152dc 	.word	0x080152dc
 80117ac:	2000165c 	.word	0x2000165c
 80117b0:	2000165d 	.word	0x2000165d
 80117b4:	08012295 	.word	0x08012295
 80117b8:	08012391 	.word	0x08012391
 80117bc:	0801237f 	.word	0x0801237f
 80117c0:	20001660 	.word	0x20001660

080117c4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80117c4:	b5b0      	push	{r4, r5, r7, lr}
 80117c6:	b09c      	sub	sp, #112	@ 0x70
 80117c8:	af04      	add	r7, sp, #16
 80117ca:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 80117cc:	2392      	movs	r3, #146	@ 0x92
 80117ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	3301      	adds	r3, #1
 80117d6:	65bb      	str	r3, [r7, #88]	@ 0x58

  switch (p_event_pckt->evt)
 80117d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80117da:	781b      	ldrb	r3, [r3, #0]
 80117dc:	2bff      	cmp	r3, #255	@ 0xff
 80117de:	f000 80d7 	beq.w	8011990 <SVCCTL_App_Notification+0x1cc>
 80117e2:	2bff      	cmp	r3, #255	@ 0xff
 80117e4:	f300 81cd 	bgt.w	8011b82 <SVCCTL_App_Notification+0x3be>
 80117e8:	2b05      	cmp	r3, #5
 80117ea:	d002      	beq.n	80117f2 <SVCCTL_App_Notification+0x2e>
 80117ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80117ee:	d02e      	beq.n	801184e <SVCCTL_App_Notification+0x8a>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80117f0:	e1c7      	b.n	8011b82 <SVCCTL_App_Notification+0x3be>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 80117f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80117f4:	3302      	adds	r3, #2
 80117f6:	643b      	str	r3, [r7, #64]	@ 0x40
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80117f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80117fa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80117fe:	b29a      	uxth	r2, r3
 8011800:	4bab      	ldr	r3, [pc, #684]	@ (8011ab0 <SVCCTL_App_Notification+0x2ec>)
 8011802:	8adb      	ldrh	r3, [r3, #22]
 8011804:	429a      	cmp	r2, r3
 8011806:	d114      	bne.n	8011832 <SVCCTL_App_Notification+0x6e>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8011808:	4ba9      	ldr	r3, [pc, #676]	@ (8011ab0 <SVCCTL_App_Notification+0x2ec>)
 801180a:	2200      	movs	r2, #0
 801180c:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 801180e:	4ba8      	ldr	r3, [pc, #672]	@ (8011ab0 <SVCCTL_App_Notification+0x2ec>)
 8011810:	2200      	movs	r2, #0
 8011812:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 8011816:	48a7      	ldr	r0, [pc, #668]	@ (8011ab4 <SVCCTL_App_Notification+0x2f0>)
 8011818:	f002 faf2 	bl	8013e00 <puts>
                    p_disconnection_complete_event->Connection_Handle,
 801181c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801181e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8011822:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8011824:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 8011826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011828:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 801182a:	461a      	mov	r2, r3
 801182c:	48a2      	ldr	r0, [pc, #648]	@ (8011ab8 <SVCCTL_App_Notification+0x2f4>)
 801182e:	f002 fa77 	bl	8013d20 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 8011832:	2001      	movs	r0, #1
 8011834:	f000 fb84 	bl	8011f40 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8011838:	4ba0      	ldr	r3, [pc, #640]	@ (8011abc <SVCCTL_App_Notification+0x2f8>)
 801183a:	2201      	movs	r2, #1
 801183c:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 801183e:	4b9c      	ldr	r3, [pc, #624]	@ (8011ab0 <SVCCTL_App_Notification+0x2ec>)
 8011840:	8ada      	ldrh	r2, [r3, #22]
 8011842:	4b9e      	ldr	r3, [pc, #632]	@ (8011abc <SVCCTL_App_Notification+0x2f8>)
 8011844:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8011846:	489d      	ldr	r0, [pc, #628]	@ (8011abc <SVCCTL_App_Notification+0x2f8>)
 8011848:	f000 fe52 	bl	80124f0 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 801184c:	e19c      	b.n	8011b88 <SVCCTL_App_Notification+0x3c4>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 801184e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011850:	3302      	adds	r3, #2
 8011852:	64fb      	str	r3, [r7, #76]	@ 0x4c
      switch (p_meta_evt->subevent)
 8011854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011856:	781b      	ldrb	r3, [r3, #0]
 8011858:	2b01      	cmp	r3, #1
 801185a:	d02e      	beq.n	80118ba <SVCCTL_App_Notification+0xf6>
 801185c:	2b03      	cmp	r3, #3
 801185e:	f040 8095 	bne.w	801198c <SVCCTL_App_Notification+0x1c8>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 8011862:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011864:	3301      	adds	r3, #1
 8011866:	64bb      	str	r3, [r7, #72]	@ 0x48
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 8011868:	4895      	ldr	r0, [pc, #596]	@ (8011ac0 <SVCCTL_App_Notification+0x2fc>)
 801186a:	f002 fac9 	bl	8013e00 <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 801186e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011870:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8011874:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8011876:	4618      	mov	r0, r3
 8011878:	f7ee ff56 	bl	8000728 <__aeabi_i2d>
 801187c:	f04f 0200 	mov.w	r2, #0
 8011880:	4b90      	ldr	r3, [pc, #576]	@ (8011ac4 <SVCCTL_App_Notification+0x300>)
 8011882:	f7ee fcd5 	bl	8000230 <__aeabi_dmul>
 8011886:	4602      	mov	r2, r0
 8011888:	460b      	mov	r3, r1
 801188a:	4610      	mov	r0, r2
 801188c:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 801188e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011890:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8011894:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8011896:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 8011898:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801189a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 801189e:	b29b      	uxth	r3, r3
 80118a0:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80118a2:	4613      	mov	r3, r2
 80118a4:	009b      	lsls	r3, r3, #2
 80118a6:	4413      	add	r3, r2
 80118a8:	005b      	lsls	r3, r3, #1
 80118aa:	9301      	str	r3, [sp, #4]
 80118ac:	9400      	str	r4, [sp, #0]
 80118ae:	4602      	mov	r2, r0
 80118b0:	460b      	mov	r3, r1
 80118b2:	4885      	ldr	r0, [pc, #532]	@ (8011ac8 <SVCCTL_App_Notification+0x304>)
 80118b4:	f002 fa34 	bl	8013d20 <iprintf>
          break;
 80118b8:	e069      	b.n	801198e <SVCCTL_App_Notification+0x1ca>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80118ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118bc:	3301      	adds	r3, #1
 80118be:	647b      	str	r3, [r7, #68]	@ 0x44
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 80118c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118c2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80118c6:	b29b      	uxth	r3, r3
 80118c8:	4619      	mov	r1, r3
 80118ca:	4880      	ldr	r0, [pc, #512]	@ (8011acc <SVCCTL_App_Notification+0x308>)
 80118cc:	f002 fa28 	bl	8013d20 <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 80118d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118d2:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80118d4:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 80118d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118d8:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80118da:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 80118dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118de:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80118e0:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 80118e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118e4:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80118e6:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 80118e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118ea:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80118ec:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 80118ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118f0:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80118f2:	9302      	str	r3, [sp, #8]
 80118f4:	9101      	str	r1, [sp, #4]
 80118f6:	9200      	str	r2, [sp, #0]
 80118f8:	462b      	mov	r3, r5
 80118fa:	4622      	mov	r2, r4
 80118fc:	4601      	mov	r1, r0
 80118fe:	4874      	ldr	r0, [pc, #464]	@ (8011ad0 <SVCCTL_App_Notification+0x30c>)
 8011900:	f002 fa0e 	bl	8013d20 <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 8011904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011906:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 801190a:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 801190c:	4618      	mov	r0, r3
 801190e:	f7ee ff0b 	bl	8000728 <__aeabi_i2d>
 8011912:	f04f 0200 	mov.w	r2, #0
 8011916:	4b6b      	ldr	r3, [pc, #428]	@ (8011ac4 <SVCCTL_App_Notification+0x300>)
 8011918:	f7ee fc8a 	bl	8000230 <__aeabi_dmul>
 801191c:	4602      	mov	r2, r0
 801191e:	460b      	mov	r3, r1
 8011920:	4610      	mov	r0, r2
 8011922:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 8011924:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011926:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 801192a:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 801192c:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 801192e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011930:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8011934:	b29b      	uxth	r3, r3
 8011936:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8011938:	4613      	mov	r3, r2
 801193a:	009b      	lsls	r3, r3, #2
 801193c:	4413      	add	r3, r2
 801193e:	005b      	lsls	r3, r3, #1
 8011940:	9301      	str	r3, [sp, #4]
 8011942:	9400      	str	r4, [sp, #0]
 8011944:	4602      	mov	r2, r0
 8011946:	460b      	mov	r3, r1
 8011948:	485f      	ldr	r0, [pc, #380]	@ (8011ac8 <SVCCTL_App_Notification+0x304>)
 801194a:	f002 f9e9 	bl	8013d20 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 801194e:	4b58      	ldr	r3, [pc, #352]	@ (8011ab0 <SVCCTL_App_Notification+0x2ec>)
 8011950:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8011954:	2b04      	cmp	r3, #4
 8011956:	d104      	bne.n	8011962 <SVCCTL_App_Notification+0x19e>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8011958:	4b55      	ldr	r3, [pc, #340]	@ (8011ab0 <SVCCTL_App_Notification+0x2ec>)
 801195a:	2206      	movs	r2, #6
 801195c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8011960:	e003      	b.n	801196a <SVCCTL_App_Notification+0x1a6>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8011962:	4b53      	ldr	r3, [pc, #332]	@ (8011ab0 <SVCCTL_App_Notification+0x2ec>)
 8011964:	2205      	movs	r2, #5
 8011966:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 801196a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801196c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8011970:	b29a      	uxth	r2, r3
 8011972:	4b4f      	ldr	r3, [pc, #316]	@ (8011ab0 <SVCCTL_App_Notification+0x2ec>)
 8011974:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8011976:	4b51      	ldr	r3, [pc, #324]	@ (8011abc <SVCCTL_App_Notification+0x2f8>)
 8011978:	2200      	movs	r2, #0
 801197a:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 801197c:	4b4c      	ldr	r3, [pc, #304]	@ (8011ab0 <SVCCTL_App_Notification+0x2ec>)
 801197e:	8ada      	ldrh	r2, [r3, #22]
 8011980:	4b4e      	ldr	r3, [pc, #312]	@ (8011abc <SVCCTL_App_Notification+0x2f8>)
 8011982:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8011984:	484d      	ldr	r0, [pc, #308]	@ (8011abc <SVCCTL_App_Notification+0x2f8>)
 8011986:	f000 fdb3 	bl	80124f0 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 801198a:	e000      	b.n	801198e <SVCCTL_App_Notification+0x1ca>
          break;
 801198c:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 801198e:	e0fb      	b.n	8011b88 <SVCCTL_App_Notification+0x3c4>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8011990:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011992:	3302      	adds	r3, #2
 8011994:	657b      	str	r3, [r7, #84]	@ 0x54
      switch (p_blecore_evt->ecode)
 8011996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011998:	881b      	ldrh	r3, [r3, #0]
 801199a:	b29b      	uxth	r3, r3
 801199c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80119a0:	d02e      	beq.n	8011a00 <SVCCTL_App_Notification+0x23c>
 80119a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80119a6:	f300 80ee 	bgt.w	8011b86 <SVCCTL_App_Notification+0x3c2>
 80119aa:	2b04      	cmp	r3, #4
 80119ac:	d030      	beq.n	8011a10 <SVCCTL_App_Notification+0x24c>
 80119ae:	2b04      	cmp	r3, #4
 80119b0:	f2c0 80e9 	blt.w	8011b86 <SVCCTL_App_Notification+0x3c2>
 80119b4:	f240 420a 	movw	r2, #1034	@ 0x40a
 80119b8:	4293      	cmp	r3, r2
 80119ba:	f300 80e4 	bgt.w	8011b86 <SVCCTL_App_Notification+0x3c2>
 80119be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80119c2:	f340 80e0 	ble.w	8011b86 <SVCCTL_App_Notification+0x3c2>
 80119c6:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 80119ca:	2b09      	cmp	r3, #9
 80119cc:	f200 80db 	bhi.w	8011b86 <SVCCTL_App_Notification+0x3c2>
 80119d0:	a201      	add	r2, pc, #4	@ (adr r2, 80119d8 <SVCCTL_App_Notification+0x214>)
 80119d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119d6:	bf00      	nop
 80119d8:	08011b09 	.word	0x08011b09
 80119dc:	08011a23 	.word	0x08011a23
 80119e0:	08011b87 	.word	0x08011b87
 80119e4:	08011b87 	.word	0x08011b87
 80119e8:	08011b87 	.word	0x08011b87
 80119ec:	08011b87 	.word	0x08011b87
 80119f0:	08011a09 	.word	0x08011a09
 80119f4:	08011b87 	.word	0x08011b87
 80119f8:	08011a59 	.word	0x08011a59
 80119fc:	08011a1b 	.word	0x08011a1b
          mutex = 1;
 8011a00:	4b34      	ldr	r3, [pc, #208]	@ (8011ad4 <SVCCTL_App_Notification+0x310>)
 8011a02:	2201      	movs	r2, #1
 8011a04:	701a      	strb	r2, [r3, #0]
          break;
 8011a06:	e0bb      	b.n	8011b80 <SVCCTL_App_Notification+0x3bc>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 8011a08:	4833      	ldr	r0, [pc, #204]	@ (8011ad8 <SVCCTL_App_Notification+0x314>)
 8011a0a:	f002 f989 	bl	8013d20 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8011a0e:	e0b7      	b.n	8011b80 <SVCCTL_App_Notification+0x3bc>
          HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8011a10:	2101      	movs	r1, #1
 8011a12:	4832      	ldr	r0, [pc, #200]	@ (8011adc <SVCCTL_App_Notification+0x318>)
 8011a14:	f7f2 faa6 	bl	8003f64 <HAL_GPIO_TogglePin>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8011a18:	e0b2      	b.n	8011b80 <SVCCTL_App_Notification+0x3bc>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 8011a1a:	4831      	ldr	r0, [pc, #196]	@ (8011ae0 <SVCCTL_App_Notification+0x31c>)
 8011a1c:	f002 f9f0 	bl	8013e00 <puts>
          break;
 8011a20:	e0ae      	b.n	8011b80 <SVCCTL_App_Notification+0x3bc>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 8011a22:	4830      	ldr	r0, [pc, #192]	@ (8011ae4 <SVCCTL_App_Notification+0x320>)
 8011a24:	f002 f9ec 	bl	8013e00 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8011a28:	4b21      	ldr	r3, [pc, #132]	@ (8011ab0 <SVCCTL_App_Notification+0x2ec>)
 8011a2a:	8adb      	ldrh	r3, [r3, #22]
 8011a2c:	492e      	ldr	r1, [pc, #184]	@ (8011ae8 <SVCCTL_App_Notification+0x324>)
 8011a2e:	4618      	mov	r0, r3
 8011a30:	f7fd f8d5 	bl	800ebde <aci_gap_pass_key_resp>
 8011a34:	4603      	mov	r3, r0
 8011a36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
          if (ret != BLE_STATUS_SUCCESS)
 8011a3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d006      	beq.n	8011a50 <SVCCTL_App_Notification+0x28c>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 8011a42:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011a46:	4619      	mov	r1, r3
 8011a48:	4828      	ldr	r0, [pc, #160]	@ (8011aec <SVCCTL_App_Notification+0x328>)
 8011a4a:	f002 f969 	bl	8013d20 <iprintf>
          break;
 8011a4e:	e097      	b.n	8011b80 <SVCCTL_App_Notification+0x3bc>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 8011a50:	4827      	ldr	r0, [pc, #156]	@ (8011af0 <SVCCTL_App_Notification+0x32c>)
 8011a52:	f002 f9d5 	bl	8013e00 <puts>
          break;
 8011a56:	e093      	b.n	8011b80 <SVCCTL_App_Notification+0x3bc>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 8011a58:	4826      	ldr	r0, [pc, #152]	@ (8011af4 <SVCCTL_App_Notification+0x330>)
 8011a5a:	f002 f9d1 	bl	8013e00 <puts>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 8011a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a60:	3302      	adds	r3, #2
          APP_DBG_MSG("     - numeric_value = %ld\n",
 8011a62:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8011a66:	4619      	mov	r1, r3
 8011a68:	4823      	ldr	r0, [pc, #140]	@ (8011af8 <SVCCTL_App_Notification+0x334>)
 8011a6a:	f002 f959 	bl	8013d20 <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 8011a6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a70:	3302      	adds	r3, #2
          APP_DBG_MSG("     - Hex_value = %lx\n",
 8011a72:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8011a76:	4619      	mov	r1, r3
 8011a78:	4820      	ldr	r0, [pc, #128]	@ (8011afc <SVCCTL_App_Notification+0x338>)
 8011a7a:	f002 f951 	bl	8013d20 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8011a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8011ab0 <SVCCTL_App_Notification+0x2ec>)
 8011a80:	8adb      	ldrh	r3, [r3, #22]
 8011a82:	2101      	movs	r1, #1
 8011a84:	4618      	mov	r0, r3
 8011a86:	f7fd fa54 	bl	800ef32 <aci_gap_numeric_comparison_value_confirm_yesno>
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
          if (ret != BLE_STATUS_SUCCESS)
 8011a90:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d006      	beq.n	8011aa6 <SVCCTL_App_Notification+0x2e2>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 8011a98:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011a9c:	4619      	mov	r1, r3
 8011a9e:	4818      	ldr	r0, [pc, #96]	@ (8011b00 <SVCCTL_App_Notification+0x33c>)
 8011aa0:	f002 f93e 	bl	8013d20 <iprintf>
          break;
 8011aa4:	e06c      	b.n	8011b80 <SVCCTL_App_Notification+0x3bc>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 8011aa6:	4817      	ldr	r0, [pc, #92]	@ (8011b04 <SVCCTL_App_Notification+0x340>)
 8011aa8:	f002 f9aa 	bl	8013e00 <puts>
          break;
 8011aac:	e068      	b.n	8011b80 <SVCCTL_App_Notification+0x3bc>
 8011aae:	bf00      	nop
 8011ab0:	200015d4 	.word	0x200015d4
 8011ab4:	08015350 	.word	0x08015350
 8011ab8:	0801537c 	.word	0x0801537c
 8011abc:	20001658 	.word	0x20001658
 8011ac0:	080153b8 	.word	0x080153b8
 8011ac4:	3ff40000 	.word	0x3ff40000
 8011ac8:	080153ec 	.word	0x080153ec
 8011acc:	08015458 	.word	0x08015458
 8011ad0:	080154a0 	.word	0x080154a0
 8011ad4:	2000165d 	.word	0x2000165d
 8011ad8:	080154f0 	.word	0x080154f0
 8011adc:	48000400 	.word	0x48000400
 8011ae0:	08015518 	.word	0x08015518
 8011ae4:	08015548 	.word	0x08015548
 8011ae8:	0001b207 	.word	0x0001b207
 8011aec:	08015570 	.word	0x08015570
 8011af0:	080155a4 	.word	0x080155a4
 8011af4:	080155cc 	.word	0x080155cc
 8011af8:	08015600 	.word	0x08015600
 8011afc:	0801561c 	.word	0x0801561c
 8011b00:	08015634 	.word	0x08015634
 8011b04:	08015684 	.word	0x08015684
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8011b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011b0a:	3302      	adds	r3, #2
 8011b0c:	653b      	str	r3, [r7, #80]	@ 0x50
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 8011b0e:	4821      	ldr	r0, [pc, #132]	@ (8011b94 <SVCCTL_App_Notification+0x3d0>)
 8011b10:	f002 f976 	bl	8013e00 <puts>
          if (p_pairing_complete->Status != 0)
 8011b14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b16:	789b      	ldrb	r3, [r3, #2]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d009      	beq.n	8011b30 <SVCCTL_App_Notification+0x36c>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 8011b1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b1e:	789b      	ldrb	r3, [r3, #2]
 8011b20:	4619      	mov	r1, r3
 8011b22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b24:	78db      	ldrb	r3, [r3, #3]
 8011b26:	461a      	mov	r2, r3
 8011b28:	481b      	ldr	r0, [pc, #108]	@ (8011b98 <SVCCTL_App_Notification+0x3d4>)
 8011b2a:	f002 f8f9 	bl	8013d20 <iprintf>
 8011b2e:	e002      	b.n	8011b36 <SVCCTL_App_Notification+0x372>
            APP_DBG_MSG("     - Pairing Success\n");
 8011b30:	481a      	ldr	r0, [pc, #104]	@ (8011b9c <SVCCTL_App_Notification+0x3d8>)
 8011b32:	f002 f965 	bl	8013e00 <puts>
          APP_DBG_MSG("\n");
 8011b36:	200a      	movs	r0, #10
 8011b38:	f002 f904 	bl	8013d44 <putchar>
          if (p_pairing_complete->Status != 0)
 8011b3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b3e:	789b      	ldrb	r3, [r3, #2]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d01c      	beq.n	8011b7e <SVCCTL_App_Notification+0x3ba>
            uint8_t *p_reasons[] = { "OK",
 8011b44:	4b16      	ldr	r3, [pc, #88]	@ (8011ba0 <SVCCTL_App_Notification+0x3dc>)
 8011b46:	f107 040c 	add.w	r4, r7, #12
 8011b4a:	461d      	mov	r5, r3
 8011b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b58:	682b      	ldr	r3, [r5, #0]
 8011b5a:	6023      	str	r3, [r4, #0]
                        p_reasons[p_pairing_complete->Reason]);
 8011b5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b5e:	78db      	ldrb	r3, [r3, #3]
            APP_DBG_MSG("Pairing failed due to %s. Disconnecting with client...\r\n",
 8011b60:	009b      	lsls	r3, r3, #2
 8011b62:	3360      	adds	r3, #96	@ 0x60
 8011b64:	443b      	add	r3, r7
 8011b66:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8011b6a:	4619      	mov	r1, r3
 8011b6c:	480d      	ldr	r0, [pc, #52]	@ (8011ba4 <SVCCTL_App_Notification+0x3e0>)
 8011b6e:	f002 f8d7 	bl	8013d20 <iprintf>
            hci_disconnect(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 0x3B);
 8011b72:	4b0d      	ldr	r3, [pc, #52]	@ (8011ba8 <SVCCTL_App_Notification+0x3e4>)
 8011b74:	8adb      	ldrh	r3, [r3, #22]
 8011b76:	213b      	movs	r1, #59	@ 0x3b
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f7fd fed7 	bl	800f92c <hci_disconnect>
          break;
 8011b7e:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8011b80:	e001      	b.n	8011b86 <SVCCTL_App_Notification+0x3c2>
      break;
 8011b82:	bf00      	nop
 8011b84:	e000      	b.n	8011b88 <SVCCTL_App_Notification+0x3c4>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8011b86:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8011b88:	2301      	movs	r3, #1
}
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	3760      	adds	r7, #96	@ 0x60
 8011b8e:	46bd      	mov	sp, r7
 8011b90:	bdb0      	pop	{r4, r5, r7, pc}
 8011b92:	bf00      	nop
 8011b94:	080156cc 	.word	0x080156cc
 8011b98:	080156f8 	.word	0x080156f8
 8011b9c:	08015734 	.word	0x08015734
 8011ba0:	080158a8 	.word	0x080158a8
 8011ba4:	0801574c 	.word	0x0801574c
 8011ba8:	200015d4 	.word	0x200015d4

08011bac <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b082      	sub	sp, #8
 8011bb0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8011bb2:	4b06      	ldr	r3, [pc, #24]	@ (8011bcc <Ble_Tl_Init+0x20>)
 8011bb4:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8011bb6:	4b06      	ldr	r3, [pc, #24]	@ (8011bd0 <Ble_Tl_Init+0x24>)
 8011bb8:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8011bba:	463b      	mov	r3, r7
 8011bbc:	4619      	mov	r1, r3
 8011bbe:	4805      	ldr	r0, [pc, #20]	@ (8011bd4 <Ble_Tl_Init+0x28>)
 8011bc0:	f7fe fa8e 	bl	80100e0 <hci_init>

  return;
 8011bc4:	bf00      	nop
}
 8011bc6:	3708      	adds	r7, #8
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd80      	pop	{r7, pc}
 8011bcc:	200300d8 	.word	0x200300d8
 8011bd0:	08012349 	.word	0x08012349
 8011bd4:	08012311 	.word	0x08012311

08011bd8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8011bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bda:	b08f      	sub	sp, #60	@ 0x3c
 8011bdc:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8011bde:	2300      	movs	r3, #0
 8011be0:	80bb      	strh	r3, [r7, #4]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8011be2:	2392      	movs	r3, #146	@ 0x92
 8011be4:	76fb      	strb	r3, [r7, #27]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 8011be6:	48a6      	ldr	r0, [pc, #664]	@ (8011e80 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 8011be8:	f002 f90a 	bl	8013e00 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8011bec:	f7fd ff08 	bl	800fa00 <hci_reset>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	76fb      	strb	r3, [r7, #27]
  if (ret != BLE_STATUS_SUCCESS)
 8011bf4:	7efb      	ldrb	r3, [r7, #27]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d005      	beq.n	8011c06 <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 8011bfa:	7efb      	ldrb	r3, [r7, #27]
 8011bfc:	4619      	mov	r1, r3
 8011bfe:	48a1      	ldr	r0, [pc, #644]	@ (8011e84 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 8011c00:	f002 f88e 	bl	8013d20 <iprintf>
 8011c04:	e002      	b.n	8011c0c <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 8011c06:	48a0      	ldr	r0, [pc, #640]	@ (8011e88 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8011c08:	f002 f8fa 	bl	8013e00 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8011c0c:	f000 f9e8 	bl	8011fe0 <BleGetBdAddress>
 8011c10:	6178      	str	r0, [r7, #20]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8011c12:	697a      	ldr	r2, [r7, #20]
 8011c14:	2106      	movs	r1, #6
 8011c16:	2000      	movs	r0, #0
 8011c18:	f7fd fd48 	bl	800f6ac <aci_hal_write_config_data>
 8011c1c:	4603      	mov	r3, r0
 8011c1e:	76fb      	strb	r3, [r7, #27]
  if (ret != BLE_STATUS_SUCCESS)
 8011c20:	7efb      	ldrb	r3, [r7, #27]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d005      	beq.n	8011c32 <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8011c26:	7efb      	ldrb	r3, [r7, #27]
 8011c28:	4619      	mov	r1, r3
 8011c2a:	4898      	ldr	r0, [pc, #608]	@ (8011e8c <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 8011c2c:	f002 f878 	bl	8013d20 <iprintf>
 8011c30:	e021      	b.n	8011c76 <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 8011c32:	4897      	ldr	r0, [pc, #604]	@ (8011e90 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 8011c34:	f002 f8e4 	bl	8013e00 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8011c38:	697b      	ldr	r3, [r7, #20]
 8011c3a:	3305      	adds	r3, #5
 8011c3c:	781b      	ldrb	r3, [r3, #0]
 8011c3e:	4618      	mov	r0, r3
 8011c40:	697b      	ldr	r3, [r7, #20]
 8011c42:	3304      	adds	r3, #4
 8011c44:	781b      	ldrb	r3, [r3, #0]
 8011c46:	461c      	mov	r4, r3
 8011c48:	697b      	ldr	r3, [r7, #20]
 8011c4a:	3303      	adds	r3, #3
 8011c4c:	781b      	ldrb	r3, [r3, #0]
 8011c4e:	461d      	mov	r5, r3
 8011c50:	697b      	ldr	r3, [r7, #20]
 8011c52:	3302      	adds	r3, #2
 8011c54:	781b      	ldrb	r3, [r3, #0]
 8011c56:	461a      	mov	r2, r3
 8011c58:	697b      	ldr	r3, [r7, #20]
 8011c5a:	3301      	adds	r3, #1
 8011c5c:	781b      	ldrb	r3, [r3, #0]
 8011c5e:	4619      	mov	r1, r3
 8011c60:	697b      	ldr	r3, [r7, #20]
 8011c62:	781b      	ldrb	r3, [r3, #0]
 8011c64:	9302      	str	r3, [sp, #8]
 8011c66:	9101      	str	r1, [sp, #4]
 8011c68:	9200      	str	r2, [sp, #0]
 8011c6a:	462b      	mov	r3, r5
 8011c6c:	4622      	mov	r2, r4
 8011c6e:	4601      	mov	r1, r0
 8011c70:	4888      	ldr	r0, [pc, #544]	@ (8011e94 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8011c72:	f002 f855 	bl	8013d20 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8011c76:	4a88      	ldr	r2, [pc, #544]	@ (8011e98 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 8011c78:	2110      	movs	r1, #16
 8011c7a:	2018      	movs	r0, #24
 8011c7c:	f7fd fd16 	bl	800f6ac <aci_hal_write_config_data>
 8011c80:	4603      	mov	r3, r0
 8011c82:	76fb      	strb	r3, [r7, #27]
  if (ret != BLE_STATUS_SUCCESS)
 8011c84:	7efb      	ldrb	r3, [r7, #27]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d005      	beq.n	8011c96 <Ble_Hci_Gap_Gatt_Init+0xbe>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 8011c8a:	7efb      	ldrb	r3, [r7, #27]
 8011c8c:	4619      	mov	r1, r3
 8011c8e:	4883      	ldr	r0, [pc, #524]	@ (8011e9c <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8011c90:	f002 f846 	bl	8013d20 <iprintf>
 8011c94:	e002      	b.n	8011c9c <Ble_Hci_Gap_Gatt_Init+0xc4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 8011c96:	4882      	ldr	r0, [pc, #520]	@ (8011ea0 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 8011c98:	f002 f8b2 	bl	8013e00 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8011c9c:	4a81      	ldr	r2, [pc, #516]	@ (8011ea4 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8011c9e:	2110      	movs	r1, #16
 8011ca0:	2008      	movs	r0, #8
 8011ca2:	f7fd fd03 	bl	800f6ac <aci_hal_write_config_data>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	76fb      	strb	r3, [r7, #27]
  if (ret != BLE_STATUS_SUCCESS)
 8011caa:	7efb      	ldrb	r3, [r7, #27]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d005      	beq.n	8011cbc <Ble_Hci_Gap_Gatt_Init+0xe4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8011cb0:	7efb      	ldrb	r3, [r7, #27]
 8011cb2:	4619      	mov	r1, r3
 8011cb4:	487c      	ldr	r0, [pc, #496]	@ (8011ea8 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 8011cb6:	f002 f833 	bl	8013d20 <iprintf>
 8011cba:	e002      	b.n	8011cc2 <Ble_Hci_Gap_Gatt_Init+0xea>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8011cbc:	487b      	ldr	r0, [pc, #492]	@ (8011eac <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 8011cbe:	f002 f89f 	bl	8013e00 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8011cc2:	2118      	movs	r1, #24
 8011cc4:	2001      	movs	r0, #1
 8011cc6:	f7fd fd76 	bl	800f7b6 <aci_hal_set_tx_power_level>
 8011cca:	4603      	mov	r3, r0
 8011ccc:	76fb      	strb	r3, [r7, #27]
  if (ret != BLE_STATUS_SUCCESS)
 8011cce:	7efb      	ldrb	r3, [r7, #27]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d005      	beq.n	8011ce0 <Ble_Hci_Gap_Gatt_Init+0x108>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 8011cd4:	7efb      	ldrb	r3, [r7, #27]
 8011cd6:	4619      	mov	r1, r3
 8011cd8:	4875      	ldr	r0, [pc, #468]	@ (8011eb0 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 8011cda:	f002 f821 	bl	8013d20 <iprintf>
 8011cde:	e002      	b.n	8011ce6 <Ble_Hci_Gap_Gatt_Init+0x10e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 8011ce0:	4874      	ldr	r0, [pc, #464]	@ (8011eb4 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8011ce2:	f002 f88d 	bl	8013e00 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8011ce6:	f7fd fa35 	bl	800f154 <aci_gatt_init>
 8011cea:	4603      	mov	r3, r0
 8011cec:	76fb      	strb	r3, [r7, #27]
  if (ret != BLE_STATUS_SUCCESS)
 8011cee:	7efb      	ldrb	r3, [r7, #27]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d005      	beq.n	8011d00 <Ble_Hci_Gap_Gatt_Init+0x128>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 8011cf4:	7efb      	ldrb	r3, [r7, #27]
 8011cf6:	4619      	mov	r1, r3
 8011cf8:	486f      	ldr	r0, [pc, #444]	@ (8011eb8 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 8011cfa:	f002 f811 	bl	8013d20 <iprintf>
 8011cfe:	e002      	b.n	8011d06 <Ble_Hci_Gap_Gatt_Init+0x12e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8011d00:	486e      	ldr	r0, [pc, #440]	@ (8011ebc <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 8011d02:	f002 f87d 	bl	8013e00 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8011d06:	2300      	movs	r3, #0
 8011d08:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8011d0a:	7cfb      	ldrb	r3, [r7, #19]
 8011d0c:	f043 0301 	orr.w	r3, r3, #1
 8011d10:	74fb      	strb	r3, [r7, #19]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8011d12:	7cfb      	ldrb	r3, [r7, #19]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d02d      	beq.n	8011d74 <Ble_Hci_Gap_Gatt_Init+0x19c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8011d18:	4b69      	ldr	r3, [pc, #420]	@ (8011ec0 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 8011d1a:	60fb      	str	r3, [r7, #12]
    ret = aci_gap_init(role,
 8011d1c:	f107 020a 	add.w	r2, r7, #10
 8011d20:	7cf8      	ldrb	r0, [r7, #19]
 8011d22:	1dbb      	adds	r3, r7, #6
 8011d24:	9301      	str	r3, [sp, #4]
 8011d26:	f107 0308 	add.w	r3, r7, #8
 8011d2a:	9300      	str	r3, [sp, #0]
 8011d2c:	4613      	mov	r3, r2
 8011d2e:	2206      	movs	r2, #6
 8011d30:	2100      	movs	r1, #0
 8011d32:	f7fc ffbb 	bl	800ecac <aci_gap_init>
 8011d36:	4603      	mov	r3, r0
 8011d38:	76fb      	strb	r3, [r7, #27]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 8011d3a:	7efb      	ldrb	r3, [r7, #27]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d005      	beq.n	8011d4c <Ble_Hci_Gap_Gatt_Init+0x174>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8011d40:	7efb      	ldrb	r3, [r7, #27]
 8011d42:	4619      	mov	r1, r3
 8011d44:	485f      	ldr	r0, [pc, #380]	@ (8011ec4 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8011d46:	f001 ffeb 	bl	8013d20 <iprintf>
 8011d4a:	e002      	b.n	8011d52 <Ble_Hci_Gap_Gatt_Init+0x17a>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 8011d4c:	485e      	ldr	r0, [pc, #376]	@ (8011ec8 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 8011d4e:	f002 f857 	bl	8013e00 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8011d52:	897c      	ldrh	r4, [r7, #10]
 8011d54:	893d      	ldrh	r5, [r7, #8]
 8011d56:	68f8      	ldr	r0, [r7, #12]
 8011d58:	f7ee fa12 	bl	8000180 <strlen>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	b2da      	uxtb	r2, r3
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	9300      	str	r3, [sp, #0]
 8011d64:	4613      	mov	r3, r2
 8011d66:	2200      	movs	r2, #0
 8011d68:	4629      	mov	r1, r5
 8011d6a:	4620      	mov	r0, r4
 8011d6c:	f7fd fbf5 	bl	800f55a <aci_gatt_update_char_value>
 8011d70:	4603      	mov	r3, r0
 8011d72:	76fb      	strb	r3, [r7, #27]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8011d74:	8978      	ldrh	r0, [r7, #10]
 8011d76:	88f9      	ldrh	r1, [r7, #6]
 8011d78:	1d3b      	adds	r3, r7, #4
 8011d7a:	9300      	str	r3, [sp, #0]
 8011d7c:	2302      	movs	r3, #2
 8011d7e:	2200      	movs	r2, #0
 8011d80:	f7fd fbeb 	bl	800f55a <aci_gatt_update_char_value>
 8011d84:	4603      	mov	r3, r0
 8011d86:	76fb      	strb	r3, [r7, #27]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8011d88:	2202      	movs	r2, #2
 8011d8a:	2102      	movs	r1, #2
 8011d8c:	2000      	movs	r0, #0
 8011d8e:	f7fd fe5b 	bl	800fa48 <hci_le_set_default_phy>
 8011d92:	4603      	mov	r3, r0
 8011d94:	76fb      	strb	r3, [r7, #27]
  if (ret != BLE_STATUS_SUCCESS)
 8011d96:	7efb      	ldrb	r3, [r7, #27]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d005      	beq.n	8011da8 <Ble_Hci_Gap_Gatt_Init+0x1d0>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 8011d9c:	7efb      	ldrb	r3, [r7, #27]
 8011d9e:	4619      	mov	r1, r3
 8011da0:	484a      	ldr	r0, [pc, #296]	@ (8011ecc <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 8011da2:	f001 ffbd 	bl	8013d20 <iprintf>
 8011da6:	e002      	b.n	8011dae <Ble_Hci_Gap_Gatt_Init+0x1d6>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 8011da8:	4849      	ldr	r0, [pc, #292]	@ (8011ed0 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8011daa:	f002 f829 	bl	8013e00 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8011dae:	4b49      	ldr	r3, [pc, #292]	@ (8011ed4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8011db0:	2204      	movs	r2, #4
 8011db2:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8011db4:	4b47      	ldr	r3, [pc, #284]	@ (8011ed4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8011db6:	781b      	ldrb	r3, [r3, #0]
 8011db8:	4618      	mov	r0, r3
 8011dba:	f7fc fdf8 	bl	800e9ae <aci_gap_set_io_capability>
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	76fb      	strb	r3, [r7, #27]
  if (ret != BLE_STATUS_SUCCESS)
 8011dc2:	7efb      	ldrb	r3, [r7, #27]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d005      	beq.n	8011dd4 <Ble_Hci_Gap_Gatt_Init+0x1fc>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 8011dc8:	7efb      	ldrb	r3, [r7, #27]
 8011dca:	4619      	mov	r1, r3
 8011dcc:	4842      	ldr	r0, [pc, #264]	@ (8011ed8 <Ble_Hci_Gap_Gatt_Init+0x300>)
 8011dce:	f001 ffa7 	bl	8013d20 <iprintf>
 8011dd2:	e002      	b.n	8011dda <Ble_Hci_Gap_Gatt_Init+0x202>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 8011dd4:	4841      	ldr	r0, [pc, #260]	@ (8011edc <Ble_Hci_Gap_Gatt_Init+0x304>)
 8011dd6:	f002 f813 	bl	8013e00 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8011dda:	4b3e      	ldr	r3, [pc, #248]	@ (8011ed4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8011ddc:	2201      	movs	r2, #1
 8011dde:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8011de0:	4b3c      	ldr	r3, [pc, #240]	@ (8011ed4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8011de2:	2208      	movs	r2, #8
 8011de4:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8011de6:	4b3b      	ldr	r3, [pc, #236]	@ (8011ed4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8011de8:	2210      	movs	r2, #16
 8011dea:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8011dec:	4b39      	ldr	r3, [pc, #228]	@ (8011ed4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8011dee:	2200      	movs	r2, #0
 8011df0:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8011df2:	4b38      	ldr	r3, [pc, #224]	@ (8011ed4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8011df4:	4a3a      	ldr	r2, [pc, #232]	@ (8011ee0 <Ble_Hci_Gap_Gatt_Init+0x308>)
 8011df6:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8011df8:	4b36      	ldr	r3, [pc, #216]	@ (8011ed4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8011dfa:	2201      	movs	r2, #1
 8011dfc:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/
#if (CFG_BLE_ADDRESS_TYPE == PUBLIC_ADDR)
  for(uint32_t k = 0; k < BD_ADDR_SIZE_LOCAL; k++)
 8011dfe:	2300      	movs	r3, #0
 8011e00:	61fb      	str	r3, [r7, #28]
 8011e02:	e00c      	b.n	8011e1e <Ble_Hci_Gap_Gatt_Init+0x246>
  {
    a_AdvData[sizeof(a_AdvData) - BD_ADDR_SIZE_LOCAL + k] = p_bd_addr[BD_ADDR_SIZE_LOCAL - 1 - k];
 8011e04:	69fb      	ldr	r3, [r7, #28]
 8011e06:	f1c3 0305 	rsb	r3, r3, #5
 8011e0a:	697a      	ldr	r2, [r7, #20]
 8011e0c:	441a      	add	r2, r3
 8011e0e:	69fb      	ldr	r3, [r7, #28]
 8011e10:	3313      	adds	r3, #19
 8011e12:	7811      	ldrb	r1, [r2, #0]
 8011e14:	4a33      	ldr	r2, [pc, #204]	@ (8011ee4 <Ble_Hci_Gap_Gatt_Init+0x30c>)
 8011e16:	54d1      	strb	r1, [r2, r3]
  for(uint32_t k = 0; k < BD_ADDR_SIZE_LOCAL; k++)
 8011e18:	69fb      	ldr	r3, [r7, #28]
 8011e1a:	3301      	adds	r3, #1
 8011e1c:	61fb      	str	r3, [r7, #28]
 8011e1e:	69fb      	ldr	r3, [r7, #28]
 8011e20:	2b05      	cmp	r3, #5
 8011e22:	d9ef      	bls.n	8011e04 <Ble_Hci_Gap_Gatt_Init+0x22c>
  }
#endif // CFG_BLE_ADDRESS_TYPE
  
  memcpy(m_oob_local_data.address, p_bd_addr, sizeof(m_oob_local_data.address));
 8011e24:	4b30      	ldr	r3, [pc, #192]	@ (8011ee8 <Ble_Hci_Gap_Gatt_Init+0x310>)
 8011e26:	697a      	ldr	r2, [r7, #20]
 8011e28:	3301      	adds	r3, #1
 8011e2a:	6811      	ldr	r1, [r2, #0]
 8011e2c:	6019      	str	r1, [r3, #0]
 8011e2e:	8892      	ldrh	r2, [r2, #4]
 8011e30:	809a      	strh	r2, [r3, #4]
  m_oob_local_data.address_type = CFG_BLE_ADDRESS_TYPE;
 8011e32:	4b2d      	ldr	r3, [pc, #180]	@ (8011ee8 <Ble_Hci_Gap_Gatt_Init+0x310>)
 8011e34:	2200      	movs	r2, #0
 8011e36:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8011e38:	4b26      	ldr	r3, [pc, #152]	@ (8011ed4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8011e3a:	789c      	ldrb	r4, [r3, #2]
 8011e3c:	4b25      	ldr	r3, [pc, #148]	@ (8011ed4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8011e3e:	785d      	ldrb	r5, [r3, #1]
 8011e40:	4b24      	ldr	r3, [pc, #144]	@ (8011ed4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8011e42:	791b      	ldrb	r3, [r3, #4]
 8011e44:	4a23      	ldr	r2, [pc, #140]	@ (8011ed4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8011e46:	7952      	ldrb	r2, [r2, #5]
 8011e48:	4922      	ldr	r1, [pc, #136]	@ (8011ed4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8011e4a:	78c9      	ldrb	r1, [r1, #3]
 8011e4c:	4821      	ldr	r0, [pc, #132]	@ (8011ed4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8011e4e:	6880      	ldr	r0, [r0, #8]
 8011e50:	2600      	movs	r6, #0
 8011e52:	9604      	str	r6, [sp, #16]
 8011e54:	9003      	str	r0, [sp, #12]
 8011e56:	9102      	str	r1, [sp, #8]
 8011e58:	9201      	str	r2, [sp, #4]
 8011e5a:	9300      	str	r3, [sp, #0]
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	2200      	movs	r2, #0
 8011e60:	4629      	mov	r1, r5
 8011e62:	4620      	mov	r0, r4
 8011e64:	f7fc fdf7 	bl	800ea56 <aci_gap_set_authentication_requirement>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	76fb      	strb	r3, [r7, #27]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 8011e6c:	7efb      	ldrb	r3, [r7, #27]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d03e      	beq.n	8011ef0 <Ble_Hci_Gap_Gatt_Init+0x318>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 8011e72:	7efb      	ldrb	r3, [r7, #27]
 8011e74:	4619      	mov	r1, r3
 8011e76:	481d      	ldr	r0, [pc, #116]	@ (8011eec <Ble_Hci_Gap_Gatt_Init+0x314>)
 8011e78:	f001 ff52 	bl	8013d20 <iprintf>
 8011e7c:	e03b      	b.n	8011ef6 <Ble_Hci_Gap_Gatt_Init+0x31e>
 8011e7e:	bf00      	nop
 8011e80:	080158dc 	.word	0x080158dc
 8011e84:	08015908 	.word	0x08015908
 8011e88:	08015938 	.word	0x08015938
 8011e8c:	08015958 	.word	0x08015958
 8011e90:	080159b4 	.word	0x080159b4
 8011e94:	08015a00 	.word	0x08015a00
 8011e98:	080167f8 	.word	0x080167f8
 8011e9c:	08015a3c 	.word	0x08015a3c
 8011ea0:	08015a94 	.word	0x08015a94
 8011ea4:	08016808 	.word	0x08016808
 8011ea8:	08015adc 	.word	0x08015adc
 8011eac:	08015b34 	.word	0x08015b34
 8011eb0:	08015b7c 	.word	0x08015b7c
 8011eb4:	08015bbc 	.word	0x08015bbc
 8011eb8:	08015bec 	.word	0x08015bec
 8011ebc:	08015c20 	.word	0x08015c20
 8011ec0:	08015c44 	.word	0x08015c44
 8011ec4:	08015c4c 	.word	0x08015c4c
 8011ec8:	08015c7c 	.word	0x08015c7c
 8011ecc:	08015c9c 	.word	0x08015c9c
 8011ed0:	08015cd8 	.word	0x08015cd8
 8011ed4:	200015d4 	.word	0x200015d4
 8011ed8:	08015d04 	.word	0x08015d04
 8011edc:	08015d44 	.word	0x08015d44
 8011ee0:	0001b207 	.word	0x0001b207
 8011ee4:	200000ec 	.word	0x200000ec
 8011ee8:	20001678 	.word	0x20001678
 8011eec:	08015d74 	.word	0x08015d74
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 8011ef0:	480e      	ldr	r0, [pc, #56]	@ (8011f2c <Ble_Hci_Gap_Gatt_Init+0x354>)
 8011ef2:	f001 ff85 	bl	8013e00 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8011ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8011f30 <Ble_Hci_Gap_Gatt_Init+0x358>)
 8011ef8:	789b      	ldrb	r3, [r3, #2]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d00f      	beq.n	8011f1e <Ble_Hci_Gap_Gatt_Init+0x346>
  {
    ret = aci_gap_configure_whitelist();
 8011efe:	f7fc fff4 	bl	800eeea <aci_gap_configure_whitelist>
 8011f02:	4603      	mov	r3, r0
 8011f04:	76fb      	strb	r3, [r7, #27]
    if (ret != BLE_STATUS_SUCCESS)
 8011f06:	7efb      	ldrb	r3, [r7, #27]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d005      	beq.n	8011f18 <Ble_Hci_Gap_Gatt_Init+0x340>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 8011f0c:	7efb      	ldrb	r3, [r7, #27]
 8011f0e:	4619      	mov	r1, r3
 8011f10:	4808      	ldr	r0, [pc, #32]	@ (8011f34 <Ble_Hci_Gap_Gatt_Init+0x35c>)
 8011f12:	f001 ff05 	bl	8013d20 <iprintf>
 8011f16:	e002      	b.n	8011f1e <Ble_Hci_Gap_Gatt_Init+0x346>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 8011f18:	4807      	ldr	r0, [pc, #28]	@ (8011f38 <Ble_Hci_Gap_Gatt_Init+0x360>)
 8011f1a:	f001 ff71 	bl	8013e00 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 8011f1e:	4807      	ldr	r0, [pc, #28]	@ (8011f3c <Ble_Hci_Gap_Gatt_Init+0x364>)
 8011f20:	f001 fefe 	bl	8013d20 <iprintf>
}
 8011f24:	bf00      	nop
 8011f26:	3724      	adds	r7, #36	@ 0x24
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f2c:	08015dc0 	.word	0x08015dc0
 8011f30:	200015d4 	.word	0x200015d4
 8011f34:	08015dfc 	.word	0x08015dfc
 8011f38:	08015e3c 	.word	0x08015e3c
 8011f3c:	08015e6c 	.word	0x08015e6c

08011f40 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b08c      	sub	sp, #48	@ 0x30
 8011f44:	af08      	add	r7, sp, #32
 8011f46:	4603      	mov	r3, r0
 8011f48:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8011f4a:	2392      	movs	r3, #146	@ 0x92
 8011f4c:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8011f4e:	4a1e      	ldr	r2, [pc, #120]	@ (8011fc8 <Adv_Request+0x88>)
 8011f50:	79fb      	ldrb	r3, [r7, #7]
 8011f52:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8011f56:	2300      	movs	r3, #0
 8011f58:	9306      	str	r3, [sp, #24]
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	9305      	str	r3, [sp, #20]
 8011f5e:	2300      	movs	r3, #0
 8011f60:	9304      	str	r3, [sp, #16]
 8011f62:	2300      	movs	r3, #0
 8011f64:	9303      	str	r3, [sp, #12]
 8011f66:	2300      	movs	r3, #0
 8011f68:	9302      	str	r3, [sp, #8]
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	9301      	str	r3, [sp, #4]
 8011f6e:	2300      	movs	r3, #0
 8011f70:	9300      	str	r3, [sp, #0]
 8011f72:	2300      	movs	r3, #0
 8011f74:	22a0      	movs	r2, #160	@ 0xa0
 8011f76:	2180      	movs	r1, #128	@ 0x80
 8011f78:	2000      	movs	r0, #0
 8011f7a:	f7fc fc1e 	bl	800e7ba <aci_gap_set_discoverable>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 8011f82:	7bfb      	ldrb	r3, [r7, #15]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d005      	beq.n	8011f94 <Adv_Request+0x54>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 8011f88:	7bfb      	ldrb	r3, [r7, #15]
 8011f8a:	4619      	mov	r1, r3
 8011f8c:	480f      	ldr	r0, [pc, #60]	@ (8011fcc <Adv_Request+0x8c>)
 8011f8e:	f001 fec7 	bl	8013d20 <iprintf>
 8011f92:	e002      	b.n	8011f9a <Adv_Request+0x5a>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 8011f94:	480e      	ldr	r0, [pc, #56]	@ (8011fd0 <Adv_Request+0x90>)
 8011f96:	f001 ff33 	bl	8013e00 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8011f9a:	490e      	ldr	r1, [pc, #56]	@ (8011fd4 <Adv_Request+0x94>)
 8011f9c:	2019      	movs	r0, #25
 8011f9e:	f7fc ff32 	bl	800ee06 <aci_gap_update_adv_data>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 8011fa6:	7bfb      	ldrb	r3, [r7, #15]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d005      	beq.n	8011fb8 <Adv_Request+0x78>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 8011fac:	7bfb      	ldrb	r3, [r7, #15]
 8011fae:	4619      	mov	r1, r3
 8011fb0:	4809      	ldr	r0, [pc, #36]	@ (8011fd8 <Adv_Request+0x98>)
 8011fb2:	f001 feb5 	bl	8013d20 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8011fb6:	e003      	b.n	8011fc0 <Adv_Request+0x80>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 8011fb8:	4808      	ldr	r0, [pc, #32]	@ (8011fdc <Adv_Request+0x9c>)
 8011fba:	f001 feb1 	bl	8013d20 <iprintf>
  return;
 8011fbe:	bf00      	nop
}
 8011fc0:	3710      	adds	r7, #16
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	bd80      	pop	{r7, pc}
 8011fc6:	bf00      	nop
 8011fc8:	200015d4 	.word	0x200015d4
 8011fcc:	08015e98 	.word	0x08015e98
 8011fd0:	08015ed0 	.word	0x08015ed0
 8011fd4:	200000ec 	.word	0x200000ec
 8011fd8:	08015ef8 	.word	0x08015ef8
 8011fdc:	08015f2c 	.word	0x08015f2c

08011fe0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b086      	sub	sp, #24
 8011fe4:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8011fe6:	f7ff fb25 	bl	8011634 <LL_FLASH_GetUDN>
 8011fea:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8011fec:	693b      	ldr	r3, [r7, #16]
 8011fee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011ff2:	d023      	beq.n	801203c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8011ff4:	f7ff fb36 	bl	8011664 <LL_FLASH_GetSTCompanyID>
 8011ff8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8011ffa:	f7ff fb27 	bl	801164c <LL_FLASH_GetDeviceID>
 8011ffe:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8012000:	693b      	ldr	r3, [r7, #16]
 8012002:	b2da      	uxtb	r2, r3
 8012004:	4b16      	ldr	r3, [pc, #88]	@ (8012060 <BleGetBdAddress+0x80>)
 8012006:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8012008:	693b      	ldr	r3, [r7, #16]
 801200a:	0a1b      	lsrs	r3, r3, #8
 801200c:	b2da      	uxtb	r2, r3
 801200e:	4b14      	ldr	r3, [pc, #80]	@ (8012060 <BleGetBdAddress+0x80>)
 8012010:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	b2da      	uxtb	r2, r3
 8012016:	4b12      	ldr	r3, [pc, #72]	@ (8012060 <BleGetBdAddress+0x80>)
 8012018:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	b2da      	uxtb	r2, r3
 801201e:	4b10      	ldr	r3, [pc, #64]	@ (8012060 <BleGetBdAddress+0x80>)
 8012020:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8012022:	68bb      	ldr	r3, [r7, #8]
 8012024:	0a1b      	lsrs	r3, r3, #8
 8012026:	b2da      	uxtb	r2, r3
 8012028:	4b0d      	ldr	r3, [pc, #52]	@ (8012060 <BleGetBdAddress+0x80>)
 801202a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	0c1b      	lsrs	r3, r3, #16
 8012030:	b2da      	uxtb	r2, r3
 8012032:	4b0b      	ldr	r3, [pc, #44]	@ (8012060 <BleGetBdAddress+0x80>)
 8012034:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8012036:	4b0a      	ldr	r3, [pc, #40]	@ (8012060 <BleGetBdAddress+0x80>)
 8012038:	617b      	str	r3, [r7, #20]
 801203a:	e00b      	b.n	8012054 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 801203c:	2000      	movs	r0, #0
 801203e:	f7fe fe17 	bl	8010c70 <OTP_Read>
 8012042:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d002      	beq.n	8012050 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	617b      	str	r3, [r7, #20]
 801204e:	e001      	b.n	8012054 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8012050:	4b04      	ldr	r3, [pc, #16]	@ (8012064 <BleGetBdAddress+0x84>)
 8012052:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8012054:	697b      	ldr	r3, [r7, #20]
}
 8012056:	4618      	mov	r0, r3
 8012058:	3718      	adds	r7, #24
 801205a:	46bd      	mov	sp, r7
 801205c:	bd80      	pop	{r7, pc}
 801205e:	bf00      	nop
 8012060:	200015cc 	.word	0x200015cc
 8012064:	080167f0 	.word	0x080167f0

08012068 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b082      	sub	sp, #8
 801206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 801206e:	4b10      	ldr	r3, [pc, #64]	@ (80120b0 <Adv_Cancel+0x48>)
 8012070:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8012074:	2b05      	cmp	r3, #5
 8012076:	d017      	beq.n	80120a8 <Adv_Cancel+0x40>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8012078:	2392      	movs	r3, #146	@ 0x92
 801207a:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 801207c:	f7fc fb79 	bl	800e772 <aci_gap_set_non_discoverable>
 8012080:	4603      	mov	r3, r0
 8012082:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8012084:	4b0a      	ldr	r3, [pc, #40]	@ (80120b0 <Adv_Cancel+0x48>)
 8012086:	2200      	movs	r2, #0
 8012088:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 801208c:	79fb      	ldrb	r3, [r7, #7]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d003      	beq.n	801209a <Adv_Cancel+0x32>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8012092:	4808      	ldr	r0, [pc, #32]	@ (80120b4 <Adv_Cancel+0x4c>)
 8012094:	f001 fe44 	bl	8013d20 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8012098:	e006      	b.n	80120a8 <Adv_Cancel+0x40>
      APP_DBG_MSG("  \r\n\r");
 801209a:	4807      	ldr	r0, [pc, #28]	@ (80120b8 <Adv_Cancel+0x50>)
 801209c:	f001 fe40 	bl	8013d20 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 80120a0:	4806      	ldr	r0, [pc, #24]	@ (80120bc <Adv_Cancel+0x54>)
 80120a2:	f001 fe3d 	bl	8013d20 <iprintf>
  return;
 80120a6:	bf00      	nop
 80120a8:	bf00      	nop
}
 80120aa:	3708      	adds	r7, #8
 80120ac:	46bd      	mov	sp, r7
 80120ae:	bd80      	pop	{r7, pc}
 80120b0:	200015d4 	.word	0x200015d4
 80120b4:	08015f54 	.word	0x08015f54
 80120b8:	08015f78 	.word	0x08015f78
 80120bc:	08015f80 	.word	0x08015f80

080120c0 <BLE_SVC_L2CAP_Conn_Update>:

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t ConnectionHandle)
{
 80120c0:	b590      	push	{r4, r7, lr}
 80120c2:	b089      	sub	sp, #36	@ 0x24
 80120c4:	af02      	add	r7, sp, #8
 80120c6:	4603      	mov	r3, r0
 80120c8:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */

  if (mutex == 1)
 80120ca:	4b29      	ldr	r3, [pc, #164]	@ (8012170 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 80120cc:	781b      	ldrb	r3, [r3, #0]
 80120ce:	2b01      	cmp	r3, #1
 80120d0:	d149      	bne.n	8012166 <BLE_SVC_L2CAP_Conn_Update+0xa6>
  {
    mutex = 0;
 80120d2:	4b27      	ldr	r3, [pc, #156]	@ (8012170 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 80120d4:	2200      	movs	r2, #0
 80120d6:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 80120d8:	4b26      	ldr	r3, [pc, #152]	@ (8012174 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 80120da:	781b      	ldrb	r3, [r3, #0]
 80120dc:	3301      	adds	r3, #1
 80120de:	2b00      	cmp	r3, #0
 80120e0:	f003 0301 	and.w	r3, r3, #1
 80120e4:	bfb8      	it	lt
 80120e6:	425b      	neglt	r3, r3
 80120e8:	b2da      	uxtb	r2, r3
 80120ea:	4b22      	ldr	r3, [pc, #136]	@ (8012174 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 80120ec:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 80120ee:	4b21      	ldr	r3, [pc, #132]	@ (8012174 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 80120f0:	781b      	ldrb	r3, [r3, #0]
 80120f2:	4a21      	ldr	r2, [pc, #132]	@ (8012178 <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 80120f4:	009b      	lsls	r3, r3, #2
 80120f6:	4413      	add	r3, r2
 80120f8:	ed93 7a00 	vldr	s14, [r3]
 80120fc:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 8012100:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012104:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012108:	ee17 3a90 	vmov	r3, s15
 801210c:	82fb      	strh	r3, [r7, #22]
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 801210e:	4b19      	ldr	r3, [pc, #100]	@ (8012174 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	4a19      	ldr	r2, [pc, #100]	@ (8012178 <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 8012114:	009b      	lsls	r3, r3, #2
 8012116:	4413      	add	r3, r2
 8012118:	ed93 7a00 	vldr	s14, [r3]
 801211c:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 8012120:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012124:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012128:	ee17 3a90 	vmov	r3, s15
 801212c:	82bb      	strh	r3, [r7, #20]
    uint16_t slave_latency = L2CAP_SLAVE_LATENCY;
 801212e:	2300      	movs	r3, #0
 8012130:	827b      	strh	r3, [r7, #18]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 8012132:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8012136:	823b      	strh	r3, [r7, #16]
    tBleStatus ret;

    ret = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 8012138:	4b10      	ldr	r3, [pc, #64]	@ (801217c <BLE_SVC_L2CAP_Conn_Update+0xbc>)
 801213a:	8ad8      	ldrh	r0, [r3, #22]
 801213c:	8a7c      	ldrh	r4, [r7, #18]
 801213e:	8aba      	ldrh	r2, [r7, #20]
 8012140:	8af9      	ldrh	r1, [r7, #22]
 8012142:	8a3b      	ldrh	r3, [r7, #16]
 8012144:	9300      	str	r3, [sp, #0]
 8012146:	4623      	mov	r3, r4
 8012148:	f7fd fcfb 	bl	800fb42 <aci_l2cap_connection_parameter_update_req>
 801214c:	4603      	mov	r3, r0
 801214e:	73fb      	strb	r3, [r7, #15]
                                                    interval_min, interval_max,
                                                    slave_latency, timeout_multiplier);
    if (ret != BLE_STATUS_SUCCESS)
 8012150:	7bfb      	ldrb	r3, [r7, #15]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d003      	beq.n	801215e <BLE_SVC_L2CAP_Conn_Update+0x9e>
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 8012156:	480a      	ldr	r0, [pc, #40]	@ (8012180 <BLE_SVC_L2CAP_Conn_Update+0xc0>)
 8012158:	f001 fde2 	bl	8013d20 <iprintf>

  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */

  return;
 801215c:	e003      	b.n	8012166 <BLE_SVC_L2CAP_Conn_Update+0xa6>
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 801215e:	4809      	ldr	r0, [pc, #36]	@ (8012184 <BLE_SVC_L2CAP_Conn_Update+0xc4>)
 8012160:	f001 fdde 	bl	8013d20 <iprintf>
  return;
 8012164:	bf00      	nop
 8012166:	bf00      	nop
}
 8012168:	371c      	adds	r7, #28
 801216a:	46bd      	mov	sp, r7
 801216c:	bd90      	pop	{r4, r7, pc}
 801216e:	bf00      	nop
 8012170:	2000165d 	.word	0x2000165d
 8012174:	2000165c 	.word	0x2000165c
 8012178:	200000e4 	.word	0x200000e4
 801217c:	200015d4 	.word	0x200015d4
 8012180:	08015f9c 	.word	0x08015f9c
 8012184:	08015fc4 	.word	0x08015fc4

08012188 <Connection_Interval_Update_Req>:
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
static void Connection_Interval_Update_Req(void)
{
 8012188:	b580      	push	{r7, lr}
 801218a:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 801218c:	4b08      	ldr	r3, [pc, #32]	@ (80121b0 <Connection_Interval_Update_Req+0x28>)
 801218e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8012192:	2b01      	cmp	r3, #1
 8012194:	d00a      	beq.n	80121ac <Connection_Interval_Update_Req+0x24>
 8012196:	4b06      	ldr	r3, [pc, #24]	@ (80121b0 <Connection_Interval_Update_Req+0x28>)
 8012198:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801219c:	2b00      	cmp	r3, #0
 801219e:	d005      	beq.n	80121ac <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80121a0:	4b03      	ldr	r3, [pc, #12]	@ (80121b0 <Connection_Interval_Update_Req+0x28>)
 80121a2:	8adb      	ldrh	r3, [r3, #22]
 80121a4:	4618      	mov	r0, r3
 80121a6:	f7ff ff8b 	bl	80120c0 <BLE_SVC_L2CAP_Conn_Update>
  }

  return;
 80121aa:	bf00      	nop
 80121ac:	bf00      	nop
}
 80121ae:	bd80      	pop	{r7, pc}
 80121b0:	200015d4 	.word	0x200015d4

080121b4 <APP_BLE_set_oob>:
  * @param p_data: OOB data buffer that has Central device's address,
  *                address type, confirm data (Ca), random data (ra)
  * @retval none
  */
void APP_BLE_set_oob(app_ble_oob_data_t *p_data)
{
 80121b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121b6:	b089      	sub	sp, #36	@ 0x24
 80121b8:	af04      	add	r7, sp, #16
 80121ba:	6078      	str	r0, [r7, #4]
  tBleStatus status;
  status = aci_gap_set_oob_data(0x00, // Local device
 80121bc:	4b2e      	ldr	r3, [pc, #184]	@ (8012278 <APP_BLE_set_oob+0xc4>)
 80121be:	7819      	ldrb	r1, [r3, #0]
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	79db      	ldrb	r3, [r3, #7]
                                m_oob_local_data.address_type, // Local address type
                                m_oob_local_data.address, // Local address
                                0x00, // OOB Data type - TK
                                p_data->tk_size, // TK size
                                p_data->tk); // TK
 80121c4:	687a      	ldr	r2, [r7, #4]
 80121c6:	3208      	adds	r2, #8
  status = aci_gap_set_oob_data(0x00, // Local device
 80121c8:	9201      	str	r2, [sp, #4]
 80121ca:	9300      	str	r3, [sp, #0]
 80121cc:	2300      	movs	r3, #0
 80121ce:	4a2b      	ldr	r2, [pc, #172]	@ (801227c <APP_BLE_set_oob+0xc8>)
 80121d0:	2000      	movs	r0, #0
 80121d2:	f7fc ff15 	bl	800f000 <aci_gap_set_oob_data>
 80121d6:	4603      	mov	r3, r0
 80121d8:	73fb      	strb	r3, [r7, #15]
  
  APP_DBG_MSG("\r\n==>> aci_gap_set_oob_data (local BLE Server device) result = 0x%02X\r\n", status);
 80121da:	7bfb      	ldrb	r3, [r7, #15]
 80121dc:	4619      	mov	r1, r3
 80121de:	4828      	ldr	r0, [pc, #160]	@ (8012280 <APP_BLE_set_oob+0xcc>)
 80121e0:	f001 fd9e 	bl	8013d20 <iprintf>
  
  ble_oob_data_log(p_data->tk_size, p_data->tk);
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	79db      	ldrb	r3, [r3, #7]
 80121e8:	461a      	mov	r2, r3
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	3308      	adds	r3, #8
 80121ee:	4619      	mov	r1, r3
 80121f0:	4610      	mov	r0, r2
 80121f2:	f000 f8d7 	bl	80123a4 <ble_oob_data_log>
  
  status = aci_gap_set_oob_data(0x01, // Remote device 
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	7819      	ldrb	r1, [r3, #0]
                                p_data->address_type, // Remote address type
                                p_data->address, // Remote address
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	1c58      	adds	r0, r3, #1
  status = aci_gap_set_oob_data(0x01, // Remote device 
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	79db      	ldrb	r3, [r3, #7]
                                0x00, // OOB Data type - TK
                                p_data->tk_size, // Remote TK size
                                p_data->tk); // Remote TK
 8012202:	687a      	ldr	r2, [r7, #4]
 8012204:	3208      	adds	r2, #8
  status = aci_gap_set_oob_data(0x01, // Remote device 
 8012206:	9201      	str	r2, [sp, #4]
 8012208:	9300      	str	r3, [sp, #0]
 801220a:	2300      	movs	r3, #0
 801220c:	4602      	mov	r2, r0
 801220e:	2001      	movs	r0, #1
 8012210:	f7fc fef6 	bl	800f000 <aci_gap_set_oob_data>
 8012214:	4603      	mov	r3, r0
 8012216:	73fb      	strb	r3, [r7, #15]
  
  APP_DBG_MSG("==>> aci_gap_set_oob_data (remote BLE Client device) result = 0x%02X\r\n", status);
 8012218:	7bfb      	ldrb	r3, [r7, #15]
 801221a:	4619      	mov	r1, r3
 801221c:	4819      	ldr	r0, [pc, #100]	@ (8012284 <APP_BLE_set_oob+0xd0>)
 801221e:	f001 fd7f 	bl	8013d20 <iprintf>
  APP_DBG_MSG("BLE Client address (type %s) %02X:%02X:%02X:%02X:%02X:%02X\r\n",
              p_data->address_type == 0 ? "Public" : "Random",
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	781b      	ldrb	r3, [r3, #0]
  APP_DBG_MSG("BLE Client address (type %s) %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8012226:	2b00      	cmp	r3, #0
 8012228:	d101      	bne.n	801222e <APP_BLE_set_oob+0x7a>
 801222a:	4917      	ldr	r1, [pc, #92]	@ (8012288 <APP_BLE_set_oob+0xd4>)
 801222c:	e000      	b.n	8012230 <APP_BLE_set_oob+0x7c>
 801222e:	4917      	ldr	r1, [pc, #92]	@ (801228c <APP_BLE_set_oob+0xd8>)
              p_data->address[5], p_data->address[4], p_data->address[3],
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	799b      	ldrb	r3, [r3, #6]
  APP_DBG_MSG("BLE Client address (type %s) %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8012234:	461d      	mov	r5, r3
              p_data->address[5], p_data->address[4], p_data->address[3],
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	795b      	ldrb	r3, [r3, #5]
  APP_DBG_MSG("BLE Client address (type %s) %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 801223a:	461e      	mov	r6, r3
              p_data->address[5], p_data->address[4], p_data->address[3],
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	791b      	ldrb	r3, [r3, #4]
  APP_DBG_MSG("BLE Client address (type %s) %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8012240:	461a      	mov	r2, r3
              p_data->address[2], p_data->address[1], p_data->address[0]);
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	78db      	ldrb	r3, [r3, #3]
  APP_DBG_MSG("BLE Client address (type %s) %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8012246:	4618      	mov	r0, r3
              p_data->address[2], p_data->address[1], p_data->address[0]);
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	789b      	ldrb	r3, [r3, #2]
  APP_DBG_MSG("BLE Client address (type %s) %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 801224c:	461c      	mov	r4, r3
              p_data->address[2], p_data->address[1], p_data->address[0]);
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	785b      	ldrb	r3, [r3, #1]
  APP_DBG_MSG("BLE Client address (type %s) %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8012252:	9303      	str	r3, [sp, #12]
 8012254:	9402      	str	r4, [sp, #8]
 8012256:	9001      	str	r0, [sp, #4]
 8012258:	9200      	str	r2, [sp, #0]
 801225a:	4633      	mov	r3, r6
 801225c:	462a      	mov	r2, r5
 801225e:	480c      	ldr	r0, [pc, #48]	@ (8012290 <APP_BLE_set_oob+0xdc>)
 8012260:	f001 fd5e 	bl	8013d20 <iprintf>
  
  UTIL_SEQ_SetTask(1 << CFG_TASK_SEND_OOB_DATA_ID, CFG_SCH_PRIO_0);
 8012264:	2100      	movs	r1, #0
 8012266:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801226a:	f001 fb5b 	bl	8013924 <UTIL_SEQ_SetTask>
}
 801226e:	bf00      	nop
 8012270:	3714      	adds	r7, #20
 8012272:	46bd      	mov	sp, r7
 8012274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012276:	bf00      	nop
 8012278:	20001678 	.word	0x20001678
 801227c:	20001679 	.word	0x20001679
 8012280:	08016058 	.word	0x08016058
 8012284:	080160a0 	.word	0x080160a0
 8012288:	080160e8 	.word	0x080160e8
 801228c:	080160f0 	.word	0x080160f0
 8012290:	080160f8 	.word	0x080160f8

08012294 <send_oob_data>:

static void send_oob_data(void)
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b082      	sub	sp, #8
 8012298:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_UART_Transmit(&hlpuart1, (uint8_t *)&m_oob_local_data, sizeof(m_oob_local_data), 1000);
 801229a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801229e:	2207      	movs	r2, #7
 80122a0:	4907      	ldr	r1, [pc, #28]	@ (80122c0 <send_oob_data+0x2c>)
 80122a2:	4808      	ldr	r0, [pc, #32]	@ (80122c4 <send_oob_data+0x30>)
 80122a4:	f7f6 f8be 	bl	8008424 <HAL_UART_Transmit>
 80122a8:	4603      	mov	r3, r0
 80122aa:	71fb      	strb	r3, [r7, #7]
  
  APP_DBG_MSG("\r\n<<== BLE Server address data - UART TX to BLE client status = 0x%02X\r\n\r\n", status);
 80122ac:	79fb      	ldrb	r3, [r7, #7]
 80122ae:	4619      	mov	r1, r3
 80122b0:	4805      	ldr	r0, [pc, #20]	@ (80122c8 <send_oob_data+0x34>)
 80122b2:	f001 fd35 	bl	8013d20 <iprintf>
}
 80122b6:	bf00      	nop
 80122b8:	3708      	adds	r7, #8
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd80      	pop	{r7, pc}
 80122be:	bf00      	nop
 80122c0:	20001678 	.word	0x20001678
 80122c4:	20000314 	.word	0x20000314
 80122c8:	08016138 	.word	0x08016138

080122cc <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b082      	sub	sp, #8
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80122d4:	2100      	movs	r1, #0
 80122d6:	2004      	movs	r0, #4
 80122d8:	f001 fb24 	bl	8013924 <UTIL_SEQ_SetTask>

  return;
 80122dc:	bf00      	nop
}
 80122de:	3708      	adds	r7, #8
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bd80      	pop	{r7, pc}

080122e4 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b082      	sub	sp, #8
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80122ec:	2001      	movs	r0, #1
 80122ee:	f001 fb85 	bl	80139fc <UTIL_SEQ_SetEvt>

  return;
 80122f2:	bf00      	nop
}
 80122f4:	3708      	adds	r7, #8
 80122f6:	46bd      	mov	sp, r7
 80122f8:	bd80      	pop	{r7, pc}

080122fa <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80122fa:	b580      	push	{r7, lr}
 80122fc:	b082      	sub	sp, #8
 80122fe:	af00      	add	r7, sp, #0
 8012300:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8012302:	2001      	movs	r0, #1
 8012304:	f001 fb9a 	bl	8013a3c <UTIL_SEQ_WaitEvt>

  return;
 8012308:	bf00      	nop
}
 801230a:	3708      	adds	r7, #8
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}

08012310 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b084      	sub	sp, #16
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	685b      	ldr	r3, [r3, #4]
 8012320:	3308      	adds	r3, #8
 8012322:	4618      	mov	r0, r3
 8012324:	f7fd fd96 	bl	800fe54 <SVCCTL_UserEvtRx>
 8012328:	4603      	mov	r3, r0
 801232a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 801232c:	7afb      	ldrb	r3, [r7, #11]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d003      	beq.n	801233a <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	2201      	movs	r2, #1
 8012336:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8012338:	e003      	b.n	8012342 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	2200      	movs	r2, #0
 801233e:	701a      	strb	r2, [r3, #0]
  return;
 8012340:	bf00      	nop
}
 8012342:	3710      	adds	r7, #16
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}

08012348 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b084      	sub	sp, #16
 801234c:	af00      	add	r7, sp, #0
 801234e:	4603      	mov	r3, r0
 8012350:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8012352:	79fb      	ldrb	r3, [r7, #7]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d002      	beq.n	801235e <BLE_StatusNot+0x16>
 8012358:	2b01      	cmp	r3, #1
 801235a:	d006      	beq.n	801236a <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 801235c:	e00b      	b.n	8012376 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 801235e:	237f      	movs	r3, #127	@ 0x7f
 8012360:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8012362:	68f8      	ldr	r0, [r7, #12]
 8012364:	f001 fb0a 	bl	801397c <UTIL_SEQ_PauseTask>
      break;
 8012368:	e005      	b.n	8012376 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 801236a:	237f      	movs	r3, #127	@ 0x7f
 801236c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 801236e:	68f8      	ldr	r0, [r7, #12]
 8012370:	f001 fb24 	bl	80139bc <UTIL_SEQ_ResumeTask>
      break;
 8012374:	bf00      	nop
  }

  return;
 8012376:	bf00      	nop
}
 8012378:	3710      	adds	r7, #16
 801237a:	46bd      	mov	sp, r7
 801237c:	bd80      	pop	{r7, pc}

0801237e <uart_rx_callback>:
  return;
}

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
static void uart_rx_callback (void) // [STM]
{
 801237e:	b580      	push	{r7, lr}
 8012380:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_OOB_PROCESS_ID, CFG_SCH_PRIO_0);
 8012382:	2100      	movs	r1, #0
 8012384:	2040      	movs	r0, #64	@ 0x40
 8012386:	f001 facd 	bl	8013924 <UTIL_SEQ_SetTask>
}
 801238a:	bf00      	nop
 801238c:	bd80      	pop	{r7, pc}
	...

08012390 <ble_oob_process>:

static void ble_oob_process (void) // [STM]
{
 8012390:	b580      	push	{r7, lr}
 8012392:	af00      	add	r7, sp, #0
  APP_BLE_set_oob(&m_oob_uart_data);
 8012394:	4802      	ldr	r0, [pc, #8]	@ (80123a0 <ble_oob_process+0x10>)
 8012396:	f7ff ff0d 	bl	80121b4 <APP_BLE_set_oob>
}
 801239a:	bf00      	nop
 801239c:	bd80      	pop	{r7, pc}
 801239e:	bf00      	nop
 80123a0:	20001660 	.word	0x20001660

080123a4 <ble_oob_data_log>:

static void ble_oob_data_log (uint32_t size, uint8_t *p_data)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b0c4      	sub	sp, #272	@ 0x110
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80123ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80123b2:	6018      	str	r0, [r3, #0]
 80123b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80123b8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80123bc:	6019      	str	r1, [r3, #0]
  uint8_t msg[256];
  
  sprintf((char *) msg, "OOB TK Data (size = %d) from BLE Client =", size);
 80123be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80123c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80123c6:	f107 000c 	add.w	r0, r7, #12
 80123ca:	681a      	ldr	r2, [r3, #0]
 80123cc:	4917      	ldr	r1, [pc, #92]	@ (801242c <ble_oob_data_log+0x88>)
 80123ce:	f001 fbc5 	bl	8013b5c <siprintf>
  
  for(uint32_t k = 0; k < size; k++)
 80123d2:	2300      	movs	r3, #0
 80123d4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80123d8:	e014      	b.n	8012404 <ble_oob_data_log+0x60>
  {
    sprintf((char *)msg, "%s %02X", msg, p_data[k]);
 80123da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80123de:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80123e2:	681a      	ldr	r2, [r3, #0]
 80123e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80123e8:	4413      	add	r3, r2
 80123ea:	781b      	ldrb	r3, [r3, #0]
 80123ec:	f107 020c 	add.w	r2, r7, #12
 80123f0:	f107 000c 	add.w	r0, r7, #12
 80123f4:	490e      	ldr	r1, [pc, #56]	@ (8012430 <ble_oob_data_log+0x8c>)
 80123f6:	f001 fbb1 	bl	8013b5c <siprintf>
  for(uint32_t k = 0; k < size; k++)
 80123fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80123fe:	3301      	adds	r3, #1
 8012400:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8012404:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012408:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801240c:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	429a      	cmp	r2, r3
 8012414:	d3e1      	bcc.n	80123da <ble_oob_data_log+0x36>
  }
  APP_DBG_MSG("%s\r\n", msg);
 8012416:	f107 030c 	add.w	r3, r7, #12
 801241a:	4619      	mov	r1, r3
 801241c:	4805      	ldr	r0, [pc, #20]	@ (8012434 <ble_oob_data_log+0x90>)
 801241e:	f001 fc7f 	bl	8013d20 <iprintf>
}
 8012422:	bf00      	nop
 8012424:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8012428:	46bd      	mov	sp, r7
 801242a:	bd80      	pop	{r7, pc}
 801242c:	08016184 	.word	0x08016184
 8012430:	080161b0 	.word	0x080161b0
 8012434:	080161b8 	.word	0x080161b8

08012438 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b084      	sub	sp, #16
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */
    
  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	781b      	ldrb	r3, [r3, #0]
 8012444:	2b03      	cmp	r3, #3
 8012446:	d83d      	bhi.n	80124c4 <Custom_STM_App_Notification+0x8c>
 8012448:	a201      	add	r2, pc, #4	@ (adr r2, 8012450 <Custom_STM_App_Notification+0x18>)
 801244a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801244e:	bf00      	nop
 8012450:	08012461 	.word	0x08012461
 8012454:	08012469 	.word	0x08012469
 8012458:	080124a9 	.word	0x080124a9
 801245c:	080124b7 	.word	0x080124b7
    /* USER CODE END CUSTOM_STM_App_Notification_Custom_Evt_Opcode */

    /* My_P2P_Server */
    case CUSTOM_STM_LED_C_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_LED_C_READ_EVT */
       PRINT_MESG_DBG("ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE My_Led_Char Read\n");
 8012460:	481b      	ldr	r0, [pc, #108]	@ (80124d0 <Custom_STM_App_Notification+0x98>)
 8012462:	f001 fccd 	bl	8013e00 <puts>

      /* USER CODE END CUSTOM_STM_LED_C_READ_EVT */
      break;
 8012466:	e02e      	b.n	80124c6 <Custom_STM_App_Notification+0x8e>

      extern volatile uint8_t bleHidKeyCode; // Deklaracja zmiennej globalnej

      case CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT:
        APP_DBG_MSG("\r\n\r** CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT \n");
 8012468:	481a      	ldr	r0, [pc, #104]	@ (80124d4 <Custom_STM_App_Notification+0x9c>)
 801246a:	f001 fcc9 	bl	8013e00 <puts>
        APP_DBG_MSG("\r\n\r** Write Data: 0x%02X %02X \n", pNotification->DataTransfered.pPayload[0], pNotification->DataTransfered.pPayload[1]);
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	685b      	ldr	r3, [r3, #4]
 8012472:	781b      	ldrb	r3, [r3, #0]
 8012474:	4619      	mov	r1, r3
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	685b      	ldr	r3, [r3, #4]
 801247a:	3301      	adds	r3, #1
 801247c:	781b      	ldrb	r3, [r3, #0]
 801247e:	461a      	mov	r2, r3
 8012480:	4815      	ldr	r0, [pc, #84]	@ (80124d8 <Custom_STM_App_Notification+0xa0>)
 8012482:	f001 fc4d 	bl	8013d20 <iprintf>

        uint8_t receivedKey = pNotification->DataTransfered.pPayload[1];
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	685b      	ldr	r3, [r3, #4]
 801248a:	785b      	ldrb	r3, [r3, #1]
 801248c:	73fb      	strb	r3, [r7, #15]

        if (receivedKey == 0x01 || receivedKey == 0x02) {
 801248e:	7bfb      	ldrb	r3, [r7, #15]
 8012490:	2b01      	cmp	r3, #1
 8012492:	d002      	beq.n	801249a <Custom_STM_App_Notification+0x62>
 8012494:	7bfb      	ldrb	r3, [r7, #15]
 8012496:	2b02      	cmp	r3, #2
 8012498:	d106      	bne.n	80124a8 <Custom_STM_App_Notification+0x70>
            bleHidKeyCode = receivedKey;
 801249a:	4a10      	ldr	r2, [pc, #64]	@ (80124dc <Custom_STM_App_Notification+0xa4>)
 801249c:	7bfb      	ldrb	r3, [r7, #15]
 801249e:	7013      	strb	r3, [r2, #0]
            HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, GPIO_PIN_1);
 80124a0:	2102      	movs	r1, #2
 80124a2:	480f      	ldr	r0, [pc, #60]	@ (80124e0 <Custom_STM_App_Notification+0xa8>)
 80124a4:	f7f1 fd5e 	bl	8003f64 <HAL_GPIO_TogglePin>



    case CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT */
      APP_DBG_MSG("\r\n\r** CUSTOM_STM_BUTTON_C_NOTIFY_ENABLED_EVT \n");
 80124a8:	480e      	ldr	r0, [pc, #56]	@ (80124e4 <Custom_STM_App_Notification+0xac>)
 80124aa:	f001 fca9 	bl	8013e00 <puts>

      Custom_App_Context.Switch_c_Notification_Status = TOGGLE_ON;        /* My_Switch_Char notification status has been enabled */
 80124ae:	4b0e      	ldr	r3, [pc, #56]	@ (80124e8 <Custom_STM_App_Notification+0xb0>)
 80124b0:	2201      	movs	r2, #1
 80124b2:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT */
      break;
 80124b4:	e007      	b.n	80124c6 <Custom_STM_App_Notification+0x8e>

    case CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT */
      APP_DBG_MSG("\r\n\r** CUSTOM_STM_BUTTON_C_NOTIFY_DISABLED_EVT \n");
 80124b6:	480d      	ldr	r0, [pc, #52]	@ (80124ec <Custom_STM_App_Notification+0xb4>)
 80124b8:	f001 fca2 	bl	8013e00 <puts>

      Custom_App_Context.Switch_c_Notification_Status = TOGGLE_OFF;        /* My_Switch_Char notification status has been disabled */
 80124bc:	4b0a      	ldr	r3, [pc, #40]	@ (80124e8 <Custom_STM_App_Notification+0xb0>)
 80124be:	2200      	movs	r2, #0
 80124c0:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT */
      break;
 80124c2:	e000      	b.n	80124c6 <Custom_STM_App_Notification+0x8e>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 80124c4:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 80124c6:	bf00      	nop
}
 80124c8:	3710      	adds	r7, #16
 80124ca:	46bd      	mov	sp, r7
 80124cc:	bd80      	pop	{r7, pc}
 80124ce:	bf00      	nop
 80124d0:	080161c0 	.word	0x080161c0
 80124d4:	080161f8 	.word	0x080161f8
 80124d8:	08016224 	.word	0x08016224
 80124dc:	20000520 	.word	0x20000520
 80124e0:	48000400 	.word	0x48000400
 80124e4:	08016244 	.word	0x08016244
 80124e8:	20001680 	.word	0x20001680
 80124ec:	08016274 	.word	0x08016274

080124f0 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80124f0:	b480      	push	{r7}
 80124f2:	b083      	sub	sp, #12
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	781b      	ldrb	r3, [r3, #0]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d002      	beq.n	8012506 <Custom_APP_Notification+0x16>
 8012500:	2b01      	cmp	r3, #1
 8012502:	d002      	beq.n	801250a <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8012504:	e002      	b.n	801250c <Custom_APP_Notification+0x1c>
      break;
 8012506:	bf00      	nop
 8012508:	e000      	b.n	801250c <Custom_APP_Notification+0x1c>
      break;
 801250a:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 801250c:	bf00      	nop
}
 801250e:	370c      	adds	r7, #12
 8012510:	46bd      	mov	sp, r7
 8012512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012516:	4770      	bx	lr

08012518 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8012518:	b580      	push	{r7, lr}
 801251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Custom_Switch_c_Send_Notification);
 801251c:	4a06      	ldr	r2, [pc, #24]	@ (8012538 <Custom_APP_Init+0x20>)
 801251e:	2100      	movs	r1, #0
 8012520:	2008      	movs	r0, #8
 8012522:	f001 f9dd 	bl	80138e0 <UTIL_SEQ_RegTask>

  Custom_App_Context.Switch_c_Notification_Status = TOGGLE_OFF;   
 8012526:	4b05      	ldr	r3, [pc, #20]	@ (801253c <Custom_APP_Init+0x24>)
 8012528:	2200      	movs	r2, #0
 801252a:	701a      	strb	r2, [r3, #0]
  Custom_App_Context.SW1_Status = 0;                 
 801252c:	4b03      	ldr	r3, [pc, #12]	@ (801253c <Custom_APP_Init+0x24>)
 801252e:	2200      	movs	r2, #0
 8012530:	705a      	strb	r2, [r3, #1]
  /* USER CODE END CUSTOM_APP_Init */
  return;
 8012532:	bf00      	nop
}
 8012534:	bd80      	pop	{r7, pc}
 8012536:	bf00      	nop
 8012538:	08012541 	.word	0x08012541
 801253c:	20001680 	.word	0x20001680

08012540 <Custom_Switch_c_Send_Notification>:
  /* USER CODE END Switch_c_UC_Last*/
  return;
}

void Custom_Switch_c_Send_Notification(void) /* Property Notification */
{
 8012540:	b580      	push	{r7, lr}
 8012542:	b082      	sub	sp, #8
 8012544:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8012546:	2300      	movs	r3, #0
 8012548:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Switch_c_NS_1*/
  if (Custom_App_Context.Switch_c_Notification_Status == TOGGLE_ON)
 801254a:	4b18      	ldr	r3, [pc, #96]	@ (80125ac <Custom_Switch_c_Send_Notification+0x6c>)
 801254c:	781b      	ldrb	r3, [r3, #0]
 801254e:	2b01      	cmp	r3, #1
 8012550:	d11c      	bne.n	801258c <Custom_Switch_c_Send_Notification+0x4c>
  {
    updateflag = 1;
 8012552:	2301      	movs	r3, #1
 8012554:	71fb      	strb	r3, [r7, #7]
    NotifyCharData[0] = 0x01;
 8012556:	4b16      	ldr	r3, [pc, #88]	@ (80125b0 <Custom_Switch_c_Send_Notification+0x70>)
 8012558:	2201      	movs	r2, #1
 801255a:	701a      	strb	r2, [r3, #0]
    
    if (Custom_App_Context.SW1_Status == 0)
 801255c:	4b13      	ldr	r3, [pc, #76]	@ (80125ac <Custom_Switch_c_Send_Notification+0x6c>)
 801255e:	785b      	ldrb	r3, [r3, #1]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d106      	bne.n	8012572 <Custom_Switch_c_Send_Notification+0x32>
    {
      Custom_App_Context.SW1_Status = 1;
 8012564:	4b11      	ldr	r3, [pc, #68]	@ (80125ac <Custom_Switch_c_Send_Notification+0x6c>)
 8012566:	2201      	movs	r2, #1
 8012568:	705a      	strb	r2, [r3, #1]
      NotifyCharData[1] = 0x01;
 801256a:	4b11      	ldr	r3, [pc, #68]	@ (80125b0 <Custom_Switch_c_Send_Notification+0x70>)
 801256c:	2201      	movs	r2, #1
 801256e:	705a      	strb	r2, [r3, #1]
 8012570:	e005      	b.n	801257e <Custom_Switch_c_Send_Notification+0x3e>
    }
    else
    {
      Custom_App_Context.SW1_Status = 0;
 8012572:	4b0e      	ldr	r3, [pc, #56]	@ (80125ac <Custom_Switch_c_Send_Notification+0x6c>)
 8012574:	2200      	movs	r2, #0
 8012576:	705a      	strb	r2, [r3, #1]
      NotifyCharData[1] = 0x00;
 8012578:	4b0d      	ldr	r3, [pc, #52]	@ (80125b0 <Custom_Switch_c_Send_Notification+0x70>)
 801257a:	2200      	movs	r2, #0
 801257c:	705a      	strb	r2, [r3, #1]
    }

    APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED = 0x%X\n", NotifyCharData[1]);
 801257e:	4b0c      	ldr	r3, [pc, #48]	@ (80125b0 <Custom_Switch_c_Send_Notification+0x70>)
 8012580:	785b      	ldrb	r3, [r3, #1]
 8012582:	4619      	mov	r1, r3
 8012584:	480b      	ldr	r0, [pc, #44]	@ (80125b4 <Custom_Switch_c_Send_Notification+0x74>)
 8012586:	f001 fbcb 	bl	8013d20 <iprintf>
 801258a:	e002      	b.n	8012592 <Custom_Switch_c_Send_Notification+0x52>
  }
  else
  {
    APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 801258c:	480a      	ldr	r0, [pc, #40]	@ (80125b8 <Custom_Switch_c_Send_Notification+0x78>)
 801258e:	f001 fc37 	bl	8013e00 <puts>
  }     
  /* USER CODE END Switch_c_NS_1*/

  if (updateflag != 0)
 8012592:	79fb      	ldrb	r3, [r7, #7]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d004      	beq.n	80125a2 <Custom_Switch_c_Send_Notification+0x62>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_SWITCH_C, (uint8_t *)NotifyCharData);
 8012598:	4905      	ldr	r1, [pc, #20]	@ (80125b0 <Custom_Switch_c_Send_Notification+0x70>)
 801259a:	2001      	movs	r0, #1
 801259c:	f000 f966 	bl	801286c <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Switch_c_NS_Last*/

  /* USER CODE END Switch_c_NS_Last*/

  return;
 80125a0:	bf00      	nop
 80125a2:	bf00      	nop
}
 80125a4:	3708      	adds	r7, #8
 80125a6:	46bd      	mov	sp, r7
 80125a8:	bd80      	pop	{r7, pc}
 80125aa:	bf00      	nop
 80125ac:	20001680 	.word	0x20001680
 80125b0:	20001684 	.word	0x20001684
 80125b4:	080162a4 	.word	0x080162a4
 80125b8:	080162ec 	.word	0x080162ec

080125bc <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b08a      	sub	sp, #40	@ 0x28
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
                           Gatt Event Mask = GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP are defined, so:
                           BLE core event ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE must be considered*/
  /* aci_gatt_read_permit_req_event_rp0    *read_req; */ 
  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80125c4:	2300      	movs	r3, #0
 80125c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	3301      	adds	r3, #1
 80125ce:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 80125d0:	6a3b      	ldr	r3, [r7, #32]
 80125d2:	781b      	ldrb	r3, [r3, #0]
 80125d4:	2bff      	cmp	r3, #255	@ 0xff
 80125d6:	d15e      	bne.n	8012696 <Custom_STM_Event_Handler+0xda>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80125d8:	6a3b      	ldr	r3, [r7, #32]
 80125da:	3302      	adds	r3, #2
 80125dc:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 80125de:	69fb      	ldr	r3, [r7, #28]
 80125e0:	881b      	ldrh	r3, [r3, #0]
 80125e2:	b29b      	uxth	r3, r3
 80125e4:	f640 4214 	movw	r2, #3092	@ 0xc14
 80125e8:	4293      	cmp	r3, r2
 80125ea:	d04e      	beq.n	801268a <Custom_STM_Event_Handler+0xce>
 80125ec:	f640 4214 	movw	r2, #3092	@ 0xc14
 80125f0:	4293      	cmp	r3, r2
 80125f2:	dc4c      	bgt.n	801268e <Custom_STM_Event_Handler+0xd2>
 80125f4:	f640 4201 	movw	r2, #3073	@ 0xc01
 80125f8:	4293      	cmp	r3, r2
 80125fa:	d003      	beq.n	8012604 <Custom_STM_Event_Handler+0x48>
 80125fc:	f640 4213 	movw	r2, #3091	@ 0xc13
 8012600:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8012602:	e047      	b.n	8012694 <Custom_STM_Event_Handler+0xd8>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8012604:	69fb      	ldr	r3, [r7, #28]
 8012606:	3302      	adds	r3, #2
 8012608:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 801260a:	69bb      	ldr	r3, [r7, #24]
 801260c:	885b      	ldrh	r3, [r3, #2]
 801260e:	b29b      	uxth	r3, r3
 8012610:	461a      	mov	r2, r3
 8012612:	4b24      	ldr	r3, [pc, #144]	@ (80126a4 <Custom_STM_Event_Handler+0xe8>)
 8012614:	889b      	ldrh	r3, [r3, #4]
 8012616:	3302      	adds	r3, #2
 8012618:	429a      	cmp	r2, r3
 801261a:	d119      	bne.n	8012650 <Custom_STM_Event_Handler+0x94>
            return_value = SVCCTL_EvtAckFlowEnable;
 801261c:	2301      	movs	r3, #1
 801261e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            switch (attribute_modified->Attr_Data[0])
 8012622:	69bb      	ldr	r3, [r7, #24]
 8012624:	7a1b      	ldrb	r3, [r3, #8]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d002      	beq.n	8012630 <Custom_STM_Event_Handler+0x74>
 801262a:	2b01      	cmp	r3, #1
 801262c:	d008      	beq.n	8012640 <Custom_STM_Event_Handler+0x84>
              break;
 801262e:	e02b      	b.n	8012688 <Custom_STM_Event_Handler+0xcc>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT;
 8012630:	2303      	movs	r3, #3
 8012632:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8012634:	f107 0308 	add.w	r3, r7, #8
 8012638:	4618      	mov	r0, r3
 801263a:	f7ff fefd 	bl	8012438 <Custom_STM_App_Notification>
                break;
 801263e:	e023      	b.n	8012688 <Custom_STM_Event_Handler+0xcc>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT;
 8012640:	2302      	movs	r3, #2
 8012642:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8012644:	f107 0308 	add.w	r3, r7, #8
 8012648:	4618      	mov	r0, r3
 801264a:	f7ff fef5 	bl	8012438 <Custom_STM_App_Notification>
                break;
 801264e:	e01b      	b.n	8012688 <Custom_STM_Event_Handler+0xcc>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomLed_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8012650:	69bb      	ldr	r3, [r7, #24]
 8012652:	885b      	ldrh	r3, [r3, #2]
 8012654:	b29b      	uxth	r3, r3
 8012656:	461a      	mov	r2, r3
 8012658:	4b12      	ldr	r3, [pc, #72]	@ (80126a4 <Custom_STM_Event_Handler+0xe8>)
 801265a:	885b      	ldrh	r3, [r3, #2]
 801265c:	3301      	adds	r3, #1
 801265e:	429a      	cmp	r2, r3
 8012660:	d117      	bne.n	8012692 <Custom_STM_Event_Handler+0xd6>
            return_value = SVCCTL_EvtAckFlowEnable;
 8012662:	2301      	movs	r3, #1
 8012664:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            Notification.Custom_Evt_Opcode = CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT;
 8012668:	2301      	movs	r3, #1
 801266a:	723b      	strb	r3, [r7, #8]
            Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 801266c:	69bb      	ldr	r3, [r7, #24]
 801266e:	88db      	ldrh	r3, [r3, #6]
 8012670:	b29b      	uxth	r3, r3
 8012672:	b2db      	uxtb	r3, r3
 8012674:	743b      	strb	r3, [r7, #16]
            Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8012676:	69bb      	ldr	r3, [r7, #24]
 8012678:	3308      	adds	r3, #8
 801267a:	60fb      	str	r3, [r7, #12]
            Custom_STM_App_Notification(&Notification);
 801267c:	f107 0308 	add.w	r3, r7, #8
 8012680:	4618      	mov	r0, r3
 8012682:	f7ff fed9 	bl	8012438 <Custom_STM_App_Notification>
          break;
 8012686:	e004      	b.n	8012692 <Custom_STM_Event_Handler+0xd6>
 8012688:	e003      	b.n	8012692 <Custom_STM_Event_Handler+0xd6>
          break;
 801268a:	bf00      	nop
 801268c:	e004      	b.n	8012698 <Custom_STM_Event_Handler+0xdc>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 801268e:	bf00      	nop
 8012690:	e002      	b.n	8012698 <Custom_STM_Event_Handler+0xdc>
          break;
 8012692:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8012694:	e000      	b.n	8012698 <Custom_STM_Event_Handler+0xdc>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8012696:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8012698:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}/* end Custom_STM_Event_Handler */
 801269c:	4618      	mov	r0, r3
 801269e:	3728      	adds	r7, #40	@ 0x28
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd80      	pop	{r7, pc}
 80126a4:	2000177c 	.word	0x2000177c

080126a8 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b08c      	sub	sp, #48	@ 0x30
 80126ac:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80126ae:	2392      	movs	r3, #146	@ 0x92
 80126b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 80126b2:	4862      	ldr	r0, [pc, #392]	@ (801283c <SVCCTL_InitCustomSvc+0x194>)
 80126b4:	f7fd fbb4 	bl	800fe20 <SVCCTL_RegisterSvcHandler>
   *                                2 for My_Switch_Char +
   *                                1 for My_Switch_Char configuration descriptor +
   *                              = 6
   */

  COPY_MY_P2P_SERVER_UUID(uuid.Char_UUID_128);
 80126b8:	238f      	movs	r3, #143	@ 0x8f
 80126ba:	713b      	strb	r3, [r7, #4]
 80126bc:	23e5      	movs	r3, #229	@ 0xe5
 80126be:	717b      	strb	r3, [r7, #5]
 80126c0:	23b3      	movs	r3, #179	@ 0xb3
 80126c2:	71bb      	strb	r3, [r7, #6]
 80126c4:	23d5      	movs	r3, #213	@ 0xd5
 80126c6:	71fb      	strb	r3, [r7, #7]
 80126c8:	232e      	movs	r3, #46	@ 0x2e
 80126ca:	723b      	strb	r3, [r7, #8]
 80126cc:	237f      	movs	r3, #127	@ 0x7f
 80126ce:	727b      	strb	r3, [r7, #9]
 80126d0:	234a      	movs	r3, #74	@ 0x4a
 80126d2:	72bb      	strb	r3, [r7, #10]
 80126d4:	2398      	movs	r3, #152	@ 0x98
 80126d6:	72fb      	strb	r3, [r7, #11]
 80126d8:	232a      	movs	r3, #42	@ 0x2a
 80126da:	733b      	strb	r3, [r7, #12]
 80126dc:	2348      	movs	r3, #72	@ 0x48
 80126de:	737b      	strb	r3, [r7, #13]
 80126e0:	237a      	movs	r3, #122	@ 0x7a
 80126e2:	73bb      	strb	r3, [r7, #14]
 80126e4:	23cc      	movs	r3, #204	@ 0xcc
 80126e6:	73fb      	strb	r3, [r7, #15]
 80126e8:	2340      	movs	r3, #64	@ 0x40
 80126ea:	743b      	strb	r3, [r7, #16]
 80126ec:	23fe      	movs	r3, #254	@ 0xfe
 80126ee:	747b      	strb	r3, [r7, #17]
 80126f0:	2300      	movs	r3, #0
 80126f2:	74bb      	strb	r3, [r7, #18]
 80126f4:	2300      	movs	r3, #0
 80126f6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 80126f8:	1d39      	adds	r1, r7, #4
 80126fa:	4b51      	ldr	r3, [pc, #324]	@ (8012840 <SVCCTL_InitCustomSvc+0x198>)
 80126fc:	9300      	str	r3, [sp, #0]
 80126fe:	2306      	movs	r3, #6
 8012700:	2201      	movs	r2, #1
 8012702:	2002      	movs	r0, #2
 8012704:	f7fc fd4b 	bl	800f19e <aci_gatt_add_service>
 8012708:	4603      	mov	r3, r0
 801270a:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             6,
                             &(CustomContext.CustomMy_P2PsHdle));
  if (ret != BLE_STATUS_SUCCESS)
 801270c:	7dfb      	ldrb	r3, [r7, #23]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d005      	beq.n	801271e <SVCCTL_InitCustomSvc+0x76>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: My_P2PS, error code: 0x%x \n\r", ret);
 8012712:	7dfb      	ldrb	r3, [r7, #23]
 8012714:	4619      	mov	r1, r3
 8012716:	484b      	ldr	r0, [pc, #300]	@ (8012844 <SVCCTL_InitCustomSvc+0x19c>)
 8012718:	f001 fb02 	bl	8013d20 <iprintf>
 801271c:	e002      	b.n	8012724 <SVCCTL_InitCustomSvc+0x7c>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: My_P2PS \n\r");
 801271e:	484a      	ldr	r0, [pc, #296]	@ (8012848 <SVCCTL_InitCustomSvc+0x1a0>)
 8012720:	f001 fafe 	bl	8013d20 <iprintf>
  }

  /**
   *  My_LED_Char
   */
  COPY_MY_LED_CHAR_UUID(uuid.Char_UUID_128);
 8012724:	2319      	movs	r3, #25
 8012726:	713b      	strb	r3, [r7, #4]
 8012728:	23ed      	movs	r3, #237	@ 0xed
 801272a:	717b      	strb	r3, [r7, #5]
 801272c:	2382      	movs	r3, #130	@ 0x82
 801272e:	71bb      	strb	r3, [r7, #6]
 8012730:	23ae      	movs	r3, #174	@ 0xae
 8012732:	71fb      	strb	r3, [r7, #7]
 8012734:	23ed      	movs	r3, #237	@ 0xed
 8012736:	723b      	strb	r3, [r7, #8]
 8012738:	2321      	movs	r3, #33	@ 0x21
 801273a:	727b      	strb	r3, [r7, #9]
 801273c:	234c      	movs	r3, #76	@ 0x4c
 801273e:	72bb      	strb	r3, [r7, #10]
 8012740:	239d      	movs	r3, #157	@ 0x9d
 8012742:	72fb      	strb	r3, [r7, #11]
 8012744:	2341      	movs	r3, #65	@ 0x41
 8012746:	733b      	strb	r3, [r7, #12]
 8012748:	2345      	movs	r3, #69	@ 0x45
 801274a:	737b      	strb	r3, [r7, #13]
 801274c:	2322      	movs	r3, #34	@ 0x22
 801274e:	73bb      	strb	r3, [r7, #14]
 8012750:	238e      	movs	r3, #142	@ 0x8e
 8012752:	73fb      	strb	r3, [r7, #15]
 8012754:	2341      	movs	r3, #65	@ 0x41
 8012756:	743b      	strb	r3, [r7, #16]
 8012758:	23fe      	movs	r3, #254	@ 0xfe
 801275a:	747b      	strb	r3, [r7, #17]
 801275c:	2300      	movs	r3, #0
 801275e:	74bb      	strb	r3, [r7, #18]
 8012760:	2300      	movs	r3, #0
 8012762:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMy_P2PsHdle,
 8012764:	4b36      	ldr	r3, [pc, #216]	@ (8012840 <SVCCTL_InitCustomSvc+0x198>)
 8012766:	8818      	ldrh	r0, [r3, #0]
 8012768:	4b38      	ldr	r3, [pc, #224]	@ (801284c <SVCCTL_InitCustomSvc+0x1a4>)
 801276a:	781b      	ldrb	r3, [r3, #0]
 801276c:	4619      	mov	r1, r3
 801276e:	1d3a      	adds	r2, r7, #4
 8012770:	4b37      	ldr	r3, [pc, #220]	@ (8012850 <SVCCTL_InitCustomSvc+0x1a8>)
 8012772:	9305      	str	r3, [sp, #20]
 8012774:	2301      	movs	r3, #1
 8012776:	9304      	str	r3, [sp, #16]
 8012778:	2310      	movs	r3, #16
 801277a:	9303      	str	r3, [sp, #12]
 801277c:	2301      	movs	r3, #1
 801277e:	9302      	str	r3, [sp, #8]
 8012780:	2300      	movs	r3, #0
 8012782:	9301      	str	r3, [sp, #4]
 8012784:	2306      	movs	r3, #6
 8012786:	9300      	str	r3, [sp, #0]
 8012788:	460b      	mov	r3, r1
 801278a:	2102      	movs	r1, #2
 801278c:	f7fc fddd 	bl	800f34a <aci_gatt_add_char>
 8012790:	4603      	mov	r3, r0
 8012792:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomLed_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8012794:	7dfb      	ldrb	r3, [r7, #23]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d005      	beq.n	80127a6 <SVCCTL_InitCustomSvc+0xfe>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : LED_C, error code: 0x%x \n\r", ret);
 801279a:	7dfb      	ldrb	r3, [r7, #23]
 801279c:	4619      	mov	r1, r3
 801279e:	482d      	ldr	r0, [pc, #180]	@ (8012854 <SVCCTL_InitCustomSvc+0x1ac>)
 80127a0:	f001 fabe 	bl	8013d20 <iprintf>
 80127a4:	e002      	b.n	80127ac <SVCCTL_InitCustomSvc+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : LED_C \n\r");
 80127a6:	482c      	ldr	r0, [pc, #176]	@ (8012858 <SVCCTL_InitCustomSvc+0x1b0>)
 80127a8:	f001 faba 	bl	8013d20 <iprintf>
  }
  /**
   *  My_Switch_Char
   */
  COPY_MY_SWITCH_CHAR_UUID(uuid.Char_UUID_128);
 80127ac:	2319      	movs	r3, #25
 80127ae:	713b      	strb	r3, [r7, #4]
 80127b0:	23ed      	movs	r3, #237	@ 0xed
 80127b2:	717b      	strb	r3, [r7, #5]
 80127b4:	2382      	movs	r3, #130	@ 0x82
 80127b6:	71bb      	strb	r3, [r7, #6]
 80127b8:	23ae      	movs	r3, #174	@ 0xae
 80127ba:	71fb      	strb	r3, [r7, #7]
 80127bc:	23ed      	movs	r3, #237	@ 0xed
 80127be:	723b      	strb	r3, [r7, #8]
 80127c0:	2321      	movs	r3, #33	@ 0x21
 80127c2:	727b      	strb	r3, [r7, #9]
 80127c4:	234c      	movs	r3, #76	@ 0x4c
 80127c6:	72bb      	strb	r3, [r7, #10]
 80127c8:	239d      	movs	r3, #157	@ 0x9d
 80127ca:	72fb      	strb	r3, [r7, #11]
 80127cc:	2341      	movs	r3, #65	@ 0x41
 80127ce:	733b      	strb	r3, [r7, #12]
 80127d0:	2345      	movs	r3, #69	@ 0x45
 80127d2:	737b      	strb	r3, [r7, #13]
 80127d4:	2322      	movs	r3, #34	@ 0x22
 80127d6:	73bb      	strb	r3, [r7, #14]
 80127d8:	238e      	movs	r3, #142	@ 0x8e
 80127da:	73fb      	strb	r3, [r7, #15]
 80127dc:	2342      	movs	r3, #66	@ 0x42
 80127de:	743b      	strb	r3, [r7, #16]
 80127e0:	23fe      	movs	r3, #254	@ 0xfe
 80127e2:	747b      	strb	r3, [r7, #17]
 80127e4:	2300      	movs	r3, #0
 80127e6:	74bb      	strb	r3, [r7, #18]
 80127e8:	2300      	movs	r3, #0
 80127ea:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMy_P2PsHdle,
 80127ec:	4b14      	ldr	r3, [pc, #80]	@ (8012840 <SVCCTL_InitCustomSvc+0x198>)
 80127ee:	8818      	ldrh	r0, [r3, #0]
 80127f0:	4b1a      	ldr	r3, [pc, #104]	@ (801285c <SVCCTL_InitCustomSvc+0x1b4>)
 80127f2:	781b      	ldrb	r3, [r3, #0]
 80127f4:	4619      	mov	r1, r3
 80127f6:	1d3a      	adds	r2, r7, #4
 80127f8:	4b19      	ldr	r3, [pc, #100]	@ (8012860 <SVCCTL_InitCustomSvc+0x1b8>)
 80127fa:	9305      	str	r3, [sp, #20]
 80127fc:	2301      	movs	r3, #1
 80127fe:	9304      	str	r3, [sp, #16]
 8012800:	2310      	movs	r3, #16
 8012802:	9303      	str	r3, [sp, #12]
 8012804:	2301      	movs	r3, #1
 8012806:	9302      	str	r3, [sp, #8]
 8012808:	2300      	movs	r3, #0
 801280a:	9301      	str	r3, [sp, #4]
 801280c:	2310      	movs	r3, #16
 801280e:	9300      	str	r3, [sp, #0]
 8012810:	460b      	mov	r3, r1
 8012812:	2102      	movs	r1, #2
 8012814:	f7fc fd99 	bl	800f34a <aci_gatt_add_char>
 8012818:	4603      	mov	r3, r0
 801281a:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomSwitch_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 801281c:	7dfb      	ldrb	r3, [r7, #23]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d005      	beq.n	801282e <SVCCTL_InitCustomSvc+0x186>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : SWITCH_C, error code: 0x%x \n\r", ret);
 8012822:	7dfb      	ldrb	r3, [r7, #23]
 8012824:	4619      	mov	r1, r3
 8012826:	480f      	ldr	r0, [pc, #60]	@ (8012864 <SVCCTL_InitCustomSvc+0x1bc>)
 8012828:	f001 fa7a 	bl	8013d20 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 801282c:	e003      	b.n	8012836 <SVCCTL_InitCustomSvc+0x18e>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : SWITCH_C \n\r");
 801282e:	480e      	ldr	r0, [pc, #56]	@ (8012868 <SVCCTL_InitCustomSvc+0x1c0>)
 8012830:	f001 fa76 	bl	8013d20 <iprintf>
  return;
 8012834:	bf00      	nop
}
 8012836:	3718      	adds	r7, #24
 8012838:	46bd      	mov	sp, r7
 801283a:	bd80      	pop	{r7, pc}
 801283c:	080125bd 	.word	0x080125bd
 8012840:	2000177c 	.word	0x2000177c
 8012844:	08016334 	.word	0x08016334
 8012848:	0801637c 	.word	0x0801637c
 801284c:	20000105 	.word	0x20000105
 8012850:	2000177e 	.word	0x2000177e
 8012854:	080163b0 	.word	0x080163b0
 8012858:	080163f4 	.word	0x080163f4
 801285c:	20000106 	.word	0x20000106
 8012860:	20001780 	.word	0x20001780
 8012864:	08016428 	.word	0x08016428
 8012868:	08016470 	.word	0x08016470

0801286c <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b086      	sub	sp, #24
 8012870:	af02      	add	r7, sp, #8
 8012872:	4603      	mov	r3, r0
 8012874:	6039      	str	r1, [r7, #0]
 8012876:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8012878:	2392      	movs	r3, #146	@ 0x92
 801287a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 801287c:	79fb      	ldrb	r3, [r7, #7]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d002      	beq.n	8012888 <Custom_STM_App_Update_Char+0x1c>
 8012882:	2b01      	cmp	r3, #1
 8012884:	d01b      	beq.n	80128be <Custom_STM_App_Update_Char+0x52>
       */
      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 8012886:	e035      	b.n	80128f4 <Custom_STM_App_Update_Char+0x88>
      ret = aci_gatt_update_char_value(CustomContext.CustomMy_P2PsHdle,
 8012888:	4b1d      	ldr	r3, [pc, #116]	@ (8012900 <Custom_STM_App_Update_Char+0x94>)
 801288a:	8818      	ldrh	r0, [r3, #0]
 801288c:	4b1c      	ldr	r3, [pc, #112]	@ (8012900 <Custom_STM_App_Update_Char+0x94>)
 801288e:	8859      	ldrh	r1, [r3, #2]
 8012890:	4b1c      	ldr	r3, [pc, #112]	@ (8012904 <Custom_STM_App_Update_Char+0x98>)
 8012892:	781a      	ldrb	r2, [r3, #0]
 8012894:	683b      	ldr	r3, [r7, #0]
 8012896:	9300      	str	r3, [sp, #0]
 8012898:	4613      	mov	r3, r2
 801289a:	2200      	movs	r2, #0
 801289c:	f7fc fe5d 	bl	800f55a <aci_gatt_update_char_value>
 80128a0:	4603      	mov	r3, r0
 80128a2:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 80128a4:	7bfb      	ldrb	r3, [r7, #15]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d005      	beq.n	80128b6 <Custom_STM_App_Update_Char+0x4a>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value LED_C command, result : 0x%x \n\r", ret);
 80128aa:	7bfb      	ldrb	r3, [r7, #15]
 80128ac:	4619      	mov	r1, r3
 80128ae:	4816      	ldr	r0, [pc, #88]	@ (8012908 <Custom_STM_App_Update_Char+0x9c>)
 80128b0:	f001 fa36 	bl	8013d20 <iprintf>
      break;
 80128b4:	e01e      	b.n	80128f4 <Custom_STM_App_Update_Char+0x88>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value LED_C command\n\r");
 80128b6:	4815      	ldr	r0, [pc, #84]	@ (801290c <Custom_STM_App_Update_Char+0xa0>)
 80128b8:	f001 fa32 	bl	8013d20 <iprintf>
      break;
 80128bc:	e01a      	b.n	80128f4 <Custom_STM_App_Update_Char+0x88>
      ret = aci_gatt_update_char_value(CustomContext.CustomMy_P2PsHdle,
 80128be:	4b10      	ldr	r3, [pc, #64]	@ (8012900 <Custom_STM_App_Update_Char+0x94>)
 80128c0:	8818      	ldrh	r0, [r3, #0]
 80128c2:	4b0f      	ldr	r3, [pc, #60]	@ (8012900 <Custom_STM_App_Update_Char+0x94>)
 80128c4:	8899      	ldrh	r1, [r3, #4]
 80128c6:	4b12      	ldr	r3, [pc, #72]	@ (8012910 <Custom_STM_App_Update_Char+0xa4>)
 80128c8:	781a      	ldrb	r2, [r3, #0]
 80128ca:	683b      	ldr	r3, [r7, #0]
 80128cc:	9300      	str	r3, [sp, #0]
 80128ce:	4613      	mov	r3, r2
 80128d0:	2200      	movs	r2, #0
 80128d2:	f7fc fe42 	bl	800f55a <aci_gatt_update_char_value>
 80128d6:	4603      	mov	r3, r0
 80128d8:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 80128da:	7bfb      	ldrb	r3, [r7, #15]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d005      	beq.n	80128ec <Custom_STM_App_Update_Char+0x80>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value SWITCH_C command, result : 0x%x \n\r", ret);
 80128e0:	7bfb      	ldrb	r3, [r7, #15]
 80128e2:	4619      	mov	r1, r3
 80128e4:	480b      	ldr	r0, [pc, #44]	@ (8012914 <Custom_STM_App_Update_Char+0xa8>)
 80128e6:	f001 fa1b 	bl	8013d20 <iprintf>
      break;
 80128ea:	e002      	b.n	80128f2 <Custom_STM_App_Update_Char+0x86>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value SWITCH_C command\n\r");
 80128ec:	480a      	ldr	r0, [pc, #40]	@ (8012918 <Custom_STM_App_Update_Char+0xac>)
 80128ee:	f001 fa17 	bl	8013d20 <iprintf>
      break;
 80128f2:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 80128f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80128f6:	4618      	mov	r0, r3
 80128f8:	3710      	adds	r7, #16
 80128fa:	46bd      	mov	sp, r7
 80128fc:	bd80      	pop	{r7, pc}
 80128fe:	bf00      	nop
 8012900:	2000177c 	.word	0x2000177c
 8012904:	20000105 	.word	0x20000105
 8012908:	080164a8 	.word	0x080164a8
 801290c:	080164f0 	.word	0x080164f0
 8012910:	20000106 	.word	0x20000106
 8012914:	08016528 	.word	0x08016528
 8012918:	08016574 	.word	0x08016574

0801291c <LL_PWR_EnableBootC2>:
{
 801291c:	b480      	push	{r7}
 801291e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8012920:	4b05      	ldr	r3, [pc, #20]	@ (8012938 <LL_PWR_EnableBootC2+0x1c>)
 8012922:	68db      	ldr	r3, [r3, #12]
 8012924:	4a04      	ldr	r2, [pc, #16]	@ (8012938 <LL_PWR_EnableBootC2+0x1c>)
 8012926:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801292a:	60d3      	str	r3, [r2, #12]
}
 801292c:	bf00      	nop
 801292e:	46bd      	mov	sp, r7
 8012930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012934:	4770      	bx	lr
 8012936:	bf00      	nop
 8012938:	58000400 	.word	0x58000400

0801293c <LL_C2_EXTI_EnableEvent_32_63>:
{
 801293c:	b480      	push	{r7}
 801293e:	b083      	sub	sp, #12
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8012944:	4b06      	ldr	r3, [pc, #24]	@ (8012960 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8012946:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 801294a:	4905      	ldr	r1, [pc, #20]	@ (8012960 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	4313      	orrs	r3, r2
 8012950:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8012954:	bf00      	nop
 8012956:	370c      	adds	r7, #12
 8012958:	46bd      	mov	sp, r7
 801295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295e:	4770      	bx	lr
 8012960:	58000800 	.word	0x58000800

08012964 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8012964:	b480      	push	{r7}
 8012966:	b083      	sub	sp, #12
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 801296c:	4b05      	ldr	r3, [pc, #20]	@ (8012984 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801296e:	6a1a      	ldr	r2, [r3, #32]
 8012970:	4904      	ldr	r1, [pc, #16]	@ (8012984 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	4313      	orrs	r3, r2
 8012976:	620b      	str	r3, [r1, #32]
}
 8012978:	bf00      	nop
 801297a:	370c      	adds	r7, #12
 801297c:	46bd      	mov	sp, r7
 801297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012982:	4770      	bx	lr
 8012984:	58000800 	.word	0x58000800

08012988 <LL_AHB3_GRP1_EnableClock>:
{
 8012988:	b480      	push	{r7}
 801298a:	b085      	sub	sp, #20
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8012990:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012994:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012996:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	4313      	orrs	r3, r2
 801299e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80129a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80129a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	4013      	ands	r3, r2
 80129aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80129ac:	68fb      	ldr	r3, [r7, #12]
}
 80129ae:	bf00      	nop
 80129b0:	3714      	adds	r7, #20
 80129b2:	46bd      	mov	sp, r7
 80129b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b8:	4770      	bx	lr

080129ba <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80129ba:	b480      	push	{r7}
 80129bc:	b085      	sub	sp, #20
 80129be:	af00      	add	r7, sp, #0
 80129c0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80129c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80129c6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80129ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	4313      	orrs	r3, r2
 80129d2:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80129d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80129da:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	4013      	ands	r3, r2
 80129e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80129e4:	68fb      	ldr	r3, [r7, #12]
}
 80129e6:	bf00      	nop
 80129e8:	3714      	adds	r7, #20
 80129ea:	46bd      	mov	sp, r7
 80129ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f0:	4770      	bx	lr

080129f2 <LL_C1_IPCC_EnableIT_TXF>:
{
 80129f2:	b480      	push	{r7}
 80129f4:	b083      	sub	sp, #12
 80129f6:	af00      	add	r7, sp, #0
 80129f8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	601a      	str	r2, [r3, #0]
}
 8012a06:	bf00      	nop
 8012a08:	370c      	adds	r7, #12
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a10:	4770      	bx	lr

08012a12 <LL_C1_IPCC_EnableIT_RXO>:
{
 8012a12:	b480      	push	{r7}
 8012a14:	b083      	sub	sp, #12
 8012a16:	af00      	add	r7, sp, #0
 8012a18:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	f043 0201 	orr.w	r2, r3, #1
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	601a      	str	r2, [r3, #0]
}
 8012a26:	bf00      	nop
 8012a28:	370c      	adds	r7, #12
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a30:	4770      	bx	lr

08012a32 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8012a32:	b480      	push	{r7}
 8012a34:	b083      	sub	sp, #12
 8012a36:	af00      	add	r7, sp, #0
 8012a38:	6078      	str	r0, [r7, #4]
 8012a3a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	685a      	ldr	r2, [r3, #4]
 8012a40:	683b      	ldr	r3, [r7, #0]
 8012a42:	041b      	lsls	r3, r3, #16
 8012a44:	43db      	mvns	r3, r3
 8012a46:	401a      	ands	r2, r3
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	605a      	str	r2, [r3, #4]
}
 8012a4c:	bf00      	nop
 8012a4e:	370c      	adds	r7, #12
 8012a50:	46bd      	mov	sp, r7
 8012a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a56:	4770      	bx	lr

08012a58 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8012a58:	b480      	push	{r7}
 8012a5a:	b083      	sub	sp, #12
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
 8012a60:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	685a      	ldr	r2, [r3, #4]
 8012a66:	683b      	ldr	r3, [r7, #0]
 8012a68:	041b      	lsls	r3, r3, #16
 8012a6a:	431a      	orrs	r2, r3
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	605a      	str	r2, [r3, #4]
}
 8012a70:	bf00      	nop
 8012a72:	370c      	adds	r7, #12
 8012a74:	46bd      	mov	sp, r7
 8012a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a7a:	4770      	bx	lr

08012a7c <LL_C1_IPCC_EnableReceiveChannel>:
{
 8012a7c:	b480      	push	{r7}
 8012a7e:	b083      	sub	sp, #12
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	6078      	str	r0, [r7, #4]
 8012a84:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	685a      	ldr	r2, [r3, #4]
 8012a8a:	683b      	ldr	r3, [r7, #0]
 8012a8c:	43db      	mvns	r3, r3
 8012a8e:	401a      	ands	r2, r3
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	605a      	str	r2, [r3, #4]
}
 8012a94:	bf00      	nop
 8012a96:	370c      	adds	r7, #12
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a9e:	4770      	bx	lr

08012aa0 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8012aa0:	b480      	push	{r7}
 8012aa2:	b083      	sub	sp, #12
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
 8012aa8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	683a      	ldr	r2, [r7, #0]
 8012aae:	609a      	str	r2, [r3, #8]
}
 8012ab0:	bf00      	nop
 8012ab2:	370c      	adds	r7, #12
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aba:	4770      	bx	lr

08012abc <LL_C1_IPCC_SetFlag_CHx>:
{
 8012abc:	b480      	push	{r7}
 8012abe:	b083      	sub	sp, #12
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
 8012ac4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8012ac6:	683b      	ldr	r3, [r7, #0]
 8012ac8:	041a      	lsls	r2, r3, #16
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	609a      	str	r2, [r3, #8]
}
 8012ace:	bf00      	nop
 8012ad0:	370c      	adds	r7, #12
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad8:	4770      	bx	lr

08012ada <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8012ada:	b480      	push	{r7}
 8012adc:	b083      	sub	sp, #12
 8012ade:	af00      	add	r7, sp, #0
 8012ae0:	6078      	str	r0, [r7, #4]
 8012ae2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	68da      	ldr	r2, [r3, #12]
 8012ae8:	683b      	ldr	r3, [r7, #0]
 8012aea:	4013      	ands	r3, r2
 8012aec:	683a      	ldr	r2, [r7, #0]
 8012aee:	429a      	cmp	r2, r3
 8012af0:	d101      	bne.n	8012af6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8012af2:	2301      	movs	r3, #1
 8012af4:	e000      	b.n	8012af8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8012af6:	2300      	movs	r3, #0
}
 8012af8:	4618      	mov	r0, r3
 8012afa:	370c      	adds	r7, #12
 8012afc:	46bd      	mov	sp, r7
 8012afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b02:	4770      	bx	lr

08012b04 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8012b04:	b480      	push	{r7}
 8012b06:	b083      	sub	sp, #12
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
 8012b0c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	69da      	ldr	r2, [r3, #28]
 8012b12:	683b      	ldr	r3, [r7, #0]
 8012b14:	4013      	ands	r3, r2
 8012b16:	683a      	ldr	r2, [r7, #0]
 8012b18:	429a      	cmp	r2, r3
 8012b1a:	d101      	bne.n	8012b20 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8012b1c:	2301      	movs	r3, #1
 8012b1e:	e000      	b.n	8012b22 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8012b20:	2300      	movs	r3, #0
}
 8012b22:	4618      	mov	r0, r3
 8012b24:	370c      	adds	r7, #12
 8012b26:	46bd      	mov	sp, r7
 8012b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2c:	4770      	bx	lr
	...

08012b30 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8012b30:	b580      	push	{r7, lr}
 8012b32:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8012b34:	2102      	movs	r1, #2
 8012b36:	4818      	ldr	r0, [pc, #96]	@ (8012b98 <HW_IPCC_Rx_Handler+0x68>)
 8012b38:	f7ff ffe4 	bl	8012b04 <LL_C2_IPCC_IsActiveFlag_CHx>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d008      	beq.n	8012b54 <HW_IPCC_Rx_Handler+0x24>
 8012b42:	4b15      	ldr	r3, [pc, #84]	@ (8012b98 <HW_IPCC_Rx_Handler+0x68>)
 8012b44:	685b      	ldr	r3, [r3, #4]
 8012b46:	f003 0302 	and.w	r3, r3, #2
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d102      	bne.n	8012b54 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8012b4e:	f000 f8d5 	bl	8012cfc <HW_IPCC_SYS_EvtHandler>
 8012b52:	e01e      	b.n	8012b92 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8012b54:	2101      	movs	r1, #1
 8012b56:	4810      	ldr	r0, [pc, #64]	@ (8012b98 <HW_IPCC_Rx_Handler+0x68>)
 8012b58:	f7ff ffd4 	bl	8012b04 <LL_C2_IPCC_IsActiveFlag_CHx>
 8012b5c:	4603      	mov	r3, r0
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d008      	beq.n	8012b74 <HW_IPCC_Rx_Handler+0x44>
 8012b62:	4b0d      	ldr	r3, [pc, #52]	@ (8012b98 <HW_IPCC_Rx_Handler+0x68>)
 8012b64:	685b      	ldr	r3, [r3, #4]
 8012b66:	f003 0301 	and.w	r3, r3, #1
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d102      	bne.n	8012b74 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8012b6e:	f000 f889 	bl	8012c84 <HW_IPCC_BLE_EvtHandler>
 8012b72:	e00e      	b.n	8012b92 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8012b74:	2108      	movs	r1, #8
 8012b76:	4808      	ldr	r0, [pc, #32]	@ (8012b98 <HW_IPCC_Rx_Handler+0x68>)
 8012b78:	f7ff ffc4 	bl	8012b04 <LL_C2_IPCC_IsActiveFlag_CHx>
 8012b7c:	4603      	mov	r3, r0
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d008      	beq.n	8012b94 <HW_IPCC_Rx_Handler+0x64>
 8012b82:	4b05      	ldr	r3, [pc, #20]	@ (8012b98 <HW_IPCC_Rx_Handler+0x68>)
 8012b84:	685b      	ldr	r3, [r3, #4]
 8012b86:	f003 0308 	and.w	r3, r3, #8
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d102      	bne.n	8012b94 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8012b8e:	f000 f901 	bl	8012d94 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8012b92:	bf00      	nop
 8012b94:	bf00      	nop
}
 8012b96:	bd80      	pop	{r7, pc}
 8012b98:	58000c00 	.word	0x58000c00

08012b9c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8012ba0:	2102      	movs	r1, #2
 8012ba2:	4818      	ldr	r0, [pc, #96]	@ (8012c04 <HW_IPCC_Tx_Handler+0x68>)
 8012ba4:	f7ff ff99 	bl	8012ada <LL_C1_IPCC_IsActiveFlag_CHx>
 8012ba8:	4603      	mov	r3, r0
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d108      	bne.n	8012bc0 <HW_IPCC_Tx_Handler+0x24>
 8012bae:	4b15      	ldr	r3, [pc, #84]	@ (8012c04 <HW_IPCC_Tx_Handler+0x68>)
 8012bb0:	685b      	ldr	r3, [r3, #4]
 8012bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d102      	bne.n	8012bc0 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8012bba:	f000 f893 	bl	8012ce4 <HW_IPCC_SYS_CmdEvtHandler>
 8012bbe:	e01e      	b.n	8012bfe <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8012bc0:	2108      	movs	r1, #8
 8012bc2:	4810      	ldr	r0, [pc, #64]	@ (8012c04 <HW_IPCC_Tx_Handler+0x68>)
 8012bc4:	f7ff ff89 	bl	8012ada <LL_C1_IPCC_IsActiveFlag_CHx>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d108      	bne.n	8012be0 <HW_IPCC_Tx_Handler+0x44>
 8012bce:	4b0d      	ldr	r3, [pc, #52]	@ (8012c04 <HW_IPCC_Tx_Handler+0x68>)
 8012bd0:	685b      	ldr	r3, [r3, #4]
 8012bd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d102      	bne.n	8012be0 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8012bda:	f000 f8bd 	bl	8012d58 <HW_IPCC_MM_FreeBufHandler>
 8012bde:	e00e      	b.n	8012bfe <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8012be0:	2120      	movs	r1, #32
 8012be2:	4808      	ldr	r0, [pc, #32]	@ (8012c04 <HW_IPCC_Tx_Handler+0x68>)
 8012be4:	f7ff ff79 	bl	8012ada <LL_C1_IPCC_IsActiveFlag_CHx>
 8012be8:	4603      	mov	r3, r0
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d108      	bne.n	8012c00 <HW_IPCC_Tx_Handler+0x64>
 8012bee:	4b05      	ldr	r3, [pc, #20]	@ (8012c04 <HW_IPCC_Tx_Handler+0x68>)
 8012bf0:	685b      	ldr	r3, [r3, #4]
 8012bf2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d102      	bne.n	8012c00 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8012bfa:	f000 f84f 	bl	8012c9c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8012bfe:	bf00      	nop
 8012c00:	bf00      	nop
}
 8012c02:	bd80      	pop	{r7, pc}
 8012c04:	58000c00 	.word	0x58000c00

08012c08 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8012c0c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8012c10:	f7ff fed3 	bl	80129ba <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8012c14:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8012c18:	f7ff fea4 	bl	8012964 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8012c1c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8012c20:	f7ff fe8c 	bl	801293c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8012c24:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8012c26:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8012c28:	f7ff fe78 	bl	801291c <LL_PWR_EnableBootC2>

  return;
 8012c2c:	bf00      	nop
}
 8012c2e:	bd80      	pop	{r7, pc}

08012c30 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8012c34:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8012c38:	f7ff fea6 	bl	8012988 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8012c3c:	4806      	ldr	r0, [pc, #24]	@ (8012c58 <HW_IPCC_Init+0x28>)
 8012c3e:	f7ff fee8 	bl	8012a12 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8012c42:	4805      	ldr	r0, [pc, #20]	@ (8012c58 <HW_IPCC_Init+0x28>)
 8012c44:	f7ff fed5 	bl	80129f2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8012c48:	202c      	movs	r0, #44	@ 0x2c
 8012c4a:	f7f0 fc74 	bl	8003536 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8012c4e:	202d      	movs	r0, #45	@ 0x2d
 8012c50:	f7f0 fc71 	bl	8003536 <HAL_NVIC_EnableIRQ>

  return;
 8012c54:	bf00      	nop
}
 8012c56:	bd80      	pop	{r7, pc}
 8012c58:	58000c00 	.word	0x58000c00

08012c5c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8012c60:	2101      	movs	r1, #1
 8012c62:	4802      	ldr	r0, [pc, #8]	@ (8012c6c <HW_IPCC_BLE_Init+0x10>)
 8012c64:	f7ff ff0a 	bl	8012a7c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012c68:	bf00      	nop
}
 8012c6a:	bd80      	pop	{r7, pc}
 8012c6c:	58000c00 	.word	0x58000c00

08012c70 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8012c74:	2101      	movs	r1, #1
 8012c76:	4802      	ldr	r0, [pc, #8]	@ (8012c80 <HW_IPCC_BLE_SendCmd+0x10>)
 8012c78:	f7ff ff20 	bl	8012abc <LL_C1_IPCC_SetFlag_CHx>

  return;
 8012c7c:	bf00      	nop
}
 8012c7e:	bd80      	pop	{r7, pc}
 8012c80:	58000c00 	.word	0x58000c00

08012c84 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8012c88:	f7fd fd84 	bl	8010794 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8012c8c:	2101      	movs	r1, #1
 8012c8e:	4802      	ldr	r0, [pc, #8]	@ (8012c98 <HW_IPCC_BLE_EvtHandler+0x14>)
 8012c90:	f7ff ff06 	bl	8012aa0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012c94:	bf00      	nop
}
 8012c96:	bd80      	pop	{r7, pc}
 8012c98:	58000c00 	.word	0x58000c00

08012c9c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8012ca0:	2120      	movs	r1, #32
 8012ca2:	4803      	ldr	r0, [pc, #12]	@ (8012cb0 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8012ca4:	f7ff fed8 	bl	8012a58 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8012ca8:	f7fd fda4 	bl	80107f4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8012cac:	bf00      	nop
}
 8012cae:	bd80      	pop	{r7, pc}
 8012cb0:	58000c00 	.word	0x58000c00

08012cb4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8012cb8:	2102      	movs	r1, #2
 8012cba:	4802      	ldr	r0, [pc, #8]	@ (8012cc4 <HW_IPCC_SYS_Init+0x10>)
 8012cbc:	f7ff fede 	bl	8012a7c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012cc0:	bf00      	nop
}
 8012cc2:	bd80      	pop	{r7, pc}
 8012cc4:	58000c00 	.word	0x58000c00

08012cc8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012ccc:	2102      	movs	r1, #2
 8012cce:	4804      	ldr	r0, [pc, #16]	@ (8012ce0 <HW_IPCC_SYS_SendCmd+0x18>)
 8012cd0:	f7ff fef4 	bl	8012abc <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012cd4:	2102      	movs	r1, #2
 8012cd6:	4802      	ldr	r0, [pc, #8]	@ (8012ce0 <HW_IPCC_SYS_SendCmd+0x18>)
 8012cd8:	f7ff feab 	bl	8012a32 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8012cdc:	bf00      	nop
}
 8012cde:	bd80      	pop	{r7, pc}
 8012ce0:	58000c00 	.word	0x58000c00

08012ce4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012ce8:	2102      	movs	r1, #2
 8012cea:	4803      	ldr	r0, [pc, #12]	@ (8012cf8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8012cec:	f7ff feb4 	bl	8012a58 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8012cf0:	f7fd fdd0 	bl	8010894 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8012cf4:	bf00      	nop
}
 8012cf6:	bd80      	pop	{r7, pc}
 8012cf8:	58000c00 	.word	0x58000c00

08012cfc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8012d00:	f7fd fdde 	bl	80108c0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8012d04:	2102      	movs	r1, #2
 8012d06:	4802      	ldr	r0, [pc, #8]	@ (8012d10 <HW_IPCC_SYS_EvtHandler+0x14>)
 8012d08:	f7ff feca 	bl	8012aa0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012d0c:	bf00      	nop
}
 8012d0e:	bd80      	pop	{r7, pc}
 8012d10:	58000c00 	.word	0x58000c00

08012d14 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b082      	sub	sp, #8
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8012d1c:	2108      	movs	r1, #8
 8012d1e:	480c      	ldr	r0, [pc, #48]	@ (8012d50 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8012d20:	f7ff fedb 	bl	8012ada <LL_C1_IPCC_IsActiveFlag_CHx>
 8012d24:	4603      	mov	r3, r0
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d007      	beq.n	8012d3a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8012d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8012d54 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012d30:	2108      	movs	r1, #8
 8012d32:	4807      	ldr	r0, [pc, #28]	@ (8012d50 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8012d34:	f7ff fe7d 	bl	8012a32 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8012d38:	e006      	b.n	8012d48 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012d3e:	2108      	movs	r1, #8
 8012d40:	4803      	ldr	r0, [pc, #12]	@ (8012d50 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8012d42:	f7ff febb 	bl	8012abc <LL_C1_IPCC_SetFlag_CHx>
  return;
 8012d46:	bf00      	nop
}
 8012d48:	3708      	adds	r7, #8
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	bd80      	pop	{r7, pc}
 8012d4e:	bf00      	nop
 8012d50:	58000c00 	.word	0x58000c00
 8012d54:	20001784 	.word	0x20001784

08012d58 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8012d58:	b580      	push	{r7, lr}
 8012d5a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012d5c:	2108      	movs	r1, #8
 8012d5e:	4806      	ldr	r0, [pc, #24]	@ (8012d78 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8012d60:	f7ff fe7a 	bl	8012a58 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8012d64:	4b05      	ldr	r3, [pc, #20]	@ (8012d7c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012d6a:	2108      	movs	r1, #8
 8012d6c:	4802      	ldr	r0, [pc, #8]	@ (8012d78 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8012d6e:	f7ff fea5 	bl	8012abc <LL_C1_IPCC_SetFlag_CHx>

  return;
 8012d72:	bf00      	nop
}
 8012d74:	bd80      	pop	{r7, pc}
 8012d76:	bf00      	nop
 8012d78:	58000c00 	.word	0x58000c00
 8012d7c:	20001784 	.word	0x20001784

08012d80 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8012d80:	b580      	push	{r7, lr}
 8012d82:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8012d84:	2108      	movs	r1, #8
 8012d86:	4802      	ldr	r0, [pc, #8]	@ (8012d90 <HW_IPCC_TRACES_Init+0x10>)
 8012d88:	f7ff fe78 	bl	8012a7c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012d8c:	bf00      	nop
}
 8012d8e:	bd80      	pop	{r7, pc}
 8012d90:	58000c00 	.word	0x58000c00

08012d94 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8012d98:	f7fd fe3a 	bl	8010a10 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8012d9c:	2108      	movs	r1, #8
 8012d9e:	4802      	ldr	r0, [pc, #8]	@ (8012da8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8012da0:	f7ff fe7e 	bl	8012aa0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012da4:	bf00      	nop
}
 8012da6:	bd80      	pop	{r7, pc}
 8012da8:	58000c00 	.word	0x58000c00

08012dac <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 8012db0:	2200      	movs	r2, #0
 8012db2:	490e      	ldr	r1, [pc, #56]	@ (8012dec <MX_USB_Device_Init+0x40>)
 8012db4:	480e      	ldr	r0, [pc, #56]	@ (8012df0 <MX_USB_Device_Init+0x44>)
 8012db6:	f7fa fa6b 	bl	800d290 <USBD_Init>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d001      	beq.n	8012dc4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8012dc0:	f7ef fe32 	bl	8002a28 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 8012dc4:	490b      	ldr	r1, [pc, #44]	@ (8012df4 <MX_USB_Device_Init+0x48>)
 8012dc6:	480a      	ldr	r0, [pc, #40]	@ (8012df0 <MX_USB_Device_Init+0x44>)
 8012dc8:	f7fa fa92 	bl	800d2f0 <USBD_RegisterClass>
 8012dcc:	4603      	mov	r3, r0
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d001      	beq.n	8012dd6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8012dd2:	f7ef fe29 	bl	8002a28 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8012dd6:	4806      	ldr	r0, [pc, #24]	@ (8012df0 <MX_USB_Device_Init+0x44>)
 8012dd8:	f7fa fac0 	bl	800d35c <USBD_Start>
 8012ddc:	4603      	mov	r3, r0
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d001      	beq.n	8012de6 <MX_USB_Device_Init+0x3a>
    Error_Handler();
 8012de2:	f7ef fe21 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8012de6:	bf00      	nop
 8012de8:	bd80      	pop	{r7, pc}
 8012dea:	bf00      	nop
 8012dec:	20000108 	.word	0x20000108
 8012df0:	20001788 	.word	0x20001788
 8012df4:	2000002c 	.word	0x2000002c

08012df8 <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012df8:	b480      	push	{r7}
 8012dfa:	b083      	sub	sp, #12
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	4603      	mov	r3, r0
 8012e00:	6039      	str	r1, [r7, #0]
 8012e02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 8012e04:	683b      	ldr	r3, [r7, #0]
 8012e06:	2212      	movs	r2, #18
 8012e08:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 8012e0a:	4b03      	ldr	r3, [pc, #12]	@ (8012e18 <USBD_HID_DeviceDescriptor+0x20>)
}
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	370c      	adds	r7, #12
 8012e10:	46bd      	mov	sp, r7
 8012e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e16:	4770      	bx	lr
 8012e18:	20000128 	.word	0x20000128

08012e1c <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e1c:	b480      	push	{r7}
 8012e1e:	b083      	sub	sp, #12
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	4603      	mov	r3, r0
 8012e24:	6039      	str	r1, [r7, #0]
 8012e26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012e28:	683b      	ldr	r3, [r7, #0]
 8012e2a:	2204      	movs	r2, #4
 8012e2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012e2e:	4b03      	ldr	r3, [pc, #12]	@ (8012e3c <USBD_HID_LangIDStrDescriptor+0x20>)
}
 8012e30:	4618      	mov	r0, r3
 8012e32:	370c      	adds	r7, #12
 8012e34:	46bd      	mov	sp, r7
 8012e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3a:	4770      	bx	lr
 8012e3c:	2000013c 	.word	0x2000013c

08012e40 <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b082      	sub	sp, #8
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	4603      	mov	r3, r0
 8012e48:	6039      	str	r1, [r7, #0]
 8012e4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012e4c:	79fb      	ldrb	r3, [r7, #7]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d105      	bne.n	8012e5e <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012e52:	683a      	ldr	r2, [r7, #0]
 8012e54:	4907      	ldr	r1, [pc, #28]	@ (8012e74 <USBD_HID_ProductStrDescriptor+0x34>)
 8012e56:	4808      	ldr	r0, [pc, #32]	@ (8012e78 <USBD_HID_ProductStrDescriptor+0x38>)
 8012e58:	f7fb fbc8 	bl	800e5ec <USBD_GetString>
 8012e5c:	e004      	b.n	8012e68 <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012e5e:	683a      	ldr	r2, [r7, #0]
 8012e60:	4904      	ldr	r1, [pc, #16]	@ (8012e74 <USBD_HID_ProductStrDescriptor+0x34>)
 8012e62:	4805      	ldr	r0, [pc, #20]	@ (8012e78 <USBD_HID_ProductStrDescriptor+0x38>)
 8012e64:	f7fb fbc2 	bl	800e5ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8012e68:	4b02      	ldr	r3, [pc, #8]	@ (8012e74 <USBD_HID_ProductStrDescriptor+0x34>)
}
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	3708      	adds	r7, #8
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	bd80      	pop	{r7, pc}
 8012e72:	bf00      	nop
 8012e74:	20001a64 	.word	0x20001a64
 8012e78:	080165b0 	.word	0x080165b0

08012e7c <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b082      	sub	sp, #8
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	4603      	mov	r3, r0
 8012e84:	6039      	str	r1, [r7, #0]
 8012e86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012e88:	683a      	ldr	r2, [r7, #0]
 8012e8a:	4904      	ldr	r1, [pc, #16]	@ (8012e9c <USBD_HID_ManufacturerStrDescriptor+0x20>)
 8012e8c:	4804      	ldr	r0, [pc, #16]	@ (8012ea0 <USBD_HID_ManufacturerStrDescriptor+0x24>)
 8012e8e:	f7fb fbad 	bl	800e5ec <USBD_GetString>
  return USBD_StrDesc;
 8012e92:	4b02      	ldr	r3, [pc, #8]	@ (8012e9c <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 8012e94:	4618      	mov	r0, r3
 8012e96:	3708      	adds	r7, #8
 8012e98:	46bd      	mov	sp, r7
 8012e9a:	bd80      	pop	{r7, pc}
 8012e9c:	20001a64 	.word	0x20001a64
 8012ea0:	080165c8 	.word	0x080165c8

08012ea4 <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b082      	sub	sp, #8
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	4603      	mov	r3, r0
 8012eac:	6039      	str	r1, [r7, #0]
 8012eae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012eb0:	683b      	ldr	r3, [r7, #0]
 8012eb2:	221a      	movs	r2, #26
 8012eb4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012eb6:	f000 f843 	bl	8012f40 <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8012eba:	4b02      	ldr	r3, [pc, #8]	@ (8012ec4 <USBD_HID_SerialStrDescriptor+0x20>)
}
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	3708      	adds	r7, #8
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	bd80      	pop	{r7, pc}
 8012ec4:	20000140 	.word	0x20000140

08012ec8 <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b082      	sub	sp, #8
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	4603      	mov	r3, r0
 8012ed0:	6039      	str	r1, [r7, #0]
 8012ed2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012ed4:	79fb      	ldrb	r3, [r7, #7]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d105      	bne.n	8012ee6 <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8012eda:	683a      	ldr	r2, [r7, #0]
 8012edc:	4907      	ldr	r1, [pc, #28]	@ (8012efc <USBD_HID_ConfigStrDescriptor+0x34>)
 8012ede:	4808      	ldr	r0, [pc, #32]	@ (8012f00 <USBD_HID_ConfigStrDescriptor+0x38>)
 8012ee0:	f7fb fb84 	bl	800e5ec <USBD_GetString>
 8012ee4:	e004      	b.n	8012ef0 <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8012ee6:	683a      	ldr	r2, [r7, #0]
 8012ee8:	4904      	ldr	r1, [pc, #16]	@ (8012efc <USBD_HID_ConfigStrDescriptor+0x34>)
 8012eea:	4805      	ldr	r0, [pc, #20]	@ (8012f00 <USBD_HID_ConfigStrDescriptor+0x38>)
 8012eec:	f7fb fb7e 	bl	800e5ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8012ef0:	4b02      	ldr	r3, [pc, #8]	@ (8012efc <USBD_HID_ConfigStrDescriptor+0x34>)
}
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	3708      	adds	r7, #8
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	bd80      	pop	{r7, pc}
 8012efa:	bf00      	nop
 8012efc:	20001a64 	.word	0x20001a64
 8012f00:	080165dc 	.word	0x080165dc

08012f04 <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b082      	sub	sp, #8
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	6039      	str	r1, [r7, #0]
 8012f0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012f10:	79fb      	ldrb	r3, [r7, #7]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d105      	bne.n	8012f22 <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8012f16:	683a      	ldr	r2, [r7, #0]
 8012f18:	4907      	ldr	r1, [pc, #28]	@ (8012f38 <USBD_HID_InterfaceStrDescriptor+0x34>)
 8012f1a:	4808      	ldr	r0, [pc, #32]	@ (8012f3c <USBD_HID_InterfaceStrDescriptor+0x38>)
 8012f1c:	f7fb fb66 	bl	800e5ec <USBD_GetString>
 8012f20:	e004      	b.n	8012f2c <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8012f22:	683a      	ldr	r2, [r7, #0]
 8012f24:	4904      	ldr	r1, [pc, #16]	@ (8012f38 <USBD_HID_InterfaceStrDescriptor+0x34>)
 8012f26:	4805      	ldr	r0, [pc, #20]	@ (8012f3c <USBD_HID_InterfaceStrDescriptor+0x38>)
 8012f28:	f7fb fb60 	bl	800e5ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8012f2c:	4b02      	ldr	r3, [pc, #8]	@ (8012f38 <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 8012f2e:	4618      	mov	r0, r3
 8012f30:	3708      	adds	r7, #8
 8012f32:	46bd      	mov	sp, r7
 8012f34:	bd80      	pop	{r7, pc}
 8012f36:	bf00      	nop
 8012f38:	20001a64 	.word	0x20001a64
 8012f3c:	080165e8 	.word	0x080165e8

08012f40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b084      	sub	sp, #16
 8012f44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012f46:	4b0f      	ldr	r3, [pc, #60]	@ (8012f84 <Get_SerialNum+0x44>)
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8012f88 <Get_SerialNum+0x48>)
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012f52:	4b0e      	ldr	r3, [pc, #56]	@ (8012f8c <Get_SerialNum+0x4c>)
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012f58:	68fa      	ldr	r2, [r7, #12]
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	4413      	add	r3, r2
 8012f5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d009      	beq.n	8012f7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012f66:	2208      	movs	r2, #8
 8012f68:	4909      	ldr	r1, [pc, #36]	@ (8012f90 <Get_SerialNum+0x50>)
 8012f6a:	68f8      	ldr	r0, [r7, #12]
 8012f6c:	f000 f814 	bl	8012f98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012f70:	2204      	movs	r2, #4
 8012f72:	4908      	ldr	r1, [pc, #32]	@ (8012f94 <Get_SerialNum+0x54>)
 8012f74:	68b8      	ldr	r0, [r7, #8]
 8012f76:	f000 f80f 	bl	8012f98 <IntToUnicode>
  }
}
 8012f7a:	bf00      	nop
 8012f7c:	3710      	adds	r7, #16
 8012f7e:	46bd      	mov	sp, r7
 8012f80:	bd80      	pop	{r7, pc}
 8012f82:	bf00      	nop
 8012f84:	1fff7590 	.word	0x1fff7590
 8012f88:	1fff7594 	.word	0x1fff7594
 8012f8c:	1fff7598 	.word	0x1fff7598
 8012f90:	20000142 	.word	0x20000142
 8012f94:	20000152 	.word	0x20000152

08012f98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012f98:	b480      	push	{r7}
 8012f9a:	b087      	sub	sp, #28
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	60f8      	str	r0, [r7, #12]
 8012fa0:	60b9      	str	r1, [r7, #8]
 8012fa2:	4613      	mov	r3, r2
 8012fa4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012faa:	2300      	movs	r3, #0
 8012fac:	75fb      	strb	r3, [r7, #23]
 8012fae:	e027      	b.n	8013000 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	0f1b      	lsrs	r3, r3, #28
 8012fb4:	2b09      	cmp	r3, #9
 8012fb6:	d80b      	bhi.n	8012fd0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	0f1b      	lsrs	r3, r3, #28
 8012fbc:	b2da      	uxtb	r2, r3
 8012fbe:	7dfb      	ldrb	r3, [r7, #23]
 8012fc0:	005b      	lsls	r3, r3, #1
 8012fc2:	4619      	mov	r1, r3
 8012fc4:	68bb      	ldr	r3, [r7, #8]
 8012fc6:	440b      	add	r3, r1
 8012fc8:	3230      	adds	r2, #48	@ 0x30
 8012fca:	b2d2      	uxtb	r2, r2
 8012fcc:	701a      	strb	r2, [r3, #0]
 8012fce:	e00a      	b.n	8012fe6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	0f1b      	lsrs	r3, r3, #28
 8012fd4:	b2da      	uxtb	r2, r3
 8012fd6:	7dfb      	ldrb	r3, [r7, #23]
 8012fd8:	005b      	lsls	r3, r3, #1
 8012fda:	4619      	mov	r1, r3
 8012fdc:	68bb      	ldr	r3, [r7, #8]
 8012fde:	440b      	add	r3, r1
 8012fe0:	3237      	adds	r2, #55	@ 0x37
 8012fe2:	b2d2      	uxtb	r2, r2
 8012fe4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	011b      	lsls	r3, r3, #4
 8012fea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012fec:	7dfb      	ldrb	r3, [r7, #23]
 8012fee:	005b      	lsls	r3, r3, #1
 8012ff0:	3301      	adds	r3, #1
 8012ff2:	68ba      	ldr	r2, [r7, #8]
 8012ff4:	4413      	add	r3, r2
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012ffa:	7dfb      	ldrb	r3, [r7, #23]
 8012ffc:	3301      	adds	r3, #1
 8012ffe:	75fb      	strb	r3, [r7, #23]
 8013000:	7dfa      	ldrb	r2, [r7, #23]
 8013002:	79fb      	ldrb	r3, [r7, #7]
 8013004:	429a      	cmp	r2, r3
 8013006:	d3d3      	bcc.n	8012fb0 <IntToUnicode+0x18>
  }
}
 8013008:	bf00      	nop
 801300a:	bf00      	nop
 801300c:	371c      	adds	r7, #28
 801300e:	46bd      	mov	sp, r7
 8013010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013014:	4770      	bx	lr

08013016 <LL_AHB2_GRP1_EnableClock>:
{
 8013016:	b480      	push	{r7}
 8013018:	b085      	sub	sp, #20
 801301a:	af00      	add	r7, sp, #0
 801301c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801301e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013022:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013024:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	4313      	orrs	r3, r2
 801302c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801302e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013032:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	4013      	ands	r3, r2
 8013038:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801303a:	68fb      	ldr	r3, [r7, #12]
}
 801303c:	bf00      	nop
 801303e:	3714      	adds	r7, #20
 8013040:	46bd      	mov	sp, r7
 8013042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013046:	4770      	bx	lr

08013048 <LL_APB1_GRP1_EnableClock>:
{
 8013048:	b480      	push	{r7}
 801304a:	b085      	sub	sp, #20
 801304c:	af00      	add	r7, sp, #0
 801304e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8013050:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013054:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013056:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	4313      	orrs	r3, r2
 801305e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8013060:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013064:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	4013      	ands	r3, r2
 801306a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801306c:	68fb      	ldr	r3, [r7, #12]
}
 801306e:	bf00      	nop
 8013070:	3714      	adds	r7, #20
 8013072:	46bd      	mov	sp, r7
 8013074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013078:	4770      	bx	lr
	...

0801307c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b09c      	sub	sp, #112	@ 0x70
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013084:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8013088:	2200      	movs	r2, #0
 801308a:	601a      	str	r2, [r3, #0]
 801308c:	605a      	str	r2, [r3, #4]
 801308e:	609a      	str	r2, [r3, #8]
 8013090:	60da      	str	r2, [r3, #12]
 8013092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8013094:	f107 030c 	add.w	r3, r7, #12
 8013098:	2250      	movs	r2, #80	@ 0x50
 801309a:	2100      	movs	r1, #0
 801309c:	4618      	mov	r0, r3
 801309e:	f000 feb7 	bl	8013e10 <memset>
  if(pcdHandle->Instance==USB)
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	4a1b      	ldr	r2, [pc, #108]	@ (8013114 <HAL_PCD_MspInit+0x98>)
 80130a8:	4293      	cmp	r3, r2
 80130aa:	d12f      	bne.n	801310c <HAL_PCD_MspInit+0x90>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80130ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80130b0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80130b2:	2300      	movs	r3, #0
 80130b4:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80130b6:	f107 030c 	add.w	r3, r7, #12
 80130ba:	4618      	mov	r0, r3
 80130bc:	f7f4 f895 	bl	80071ea <HAL_RCCEx_PeriphCLKConfig>
 80130c0:	4603      	mov	r3, r0
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d001      	beq.n	80130ca <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80130c6:	f7ef fcaf 	bl	8002a28 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80130ca:	2001      	movs	r0, #1
 80130cc:	f7ff ffa3 	bl	8013016 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80130d0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80130d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80130d6:	2302      	movs	r3, #2
 80130d8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130da:	2300      	movs	r3, #0
 80130dc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80130de:	2300      	movs	r3, #0
 80130e0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80130e2:	230a      	movs	r3, #10
 80130e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80130e6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80130ea:	4619      	mov	r1, r3
 80130ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80130f0:	f7f0 fd98 	bl	8003c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80130f4:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80130f8:	f7ff ffa6 	bl	8013048 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80130fc:	2200      	movs	r2, #0
 80130fe:	2100      	movs	r1, #0
 8013100:	2014      	movs	r0, #20
 8013102:	f7f0 f9fe 	bl	8003502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8013106:	2014      	movs	r0, #20
 8013108:	f7f0 fa15 	bl	8003536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801310c:	bf00      	nop
 801310e:	3770      	adds	r7, #112	@ 0x70
 8013110:	46bd      	mov	sp, r7
 8013112:	bd80      	pop	{r7, pc}
 8013114:	40006800 	.word	0x40006800

08013118 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013118:	b580      	push	{r7, lr}
 801311a:	b082      	sub	sp, #8
 801311c:	af00      	add	r7, sp, #0
 801311e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	f8d3 22f0 	ldr.w	r2, [r3, #752]	@ 0x2f0
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 801312c:	4619      	mov	r1, r3
 801312e:	4610      	mov	r0, r2
 8013130:	f7fa f961 	bl	800d3f6 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8013134:	bf00      	nop
 8013136:	3708      	adds	r7, #8
 8013138:	46bd      	mov	sp, r7
 801313a:	bd80      	pop	{r7, pc}

0801313c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801313c:	b580      	push	{r7, lr}
 801313e:	b082      	sub	sp, #8
 8013140:	af00      	add	r7, sp, #0
 8013142:	6078      	str	r0, [r7, #4]
 8013144:	460b      	mov	r3, r1
 8013146:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	@ 0x2f0
 801314e:	78fa      	ldrb	r2, [r7, #3]
 8013150:	6879      	ldr	r1, [r7, #4]
 8013152:	4613      	mov	r3, r2
 8013154:	009b      	lsls	r3, r3, #2
 8013156:	4413      	add	r3, r2
 8013158:	00db      	lsls	r3, r3, #3
 801315a:	440b      	add	r3, r1
 801315c:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8013160:	681a      	ldr	r2, [r3, #0]
 8013162:	78fb      	ldrb	r3, [r7, #3]
 8013164:	4619      	mov	r1, r3
 8013166:	f7fa f99b 	bl	800d4a0 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801316a:	bf00      	nop
 801316c:	3708      	adds	r7, #8
 801316e:	46bd      	mov	sp, r7
 8013170:	bd80      	pop	{r7, pc}

08013172 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013172:	b580      	push	{r7, lr}
 8013174:	b082      	sub	sp, #8
 8013176:	af00      	add	r7, sp, #0
 8013178:	6078      	str	r0, [r7, #4]
 801317a:	460b      	mov	r3, r1
 801317c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	f8d3 02f0 	ldr.w	r0, [r3, #752]	@ 0x2f0
 8013184:	78fa      	ldrb	r2, [r7, #3]
 8013186:	6879      	ldr	r1, [r7, #4]
 8013188:	4613      	mov	r3, r2
 801318a:	009b      	lsls	r3, r3, #2
 801318c:	4413      	add	r3, r2
 801318e:	00db      	lsls	r3, r3, #3
 8013190:	440b      	add	r3, r1
 8013192:	333c      	adds	r3, #60	@ 0x3c
 8013194:	681a      	ldr	r2, [r3, #0]
 8013196:	78fb      	ldrb	r3, [r7, #3]
 8013198:	4619      	mov	r1, r3
 801319a:	f7fa fa34 	bl	800d606 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801319e:	bf00      	nop
 80131a0:	3708      	adds	r7, #8
 80131a2:	46bd      	mov	sp, r7
 80131a4:	bd80      	pop	{r7, pc}

080131a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80131a6:	b580      	push	{r7, lr}
 80131a8:	b082      	sub	sp, #8
 80131aa:	af00      	add	r7, sp, #0
 80131ac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 80131b4:	4618      	mov	r0, r3
 80131b6:	f7fa fb6e 	bl	800d896 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80131ba:	bf00      	nop
 80131bc:	3708      	adds	r7, #8
 80131be:	46bd      	mov	sp, r7
 80131c0:	bd80      	pop	{r7, pc}

080131c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80131c2:	b580      	push	{r7, lr}
 80131c4:	b084      	sub	sp, #16
 80131c6:	af00      	add	r7, sp, #0
 80131c8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80131ca:	2301      	movs	r3, #1
 80131cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	689b      	ldr	r3, [r3, #8]
 80131d2:	2b02      	cmp	r3, #2
 80131d4:	d001      	beq.n	80131da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80131d6:	f7ef fc27 	bl	8002a28 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 80131e0:	7bfa      	ldrb	r2, [r7, #15]
 80131e2:	4611      	mov	r1, r2
 80131e4:	4618      	mov	r0, r3
 80131e6:	f7fa fb12 	bl	800d80e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 80131f0:	4618      	mov	r0, r3
 80131f2:	f7fa faba 	bl	800d76a <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80131f6:	bf00      	nop
 80131f8:	3710      	adds	r7, #16
 80131fa:	46bd      	mov	sp, r7
 80131fc:	bd80      	pop	{r7, pc}
	...

08013200 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013200:	b580      	push	{r7, lr}
 8013202:	b082      	sub	sp, #8
 8013204:	af00      	add	r7, sp, #0
 8013206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 801320e:	4618      	mov	r0, r3
 8013210:	f7fa fb0d 	bl	800d82e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	699b      	ldr	r3, [r3, #24]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d005      	beq.n	8013228 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801321c:	4b04      	ldr	r3, [pc, #16]	@ (8013230 <HAL_PCD_SuspendCallback+0x30>)
 801321e:	691b      	ldr	r3, [r3, #16]
 8013220:	4a03      	ldr	r2, [pc, #12]	@ (8013230 <HAL_PCD_SuspendCallback+0x30>)
 8013222:	f043 0306 	orr.w	r3, r3, #6
 8013226:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8013228:	bf00      	nop
 801322a:	3708      	adds	r7, #8
 801322c:	46bd      	mov	sp, r7
 801322e:	bd80      	pop	{r7, pc}
 8013230:	e000ed00 	.word	0xe000ed00

08013234 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b082      	sub	sp, #8
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	699b      	ldr	r3, [r3, #24]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d007      	beq.n	8013254 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013244:	4b08      	ldr	r3, [pc, #32]	@ (8013268 <HAL_PCD_ResumeCallback+0x34>)
 8013246:	691b      	ldr	r3, [r3, #16]
 8013248:	4a07      	ldr	r2, [pc, #28]	@ (8013268 <HAL_PCD_ResumeCallback+0x34>)
 801324a:	f023 0306 	bic.w	r3, r3, #6
 801324e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8013250:	f000 f9d6 	bl	8013600 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 801325a:	4618      	mov	r0, r3
 801325c:	f7fa fb03 	bl	800d866 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8013260:	bf00      	nop
 8013262:	3708      	adds	r7, #8
 8013264:	46bd      	mov	sp, r7
 8013266:	bd80      	pop	{r7, pc}
 8013268:	e000ed00 	.word	0xe000ed00

0801326c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801326c:	b580      	push	{r7, lr}
 801326e:	b082      	sub	sp, #8
 8013270:	af00      	add	r7, sp, #0
 8013272:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8013274:	4a23      	ldr	r2, [pc, #140]	@ (8013304 <USBD_LL_Init+0x98>)
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	f8c2 32f0 	str.w	r3, [r2, #752]	@ 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	4a21      	ldr	r2, [pc, #132]	@ (8013304 <USBD_LL_Init+0x98>)
 8013280:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8013284:	f7f2 fc7a 	bl	8005b7c <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8013288:	4b1e      	ldr	r3, [pc, #120]	@ (8013304 <USBD_LL_Init+0x98>)
 801328a:	4a1f      	ldr	r2, [pc, #124]	@ (8013308 <USBD_LL_Init+0x9c>)
 801328c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801328e:	4b1d      	ldr	r3, [pc, #116]	@ (8013304 <USBD_LL_Init+0x98>)
 8013290:	2208      	movs	r2, #8
 8013292:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8013294:	4b1b      	ldr	r3, [pc, #108]	@ (8013304 <USBD_LL_Init+0x98>)
 8013296:	2202      	movs	r2, #2
 8013298:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801329a:	4b1a      	ldr	r3, [pc, #104]	@ (8013304 <USBD_LL_Init+0x98>)
 801329c:	2202      	movs	r2, #2
 801329e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80132a0:	4b18      	ldr	r3, [pc, #96]	@ (8013304 <USBD_LL_Init+0x98>)
 80132a2:	2200      	movs	r2, #0
 80132a4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80132a6:	4b17      	ldr	r3, [pc, #92]	@ (8013304 <USBD_LL_Init+0x98>)
 80132a8:	2200      	movs	r2, #0
 80132aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80132ac:	4b15      	ldr	r3, [pc, #84]	@ (8013304 <USBD_LL_Init+0x98>)
 80132ae:	2200      	movs	r2, #0
 80132b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80132b2:	4b14      	ldr	r3, [pc, #80]	@ (8013304 <USBD_LL_Init+0x98>)
 80132b4:	2200      	movs	r2, #0
 80132b6:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80132b8:	4812      	ldr	r0, [pc, #72]	@ (8013304 <USBD_LL_Init+0x98>)
 80132ba:	f7f0 ff17 	bl	80040ec <HAL_PCD_Init>
 80132be:	4603      	mov	r3, r0
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d001      	beq.n	80132c8 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80132c4:	f7ef fbb0 	bl	8002a28 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80132ce:	2318      	movs	r3, #24
 80132d0:	2200      	movs	r2, #0
 80132d2:	2100      	movs	r1, #0
 80132d4:	f7f2 fbc7 	bl	8005a66 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80132de:	2358      	movs	r3, #88	@ 0x58
 80132e0:	2200      	movs	r2, #0
 80132e2:	2180      	movs	r1, #128	@ 0x80
 80132e4:	f7f2 fbbf 	bl	8005a66 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80132ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80132f2:	2200      	movs	r2, #0
 80132f4:	2181      	movs	r1, #129	@ 0x81
 80132f6:	f7f2 fbb6 	bl	8005a66 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80132fa:	2300      	movs	r3, #0
}
 80132fc:	4618      	mov	r0, r3
 80132fe:	3708      	adds	r7, #8
 8013300:	46bd      	mov	sp, r7
 8013302:	bd80      	pop	{r7, pc}
 8013304:	20001c64 	.word	0x20001c64
 8013308:	40006800 	.word	0x40006800

0801330c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b084      	sub	sp, #16
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013314:	2300      	movs	r3, #0
 8013316:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013318:	2300      	movs	r3, #0
 801331a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013322:	4618      	mov	r0, r3
 8013324:	f7f0 ffbb 	bl	800429e <HAL_PCD_Start>
 8013328:	4603      	mov	r3, r0
 801332a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801332c:	7bfb      	ldrb	r3, [r7, #15]
 801332e:	4618      	mov	r0, r3
 8013330:	f000 f96c 	bl	801360c <USBD_Get_USB_Status>
 8013334:	4603      	mov	r3, r0
 8013336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013338:	7bbb      	ldrb	r3, [r7, #14]
}
 801333a:	4618      	mov	r0, r3
 801333c:	3710      	adds	r7, #16
 801333e:	46bd      	mov	sp, r7
 8013340:	bd80      	pop	{r7, pc}

08013342 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013342:	b580      	push	{r7, lr}
 8013344:	b084      	sub	sp, #16
 8013346:	af00      	add	r7, sp, #0
 8013348:	6078      	str	r0, [r7, #4]
 801334a:	4608      	mov	r0, r1
 801334c:	4611      	mov	r1, r2
 801334e:	461a      	mov	r2, r3
 8013350:	4603      	mov	r3, r0
 8013352:	70fb      	strb	r3, [r7, #3]
 8013354:	460b      	mov	r3, r1
 8013356:	70bb      	strb	r3, [r7, #2]
 8013358:	4613      	mov	r3, r2
 801335a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801335c:	2300      	movs	r3, #0
 801335e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013360:	2300      	movs	r3, #0
 8013362:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801336a:	78bb      	ldrb	r3, [r7, #2]
 801336c:	883a      	ldrh	r2, [r7, #0]
 801336e:	78f9      	ldrb	r1, [r7, #3]
 8013370:	f7f1 f903 	bl	800457a <HAL_PCD_EP_Open>
 8013374:	4603      	mov	r3, r0
 8013376:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013378:	7bfb      	ldrb	r3, [r7, #15]
 801337a:	4618      	mov	r0, r3
 801337c:	f000 f946 	bl	801360c <USBD_Get_USB_Status>
 8013380:	4603      	mov	r3, r0
 8013382:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013384:	7bbb      	ldrb	r3, [r7, #14]
}
 8013386:	4618      	mov	r0, r3
 8013388:	3710      	adds	r7, #16
 801338a:	46bd      	mov	sp, r7
 801338c:	bd80      	pop	{r7, pc}

0801338e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801338e:	b580      	push	{r7, lr}
 8013390:	b084      	sub	sp, #16
 8013392:	af00      	add	r7, sp, #0
 8013394:	6078      	str	r0, [r7, #4]
 8013396:	460b      	mov	r3, r1
 8013398:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801339a:	2300      	movs	r3, #0
 801339c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801339e:	2300      	movs	r3, #0
 80133a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80133a8:	78fa      	ldrb	r2, [r7, #3]
 80133aa:	4611      	mov	r1, r2
 80133ac:	4618      	mov	r0, r3
 80133ae:	f7f1 f941 	bl	8004634 <HAL_PCD_EP_Close>
 80133b2:	4603      	mov	r3, r0
 80133b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80133b6:	7bfb      	ldrb	r3, [r7, #15]
 80133b8:	4618      	mov	r0, r3
 80133ba:	f000 f927 	bl	801360c <USBD_Get_USB_Status>
 80133be:	4603      	mov	r3, r0
 80133c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80133c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80133c4:	4618      	mov	r0, r3
 80133c6:	3710      	adds	r7, #16
 80133c8:	46bd      	mov	sp, r7
 80133ca:	bd80      	pop	{r7, pc}

080133cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80133cc:	b580      	push	{r7, lr}
 80133ce:	b084      	sub	sp, #16
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	6078      	str	r0, [r7, #4]
 80133d4:	460b      	mov	r3, r1
 80133d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133d8:	2300      	movs	r3, #0
 80133da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133dc:	2300      	movs	r3, #0
 80133de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80133e6:	78fa      	ldrb	r2, [r7, #3]
 80133e8:	4611      	mov	r1, r2
 80133ea:	4618      	mov	r0, r3
 80133ec:	f7f1 f9d2 	bl	8004794 <HAL_PCD_EP_SetStall>
 80133f0:	4603      	mov	r3, r0
 80133f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80133f4:	7bfb      	ldrb	r3, [r7, #15]
 80133f6:	4618      	mov	r0, r3
 80133f8:	f000 f908 	bl	801360c <USBD_Get_USB_Status>
 80133fc:	4603      	mov	r3, r0
 80133fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013400:	7bbb      	ldrb	r3, [r7, #14]
}
 8013402:	4618      	mov	r0, r3
 8013404:	3710      	adds	r7, #16
 8013406:	46bd      	mov	sp, r7
 8013408:	bd80      	pop	{r7, pc}

0801340a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801340a:	b580      	push	{r7, lr}
 801340c:	b084      	sub	sp, #16
 801340e:	af00      	add	r7, sp, #0
 8013410:	6078      	str	r0, [r7, #4]
 8013412:	460b      	mov	r3, r1
 8013414:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013416:	2300      	movs	r3, #0
 8013418:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801341a:	2300      	movs	r3, #0
 801341c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013424:	78fa      	ldrb	r2, [r7, #3]
 8013426:	4611      	mov	r1, r2
 8013428:	4618      	mov	r0, r3
 801342a:	f7f1 fa05 	bl	8004838 <HAL_PCD_EP_ClrStall>
 801342e:	4603      	mov	r3, r0
 8013430:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013432:	7bfb      	ldrb	r3, [r7, #15]
 8013434:	4618      	mov	r0, r3
 8013436:	f000 f8e9 	bl	801360c <USBD_Get_USB_Status>
 801343a:	4603      	mov	r3, r0
 801343c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801343e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013440:	4618      	mov	r0, r3
 8013442:	3710      	adds	r7, #16
 8013444:	46bd      	mov	sp, r7
 8013446:	bd80      	pop	{r7, pc}

08013448 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013448:	b480      	push	{r7}
 801344a:	b085      	sub	sp, #20
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]
 8013450:	460b      	mov	r3, r1
 8013452:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801345a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801345c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013460:	2b00      	cmp	r3, #0
 8013462:	da0c      	bge.n	801347e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013464:	78fb      	ldrb	r3, [r7, #3]
 8013466:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801346a:	68f9      	ldr	r1, [r7, #12]
 801346c:	1c5a      	adds	r2, r3, #1
 801346e:	4613      	mov	r3, r2
 8013470:	009b      	lsls	r3, r3, #2
 8013472:	4413      	add	r3, r2
 8013474:	00db      	lsls	r3, r3, #3
 8013476:	440b      	add	r3, r1
 8013478:	3302      	adds	r3, #2
 801347a:	781b      	ldrb	r3, [r3, #0]
 801347c:	e00b      	b.n	8013496 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801347e:	78fb      	ldrb	r3, [r7, #3]
 8013480:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013484:	68f9      	ldr	r1, [r7, #12]
 8013486:	4613      	mov	r3, r2
 8013488:	009b      	lsls	r3, r3, #2
 801348a:	4413      	add	r3, r2
 801348c:	00db      	lsls	r3, r3, #3
 801348e:	440b      	add	r3, r1
 8013490:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 8013494:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013496:	4618      	mov	r0, r3
 8013498:	3714      	adds	r7, #20
 801349a:	46bd      	mov	sp, r7
 801349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a0:	4770      	bx	lr

080134a2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80134a2:	b580      	push	{r7, lr}
 80134a4:	b084      	sub	sp, #16
 80134a6:	af00      	add	r7, sp, #0
 80134a8:	6078      	str	r0, [r7, #4]
 80134aa:	460b      	mov	r3, r1
 80134ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134ae:	2300      	movs	r3, #0
 80134b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134b2:	2300      	movs	r3, #0
 80134b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80134bc:	78fa      	ldrb	r2, [r7, #3]
 80134be:	4611      	mov	r1, r2
 80134c0:	4618      	mov	r0, r3
 80134c2:	f7f1 f835 	bl	8004530 <HAL_PCD_SetAddress>
 80134c6:	4603      	mov	r3, r0
 80134c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80134ca:	7bfb      	ldrb	r3, [r7, #15]
 80134cc:	4618      	mov	r0, r3
 80134ce:	f000 f89d 	bl	801360c <USBD_Get_USB_Status>
 80134d2:	4603      	mov	r3, r0
 80134d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80134d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80134d8:	4618      	mov	r0, r3
 80134da:	3710      	adds	r7, #16
 80134dc:	46bd      	mov	sp, r7
 80134de:	bd80      	pop	{r7, pc}

080134e0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b086      	sub	sp, #24
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	60f8      	str	r0, [r7, #12]
 80134e8:	607a      	str	r2, [r7, #4]
 80134ea:	603b      	str	r3, [r7, #0]
 80134ec:	460b      	mov	r3, r1
 80134ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134f0:	2300      	movs	r3, #0
 80134f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134f4:	2300      	movs	r3, #0
 80134f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80134fe:	7af9      	ldrb	r1, [r7, #11]
 8013500:	683b      	ldr	r3, [r7, #0]
 8013502:	687a      	ldr	r2, [r7, #4]
 8013504:	f7f1 f90f 	bl	8004726 <HAL_PCD_EP_Transmit>
 8013508:	4603      	mov	r3, r0
 801350a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801350c:	7dfb      	ldrb	r3, [r7, #23]
 801350e:	4618      	mov	r0, r3
 8013510:	f000 f87c 	bl	801360c <USBD_Get_USB_Status>
 8013514:	4603      	mov	r3, r0
 8013516:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013518:	7dbb      	ldrb	r3, [r7, #22]
}
 801351a:	4618      	mov	r0, r3
 801351c:	3718      	adds	r7, #24
 801351e:	46bd      	mov	sp, r7
 8013520:	bd80      	pop	{r7, pc}

08013522 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013522:	b580      	push	{r7, lr}
 8013524:	b086      	sub	sp, #24
 8013526:	af00      	add	r7, sp, #0
 8013528:	60f8      	str	r0, [r7, #12]
 801352a:	607a      	str	r2, [r7, #4]
 801352c:	603b      	str	r3, [r7, #0]
 801352e:	460b      	mov	r3, r1
 8013530:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013532:	2300      	movs	r3, #0
 8013534:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013536:	2300      	movs	r3, #0
 8013538:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013540:	7af9      	ldrb	r1, [r7, #11]
 8013542:	683b      	ldr	r3, [r7, #0]
 8013544:	687a      	ldr	r2, [r7, #4]
 8013546:	f7f1 f8bd 	bl	80046c4 <HAL_PCD_EP_Receive>
 801354a:	4603      	mov	r3, r0
 801354c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801354e:	7dfb      	ldrb	r3, [r7, #23]
 8013550:	4618      	mov	r0, r3
 8013552:	f000 f85b 	bl	801360c <USBD_Get_USB_Status>
 8013556:	4603      	mov	r3, r0
 8013558:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801355a:	7dbb      	ldrb	r3, [r7, #22]
}
 801355c:	4618      	mov	r0, r3
 801355e:	3718      	adds	r7, #24
 8013560:	46bd      	mov	sp, r7
 8013562:	bd80      	pop	{r7, pc}

08013564 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013564:	b580      	push	{r7, lr}
 8013566:	b082      	sub	sp, #8
 8013568:	af00      	add	r7, sp, #0
 801356a:	6078      	str	r0, [r7, #4]
 801356c:	460b      	mov	r3, r1
 801356e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8013570:	78fb      	ldrb	r3, [r7, #3]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d002      	beq.n	801357c <HAL_PCDEx_LPM_Callback+0x18>
 8013576:	2b01      	cmp	r3, #1
 8013578:	d013      	beq.n	80135a2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801357a:	e023      	b.n	80135c4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	699b      	ldr	r3, [r3, #24]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d007      	beq.n	8013594 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8013584:	f000 f83c 	bl	8013600 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013588:	4b10      	ldr	r3, [pc, #64]	@ (80135cc <HAL_PCDEx_LPM_Callback+0x68>)
 801358a:	691b      	ldr	r3, [r3, #16]
 801358c:	4a0f      	ldr	r2, [pc, #60]	@ (80135cc <HAL_PCDEx_LPM_Callback+0x68>)
 801358e:	f023 0306 	bic.w	r3, r3, #6
 8013592:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 801359a:	4618      	mov	r0, r3
 801359c:	f7fa f963 	bl	800d866 <USBD_LL_Resume>
    break;
 80135a0:	e010      	b.n	80135c4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 80135a8:	4618      	mov	r0, r3
 80135aa:	f7fa f940 	bl	800d82e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	699b      	ldr	r3, [r3, #24]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d005      	beq.n	80135c2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80135b6:	4b05      	ldr	r3, [pc, #20]	@ (80135cc <HAL_PCDEx_LPM_Callback+0x68>)
 80135b8:	691b      	ldr	r3, [r3, #16]
 80135ba:	4a04      	ldr	r2, [pc, #16]	@ (80135cc <HAL_PCDEx_LPM_Callback+0x68>)
 80135bc:	f043 0306 	orr.w	r3, r3, #6
 80135c0:	6113      	str	r3, [r2, #16]
    break;
 80135c2:	bf00      	nop
}
 80135c4:	bf00      	nop
 80135c6:	3708      	adds	r7, #8
 80135c8:	46bd      	mov	sp, r7
 80135ca:	bd80      	pop	{r7, pc}
 80135cc:	e000ed00 	.word	0xe000ed00

080135d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80135d0:	b480      	push	{r7}
 80135d2:	b083      	sub	sp, #12
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80135d8:	4b03      	ldr	r3, [pc, #12]	@ (80135e8 <USBD_static_malloc+0x18>)
}
 80135da:	4618      	mov	r0, r3
 80135dc:	370c      	adds	r7, #12
 80135de:	46bd      	mov	sp, r7
 80135e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e4:	4770      	bx	lr
 80135e6:	bf00      	nop
 80135e8:	20001f58 	.word	0x20001f58

080135ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80135ec:	b480      	push	{r7}
 80135ee:	b083      	sub	sp, #12
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80135f4:	bf00      	nop
 80135f6:	370c      	adds	r7, #12
 80135f8:	46bd      	mov	sp, r7
 80135fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fe:	4770      	bx	lr

08013600 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8013600:	b580      	push	{r7, lr}
 8013602:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8013604:	f7ee ffd6 	bl	80025b4 <SystemClock_Config>
}
 8013608:	bf00      	nop
 801360a:	bd80      	pop	{r7, pc}

0801360c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801360c:	b480      	push	{r7}
 801360e:	b085      	sub	sp, #20
 8013610:	af00      	add	r7, sp, #0
 8013612:	4603      	mov	r3, r0
 8013614:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013616:	2300      	movs	r3, #0
 8013618:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801361a:	79fb      	ldrb	r3, [r7, #7]
 801361c:	2b03      	cmp	r3, #3
 801361e:	d817      	bhi.n	8013650 <USBD_Get_USB_Status+0x44>
 8013620:	a201      	add	r2, pc, #4	@ (adr r2, 8013628 <USBD_Get_USB_Status+0x1c>)
 8013622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013626:	bf00      	nop
 8013628:	08013639 	.word	0x08013639
 801362c:	0801363f 	.word	0x0801363f
 8013630:	08013645 	.word	0x08013645
 8013634:	0801364b 	.word	0x0801364b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013638:	2300      	movs	r3, #0
 801363a:	73fb      	strb	r3, [r7, #15]
    break;
 801363c:	e00b      	b.n	8013656 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801363e:	2303      	movs	r3, #3
 8013640:	73fb      	strb	r3, [r7, #15]
    break;
 8013642:	e008      	b.n	8013656 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013644:	2301      	movs	r3, #1
 8013646:	73fb      	strb	r3, [r7, #15]
    break;
 8013648:	e005      	b.n	8013656 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801364a:	2303      	movs	r3, #3
 801364c:	73fb      	strb	r3, [r7, #15]
    break;
 801364e:	e002      	b.n	8013656 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013650:	2303      	movs	r3, #3
 8013652:	73fb      	strb	r3, [r7, #15]
    break;
 8013654:	bf00      	nop
  }
  return usb_status;
 8013656:	7bfb      	ldrb	r3, [r7, #15]
}
 8013658:	4618      	mov	r0, r3
 801365a:	3714      	adds	r7, #20
 801365c:	46bd      	mov	sp, r7
 801365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013662:	4770      	bx	lr

08013664 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8013664:	b480      	push	{r7}
 8013666:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8013668:	4b05      	ldr	r3, [pc, #20]	@ (8013680 <UTIL_LPM_Init+0x1c>)
 801366a:	2200      	movs	r2, #0
 801366c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801366e:	4b05      	ldr	r3, [pc, #20]	@ (8013684 <UTIL_LPM_Init+0x20>)
 8013670:	2200      	movs	r2, #0
 8013672:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8013674:	bf00      	nop
 8013676:	46bd      	mov	sp, r7
 8013678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801367c:	4770      	bx	lr
 801367e:	bf00      	nop
 8013680:	20001f6c 	.word	0x20001f6c
 8013684:	20001f70 	.word	0x20001f70

08013688 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8013688:	b480      	push	{r7}
 801368a:	b087      	sub	sp, #28
 801368c:	af00      	add	r7, sp, #0
 801368e:	6078      	str	r0, [r7, #4]
 8013690:	460b      	mov	r3, r1
 8013692:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013694:	f3ef 8310 	mrs	r3, PRIMASK
 8013698:	613b      	str	r3, [r7, #16]
  return(result);
 801369a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801369c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801369e:	b672      	cpsid	i
}
 80136a0:	bf00      	nop
  
  switch(state)
 80136a2:	78fb      	ldrb	r3, [r7, #3]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d008      	beq.n	80136ba <UTIL_LPM_SetOffMode+0x32>
 80136a8:	2b01      	cmp	r3, #1
 80136aa:	d10e      	bne.n	80136ca <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80136ac:	4b0d      	ldr	r3, [pc, #52]	@ (80136e4 <UTIL_LPM_SetOffMode+0x5c>)
 80136ae:	681a      	ldr	r2, [r3, #0]
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	4313      	orrs	r3, r2
 80136b4:	4a0b      	ldr	r2, [pc, #44]	@ (80136e4 <UTIL_LPM_SetOffMode+0x5c>)
 80136b6:	6013      	str	r3, [r2, #0]
      break;
 80136b8:	e008      	b.n	80136cc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	43da      	mvns	r2, r3
 80136be:	4b09      	ldr	r3, [pc, #36]	@ (80136e4 <UTIL_LPM_SetOffMode+0x5c>)
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	4013      	ands	r3, r2
 80136c4:	4a07      	ldr	r2, [pc, #28]	@ (80136e4 <UTIL_LPM_SetOffMode+0x5c>)
 80136c6:	6013      	str	r3, [r2, #0]
      break;
 80136c8:	e000      	b.n	80136cc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80136ca:	bf00      	nop
 80136cc:	697b      	ldr	r3, [r7, #20]
 80136ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	f383 8810 	msr	PRIMASK, r3
}
 80136d6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80136d8:	bf00      	nop
 80136da:	371c      	adds	r7, #28
 80136dc:	46bd      	mov	sp, r7
 80136de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e2:	4770      	bx	lr
 80136e4:	20001f70 	.word	0x20001f70

080136e8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b090      	sub	sp, #64	@ 0x40
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80136f0:	4b73      	ldr	r3, [pc, #460]	@ (80138c0 <UTIL_SEQ_Run+0x1d8>)
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 80136f6:	4b72      	ldr	r3, [pc, #456]	@ (80138c0 <UTIL_SEQ_Run+0x1d8>)
 80136f8:	681a      	ldr	r2, [r3, #0]
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	4013      	ands	r3, r2
 80136fe:	4a70      	ldr	r2, [pc, #448]	@ (80138c0 <UTIL_SEQ_Run+0x1d8>)
 8013700:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8013702:	4b70      	ldr	r3, [pc, #448]	@ (80138c4 <UTIL_SEQ_Run+0x1dc>)
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8013708:	4b6f      	ldr	r3, [pc, #444]	@ (80138c8 <UTIL_SEQ_Run+0x1e0>)
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801370e:	4b6f      	ldr	r3, [pc, #444]	@ (80138cc <UTIL_SEQ_Run+0x1e4>)
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8013714:	4b6e      	ldr	r3, [pc, #440]	@ (80138d0 <UTIL_SEQ_Run+0x1e8>)
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801371a:	e08d      	b.n	8013838 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801371c:	2300      	movs	r3, #0
 801371e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8013720:	e002      	b.n	8013728 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8013722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013724:	3301      	adds	r3, #1
 8013726:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8013728:	4a6a      	ldr	r2, [pc, #424]	@ (80138d4 <UTIL_SEQ_Run+0x1ec>)
 801372a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801372c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013732:	401a      	ands	r2, r3
 8013734:	4b62      	ldr	r3, [pc, #392]	@ (80138c0 <UTIL_SEQ_Run+0x1d8>)
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	4013      	ands	r3, r2
 801373a:	2b00      	cmp	r3, #0
 801373c:	d0f1      	beq.n	8013722 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801373e:	4a65      	ldr	r2, [pc, #404]	@ (80138d4 <UTIL_SEQ_Run+0x1ec>)
 8013740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013742:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013748:	401a      	ands	r2, r3
 801374a:	4b5d      	ldr	r3, [pc, #372]	@ (80138c0 <UTIL_SEQ_Run+0x1d8>)
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	4013      	ands	r3, r2
 8013750:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8013752:	4a60      	ldr	r2, [pc, #384]	@ (80138d4 <UTIL_SEQ_Run+0x1ec>)
 8013754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013756:	00db      	lsls	r3, r3, #3
 8013758:	4413      	add	r3, r2
 801375a:	685a      	ldr	r2, [r3, #4]
 801375c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801375e:	4013      	ands	r3, r2
 8013760:	2b00      	cmp	r3, #0
 8013762:	d106      	bne.n	8013772 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8013764:	4a5b      	ldr	r2, [pc, #364]	@ (80138d4 <UTIL_SEQ_Run+0x1ec>)
 8013766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013768:	00db      	lsls	r3, r3, #3
 801376a:	4413      	add	r3, r2
 801376c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013770:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8013772:	4a58      	ldr	r2, [pc, #352]	@ (80138d4 <UTIL_SEQ_Run+0x1ec>)
 8013774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013776:	00db      	lsls	r3, r3, #3
 8013778:	4413      	add	r3, r2
 801377a:	685a      	ldr	r2, [r3, #4]
 801377c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801377e:	4013      	ands	r3, r2
 8013780:	4618      	mov	r0, r3
 8013782:	f000 f9b3 	bl	8013aec <SEQ_BitPosition>
 8013786:	4603      	mov	r3, r0
 8013788:	461a      	mov	r2, r3
 801378a:	4b53      	ldr	r3, [pc, #332]	@ (80138d8 <UTIL_SEQ_Run+0x1f0>)
 801378c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801378e:	4a51      	ldr	r2, [pc, #324]	@ (80138d4 <UTIL_SEQ_Run+0x1ec>)
 8013790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013792:	00db      	lsls	r3, r3, #3
 8013794:	4413      	add	r3, r2
 8013796:	685a      	ldr	r2, [r3, #4]
 8013798:	4b4f      	ldr	r3, [pc, #316]	@ (80138d8 <UTIL_SEQ_Run+0x1f0>)
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	2101      	movs	r1, #1
 801379e:	fa01 f303 	lsl.w	r3, r1, r3
 80137a2:	43db      	mvns	r3, r3
 80137a4:	401a      	ands	r2, r3
 80137a6:	494b      	ldr	r1, [pc, #300]	@ (80138d4 <UTIL_SEQ_Run+0x1ec>)
 80137a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80137aa:	00db      	lsls	r3, r3, #3
 80137ac:	440b      	add	r3, r1
 80137ae:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80137b0:	f3ef 8310 	mrs	r3, PRIMASK
 80137b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80137b6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80137b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80137ba:	b672      	cpsid	i
}
 80137bc:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80137be:	4b46      	ldr	r3, [pc, #280]	@ (80138d8 <UTIL_SEQ_Run+0x1f0>)
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	2201      	movs	r2, #1
 80137c4:	fa02 f303 	lsl.w	r3, r2, r3
 80137c8:	43da      	mvns	r2, r3
 80137ca:	4b3e      	ldr	r3, [pc, #248]	@ (80138c4 <UTIL_SEQ_Run+0x1dc>)
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	4013      	ands	r3, r2
 80137d0:	4a3c      	ldr	r2, [pc, #240]	@ (80138c4 <UTIL_SEQ_Run+0x1dc>)
 80137d2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80137d4:	2302      	movs	r3, #2
 80137d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80137d8:	e013      	b.n	8013802 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80137da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80137dc:	3b01      	subs	r3, #1
 80137de:	4a3d      	ldr	r2, [pc, #244]	@ (80138d4 <UTIL_SEQ_Run+0x1ec>)
 80137e0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80137e4:	4b3c      	ldr	r3, [pc, #240]	@ (80138d8 <UTIL_SEQ_Run+0x1f0>)
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	2201      	movs	r2, #1
 80137ea:	fa02 f303 	lsl.w	r3, r2, r3
 80137ee:	43da      	mvns	r2, r3
 80137f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80137f2:	3b01      	subs	r3, #1
 80137f4:	400a      	ands	r2, r1
 80137f6:	4937      	ldr	r1, [pc, #220]	@ (80138d4 <UTIL_SEQ_Run+0x1ec>)
 80137f8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80137fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80137fe:	3b01      	subs	r3, #1
 8013800:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013804:	2b00      	cmp	r3, #0
 8013806:	d1e8      	bne.n	80137da <UTIL_SEQ_Run+0xf2>
 8013808:	6a3b      	ldr	r3, [r7, #32]
 801380a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801380c:	697b      	ldr	r3, [r7, #20]
 801380e:	f383 8810 	msr	PRIMASK, r3
}
 8013812:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8013814:	4b30      	ldr	r3, [pc, #192]	@ (80138d8 <UTIL_SEQ_Run+0x1f0>)
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	4a30      	ldr	r2, [pc, #192]	@ (80138dc <UTIL_SEQ_Run+0x1f4>)
 801381a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801381e:	4798      	blx	r3

    local_taskset = TaskSet;
 8013820:	4b28      	ldr	r3, [pc, #160]	@ (80138c4 <UTIL_SEQ_Run+0x1dc>)
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8013826:	4b28      	ldr	r3, [pc, #160]	@ (80138c8 <UTIL_SEQ_Run+0x1e0>)
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801382c:	4b27      	ldr	r3, [pc, #156]	@ (80138cc <UTIL_SEQ_Run+0x1e4>)
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8013832:	4b27      	ldr	r3, [pc, #156]	@ (80138d0 <UTIL_SEQ_Run+0x1e8>)
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8013838:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801383a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801383c:	401a      	ands	r2, r3
 801383e:	4b20      	ldr	r3, [pc, #128]	@ (80138c0 <UTIL_SEQ_Run+0x1d8>)
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	4013      	ands	r3, r2
 8013844:	2b00      	cmp	r3, #0
 8013846:	d005      	beq.n	8013854 <UTIL_SEQ_Run+0x16c>
 8013848:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801384a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801384c:	4013      	ands	r3, r2
 801384e:	2b00      	cmp	r3, #0
 8013850:	f43f af64 	beq.w	801371c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8013854:	4b20      	ldr	r3, [pc, #128]	@ (80138d8 <UTIL_SEQ_Run+0x1f0>)
 8013856:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801385a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801385c:	f000 f938 	bl	8013ad0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013860:	f3ef 8310 	mrs	r3, PRIMASK
 8013864:	613b      	str	r3, [r7, #16]
  return(result);
 8013866:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8013868:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801386a:	b672      	cpsid	i
}
 801386c:	bf00      	nop
  local_taskset = TaskSet;
 801386e:	4b15      	ldr	r3, [pc, #84]	@ (80138c4 <UTIL_SEQ_Run+0x1dc>)
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8013874:	4b14      	ldr	r3, [pc, #80]	@ (80138c8 <UTIL_SEQ_Run+0x1e0>)
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801387a:	4b14      	ldr	r3, [pc, #80]	@ (80138cc <UTIL_SEQ_Run+0x1e4>)
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8013880:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013884:	401a      	ands	r2, r3
 8013886:	4b0e      	ldr	r3, [pc, #56]	@ (80138c0 <UTIL_SEQ_Run+0x1d8>)
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	4013      	ands	r3, r2
 801388c:	2b00      	cmp	r3, #0
 801388e:	d107      	bne.n	80138a0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8013890:	4b0f      	ldr	r3, [pc, #60]	@ (80138d0 <UTIL_SEQ_Run+0x1e8>)
 8013892:	681a      	ldr	r2, [r3, #0]
 8013894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013896:	4013      	ands	r3, r2
 8013898:	2b00      	cmp	r3, #0
 801389a:	d101      	bne.n	80138a0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801389c:	f7ed fdd6 	bl	800144c <UTIL_SEQ_Idle>
 80138a0:	69fb      	ldr	r3, [r7, #28]
 80138a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	f383 8810 	msr	PRIMASK, r3
}
 80138aa:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80138ac:	f000 f917 	bl	8013ade <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80138b0:	4a03      	ldr	r2, [pc, #12]	@ (80138c0 <UTIL_SEQ_Run+0x1d8>)
 80138b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138b4:	6013      	str	r3, [r2, #0]

  return;
 80138b6:	bf00      	nop
}
 80138b8:	3740      	adds	r7, #64	@ 0x40
 80138ba:	46bd      	mov	sp, r7
 80138bc:	bd80      	pop	{r7, pc}
 80138be:	bf00      	nop
 80138c0:	20000160 	.word	0x20000160
 80138c4:	20001f74 	.word	0x20001f74
 80138c8:	20001f78 	.word	0x20001f78
 80138cc:	2000015c 	.word	0x2000015c
 80138d0:	20001f7c 	.word	0x20001f7c
 80138d4:	20002004 	.word	0x20002004
 80138d8:	20001f80 	.word	0x20001f80
 80138dc:	20001f84 	.word	0x20001f84

080138e0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b088      	sub	sp, #32
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	60f8      	str	r0, [r7, #12]
 80138e8:	60b9      	str	r1, [r7, #8]
 80138ea:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80138ec:	f3ef 8310 	mrs	r3, PRIMASK
 80138f0:	617b      	str	r3, [r7, #20]
  return(result);
 80138f2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80138f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80138f6:	b672      	cpsid	i
}
 80138f8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80138fa:	68f8      	ldr	r0, [r7, #12]
 80138fc:	f000 f8f6 	bl	8013aec <SEQ_BitPosition>
 8013900:	4603      	mov	r3, r0
 8013902:	4619      	mov	r1, r3
 8013904:	4a06      	ldr	r2, [pc, #24]	@ (8013920 <UTIL_SEQ_RegTask+0x40>)
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801390c:	69fb      	ldr	r3, [r7, #28]
 801390e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013910:	69bb      	ldr	r3, [r7, #24]
 8013912:	f383 8810 	msr	PRIMASK, r3
}
 8013916:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8013918:	bf00      	nop
}
 801391a:	3720      	adds	r7, #32
 801391c:	46bd      	mov	sp, r7
 801391e:	bd80      	pop	{r7, pc}
 8013920:	20001f84 	.word	0x20001f84

08013924 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8013924:	b480      	push	{r7}
 8013926:	b087      	sub	sp, #28
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
 801392c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801392e:	f3ef 8310 	mrs	r3, PRIMASK
 8013932:	60fb      	str	r3, [r7, #12]
  return(result);
 8013934:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013936:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013938:	b672      	cpsid	i
}
 801393a:	bf00      	nop

  TaskSet |= TaskId_bm;
 801393c:	4b0d      	ldr	r3, [pc, #52]	@ (8013974 <UTIL_SEQ_SetTask+0x50>)
 801393e:	681a      	ldr	r2, [r3, #0]
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	4313      	orrs	r3, r2
 8013944:	4a0b      	ldr	r2, [pc, #44]	@ (8013974 <UTIL_SEQ_SetTask+0x50>)
 8013946:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8013948:	4a0b      	ldr	r2, [pc, #44]	@ (8013978 <UTIL_SEQ_SetTask+0x54>)
 801394a:	683b      	ldr	r3, [r7, #0]
 801394c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	431a      	orrs	r2, r3
 8013954:	4908      	ldr	r1, [pc, #32]	@ (8013978 <UTIL_SEQ_SetTask+0x54>)
 8013956:	683b      	ldr	r3, [r7, #0]
 8013958:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801395c:	697b      	ldr	r3, [r7, #20]
 801395e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013960:	693b      	ldr	r3, [r7, #16]
 8013962:	f383 8810 	msr	PRIMASK, r3
}
 8013966:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013968:	bf00      	nop
}
 801396a:	371c      	adds	r7, #28
 801396c:	46bd      	mov	sp, r7
 801396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013972:	4770      	bx	lr
 8013974:	20001f74 	.word	0x20001f74
 8013978:	20002004 	.word	0x20002004

0801397c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 801397c:	b480      	push	{r7}
 801397e:	b087      	sub	sp, #28
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013984:	f3ef 8310 	mrs	r3, PRIMASK
 8013988:	60fb      	str	r3, [r7, #12]
  return(result);
 801398a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801398c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801398e:	b672      	cpsid	i
}
 8013990:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	43da      	mvns	r2, r3
 8013996:	4b08      	ldr	r3, [pc, #32]	@ (80139b8 <UTIL_SEQ_PauseTask+0x3c>)
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	4013      	ands	r3, r2
 801399c:	4a06      	ldr	r2, [pc, #24]	@ (80139b8 <UTIL_SEQ_PauseTask+0x3c>)
 801399e:	6013      	str	r3, [r2, #0]
 80139a0:	697b      	ldr	r3, [r7, #20]
 80139a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80139a4:	693b      	ldr	r3, [r7, #16]
 80139a6:	f383 8810 	msr	PRIMASK, r3
}
 80139aa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80139ac:	bf00      	nop
}
 80139ae:	371c      	adds	r7, #28
 80139b0:	46bd      	mov	sp, r7
 80139b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b6:	4770      	bx	lr
 80139b8:	2000015c 	.word	0x2000015c

080139bc <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80139bc:	b480      	push	{r7}
 80139be:	b087      	sub	sp, #28
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80139c4:	f3ef 8310 	mrs	r3, PRIMASK
 80139c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80139ca:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80139cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80139ce:	b672      	cpsid	i
}
 80139d0:	bf00      	nop

  TaskMask |= TaskId_bm;
 80139d2:	4b09      	ldr	r3, [pc, #36]	@ (80139f8 <UTIL_SEQ_ResumeTask+0x3c>)
 80139d4:	681a      	ldr	r2, [r3, #0]
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	4313      	orrs	r3, r2
 80139da:	4a07      	ldr	r2, [pc, #28]	@ (80139f8 <UTIL_SEQ_ResumeTask+0x3c>)
 80139dc:	6013      	str	r3, [r2, #0]
 80139de:	697b      	ldr	r3, [r7, #20]
 80139e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80139e2:	693b      	ldr	r3, [r7, #16]
 80139e4:	f383 8810 	msr	PRIMASK, r3
}
 80139e8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80139ea:	bf00      	nop
}
 80139ec:	371c      	adds	r7, #28
 80139ee:	46bd      	mov	sp, r7
 80139f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f4:	4770      	bx	lr
 80139f6:	bf00      	nop
 80139f8:	2000015c 	.word	0x2000015c

080139fc <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80139fc:	b480      	push	{r7}
 80139fe:	b087      	sub	sp, #28
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013a04:	f3ef 8310 	mrs	r3, PRIMASK
 8013a08:	60fb      	str	r3, [r7, #12]
  return(result);
 8013a0a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013a0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013a0e:	b672      	cpsid	i
}
 8013a10:	bf00      	nop

  EvtSet |= EvtId_bm;
 8013a12:	4b09      	ldr	r3, [pc, #36]	@ (8013a38 <UTIL_SEQ_SetEvt+0x3c>)
 8013a14:	681a      	ldr	r2, [r3, #0]
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	4313      	orrs	r3, r2
 8013a1a:	4a07      	ldr	r2, [pc, #28]	@ (8013a38 <UTIL_SEQ_SetEvt+0x3c>)
 8013a1c:	6013      	str	r3, [r2, #0]
 8013a1e:	697b      	ldr	r3, [r7, #20]
 8013a20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013a22:	693b      	ldr	r3, [r7, #16]
 8013a24:	f383 8810 	msr	PRIMASK, r3
}
 8013a28:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013a2a:	bf00      	nop
}
 8013a2c:	371c      	adds	r7, #28
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a34:	4770      	bx	lr
 8013a36:	bf00      	nop
 8013a38:	20001f78 	.word	0x20001f78

08013a3c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b088      	sub	sp, #32
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8013a44:	4b1f      	ldr	r3, [pc, #124]	@ (8013ac4 <UTIL_SEQ_WaitEvt+0x88>)
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8013a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8013ac4 <UTIL_SEQ_WaitEvt+0x88>)
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013a52:	d102      	bne.n	8013a5a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8013a54:	2300      	movs	r3, #0
 8013a56:	61fb      	str	r3, [r7, #28]
 8013a58:	e005      	b.n	8013a66 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8013a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8013ac4 <UTIL_SEQ_WaitEvt+0x88>)
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	2201      	movs	r2, #1
 8013a60:	fa02 f303 	lsl.w	r3, r2, r3
 8013a64:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8013a66:	4b18      	ldr	r3, [pc, #96]	@ (8013ac8 <UTIL_SEQ_WaitEvt+0x8c>)
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8013a6c:	4a16      	ldr	r2, [pc, #88]	@ (8013ac8 <UTIL_SEQ_WaitEvt+0x8c>)
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8013a72:	e003      	b.n	8013a7c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8013a74:	6879      	ldr	r1, [r7, #4]
 8013a76:	69f8      	ldr	r0, [r7, #28]
 8013a78:	f7ed fcef 	bl	800145a <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8013a7c:	4b13      	ldr	r3, [pc, #76]	@ (8013acc <UTIL_SEQ_WaitEvt+0x90>)
 8013a7e:	681a      	ldr	r2, [r3, #0]
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	4013      	ands	r3, r2
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d0f5      	beq.n	8013a74 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8013a88:	4a0e      	ldr	r2, [pc, #56]	@ (8013ac4 <UTIL_SEQ_WaitEvt+0x88>)
 8013a8a:	69bb      	ldr	r3, [r7, #24]
 8013a8c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8013a92:	60bb      	str	r3, [r7, #8]
  return(result);
 8013a94:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013a96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8013a98:	b672      	cpsid	i
}
 8013a9a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	43da      	mvns	r2, r3
 8013aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8013acc <UTIL_SEQ_WaitEvt+0x90>)
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	4013      	ands	r3, r2
 8013aa6:	4a09      	ldr	r2, [pc, #36]	@ (8013acc <UTIL_SEQ_WaitEvt+0x90>)
 8013aa8:	6013      	str	r3, [r2, #0]
 8013aaa:	693b      	ldr	r3, [r7, #16]
 8013aac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	f383 8810 	msr	PRIMASK, r3
}
 8013ab4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8013ab6:	4a04      	ldr	r2, [pc, #16]	@ (8013ac8 <UTIL_SEQ_WaitEvt+0x8c>)
 8013ab8:	697b      	ldr	r3, [r7, #20]
 8013aba:	6013      	str	r3, [r2, #0]
  return;
 8013abc:	bf00      	nop
}
 8013abe:	3720      	adds	r7, #32
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	bd80      	pop	{r7, pc}
 8013ac4:	20001f80 	.word	0x20001f80
 8013ac8:	20001f7c 	.word	0x20001f7c
 8013acc:	20001f78 	.word	0x20001f78

08013ad0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8013ad0:	b480      	push	{r7}
 8013ad2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8013ad4:	bf00      	nop
}
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013adc:	4770      	bx	lr

08013ade <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8013ade:	b480      	push	{r7}
 8013ae0:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8013ae2:	bf00      	nop
}
 8013ae4:	46bd      	mov	sp, r7
 8013ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aea:	4770      	bx	lr

08013aec <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8013aec:	b480      	push	{r7}
 8013aee:	b085      	sub	sp, #20
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8013af4:	2300      	movs	r3, #0
 8013af6:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8013afc:	68bb      	ldr	r3, [r7, #8]
 8013afe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013b02:	d204      	bcs.n	8013b0e <SEQ_BitPosition+0x22>
 8013b04:	2310      	movs	r3, #16
 8013b06:	73fb      	strb	r3, [r7, #15]
 8013b08:	68bb      	ldr	r3, [r7, #8]
 8013b0a:	041b      	lsls	r3, r3, #16
 8013b0c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8013b0e:	68bb      	ldr	r3, [r7, #8]
 8013b10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013b14:	d205      	bcs.n	8013b22 <SEQ_BitPosition+0x36>
 8013b16:	7bfb      	ldrb	r3, [r7, #15]
 8013b18:	3308      	adds	r3, #8
 8013b1a:	73fb      	strb	r3, [r7, #15]
 8013b1c:	68bb      	ldr	r3, [r7, #8]
 8013b1e:	021b      	lsls	r3, r3, #8
 8013b20:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8013b22:	68bb      	ldr	r3, [r7, #8]
 8013b24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013b28:	d205      	bcs.n	8013b36 <SEQ_BitPosition+0x4a>
 8013b2a:	7bfb      	ldrb	r3, [r7, #15]
 8013b2c:	3304      	adds	r3, #4
 8013b2e:	73fb      	strb	r3, [r7, #15]
 8013b30:	68bb      	ldr	r3, [r7, #8]
 8013b32:	011b      	lsls	r3, r3, #4
 8013b34:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8013b36:	68bb      	ldr	r3, [r7, #8]
 8013b38:	0f1b      	lsrs	r3, r3, #28
 8013b3a:	4a07      	ldr	r2, [pc, #28]	@ (8013b58 <SEQ_BitPosition+0x6c>)
 8013b3c:	5cd2      	ldrb	r2, [r2, r3]
 8013b3e:	7bfb      	ldrb	r3, [r7, #15]
 8013b40:	4413      	add	r3, r2
 8013b42:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8013b44:	7bfb      	ldrb	r3, [r7, #15]
 8013b46:	f1c3 031f 	rsb	r3, r3, #31
 8013b4a:	b2db      	uxtb	r3, r3
}
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	3714      	adds	r7, #20
 8013b50:	46bd      	mov	sp, r7
 8013b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b56:	4770      	bx	lr
 8013b58:	08016818 	.word	0x08016818

08013b5c <siprintf>:
 8013b5c:	b40e      	push	{r1, r2, r3}
 8013b5e:	b500      	push	{lr}
 8013b60:	b09c      	sub	sp, #112	@ 0x70
 8013b62:	ab1d      	add	r3, sp, #116	@ 0x74
 8013b64:	9002      	str	r0, [sp, #8]
 8013b66:	9006      	str	r0, [sp, #24]
 8013b68:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013b6c:	4809      	ldr	r0, [pc, #36]	@ (8013b94 <siprintf+0x38>)
 8013b6e:	9107      	str	r1, [sp, #28]
 8013b70:	9104      	str	r1, [sp, #16]
 8013b72:	4909      	ldr	r1, [pc, #36]	@ (8013b98 <siprintf+0x3c>)
 8013b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b78:	9105      	str	r1, [sp, #20]
 8013b7a:	6800      	ldr	r0, [r0, #0]
 8013b7c:	9301      	str	r3, [sp, #4]
 8013b7e:	a902      	add	r1, sp, #8
 8013b80:	f000 f9e4 	bl	8013f4c <_svfiprintf_r>
 8013b84:	9b02      	ldr	r3, [sp, #8]
 8013b86:	2200      	movs	r2, #0
 8013b88:	701a      	strb	r2, [r3, #0]
 8013b8a:	b01c      	add	sp, #112	@ 0x70
 8013b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b90:	b003      	add	sp, #12
 8013b92:	4770      	bx	lr
 8013b94:	20000170 	.word	0x20000170
 8013b98:	ffff0208 	.word	0xffff0208

08013b9c <std>:
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	b510      	push	{r4, lr}
 8013ba0:	4604      	mov	r4, r0
 8013ba2:	e9c0 3300 	strd	r3, r3, [r0]
 8013ba6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013baa:	6083      	str	r3, [r0, #8]
 8013bac:	8181      	strh	r1, [r0, #12]
 8013bae:	6643      	str	r3, [r0, #100]	@ 0x64
 8013bb0:	81c2      	strh	r2, [r0, #14]
 8013bb2:	6183      	str	r3, [r0, #24]
 8013bb4:	4619      	mov	r1, r3
 8013bb6:	2208      	movs	r2, #8
 8013bb8:	305c      	adds	r0, #92	@ 0x5c
 8013bba:	f000 f929 	bl	8013e10 <memset>
 8013bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8013bf4 <std+0x58>)
 8013bc0:	6263      	str	r3, [r4, #36]	@ 0x24
 8013bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8013bf8 <std+0x5c>)
 8013bc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8013bfc <std+0x60>)
 8013bc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013bca:	4b0d      	ldr	r3, [pc, #52]	@ (8013c00 <std+0x64>)
 8013bcc:	6323      	str	r3, [r4, #48]	@ 0x30
 8013bce:	4b0d      	ldr	r3, [pc, #52]	@ (8013c04 <std+0x68>)
 8013bd0:	6224      	str	r4, [r4, #32]
 8013bd2:	429c      	cmp	r4, r3
 8013bd4:	d006      	beq.n	8013be4 <std+0x48>
 8013bd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013bda:	4294      	cmp	r4, r2
 8013bdc:	d002      	beq.n	8013be4 <std+0x48>
 8013bde:	33d0      	adds	r3, #208	@ 0xd0
 8013be0:	429c      	cmp	r4, r3
 8013be2:	d105      	bne.n	8013bf0 <std+0x54>
 8013be4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013bec:	f000 b942 	b.w	8013e74 <__retarget_lock_init_recursive>
 8013bf0:	bd10      	pop	{r4, pc}
 8013bf2:	bf00      	nop
 8013bf4:	08014999 	.word	0x08014999
 8013bf8:	080149bb 	.word	0x080149bb
 8013bfc:	080149f3 	.word	0x080149f3
 8013c00:	08014a17 	.word	0x08014a17
 8013c04:	20002014 	.word	0x20002014

08013c08 <stdio_exit_handler>:
 8013c08:	4a02      	ldr	r2, [pc, #8]	@ (8013c14 <stdio_exit_handler+0xc>)
 8013c0a:	4903      	ldr	r1, [pc, #12]	@ (8013c18 <stdio_exit_handler+0x10>)
 8013c0c:	4803      	ldr	r0, [pc, #12]	@ (8013c1c <stdio_exit_handler+0x14>)
 8013c0e:	f000 b869 	b.w	8013ce4 <_fwalk_sglue>
 8013c12:	bf00      	nop
 8013c14:	20000164 	.word	0x20000164
 8013c18:	08014931 	.word	0x08014931
 8013c1c:	20000174 	.word	0x20000174

08013c20 <cleanup_stdio>:
 8013c20:	6841      	ldr	r1, [r0, #4]
 8013c22:	4b0c      	ldr	r3, [pc, #48]	@ (8013c54 <cleanup_stdio+0x34>)
 8013c24:	4299      	cmp	r1, r3
 8013c26:	b510      	push	{r4, lr}
 8013c28:	4604      	mov	r4, r0
 8013c2a:	d001      	beq.n	8013c30 <cleanup_stdio+0x10>
 8013c2c:	f000 fe80 	bl	8014930 <_fflush_r>
 8013c30:	68a1      	ldr	r1, [r4, #8]
 8013c32:	4b09      	ldr	r3, [pc, #36]	@ (8013c58 <cleanup_stdio+0x38>)
 8013c34:	4299      	cmp	r1, r3
 8013c36:	d002      	beq.n	8013c3e <cleanup_stdio+0x1e>
 8013c38:	4620      	mov	r0, r4
 8013c3a:	f000 fe79 	bl	8014930 <_fflush_r>
 8013c3e:	68e1      	ldr	r1, [r4, #12]
 8013c40:	4b06      	ldr	r3, [pc, #24]	@ (8013c5c <cleanup_stdio+0x3c>)
 8013c42:	4299      	cmp	r1, r3
 8013c44:	d004      	beq.n	8013c50 <cleanup_stdio+0x30>
 8013c46:	4620      	mov	r0, r4
 8013c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c4c:	f000 be70 	b.w	8014930 <_fflush_r>
 8013c50:	bd10      	pop	{r4, pc}
 8013c52:	bf00      	nop
 8013c54:	20002014 	.word	0x20002014
 8013c58:	2000207c 	.word	0x2000207c
 8013c5c:	200020e4 	.word	0x200020e4

08013c60 <global_stdio_init.part.0>:
 8013c60:	b510      	push	{r4, lr}
 8013c62:	4b0b      	ldr	r3, [pc, #44]	@ (8013c90 <global_stdio_init.part.0+0x30>)
 8013c64:	4c0b      	ldr	r4, [pc, #44]	@ (8013c94 <global_stdio_init.part.0+0x34>)
 8013c66:	4a0c      	ldr	r2, [pc, #48]	@ (8013c98 <global_stdio_init.part.0+0x38>)
 8013c68:	601a      	str	r2, [r3, #0]
 8013c6a:	4620      	mov	r0, r4
 8013c6c:	2200      	movs	r2, #0
 8013c6e:	2104      	movs	r1, #4
 8013c70:	f7ff ff94 	bl	8013b9c <std>
 8013c74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013c78:	2201      	movs	r2, #1
 8013c7a:	2109      	movs	r1, #9
 8013c7c:	f7ff ff8e 	bl	8013b9c <std>
 8013c80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013c84:	2202      	movs	r2, #2
 8013c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c8a:	2112      	movs	r1, #18
 8013c8c:	f7ff bf86 	b.w	8013b9c <std>
 8013c90:	2000214c 	.word	0x2000214c
 8013c94:	20002014 	.word	0x20002014
 8013c98:	08013c09 	.word	0x08013c09

08013c9c <__sfp_lock_acquire>:
 8013c9c:	4801      	ldr	r0, [pc, #4]	@ (8013ca4 <__sfp_lock_acquire+0x8>)
 8013c9e:	f000 b8ea 	b.w	8013e76 <__retarget_lock_acquire_recursive>
 8013ca2:	bf00      	nop
 8013ca4:	20002151 	.word	0x20002151

08013ca8 <__sfp_lock_release>:
 8013ca8:	4801      	ldr	r0, [pc, #4]	@ (8013cb0 <__sfp_lock_release+0x8>)
 8013caa:	f000 b8e5 	b.w	8013e78 <__retarget_lock_release_recursive>
 8013cae:	bf00      	nop
 8013cb0:	20002151 	.word	0x20002151

08013cb4 <__sinit>:
 8013cb4:	b510      	push	{r4, lr}
 8013cb6:	4604      	mov	r4, r0
 8013cb8:	f7ff fff0 	bl	8013c9c <__sfp_lock_acquire>
 8013cbc:	6a23      	ldr	r3, [r4, #32]
 8013cbe:	b11b      	cbz	r3, 8013cc8 <__sinit+0x14>
 8013cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013cc4:	f7ff bff0 	b.w	8013ca8 <__sfp_lock_release>
 8013cc8:	4b04      	ldr	r3, [pc, #16]	@ (8013cdc <__sinit+0x28>)
 8013cca:	6223      	str	r3, [r4, #32]
 8013ccc:	4b04      	ldr	r3, [pc, #16]	@ (8013ce0 <__sinit+0x2c>)
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d1f5      	bne.n	8013cc0 <__sinit+0xc>
 8013cd4:	f7ff ffc4 	bl	8013c60 <global_stdio_init.part.0>
 8013cd8:	e7f2      	b.n	8013cc0 <__sinit+0xc>
 8013cda:	bf00      	nop
 8013cdc:	08013c21 	.word	0x08013c21
 8013ce0:	2000214c 	.word	0x2000214c

08013ce4 <_fwalk_sglue>:
 8013ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ce8:	4607      	mov	r7, r0
 8013cea:	4688      	mov	r8, r1
 8013cec:	4614      	mov	r4, r2
 8013cee:	2600      	movs	r6, #0
 8013cf0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013cf4:	f1b9 0901 	subs.w	r9, r9, #1
 8013cf8:	d505      	bpl.n	8013d06 <_fwalk_sglue+0x22>
 8013cfa:	6824      	ldr	r4, [r4, #0]
 8013cfc:	2c00      	cmp	r4, #0
 8013cfe:	d1f7      	bne.n	8013cf0 <_fwalk_sglue+0xc>
 8013d00:	4630      	mov	r0, r6
 8013d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d06:	89ab      	ldrh	r3, [r5, #12]
 8013d08:	2b01      	cmp	r3, #1
 8013d0a:	d907      	bls.n	8013d1c <_fwalk_sglue+0x38>
 8013d0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013d10:	3301      	adds	r3, #1
 8013d12:	d003      	beq.n	8013d1c <_fwalk_sglue+0x38>
 8013d14:	4629      	mov	r1, r5
 8013d16:	4638      	mov	r0, r7
 8013d18:	47c0      	blx	r8
 8013d1a:	4306      	orrs	r6, r0
 8013d1c:	3568      	adds	r5, #104	@ 0x68
 8013d1e:	e7e9      	b.n	8013cf4 <_fwalk_sglue+0x10>

08013d20 <iprintf>:
 8013d20:	b40f      	push	{r0, r1, r2, r3}
 8013d22:	b507      	push	{r0, r1, r2, lr}
 8013d24:	4906      	ldr	r1, [pc, #24]	@ (8013d40 <iprintf+0x20>)
 8013d26:	ab04      	add	r3, sp, #16
 8013d28:	6808      	ldr	r0, [r1, #0]
 8013d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d2e:	6881      	ldr	r1, [r0, #8]
 8013d30:	9301      	str	r3, [sp, #4]
 8013d32:	f000 fa31 	bl	8014198 <_vfiprintf_r>
 8013d36:	b003      	add	sp, #12
 8013d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8013d3c:	b004      	add	sp, #16
 8013d3e:	4770      	bx	lr
 8013d40:	20000170 	.word	0x20000170

08013d44 <putchar>:
 8013d44:	4b02      	ldr	r3, [pc, #8]	@ (8013d50 <putchar+0xc>)
 8013d46:	4601      	mov	r1, r0
 8013d48:	6818      	ldr	r0, [r3, #0]
 8013d4a:	6882      	ldr	r2, [r0, #8]
 8013d4c:	f000 bf8c 	b.w	8014c68 <_putc_r>
 8013d50:	20000170 	.word	0x20000170

08013d54 <_puts_r>:
 8013d54:	6a03      	ldr	r3, [r0, #32]
 8013d56:	b570      	push	{r4, r5, r6, lr}
 8013d58:	6884      	ldr	r4, [r0, #8]
 8013d5a:	4605      	mov	r5, r0
 8013d5c:	460e      	mov	r6, r1
 8013d5e:	b90b      	cbnz	r3, 8013d64 <_puts_r+0x10>
 8013d60:	f7ff ffa8 	bl	8013cb4 <__sinit>
 8013d64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013d66:	07db      	lsls	r3, r3, #31
 8013d68:	d405      	bmi.n	8013d76 <_puts_r+0x22>
 8013d6a:	89a3      	ldrh	r3, [r4, #12]
 8013d6c:	0598      	lsls	r0, r3, #22
 8013d6e:	d402      	bmi.n	8013d76 <_puts_r+0x22>
 8013d70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013d72:	f000 f880 	bl	8013e76 <__retarget_lock_acquire_recursive>
 8013d76:	89a3      	ldrh	r3, [r4, #12]
 8013d78:	0719      	lsls	r1, r3, #28
 8013d7a:	d502      	bpl.n	8013d82 <_puts_r+0x2e>
 8013d7c:	6923      	ldr	r3, [r4, #16]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d135      	bne.n	8013dee <_puts_r+0x9a>
 8013d82:	4621      	mov	r1, r4
 8013d84:	4628      	mov	r0, r5
 8013d86:	f000 feb7 	bl	8014af8 <__swsetup_r>
 8013d8a:	b380      	cbz	r0, 8013dee <_puts_r+0x9a>
 8013d8c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8013d90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013d92:	07da      	lsls	r2, r3, #31
 8013d94:	d405      	bmi.n	8013da2 <_puts_r+0x4e>
 8013d96:	89a3      	ldrh	r3, [r4, #12]
 8013d98:	059b      	lsls	r3, r3, #22
 8013d9a:	d402      	bmi.n	8013da2 <_puts_r+0x4e>
 8013d9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013d9e:	f000 f86b 	bl	8013e78 <__retarget_lock_release_recursive>
 8013da2:	4628      	mov	r0, r5
 8013da4:	bd70      	pop	{r4, r5, r6, pc}
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	da04      	bge.n	8013db4 <_puts_r+0x60>
 8013daa:	69a2      	ldr	r2, [r4, #24]
 8013dac:	429a      	cmp	r2, r3
 8013dae:	dc17      	bgt.n	8013de0 <_puts_r+0x8c>
 8013db0:	290a      	cmp	r1, #10
 8013db2:	d015      	beq.n	8013de0 <_puts_r+0x8c>
 8013db4:	6823      	ldr	r3, [r4, #0]
 8013db6:	1c5a      	adds	r2, r3, #1
 8013db8:	6022      	str	r2, [r4, #0]
 8013dba:	7019      	strb	r1, [r3, #0]
 8013dbc:	68a3      	ldr	r3, [r4, #8]
 8013dbe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013dc2:	3b01      	subs	r3, #1
 8013dc4:	60a3      	str	r3, [r4, #8]
 8013dc6:	2900      	cmp	r1, #0
 8013dc8:	d1ed      	bne.n	8013da6 <_puts_r+0x52>
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	da11      	bge.n	8013df2 <_puts_r+0x9e>
 8013dce:	4622      	mov	r2, r4
 8013dd0:	210a      	movs	r1, #10
 8013dd2:	4628      	mov	r0, r5
 8013dd4:	f000 fe51 	bl	8014a7a <__swbuf_r>
 8013dd8:	3001      	adds	r0, #1
 8013dda:	d0d7      	beq.n	8013d8c <_puts_r+0x38>
 8013ddc:	250a      	movs	r5, #10
 8013dde:	e7d7      	b.n	8013d90 <_puts_r+0x3c>
 8013de0:	4622      	mov	r2, r4
 8013de2:	4628      	mov	r0, r5
 8013de4:	f000 fe49 	bl	8014a7a <__swbuf_r>
 8013de8:	3001      	adds	r0, #1
 8013dea:	d1e7      	bne.n	8013dbc <_puts_r+0x68>
 8013dec:	e7ce      	b.n	8013d8c <_puts_r+0x38>
 8013dee:	3e01      	subs	r6, #1
 8013df0:	e7e4      	b.n	8013dbc <_puts_r+0x68>
 8013df2:	6823      	ldr	r3, [r4, #0]
 8013df4:	1c5a      	adds	r2, r3, #1
 8013df6:	6022      	str	r2, [r4, #0]
 8013df8:	220a      	movs	r2, #10
 8013dfa:	701a      	strb	r2, [r3, #0]
 8013dfc:	e7ee      	b.n	8013ddc <_puts_r+0x88>
	...

08013e00 <puts>:
 8013e00:	4b02      	ldr	r3, [pc, #8]	@ (8013e0c <puts+0xc>)
 8013e02:	4601      	mov	r1, r0
 8013e04:	6818      	ldr	r0, [r3, #0]
 8013e06:	f7ff bfa5 	b.w	8013d54 <_puts_r>
 8013e0a:	bf00      	nop
 8013e0c:	20000170 	.word	0x20000170

08013e10 <memset>:
 8013e10:	4402      	add	r2, r0
 8013e12:	4603      	mov	r3, r0
 8013e14:	4293      	cmp	r3, r2
 8013e16:	d100      	bne.n	8013e1a <memset+0xa>
 8013e18:	4770      	bx	lr
 8013e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8013e1e:	e7f9      	b.n	8013e14 <memset+0x4>

08013e20 <__errno>:
 8013e20:	4b01      	ldr	r3, [pc, #4]	@ (8013e28 <__errno+0x8>)
 8013e22:	6818      	ldr	r0, [r3, #0]
 8013e24:	4770      	bx	lr
 8013e26:	bf00      	nop
 8013e28:	20000170 	.word	0x20000170

08013e2c <__libc_init_array>:
 8013e2c:	b570      	push	{r4, r5, r6, lr}
 8013e2e:	4d0d      	ldr	r5, [pc, #52]	@ (8013e64 <__libc_init_array+0x38>)
 8013e30:	4c0d      	ldr	r4, [pc, #52]	@ (8013e68 <__libc_init_array+0x3c>)
 8013e32:	1b64      	subs	r4, r4, r5
 8013e34:	10a4      	asrs	r4, r4, #2
 8013e36:	2600      	movs	r6, #0
 8013e38:	42a6      	cmp	r6, r4
 8013e3a:	d109      	bne.n	8013e50 <__libc_init_array+0x24>
 8013e3c:	4d0b      	ldr	r5, [pc, #44]	@ (8013e6c <__libc_init_array+0x40>)
 8013e3e:	4c0c      	ldr	r4, [pc, #48]	@ (8013e70 <__libc_init_array+0x44>)
 8013e40:	f001 f82a 	bl	8014e98 <_init>
 8013e44:	1b64      	subs	r4, r4, r5
 8013e46:	10a4      	asrs	r4, r4, #2
 8013e48:	2600      	movs	r6, #0
 8013e4a:	42a6      	cmp	r6, r4
 8013e4c:	d105      	bne.n	8013e5a <__libc_init_array+0x2e>
 8013e4e:	bd70      	pop	{r4, r5, r6, pc}
 8013e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8013e54:	4798      	blx	r3
 8013e56:	3601      	adds	r6, #1
 8013e58:	e7ee      	b.n	8013e38 <__libc_init_array+0xc>
 8013e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8013e5e:	4798      	blx	r3
 8013e60:	3601      	adds	r6, #1
 8013e62:	e7f2      	b.n	8013e4a <__libc_init_array+0x1e>
 8013e64:	08016864 	.word	0x08016864
 8013e68:	08016864 	.word	0x08016864
 8013e6c:	08016864 	.word	0x08016864
 8013e70:	08016868 	.word	0x08016868

08013e74 <__retarget_lock_init_recursive>:
 8013e74:	4770      	bx	lr

08013e76 <__retarget_lock_acquire_recursive>:
 8013e76:	4770      	bx	lr

08013e78 <__retarget_lock_release_recursive>:
 8013e78:	4770      	bx	lr

08013e7a <memcpy>:
 8013e7a:	440a      	add	r2, r1
 8013e7c:	4291      	cmp	r1, r2
 8013e7e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8013e82:	d100      	bne.n	8013e86 <memcpy+0xc>
 8013e84:	4770      	bx	lr
 8013e86:	b510      	push	{r4, lr}
 8013e88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013e90:	4291      	cmp	r1, r2
 8013e92:	d1f9      	bne.n	8013e88 <memcpy+0xe>
 8013e94:	bd10      	pop	{r4, pc}

08013e96 <__ssputs_r>:
 8013e96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e9a:	688e      	ldr	r6, [r1, #8]
 8013e9c:	461f      	mov	r7, r3
 8013e9e:	42be      	cmp	r6, r7
 8013ea0:	680b      	ldr	r3, [r1, #0]
 8013ea2:	4682      	mov	sl, r0
 8013ea4:	460c      	mov	r4, r1
 8013ea6:	4690      	mov	r8, r2
 8013ea8:	d82d      	bhi.n	8013f06 <__ssputs_r+0x70>
 8013eaa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013eae:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013eb2:	d026      	beq.n	8013f02 <__ssputs_r+0x6c>
 8013eb4:	6965      	ldr	r5, [r4, #20]
 8013eb6:	6909      	ldr	r1, [r1, #16]
 8013eb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013ebc:	eba3 0901 	sub.w	r9, r3, r1
 8013ec0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013ec4:	1c7b      	adds	r3, r7, #1
 8013ec6:	444b      	add	r3, r9
 8013ec8:	106d      	asrs	r5, r5, #1
 8013eca:	429d      	cmp	r5, r3
 8013ecc:	bf38      	it	cc
 8013ece:	461d      	movcc	r5, r3
 8013ed0:	0553      	lsls	r3, r2, #21
 8013ed2:	d527      	bpl.n	8013f24 <__ssputs_r+0x8e>
 8013ed4:	4629      	mov	r1, r5
 8013ed6:	f000 fa99 	bl	801440c <_malloc_r>
 8013eda:	4606      	mov	r6, r0
 8013edc:	b360      	cbz	r0, 8013f38 <__ssputs_r+0xa2>
 8013ede:	6921      	ldr	r1, [r4, #16]
 8013ee0:	464a      	mov	r2, r9
 8013ee2:	f7ff ffca 	bl	8013e7a <memcpy>
 8013ee6:	89a3      	ldrh	r3, [r4, #12]
 8013ee8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013eec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013ef0:	81a3      	strh	r3, [r4, #12]
 8013ef2:	6126      	str	r6, [r4, #16]
 8013ef4:	6165      	str	r5, [r4, #20]
 8013ef6:	444e      	add	r6, r9
 8013ef8:	eba5 0509 	sub.w	r5, r5, r9
 8013efc:	6026      	str	r6, [r4, #0]
 8013efe:	60a5      	str	r5, [r4, #8]
 8013f00:	463e      	mov	r6, r7
 8013f02:	42be      	cmp	r6, r7
 8013f04:	d900      	bls.n	8013f08 <__ssputs_r+0x72>
 8013f06:	463e      	mov	r6, r7
 8013f08:	6820      	ldr	r0, [r4, #0]
 8013f0a:	4632      	mov	r2, r6
 8013f0c:	4641      	mov	r1, r8
 8013f0e:	f000 fedf 	bl	8014cd0 <memmove>
 8013f12:	68a3      	ldr	r3, [r4, #8]
 8013f14:	1b9b      	subs	r3, r3, r6
 8013f16:	60a3      	str	r3, [r4, #8]
 8013f18:	6823      	ldr	r3, [r4, #0]
 8013f1a:	4433      	add	r3, r6
 8013f1c:	6023      	str	r3, [r4, #0]
 8013f1e:	2000      	movs	r0, #0
 8013f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f24:	462a      	mov	r2, r5
 8013f26:	f000 fd7a 	bl	8014a1e <_realloc_r>
 8013f2a:	4606      	mov	r6, r0
 8013f2c:	2800      	cmp	r0, #0
 8013f2e:	d1e0      	bne.n	8013ef2 <__ssputs_r+0x5c>
 8013f30:	6921      	ldr	r1, [r4, #16]
 8013f32:	4650      	mov	r0, sl
 8013f34:	f000 ff5e 	bl	8014df4 <_free_r>
 8013f38:	230c      	movs	r3, #12
 8013f3a:	f8ca 3000 	str.w	r3, [sl]
 8013f3e:	89a3      	ldrh	r3, [r4, #12]
 8013f40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013f44:	81a3      	strh	r3, [r4, #12]
 8013f46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013f4a:	e7e9      	b.n	8013f20 <__ssputs_r+0x8a>

08013f4c <_svfiprintf_r>:
 8013f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f50:	4698      	mov	r8, r3
 8013f52:	898b      	ldrh	r3, [r1, #12]
 8013f54:	061b      	lsls	r3, r3, #24
 8013f56:	b09d      	sub	sp, #116	@ 0x74
 8013f58:	4607      	mov	r7, r0
 8013f5a:	460d      	mov	r5, r1
 8013f5c:	4614      	mov	r4, r2
 8013f5e:	d510      	bpl.n	8013f82 <_svfiprintf_r+0x36>
 8013f60:	690b      	ldr	r3, [r1, #16]
 8013f62:	b973      	cbnz	r3, 8013f82 <_svfiprintf_r+0x36>
 8013f64:	2140      	movs	r1, #64	@ 0x40
 8013f66:	f000 fa51 	bl	801440c <_malloc_r>
 8013f6a:	6028      	str	r0, [r5, #0]
 8013f6c:	6128      	str	r0, [r5, #16]
 8013f6e:	b930      	cbnz	r0, 8013f7e <_svfiprintf_r+0x32>
 8013f70:	230c      	movs	r3, #12
 8013f72:	603b      	str	r3, [r7, #0]
 8013f74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013f78:	b01d      	add	sp, #116	@ 0x74
 8013f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f7e:	2340      	movs	r3, #64	@ 0x40
 8013f80:	616b      	str	r3, [r5, #20]
 8013f82:	2300      	movs	r3, #0
 8013f84:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f86:	2320      	movs	r3, #32
 8013f88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013f8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013f90:	2330      	movs	r3, #48	@ 0x30
 8013f92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014130 <_svfiprintf_r+0x1e4>
 8013f96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013f9a:	f04f 0901 	mov.w	r9, #1
 8013f9e:	4623      	mov	r3, r4
 8013fa0:	469a      	mov	sl, r3
 8013fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013fa6:	b10a      	cbz	r2, 8013fac <_svfiprintf_r+0x60>
 8013fa8:	2a25      	cmp	r2, #37	@ 0x25
 8013faa:	d1f9      	bne.n	8013fa0 <_svfiprintf_r+0x54>
 8013fac:	ebba 0b04 	subs.w	fp, sl, r4
 8013fb0:	d00b      	beq.n	8013fca <_svfiprintf_r+0x7e>
 8013fb2:	465b      	mov	r3, fp
 8013fb4:	4622      	mov	r2, r4
 8013fb6:	4629      	mov	r1, r5
 8013fb8:	4638      	mov	r0, r7
 8013fba:	f7ff ff6c 	bl	8013e96 <__ssputs_r>
 8013fbe:	3001      	adds	r0, #1
 8013fc0:	f000 80a7 	beq.w	8014112 <_svfiprintf_r+0x1c6>
 8013fc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013fc6:	445a      	add	r2, fp
 8013fc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8013fca:	f89a 3000 	ldrb.w	r3, [sl]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	f000 809f 	beq.w	8014112 <_svfiprintf_r+0x1c6>
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013fda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013fde:	f10a 0a01 	add.w	sl, sl, #1
 8013fe2:	9304      	str	r3, [sp, #16]
 8013fe4:	9307      	str	r3, [sp, #28]
 8013fe6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013fea:	931a      	str	r3, [sp, #104]	@ 0x68
 8013fec:	4654      	mov	r4, sl
 8013fee:	2205      	movs	r2, #5
 8013ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ff4:	484e      	ldr	r0, [pc, #312]	@ (8014130 <_svfiprintf_r+0x1e4>)
 8013ff6:	f7ec f8cb 	bl	8000190 <memchr>
 8013ffa:	9a04      	ldr	r2, [sp, #16]
 8013ffc:	b9d8      	cbnz	r0, 8014036 <_svfiprintf_r+0xea>
 8013ffe:	06d0      	lsls	r0, r2, #27
 8014000:	bf44      	itt	mi
 8014002:	2320      	movmi	r3, #32
 8014004:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014008:	0711      	lsls	r1, r2, #28
 801400a:	bf44      	itt	mi
 801400c:	232b      	movmi	r3, #43	@ 0x2b
 801400e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014012:	f89a 3000 	ldrb.w	r3, [sl]
 8014016:	2b2a      	cmp	r3, #42	@ 0x2a
 8014018:	d015      	beq.n	8014046 <_svfiprintf_r+0xfa>
 801401a:	9a07      	ldr	r2, [sp, #28]
 801401c:	4654      	mov	r4, sl
 801401e:	2000      	movs	r0, #0
 8014020:	f04f 0c0a 	mov.w	ip, #10
 8014024:	4621      	mov	r1, r4
 8014026:	f811 3b01 	ldrb.w	r3, [r1], #1
 801402a:	3b30      	subs	r3, #48	@ 0x30
 801402c:	2b09      	cmp	r3, #9
 801402e:	d94b      	bls.n	80140c8 <_svfiprintf_r+0x17c>
 8014030:	b1b0      	cbz	r0, 8014060 <_svfiprintf_r+0x114>
 8014032:	9207      	str	r2, [sp, #28]
 8014034:	e014      	b.n	8014060 <_svfiprintf_r+0x114>
 8014036:	eba0 0308 	sub.w	r3, r0, r8
 801403a:	fa09 f303 	lsl.w	r3, r9, r3
 801403e:	4313      	orrs	r3, r2
 8014040:	9304      	str	r3, [sp, #16]
 8014042:	46a2      	mov	sl, r4
 8014044:	e7d2      	b.n	8013fec <_svfiprintf_r+0xa0>
 8014046:	9b03      	ldr	r3, [sp, #12]
 8014048:	1d19      	adds	r1, r3, #4
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	9103      	str	r1, [sp, #12]
 801404e:	2b00      	cmp	r3, #0
 8014050:	bfbb      	ittet	lt
 8014052:	425b      	neglt	r3, r3
 8014054:	f042 0202 	orrlt.w	r2, r2, #2
 8014058:	9307      	strge	r3, [sp, #28]
 801405a:	9307      	strlt	r3, [sp, #28]
 801405c:	bfb8      	it	lt
 801405e:	9204      	strlt	r2, [sp, #16]
 8014060:	7823      	ldrb	r3, [r4, #0]
 8014062:	2b2e      	cmp	r3, #46	@ 0x2e
 8014064:	d10a      	bne.n	801407c <_svfiprintf_r+0x130>
 8014066:	7863      	ldrb	r3, [r4, #1]
 8014068:	2b2a      	cmp	r3, #42	@ 0x2a
 801406a:	d132      	bne.n	80140d2 <_svfiprintf_r+0x186>
 801406c:	9b03      	ldr	r3, [sp, #12]
 801406e:	1d1a      	adds	r2, r3, #4
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	9203      	str	r2, [sp, #12]
 8014074:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014078:	3402      	adds	r4, #2
 801407a:	9305      	str	r3, [sp, #20]
 801407c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014140 <_svfiprintf_r+0x1f4>
 8014080:	7821      	ldrb	r1, [r4, #0]
 8014082:	2203      	movs	r2, #3
 8014084:	4650      	mov	r0, sl
 8014086:	f7ec f883 	bl	8000190 <memchr>
 801408a:	b138      	cbz	r0, 801409c <_svfiprintf_r+0x150>
 801408c:	9b04      	ldr	r3, [sp, #16]
 801408e:	eba0 000a 	sub.w	r0, r0, sl
 8014092:	2240      	movs	r2, #64	@ 0x40
 8014094:	4082      	lsls	r2, r0
 8014096:	4313      	orrs	r3, r2
 8014098:	3401      	adds	r4, #1
 801409a:	9304      	str	r3, [sp, #16]
 801409c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140a0:	4824      	ldr	r0, [pc, #144]	@ (8014134 <_svfiprintf_r+0x1e8>)
 80140a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80140a6:	2206      	movs	r2, #6
 80140a8:	f7ec f872 	bl	8000190 <memchr>
 80140ac:	2800      	cmp	r0, #0
 80140ae:	d036      	beq.n	801411e <_svfiprintf_r+0x1d2>
 80140b0:	4b21      	ldr	r3, [pc, #132]	@ (8014138 <_svfiprintf_r+0x1ec>)
 80140b2:	bb1b      	cbnz	r3, 80140fc <_svfiprintf_r+0x1b0>
 80140b4:	9b03      	ldr	r3, [sp, #12]
 80140b6:	3307      	adds	r3, #7
 80140b8:	f023 0307 	bic.w	r3, r3, #7
 80140bc:	3308      	adds	r3, #8
 80140be:	9303      	str	r3, [sp, #12]
 80140c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80140c2:	4433      	add	r3, r6
 80140c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80140c6:	e76a      	b.n	8013f9e <_svfiprintf_r+0x52>
 80140c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80140cc:	460c      	mov	r4, r1
 80140ce:	2001      	movs	r0, #1
 80140d0:	e7a8      	b.n	8014024 <_svfiprintf_r+0xd8>
 80140d2:	2300      	movs	r3, #0
 80140d4:	3401      	adds	r4, #1
 80140d6:	9305      	str	r3, [sp, #20]
 80140d8:	4619      	mov	r1, r3
 80140da:	f04f 0c0a 	mov.w	ip, #10
 80140de:	4620      	mov	r0, r4
 80140e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80140e4:	3a30      	subs	r2, #48	@ 0x30
 80140e6:	2a09      	cmp	r2, #9
 80140e8:	d903      	bls.n	80140f2 <_svfiprintf_r+0x1a6>
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d0c6      	beq.n	801407c <_svfiprintf_r+0x130>
 80140ee:	9105      	str	r1, [sp, #20]
 80140f0:	e7c4      	b.n	801407c <_svfiprintf_r+0x130>
 80140f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80140f6:	4604      	mov	r4, r0
 80140f8:	2301      	movs	r3, #1
 80140fa:	e7f0      	b.n	80140de <_svfiprintf_r+0x192>
 80140fc:	ab03      	add	r3, sp, #12
 80140fe:	9300      	str	r3, [sp, #0]
 8014100:	462a      	mov	r2, r5
 8014102:	4b0e      	ldr	r3, [pc, #56]	@ (801413c <_svfiprintf_r+0x1f0>)
 8014104:	a904      	add	r1, sp, #16
 8014106:	4638      	mov	r0, r7
 8014108:	f3af 8000 	nop.w
 801410c:	1c42      	adds	r2, r0, #1
 801410e:	4606      	mov	r6, r0
 8014110:	d1d6      	bne.n	80140c0 <_svfiprintf_r+0x174>
 8014112:	89ab      	ldrh	r3, [r5, #12]
 8014114:	065b      	lsls	r3, r3, #25
 8014116:	f53f af2d 	bmi.w	8013f74 <_svfiprintf_r+0x28>
 801411a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801411c:	e72c      	b.n	8013f78 <_svfiprintf_r+0x2c>
 801411e:	ab03      	add	r3, sp, #12
 8014120:	9300      	str	r3, [sp, #0]
 8014122:	462a      	mov	r2, r5
 8014124:	4b05      	ldr	r3, [pc, #20]	@ (801413c <_svfiprintf_r+0x1f0>)
 8014126:	a904      	add	r1, sp, #16
 8014128:	4638      	mov	r0, r7
 801412a:	f000 fa5d 	bl	80145e8 <_printf_i>
 801412e:	e7ed      	b.n	801410c <_svfiprintf_r+0x1c0>
 8014130:	08016828 	.word	0x08016828
 8014134:	08016832 	.word	0x08016832
 8014138:	00000000 	.word	0x00000000
 801413c:	08013e97 	.word	0x08013e97
 8014140:	0801682e 	.word	0x0801682e

08014144 <__sfputc_r>:
 8014144:	6893      	ldr	r3, [r2, #8]
 8014146:	3b01      	subs	r3, #1
 8014148:	2b00      	cmp	r3, #0
 801414a:	b410      	push	{r4}
 801414c:	6093      	str	r3, [r2, #8]
 801414e:	da08      	bge.n	8014162 <__sfputc_r+0x1e>
 8014150:	6994      	ldr	r4, [r2, #24]
 8014152:	42a3      	cmp	r3, r4
 8014154:	db01      	blt.n	801415a <__sfputc_r+0x16>
 8014156:	290a      	cmp	r1, #10
 8014158:	d103      	bne.n	8014162 <__sfputc_r+0x1e>
 801415a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801415e:	f000 bc8c 	b.w	8014a7a <__swbuf_r>
 8014162:	6813      	ldr	r3, [r2, #0]
 8014164:	1c58      	adds	r0, r3, #1
 8014166:	6010      	str	r0, [r2, #0]
 8014168:	7019      	strb	r1, [r3, #0]
 801416a:	4608      	mov	r0, r1
 801416c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014170:	4770      	bx	lr

08014172 <__sfputs_r>:
 8014172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014174:	4606      	mov	r6, r0
 8014176:	460f      	mov	r7, r1
 8014178:	4614      	mov	r4, r2
 801417a:	18d5      	adds	r5, r2, r3
 801417c:	42ac      	cmp	r4, r5
 801417e:	d101      	bne.n	8014184 <__sfputs_r+0x12>
 8014180:	2000      	movs	r0, #0
 8014182:	e007      	b.n	8014194 <__sfputs_r+0x22>
 8014184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014188:	463a      	mov	r2, r7
 801418a:	4630      	mov	r0, r6
 801418c:	f7ff ffda 	bl	8014144 <__sfputc_r>
 8014190:	1c43      	adds	r3, r0, #1
 8014192:	d1f3      	bne.n	801417c <__sfputs_r+0xa>
 8014194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014198 <_vfiprintf_r>:
 8014198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801419c:	460d      	mov	r5, r1
 801419e:	b09d      	sub	sp, #116	@ 0x74
 80141a0:	4614      	mov	r4, r2
 80141a2:	4698      	mov	r8, r3
 80141a4:	4606      	mov	r6, r0
 80141a6:	b118      	cbz	r0, 80141b0 <_vfiprintf_r+0x18>
 80141a8:	6a03      	ldr	r3, [r0, #32]
 80141aa:	b90b      	cbnz	r3, 80141b0 <_vfiprintf_r+0x18>
 80141ac:	f7ff fd82 	bl	8013cb4 <__sinit>
 80141b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80141b2:	07d9      	lsls	r1, r3, #31
 80141b4:	d405      	bmi.n	80141c2 <_vfiprintf_r+0x2a>
 80141b6:	89ab      	ldrh	r3, [r5, #12]
 80141b8:	059a      	lsls	r2, r3, #22
 80141ba:	d402      	bmi.n	80141c2 <_vfiprintf_r+0x2a>
 80141bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80141be:	f7ff fe5a 	bl	8013e76 <__retarget_lock_acquire_recursive>
 80141c2:	89ab      	ldrh	r3, [r5, #12]
 80141c4:	071b      	lsls	r3, r3, #28
 80141c6:	d501      	bpl.n	80141cc <_vfiprintf_r+0x34>
 80141c8:	692b      	ldr	r3, [r5, #16]
 80141ca:	b99b      	cbnz	r3, 80141f4 <_vfiprintf_r+0x5c>
 80141cc:	4629      	mov	r1, r5
 80141ce:	4630      	mov	r0, r6
 80141d0:	f000 fc92 	bl	8014af8 <__swsetup_r>
 80141d4:	b170      	cbz	r0, 80141f4 <_vfiprintf_r+0x5c>
 80141d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80141d8:	07dc      	lsls	r4, r3, #31
 80141da:	d504      	bpl.n	80141e6 <_vfiprintf_r+0x4e>
 80141dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80141e0:	b01d      	add	sp, #116	@ 0x74
 80141e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141e6:	89ab      	ldrh	r3, [r5, #12]
 80141e8:	0598      	lsls	r0, r3, #22
 80141ea:	d4f7      	bmi.n	80141dc <_vfiprintf_r+0x44>
 80141ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80141ee:	f7ff fe43 	bl	8013e78 <__retarget_lock_release_recursive>
 80141f2:	e7f3      	b.n	80141dc <_vfiprintf_r+0x44>
 80141f4:	2300      	movs	r3, #0
 80141f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80141f8:	2320      	movs	r3, #32
 80141fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80141fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8014202:	2330      	movs	r3, #48	@ 0x30
 8014204:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80143b4 <_vfiprintf_r+0x21c>
 8014208:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801420c:	f04f 0901 	mov.w	r9, #1
 8014210:	4623      	mov	r3, r4
 8014212:	469a      	mov	sl, r3
 8014214:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014218:	b10a      	cbz	r2, 801421e <_vfiprintf_r+0x86>
 801421a:	2a25      	cmp	r2, #37	@ 0x25
 801421c:	d1f9      	bne.n	8014212 <_vfiprintf_r+0x7a>
 801421e:	ebba 0b04 	subs.w	fp, sl, r4
 8014222:	d00b      	beq.n	801423c <_vfiprintf_r+0xa4>
 8014224:	465b      	mov	r3, fp
 8014226:	4622      	mov	r2, r4
 8014228:	4629      	mov	r1, r5
 801422a:	4630      	mov	r0, r6
 801422c:	f7ff ffa1 	bl	8014172 <__sfputs_r>
 8014230:	3001      	adds	r0, #1
 8014232:	f000 80a7 	beq.w	8014384 <_vfiprintf_r+0x1ec>
 8014236:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014238:	445a      	add	r2, fp
 801423a:	9209      	str	r2, [sp, #36]	@ 0x24
 801423c:	f89a 3000 	ldrb.w	r3, [sl]
 8014240:	2b00      	cmp	r3, #0
 8014242:	f000 809f 	beq.w	8014384 <_vfiprintf_r+0x1ec>
 8014246:	2300      	movs	r3, #0
 8014248:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801424c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014250:	f10a 0a01 	add.w	sl, sl, #1
 8014254:	9304      	str	r3, [sp, #16]
 8014256:	9307      	str	r3, [sp, #28]
 8014258:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801425c:	931a      	str	r3, [sp, #104]	@ 0x68
 801425e:	4654      	mov	r4, sl
 8014260:	2205      	movs	r2, #5
 8014262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014266:	4853      	ldr	r0, [pc, #332]	@ (80143b4 <_vfiprintf_r+0x21c>)
 8014268:	f7eb ff92 	bl	8000190 <memchr>
 801426c:	9a04      	ldr	r2, [sp, #16]
 801426e:	b9d8      	cbnz	r0, 80142a8 <_vfiprintf_r+0x110>
 8014270:	06d1      	lsls	r1, r2, #27
 8014272:	bf44      	itt	mi
 8014274:	2320      	movmi	r3, #32
 8014276:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801427a:	0713      	lsls	r3, r2, #28
 801427c:	bf44      	itt	mi
 801427e:	232b      	movmi	r3, #43	@ 0x2b
 8014280:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014284:	f89a 3000 	ldrb.w	r3, [sl]
 8014288:	2b2a      	cmp	r3, #42	@ 0x2a
 801428a:	d015      	beq.n	80142b8 <_vfiprintf_r+0x120>
 801428c:	9a07      	ldr	r2, [sp, #28]
 801428e:	4654      	mov	r4, sl
 8014290:	2000      	movs	r0, #0
 8014292:	f04f 0c0a 	mov.w	ip, #10
 8014296:	4621      	mov	r1, r4
 8014298:	f811 3b01 	ldrb.w	r3, [r1], #1
 801429c:	3b30      	subs	r3, #48	@ 0x30
 801429e:	2b09      	cmp	r3, #9
 80142a0:	d94b      	bls.n	801433a <_vfiprintf_r+0x1a2>
 80142a2:	b1b0      	cbz	r0, 80142d2 <_vfiprintf_r+0x13a>
 80142a4:	9207      	str	r2, [sp, #28]
 80142a6:	e014      	b.n	80142d2 <_vfiprintf_r+0x13a>
 80142a8:	eba0 0308 	sub.w	r3, r0, r8
 80142ac:	fa09 f303 	lsl.w	r3, r9, r3
 80142b0:	4313      	orrs	r3, r2
 80142b2:	9304      	str	r3, [sp, #16]
 80142b4:	46a2      	mov	sl, r4
 80142b6:	e7d2      	b.n	801425e <_vfiprintf_r+0xc6>
 80142b8:	9b03      	ldr	r3, [sp, #12]
 80142ba:	1d19      	adds	r1, r3, #4
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	9103      	str	r1, [sp, #12]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	bfbb      	ittet	lt
 80142c4:	425b      	neglt	r3, r3
 80142c6:	f042 0202 	orrlt.w	r2, r2, #2
 80142ca:	9307      	strge	r3, [sp, #28]
 80142cc:	9307      	strlt	r3, [sp, #28]
 80142ce:	bfb8      	it	lt
 80142d0:	9204      	strlt	r2, [sp, #16]
 80142d2:	7823      	ldrb	r3, [r4, #0]
 80142d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80142d6:	d10a      	bne.n	80142ee <_vfiprintf_r+0x156>
 80142d8:	7863      	ldrb	r3, [r4, #1]
 80142da:	2b2a      	cmp	r3, #42	@ 0x2a
 80142dc:	d132      	bne.n	8014344 <_vfiprintf_r+0x1ac>
 80142de:	9b03      	ldr	r3, [sp, #12]
 80142e0:	1d1a      	adds	r2, r3, #4
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	9203      	str	r2, [sp, #12]
 80142e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80142ea:	3402      	adds	r4, #2
 80142ec:	9305      	str	r3, [sp, #20]
 80142ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80143c4 <_vfiprintf_r+0x22c>
 80142f2:	7821      	ldrb	r1, [r4, #0]
 80142f4:	2203      	movs	r2, #3
 80142f6:	4650      	mov	r0, sl
 80142f8:	f7eb ff4a 	bl	8000190 <memchr>
 80142fc:	b138      	cbz	r0, 801430e <_vfiprintf_r+0x176>
 80142fe:	9b04      	ldr	r3, [sp, #16]
 8014300:	eba0 000a 	sub.w	r0, r0, sl
 8014304:	2240      	movs	r2, #64	@ 0x40
 8014306:	4082      	lsls	r2, r0
 8014308:	4313      	orrs	r3, r2
 801430a:	3401      	adds	r4, #1
 801430c:	9304      	str	r3, [sp, #16]
 801430e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014312:	4829      	ldr	r0, [pc, #164]	@ (80143b8 <_vfiprintf_r+0x220>)
 8014314:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014318:	2206      	movs	r2, #6
 801431a:	f7eb ff39 	bl	8000190 <memchr>
 801431e:	2800      	cmp	r0, #0
 8014320:	d03f      	beq.n	80143a2 <_vfiprintf_r+0x20a>
 8014322:	4b26      	ldr	r3, [pc, #152]	@ (80143bc <_vfiprintf_r+0x224>)
 8014324:	bb1b      	cbnz	r3, 801436e <_vfiprintf_r+0x1d6>
 8014326:	9b03      	ldr	r3, [sp, #12]
 8014328:	3307      	adds	r3, #7
 801432a:	f023 0307 	bic.w	r3, r3, #7
 801432e:	3308      	adds	r3, #8
 8014330:	9303      	str	r3, [sp, #12]
 8014332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014334:	443b      	add	r3, r7
 8014336:	9309      	str	r3, [sp, #36]	@ 0x24
 8014338:	e76a      	b.n	8014210 <_vfiprintf_r+0x78>
 801433a:	fb0c 3202 	mla	r2, ip, r2, r3
 801433e:	460c      	mov	r4, r1
 8014340:	2001      	movs	r0, #1
 8014342:	e7a8      	b.n	8014296 <_vfiprintf_r+0xfe>
 8014344:	2300      	movs	r3, #0
 8014346:	3401      	adds	r4, #1
 8014348:	9305      	str	r3, [sp, #20]
 801434a:	4619      	mov	r1, r3
 801434c:	f04f 0c0a 	mov.w	ip, #10
 8014350:	4620      	mov	r0, r4
 8014352:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014356:	3a30      	subs	r2, #48	@ 0x30
 8014358:	2a09      	cmp	r2, #9
 801435a:	d903      	bls.n	8014364 <_vfiprintf_r+0x1cc>
 801435c:	2b00      	cmp	r3, #0
 801435e:	d0c6      	beq.n	80142ee <_vfiprintf_r+0x156>
 8014360:	9105      	str	r1, [sp, #20]
 8014362:	e7c4      	b.n	80142ee <_vfiprintf_r+0x156>
 8014364:	fb0c 2101 	mla	r1, ip, r1, r2
 8014368:	4604      	mov	r4, r0
 801436a:	2301      	movs	r3, #1
 801436c:	e7f0      	b.n	8014350 <_vfiprintf_r+0x1b8>
 801436e:	ab03      	add	r3, sp, #12
 8014370:	9300      	str	r3, [sp, #0]
 8014372:	462a      	mov	r2, r5
 8014374:	4b12      	ldr	r3, [pc, #72]	@ (80143c0 <_vfiprintf_r+0x228>)
 8014376:	a904      	add	r1, sp, #16
 8014378:	4630      	mov	r0, r6
 801437a:	f3af 8000 	nop.w
 801437e:	4607      	mov	r7, r0
 8014380:	1c78      	adds	r0, r7, #1
 8014382:	d1d6      	bne.n	8014332 <_vfiprintf_r+0x19a>
 8014384:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014386:	07d9      	lsls	r1, r3, #31
 8014388:	d405      	bmi.n	8014396 <_vfiprintf_r+0x1fe>
 801438a:	89ab      	ldrh	r3, [r5, #12]
 801438c:	059a      	lsls	r2, r3, #22
 801438e:	d402      	bmi.n	8014396 <_vfiprintf_r+0x1fe>
 8014390:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014392:	f7ff fd71 	bl	8013e78 <__retarget_lock_release_recursive>
 8014396:	89ab      	ldrh	r3, [r5, #12]
 8014398:	065b      	lsls	r3, r3, #25
 801439a:	f53f af1f 	bmi.w	80141dc <_vfiprintf_r+0x44>
 801439e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80143a0:	e71e      	b.n	80141e0 <_vfiprintf_r+0x48>
 80143a2:	ab03      	add	r3, sp, #12
 80143a4:	9300      	str	r3, [sp, #0]
 80143a6:	462a      	mov	r2, r5
 80143a8:	4b05      	ldr	r3, [pc, #20]	@ (80143c0 <_vfiprintf_r+0x228>)
 80143aa:	a904      	add	r1, sp, #16
 80143ac:	4630      	mov	r0, r6
 80143ae:	f000 f91b 	bl	80145e8 <_printf_i>
 80143b2:	e7e4      	b.n	801437e <_vfiprintf_r+0x1e6>
 80143b4:	08016828 	.word	0x08016828
 80143b8:	08016832 	.word	0x08016832
 80143bc:	00000000 	.word	0x00000000
 80143c0:	08014173 	.word	0x08014173
 80143c4:	0801682e 	.word	0x0801682e

080143c8 <sbrk_aligned>:
 80143c8:	b570      	push	{r4, r5, r6, lr}
 80143ca:	4e0f      	ldr	r6, [pc, #60]	@ (8014408 <sbrk_aligned+0x40>)
 80143cc:	460c      	mov	r4, r1
 80143ce:	6831      	ldr	r1, [r6, #0]
 80143d0:	4605      	mov	r5, r0
 80143d2:	b911      	cbnz	r1, 80143da <sbrk_aligned+0x12>
 80143d4:	f000 fcec 	bl	8014db0 <_sbrk_r>
 80143d8:	6030      	str	r0, [r6, #0]
 80143da:	4621      	mov	r1, r4
 80143dc:	4628      	mov	r0, r5
 80143de:	f000 fce7 	bl	8014db0 <_sbrk_r>
 80143e2:	1c43      	adds	r3, r0, #1
 80143e4:	d103      	bne.n	80143ee <sbrk_aligned+0x26>
 80143e6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80143ea:	4620      	mov	r0, r4
 80143ec:	bd70      	pop	{r4, r5, r6, pc}
 80143ee:	1cc4      	adds	r4, r0, #3
 80143f0:	f024 0403 	bic.w	r4, r4, #3
 80143f4:	42a0      	cmp	r0, r4
 80143f6:	d0f8      	beq.n	80143ea <sbrk_aligned+0x22>
 80143f8:	1a21      	subs	r1, r4, r0
 80143fa:	4628      	mov	r0, r5
 80143fc:	f000 fcd8 	bl	8014db0 <_sbrk_r>
 8014400:	3001      	adds	r0, #1
 8014402:	d1f2      	bne.n	80143ea <sbrk_aligned+0x22>
 8014404:	e7ef      	b.n	80143e6 <sbrk_aligned+0x1e>
 8014406:	bf00      	nop
 8014408:	20002154 	.word	0x20002154

0801440c <_malloc_r>:
 801440c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014410:	1ccd      	adds	r5, r1, #3
 8014412:	f025 0503 	bic.w	r5, r5, #3
 8014416:	3508      	adds	r5, #8
 8014418:	2d0c      	cmp	r5, #12
 801441a:	bf38      	it	cc
 801441c:	250c      	movcc	r5, #12
 801441e:	2d00      	cmp	r5, #0
 8014420:	4606      	mov	r6, r0
 8014422:	db01      	blt.n	8014428 <_malloc_r+0x1c>
 8014424:	42a9      	cmp	r1, r5
 8014426:	d904      	bls.n	8014432 <_malloc_r+0x26>
 8014428:	230c      	movs	r3, #12
 801442a:	6033      	str	r3, [r6, #0]
 801442c:	2000      	movs	r0, #0
 801442e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014432:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014508 <_malloc_r+0xfc>
 8014436:	f000 faa3 	bl	8014980 <__malloc_lock>
 801443a:	f8d8 3000 	ldr.w	r3, [r8]
 801443e:	461c      	mov	r4, r3
 8014440:	bb44      	cbnz	r4, 8014494 <_malloc_r+0x88>
 8014442:	4629      	mov	r1, r5
 8014444:	4630      	mov	r0, r6
 8014446:	f7ff ffbf 	bl	80143c8 <sbrk_aligned>
 801444a:	1c43      	adds	r3, r0, #1
 801444c:	4604      	mov	r4, r0
 801444e:	d158      	bne.n	8014502 <_malloc_r+0xf6>
 8014450:	f8d8 4000 	ldr.w	r4, [r8]
 8014454:	4627      	mov	r7, r4
 8014456:	2f00      	cmp	r7, #0
 8014458:	d143      	bne.n	80144e2 <_malloc_r+0xd6>
 801445a:	2c00      	cmp	r4, #0
 801445c:	d04b      	beq.n	80144f6 <_malloc_r+0xea>
 801445e:	6823      	ldr	r3, [r4, #0]
 8014460:	4639      	mov	r1, r7
 8014462:	4630      	mov	r0, r6
 8014464:	eb04 0903 	add.w	r9, r4, r3
 8014468:	f000 fca2 	bl	8014db0 <_sbrk_r>
 801446c:	4581      	cmp	r9, r0
 801446e:	d142      	bne.n	80144f6 <_malloc_r+0xea>
 8014470:	6821      	ldr	r1, [r4, #0]
 8014472:	1a6d      	subs	r5, r5, r1
 8014474:	4629      	mov	r1, r5
 8014476:	4630      	mov	r0, r6
 8014478:	f7ff ffa6 	bl	80143c8 <sbrk_aligned>
 801447c:	3001      	adds	r0, #1
 801447e:	d03a      	beq.n	80144f6 <_malloc_r+0xea>
 8014480:	6823      	ldr	r3, [r4, #0]
 8014482:	442b      	add	r3, r5
 8014484:	6023      	str	r3, [r4, #0]
 8014486:	f8d8 3000 	ldr.w	r3, [r8]
 801448a:	685a      	ldr	r2, [r3, #4]
 801448c:	bb62      	cbnz	r2, 80144e8 <_malloc_r+0xdc>
 801448e:	f8c8 7000 	str.w	r7, [r8]
 8014492:	e00f      	b.n	80144b4 <_malloc_r+0xa8>
 8014494:	6822      	ldr	r2, [r4, #0]
 8014496:	1b52      	subs	r2, r2, r5
 8014498:	d420      	bmi.n	80144dc <_malloc_r+0xd0>
 801449a:	2a0b      	cmp	r2, #11
 801449c:	d917      	bls.n	80144ce <_malloc_r+0xc2>
 801449e:	1961      	adds	r1, r4, r5
 80144a0:	42a3      	cmp	r3, r4
 80144a2:	6025      	str	r5, [r4, #0]
 80144a4:	bf18      	it	ne
 80144a6:	6059      	strne	r1, [r3, #4]
 80144a8:	6863      	ldr	r3, [r4, #4]
 80144aa:	bf08      	it	eq
 80144ac:	f8c8 1000 	streq.w	r1, [r8]
 80144b0:	5162      	str	r2, [r4, r5]
 80144b2:	604b      	str	r3, [r1, #4]
 80144b4:	4630      	mov	r0, r6
 80144b6:	f000 fa69 	bl	801498c <__malloc_unlock>
 80144ba:	f104 000b 	add.w	r0, r4, #11
 80144be:	1d23      	adds	r3, r4, #4
 80144c0:	f020 0007 	bic.w	r0, r0, #7
 80144c4:	1ac2      	subs	r2, r0, r3
 80144c6:	bf1c      	itt	ne
 80144c8:	1a1b      	subne	r3, r3, r0
 80144ca:	50a3      	strne	r3, [r4, r2]
 80144cc:	e7af      	b.n	801442e <_malloc_r+0x22>
 80144ce:	6862      	ldr	r2, [r4, #4]
 80144d0:	42a3      	cmp	r3, r4
 80144d2:	bf0c      	ite	eq
 80144d4:	f8c8 2000 	streq.w	r2, [r8]
 80144d8:	605a      	strne	r2, [r3, #4]
 80144da:	e7eb      	b.n	80144b4 <_malloc_r+0xa8>
 80144dc:	4623      	mov	r3, r4
 80144de:	6864      	ldr	r4, [r4, #4]
 80144e0:	e7ae      	b.n	8014440 <_malloc_r+0x34>
 80144e2:	463c      	mov	r4, r7
 80144e4:	687f      	ldr	r7, [r7, #4]
 80144e6:	e7b6      	b.n	8014456 <_malloc_r+0x4a>
 80144e8:	461a      	mov	r2, r3
 80144ea:	685b      	ldr	r3, [r3, #4]
 80144ec:	42a3      	cmp	r3, r4
 80144ee:	d1fb      	bne.n	80144e8 <_malloc_r+0xdc>
 80144f0:	2300      	movs	r3, #0
 80144f2:	6053      	str	r3, [r2, #4]
 80144f4:	e7de      	b.n	80144b4 <_malloc_r+0xa8>
 80144f6:	230c      	movs	r3, #12
 80144f8:	6033      	str	r3, [r6, #0]
 80144fa:	4630      	mov	r0, r6
 80144fc:	f000 fa46 	bl	801498c <__malloc_unlock>
 8014500:	e794      	b.n	801442c <_malloc_r+0x20>
 8014502:	6005      	str	r5, [r0, #0]
 8014504:	e7d6      	b.n	80144b4 <_malloc_r+0xa8>
 8014506:	bf00      	nop
 8014508:	20002158 	.word	0x20002158

0801450c <_printf_common>:
 801450c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014510:	4616      	mov	r6, r2
 8014512:	4698      	mov	r8, r3
 8014514:	688a      	ldr	r2, [r1, #8]
 8014516:	690b      	ldr	r3, [r1, #16]
 8014518:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801451c:	4293      	cmp	r3, r2
 801451e:	bfb8      	it	lt
 8014520:	4613      	movlt	r3, r2
 8014522:	6033      	str	r3, [r6, #0]
 8014524:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014528:	4607      	mov	r7, r0
 801452a:	460c      	mov	r4, r1
 801452c:	b10a      	cbz	r2, 8014532 <_printf_common+0x26>
 801452e:	3301      	adds	r3, #1
 8014530:	6033      	str	r3, [r6, #0]
 8014532:	6823      	ldr	r3, [r4, #0]
 8014534:	0699      	lsls	r1, r3, #26
 8014536:	bf42      	ittt	mi
 8014538:	6833      	ldrmi	r3, [r6, #0]
 801453a:	3302      	addmi	r3, #2
 801453c:	6033      	strmi	r3, [r6, #0]
 801453e:	6825      	ldr	r5, [r4, #0]
 8014540:	f015 0506 	ands.w	r5, r5, #6
 8014544:	d106      	bne.n	8014554 <_printf_common+0x48>
 8014546:	f104 0a19 	add.w	sl, r4, #25
 801454a:	68e3      	ldr	r3, [r4, #12]
 801454c:	6832      	ldr	r2, [r6, #0]
 801454e:	1a9b      	subs	r3, r3, r2
 8014550:	42ab      	cmp	r3, r5
 8014552:	dc26      	bgt.n	80145a2 <_printf_common+0x96>
 8014554:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014558:	6822      	ldr	r2, [r4, #0]
 801455a:	3b00      	subs	r3, #0
 801455c:	bf18      	it	ne
 801455e:	2301      	movne	r3, #1
 8014560:	0692      	lsls	r2, r2, #26
 8014562:	d42b      	bmi.n	80145bc <_printf_common+0xb0>
 8014564:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014568:	4641      	mov	r1, r8
 801456a:	4638      	mov	r0, r7
 801456c:	47c8      	blx	r9
 801456e:	3001      	adds	r0, #1
 8014570:	d01e      	beq.n	80145b0 <_printf_common+0xa4>
 8014572:	6823      	ldr	r3, [r4, #0]
 8014574:	6922      	ldr	r2, [r4, #16]
 8014576:	f003 0306 	and.w	r3, r3, #6
 801457a:	2b04      	cmp	r3, #4
 801457c:	bf02      	ittt	eq
 801457e:	68e5      	ldreq	r5, [r4, #12]
 8014580:	6833      	ldreq	r3, [r6, #0]
 8014582:	1aed      	subeq	r5, r5, r3
 8014584:	68a3      	ldr	r3, [r4, #8]
 8014586:	bf0c      	ite	eq
 8014588:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801458c:	2500      	movne	r5, #0
 801458e:	4293      	cmp	r3, r2
 8014590:	bfc4      	itt	gt
 8014592:	1a9b      	subgt	r3, r3, r2
 8014594:	18ed      	addgt	r5, r5, r3
 8014596:	2600      	movs	r6, #0
 8014598:	341a      	adds	r4, #26
 801459a:	42b5      	cmp	r5, r6
 801459c:	d11a      	bne.n	80145d4 <_printf_common+0xc8>
 801459e:	2000      	movs	r0, #0
 80145a0:	e008      	b.n	80145b4 <_printf_common+0xa8>
 80145a2:	2301      	movs	r3, #1
 80145a4:	4652      	mov	r2, sl
 80145a6:	4641      	mov	r1, r8
 80145a8:	4638      	mov	r0, r7
 80145aa:	47c8      	blx	r9
 80145ac:	3001      	adds	r0, #1
 80145ae:	d103      	bne.n	80145b8 <_printf_common+0xac>
 80145b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80145b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145b8:	3501      	adds	r5, #1
 80145ba:	e7c6      	b.n	801454a <_printf_common+0x3e>
 80145bc:	18e1      	adds	r1, r4, r3
 80145be:	1c5a      	adds	r2, r3, #1
 80145c0:	2030      	movs	r0, #48	@ 0x30
 80145c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80145c6:	4422      	add	r2, r4
 80145c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80145cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80145d0:	3302      	adds	r3, #2
 80145d2:	e7c7      	b.n	8014564 <_printf_common+0x58>
 80145d4:	2301      	movs	r3, #1
 80145d6:	4622      	mov	r2, r4
 80145d8:	4641      	mov	r1, r8
 80145da:	4638      	mov	r0, r7
 80145dc:	47c8      	blx	r9
 80145de:	3001      	adds	r0, #1
 80145e0:	d0e6      	beq.n	80145b0 <_printf_common+0xa4>
 80145e2:	3601      	adds	r6, #1
 80145e4:	e7d9      	b.n	801459a <_printf_common+0x8e>
	...

080145e8 <_printf_i>:
 80145e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80145ec:	7e0f      	ldrb	r7, [r1, #24]
 80145ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80145f0:	2f78      	cmp	r7, #120	@ 0x78
 80145f2:	4691      	mov	r9, r2
 80145f4:	4680      	mov	r8, r0
 80145f6:	460c      	mov	r4, r1
 80145f8:	469a      	mov	sl, r3
 80145fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80145fe:	d807      	bhi.n	8014610 <_printf_i+0x28>
 8014600:	2f62      	cmp	r7, #98	@ 0x62
 8014602:	d80a      	bhi.n	801461a <_printf_i+0x32>
 8014604:	2f00      	cmp	r7, #0
 8014606:	f000 80d2 	beq.w	80147ae <_printf_i+0x1c6>
 801460a:	2f58      	cmp	r7, #88	@ 0x58
 801460c:	f000 80b9 	beq.w	8014782 <_printf_i+0x19a>
 8014610:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014614:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014618:	e03a      	b.n	8014690 <_printf_i+0xa8>
 801461a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801461e:	2b15      	cmp	r3, #21
 8014620:	d8f6      	bhi.n	8014610 <_printf_i+0x28>
 8014622:	a101      	add	r1, pc, #4	@ (adr r1, 8014628 <_printf_i+0x40>)
 8014624:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014628:	08014681 	.word	0x08014681
 801462c:	08014695 	.word	0x08014695
 8014630:	08014611 	.word	0x08014611
 8014634:	08014611 	.word	0x08014611
 8014638:	08014611 	.word	0x08014611
 801463c:	08014611 	.word	0x08014611
 8014640:	08014695 	.word	0x08014695
 8014644:	08014611 	.word	0x08014611
 8014648:	08014611 	.word	0x08014611
 801464c:	08014611 	.word	0x08014611
 8014650:	08014611 	.word	0x08014611
 8014654:	08014795 	.word	0x08014795
 8014658:	080146bf 	.word	0x080146bf
 801465c:	0801474f 	.word	0x0801474f
 8014660:	08014611 	.word	0x08014611
 8014664:	08014611 	.word	0x08014611
 8014668:	080147b7 	.word	0x080147b7
 801466c:	08014611 	.word	0x08014611
 8014670:	080146bf 	.word	0x080146bf
 8014674:	08014611 	.word	0x08014611
 8014678:	08014611 	.word	0x08014611
 801467c:	08014757 	.word	0x08014757
 8014680:	6833      	ldr	r3, [r6, #0]
 8014682:	1d1a      	adds	r2, r3, #4
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	6032      	str	r2, [r6, #0]
 8014688:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801468c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014690:	2301      	movs	r3, #1
 8014692:	e09d      	b.n	80147d0 <_printf_i+0x1e8>
 8014694:	6833      	ldr	r3, [r6, #0]
 8014696:	6820      	ldr	r0, [r4, #0]
 8014698:	1d19      	adds	r1, r3, #4
 801469a:	6031      	str	r1, [r6, #0]
 801469c:	0606      	lsls	r6, r0, #24
 801469e:	d501      	bpl.n	80146a4 <_printf_i+0xbc>
 80146a0:	681d      	ldr	r5, [r3, #0]
 80146a2:	e003      	b.n	80146ac <_printf_i+0xc4>
 80146a4:	0645      	lsls	r5, r0, #25
 80146a6:	d5fb      	bpl.n	80146a0 <_printf_i+0xb8>
 80146a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80146ac:	2d00      	cmp	r5, #0
 80146ae:	da03      	bge.n	80146b8 <_printf_i+0xd0>
 80146b0:	232d      	movs	r3, #45	@ 0x2d
 80146b2:	426d      	negs	r5, r5
 80146b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80146b8:	4859      	ldr	r0, [pc, #356]	@ (8014820 <_printf_i+0x238>)
 80146ba:	230a      	movs	r3, #10
 80146bc:	e011      	b.n	80146e2 <_printf_i+0xfa>
 80146be:	6821      	ldr	r1, [r4, #0]
 80146c0:	6833      	ldr	r3, [r6, #0]
 80146c2:	0608      	lsls	r0, r1, #24
 80146c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80146c8:	d402      	bmi.n	80146d0 <_printf_i+0xe8>
 80146ca:	0649      	lsls	r1, r1, #25
 80146cc:	bf48      	it	mi
 80146ce:	b2ad      	uxthmi	r5, r5
 80146d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80146d2:	4853      	ldr	r0, [pc, #332]	@ (8014820 <_printf_i+0x238>)
 80146d4:	6033      	str	r3, [r6, #0]
 80146d6:	bf14      	ite	ne
 80146d8:	230a      	movne	r3, #10
 80146da:	2308      	moveq	r3, #8
 80146dc:	2100      	movs	r1, #0
 80146de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80146e2:	6866      	ldr	r6, [r4, #4]
 80146e4:	60a6      	str	r6, [r4, #8]
 80146e6:	2e00      	cmp	r6, #0
 80146e8:	bfa2      	ittt	ge
 80146ea:	6821      	ldrge	r1, [r4, #0]
 80146ec:	f021 0104 	bicge.w	r1, r1, #4
 80146f0:	6021      	strge	r1, [r4, #0]
 80146f2:	b90d      	cbnz	r5, 80146f8 <_printf_i+0x110>
 80146f4:	2e00      	cmp	r6, #0
 80146f6:	d04b      	beq.n	8014790 <_printf_i+0x1a8>
 80146f8:	4616      	mov	r6, r2
 80146fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80146fe:	fb03 5711 	mls	r7, r3, r1, r5
 8014702:	5dc7      	ldrb	r7, [r0, r7]
 8014704:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014708:	462f      	mov	r7, r5
 801470a:	42bb      	cmp	r3, r7
 801470c:	460d      	mov	r5, r1
 801470e:	d9f4      	bls.n	80146fa <_printf_i+0x112>
 8014710:	2b08      	cmp	r3, #8
 8014712:	d10b      	bne.n	801472c <_printf_i+0x144>
 8014714:	6823      	ldr	r3, [r4, #0]
 8014716:	07df      	lsls	r7, r3, #31
 8014718:	d508      	bpl.n	801472c <_printf_i+0x144>
 801471a:	6923      	ldr	r3, [r4, #16]
 801471c:	6861      	ldr	r1, [r4, #4]
 801471e:	4299      	cmp	r1, r3
 8014720:	bfde      	ittt	le
 8014722:	2330      	movle	r3, #48	@ 0x30
 8014724:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014728:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801472c:	1b92      	subs	r2, r2, r6
 801472e:	6122      	str	r2, [r4, #16]
 8014730:	f8cd a000 	str.w	sl, [sp]
 8014734:	464b      	mov	r3, r9
 8014736:	aa03      	add	r2, sp, #12
 8014738:	4621      	mov	r1, r4
 801473a:	4640      	mov	r0, r8
 801473c:	f7ff fee6 	bl	801450c <_printf_common>
 8014740:	3001      	adds	r0, #1
 8014742:	d14a      	bne.n	80147da <_printf_i+0x1f2>
 8014744:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014748:	b004      	add	sp, #16
 801474a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801474e:	6823      	ldr	r3, [r4, #0]
 8014750:	f043 0320 	orr.w	r3, r3, #32
 8014754:	6023      	str	r3, [r4, #0]
 8014756:	4833      	ldr	r0, [pc, #204]	@ (8014824 <_printf_i+0x23c>)
 8014758:	2778      	movs	r7, #120	@ 0x78
 801475a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801475e:	6823      	ldr	r3, [r4, #0]
 8014760:	6831      	ldr	r1, [r6, #0]
 8014762:	061f      	lsls	r7, r3, #24
 8014764:	f851 5b04 	ldr.w	r5, [r1], #4
 8014768:	d402      	bmi.n	8014770 <_printf_i+0x188>
 801476a:	065f      	lsls	r7, r3, #25
 801476c:	bf48      	it	mi
 801476e:	b2ad      	uxthmi	r5, r5
 8014770:	6031      	str	r1, [r6, #0]
 8014772:	07d9      	lsls	r1, r3, #31
 8014774:	bf44      	itt	mi
 8014776:	f043 0320 	orrmi.w	r3, r3, #32
 801477a:	6023      	strmi	r3, [r4, #0]
 801477c:	b11d      	cbz	r5, 8014786 <_printf_i+0x19e>
 801477e:	2310      	movs	r3, #16
 8014780:	e7ac      	b.n	80146dc <_printf_i+0xf4>
 8014782:	4827      	ldr	r0, [pc, #156]	@ (8014820 <_printf_i+0x238>)
 8014784:	e7e9      	b.n	801475a <_printf_i+0x172>
 8014786:	6823      	ldr	r3, [r4, #0]
 8014788:	f023 0320 	bic.w	r3, r3, #32
 801478c:	6023      	str	r3, [r4, #0]
 801478e:	e7f6      	b.n	801477e <_printf_i+0x196>
 8014790:	4616      	mov	r6, r2
 8014792:	e7bd      	b.n	8014710 <_printf_i+0x128>
 8014794:	6833      	ldr	r3, [r6, #0]
 8014796:	6825      	ldr	r5, [r4, #0]
 8014798:	6961      	ldr	r1, [r4, #20]
 801479a:	1d18      	adds	r0, r3, #4
 801479c:	6030      	str	r0, [r6, #0]
 801479e:	062e      	lsls	r6, r5, #24
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	d501      	bpl.n	80147a8 <_printf_i+0x1c0>
 80147a4:	6019      	str	r1, [r3, #0]
 80147a6:	e002      	b.n	80147ae <_printf_i+0x1c6>
 80147a8:	0668      	lsls	r0, r5, #25
 80147aa:	d5fb      	bpl.n	80147a4 <_printf_i+0x1bc>
 80147ac:	8019      	strh	r1, [r3, #0]
 80147ae:	2300      	movs	r3, #0
 80147b0:	6123      	str	r3, [r4, #16]
 80147b2:	4616      	mov	r6, r2
 80147b4:	e7bc      	b.n	8014730 <_printf_i+0x148>
 80147b6:	6833      	ldr	r3, [r6, #0]
 80147b8:	1d1a      	adds	r2, r3, #4
 80147ba:	6032      	str	r2, [r6, #0]
 80147bc:	681e      	ldr	r6, [r3, #0]
 80147be:	6862      	ldr	r2, [r4, #4]
 80147c0:	2100      	movs	r1, #0
 80147c2:	4630      	mov	r0, r6
 80147c4:	f7eb fce4 	bl	8000190 <memchr>
 80147c8:	b108      	cbz	r0, 80147ce <_printf_i+0x1e6>
 80147ca:	1b80      	subs	r0, r0, r6
 80147cc:	6060      	str	r0, [r4, #4]
 80147ce:	6863      	ldr	r3, [r4, #4]
 80147d0:	6123      	str	r3, [r4, #16]
 80147d2:	2300      	movs	r3, #0
 80147d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80147d8:	e7aa      	b.n	8014730 <_printf_i+0x148>
 80147da:	6923      	ldr	r3, [r4, #16]
 80147dc:	4632      	mov	r2, r6
 80147de:	4649      	mov	r1, r9
 80147e0:	4640      	mov	r0, r8
 80147e2:	47d0      	blx	sl
 80147e4:	3001      	adds	r0, #1
 80147e6:	d0ad      	beq.n	8014744 <_printf_i+0x15c>
 80147e8:	6823      	ldr	r3, [r4, #0]
 80147ea:	079b      	lsls	r3, r3, #30
 80147ec:	d413      	bmi.n	8014816 <_printf_i+0x22e>
 80147ee:	68e0      	ldr	r0, [r4, #12]
 80147f0:	9b03      	ldr	r3, [sp, #12]
 80147f2:	4298      	cmp	r0, r3
 80147f4:	bfb8      	it	lt
 80147f6:	4618      	movlt	r0, r3
 80147f8:	e7a6      	b.n	8014748 <_printf_i+0x160>
 80147fa:	2301      	movs	r3, #1
 80147fc:	4632      	mov	r2, r6
 80147fe:	4649      	mov	r1, r9
 8014800:	4640      	mov	r0, r8
 8014802:	47d0      	blx	sl
 8014804:	3001      	adds	r0, #1
 8014806:	d09d      	beq.n	8014744 <_printf_i+0x15c>
 8014808:	3501      	adds	r5, #1
 801480a:	68e3      	ldr	r3, [r4, #12]
 801480c:	9903      	ldr	r1, [sp, #12]
 801480e:	1a5b      	subs	r3, r3, r1
 8014810:	42ab      	cmp	r3, r5
 8014812:	dcf2      	bgt.n	80147fa <_printf_i+0x212>
 8014814:	e7eb      	b.n	80147ee <_printf_i+0x206>
 8014816:	2500      	movs	r5, #0
 8014818:	f104 0619 	add.w	r6, r4, #25
 801481c:	e7f5      	b.n	801480a <_printf_i+0x222>
 801481e:	bf00      	nop
 8014820:	08016839 	.word	0x08016839
 8014824:	0801684a 	.word	0x0801684a

08014828 <__sflush_r>:
 8014828:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801482c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014830:	0716      	lsls	r6, r2, #28
 8014832:	4605      	mov	r5, r0
 8014834:	460c      	mov	r4, r1
 8014836:	d454      	bmi.n	80148e2 <__sflush_r+0xba>
 8014838:	684b      	ldr	r3, [r1, #4]
 801483a:	2b00      	cmp	r3, #0
 801483c:	dc02      	bgt.n	8014844 <__sflush_r+0x1c>
 801483e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014840:	2b00      	cmp	r3, #0
 8014842:	dd48      	ble.n	80148d6 <__sflush_r+0xae>
 8014844:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014846:	2e00      	cmp	r6, #0
 8014848:	d045      	beq.n	80148d6 <__sflush_r+0xae>
 801484a:	2300      	movs	r3, #0
 801484c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014850:	682f      	ldr	r7, [r5, #0]
 8014852:	6a21      	ldr	r1, [r4, #32]
 8014854:	602b      	str	r3, [r5, #0]
 8014856:	d030      	beq.n	80148ba <__sflush_r+0x92>
 8014858:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801485a:	89a3      	ldrh	r3, [r4, #12]
 801485c:	0759      	lsls	r1, r3, #29
 801485e:	d505      	bpl.n	801486c <__sflush_r+0x44>
 8014860:	6863      	ldr	r3, [r4, #4]
 8014862:	1ad2      	subs	r2, r2, r3
 8014864:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014866:	b10b      	cbz	r3, 801486c <__sflush_r+0x44>
 8014868:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801486a:	1ad2      	subs	r2, r2, r3
 801486c:	2300      	movs	r3, #0
 801486e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014870:	6a21      	ldr	r1, [r4, #32]
 8014872:	4628      	mov	r0, r5
 8014874:	47b0      	blx	r6
 8014876:	1c43      	adds	r3, r0, #1
 8014878:	89a3      	ldrh	r3, [r4, #12]
 801487a:	d106      	bne.n	801488a <__sflush_r+0x62>
 801487c:	6829      	ldr	r1, [r5, #0]
 801487e:	291d      	cmp	r1, #29
 8014880:	d82b      	bhi.n	80148da <__sflush_r+0xb2>
 8014882:	4a2a      	ldr	r2, [pc, #168]	@ (801492c <__sflush_r+0x104>)
 8014884:	410a      	asrs	r2, r1
 8014886:	07d6      	lsls	r6, r2, #31
 8014888:	d427      	bmi.n	80148da <__sflush_r+0xb2>
 801488a:	2200      	movs	r2, #0
 801488c:	6062      	str	r2, [r4, #4]
 801488e:	04d9      	lsls	r1, r3, #19
 8014890:	6922      	ldr	r2, [r4, #16]
 8014892:	6022      	str	r2, [r4, #0]
 8014894:	d504      	bpl.n	80148a0 <__sflush_r+0x78>
 8014896:	1c42      	adds	r2, r0, #1
 8014898:	d101      	bne.n	801489e <__sflush_r+0x76>
 801489a:	682b      	ldr	r3, [r5, #0]
 801489c:	b903      	cbnz	r3, 80148a0 <__sflush_r+0x78>
 801489e:	6560      	str	r0, [r4, #84]	@ 0x54
 80148a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80148a2:	602f      	str	r7, [r5, #0]
 80148a4:	b1b9      	cbz	r1, 80148d6 <__sflush_r+0xae>
 80148a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80148aa:	4299      	cmp	r1, r3
 80148ac:	d002      	beq.n	80148b4 <__sflush_r+0x8c>
 80148ae:	4628      	mov	r0, r5
 80148b0:	f000 faa0 	bl	8014df4 <_free_r>
 80148b4:	2300      	movs	r3, #0
 80148b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80148b8:	e00d      	b.n	80148d6 <__sflush_r+0xae>
 80148ba:	2301      	movs	r3, #1
 80148bc:	4628      	mov	r0, r5
 80148be:	47b0      	blx	r6
 80148c0:	4602      	mov	r2, r0
 80148c2:	1c50      	adds	r0, r2, #1
 80148c4:	d1c9      	bne.n	801485a <__sflush_r+0x32>
 80148c6:	682b      	ldr	r3, [r5, #0]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d0c6      	beq.n	801485a <__sflush_r+0x32>
 80148cc:	2b1d      	cmp	r3, #29
 80148ce:	d001      	beq.n	80148d4 <__sflush_r+0xac>
 80148d0:	2b16      	cmp	r3, #22
 80148d2:	d11e      	bne.n	8014912 <__sflush_r+0xea>
 80148d4:	602f      	str	r7, [r5, #0]
 80148d6:	2000      	movs	r0, #0
 80148d8:	e022      	b.n	8014920 <__sflush_r+0xf8>
 80148da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80148de:	b21b      	sxth	r3, r3
 80148e0:	e01b      	b.n	801491a <__sflush_r+0xf2>
 80148e2:	690f      	ldr	r7, [r1, #16]
 80148e4:	2f00      	cmp	r7, #0
 80148e6:	d0f6      	beq.n	80148d6 <__sflush_r+0xae>
 80148e8:	0793      	lsls	r3, r2, #30
 80148ea:	680e      	ldr	r6, [r1, #0]
 80148ec:	bf08      	it	eq
 80148ee:	694b      	ldreq	r3, [r1, #20]
 80148f0:	600f      	str	r7, [r1, #0]
 80148f2:	bf18      	it	ne
 80148f4:	2300      	movne	r3, #0
 80148f6:	eba6 0807 	sub.w	r8, r6, r7
 80148fa:	608b      	str	r3, [r1, #8]
 80148fc:	f1b8 0f00 	cmp.w	r8, #0
 8014900:	dde9      	ble.n	80148d6 <__sflush_r+0xae>
 8014902:	6a21      	ldr	r1, [r4, #32]
 8014904:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014906:	4643      	mov	r3, r8
 8014908:	463a      	mov	r2, r7
 801490a:	4628      	mov	r0, r5
 801490c:	47b0      	blx	r6
 801490e:	2800      	cmp	r0, #0
 8014910:	dc08      	bgt.n	8014924 <__sflush_r+0xfc>
 8014912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801491a:	81a3      	strh	r3, [r4, #12]
 801491c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014924:	4407      	add	r7, r0
 8014926:	eba8 0800 	sub.w	r8, r8, r0
 801492a:	e7e7      	b.n	80148fc <__sflush_r+0xd4>
 801492c:	dfbffffe 	.word	0xdfbffffe

08014930 <_fflush_r>:
 8014930:	b538      	push	{r3, r4, r5, lr}
 8014932:	690b      	ldr	r3, [r1, #16]
 8014934:	4605      	mov	r5, r0
 8014936:	460c      	mov	r4, r1
 8014938:	b913      	cbnz	r3, 8014940 <_fflush_r+0x10>
 801493a:	2500      	movs	r5, #0
 801493c:	4628      	mov	r0, r5
 801493e:	bd38      	pop	{r3, r4, r5, pc}
 8014940:	b118      	cbz	r0, 801494a <_fflush_r+0x1a>
 8014942:	6a03      	ldr	r3, [r0, #32]
 8014944:	b90b      	cbnz	r3, 801494a <_fflush_r+0x1a>
 8014946:	f7ff f9b5 	bl	8013cb4 <__sinit>
 801494a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801494e:	2b00      	cmp	r3, #0
 8014950:	d0f3      	beq.n	801493a <_fflush_r+0xa>
 8014952:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014954:	07d0      	lsls	r0, r2, #31
 8014956:	d404      	bmi.n	8014962 <_fflush_r+0x32>
 8014958:	0599      	lsls	r1, r3, #22
 801495a:	d402      	bmi.n	8014962 <_fflush_r+0x32>
 801495c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801495e:	f7ff fa8a 	bl	8013e76 <__retarget_lock_acquire_recursive>
 8014962:	4628      	mov	r0, r5
 8014964:	4621      	mov	r1, r4
 8014966:	f7ff ff5f 	bl	8014828 <__sflush_r>
 801496a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801496c:	07da      	lsls	r2, r3, #31
 801496e:	4605      	mov	r5, r0
 8014970:	d4e4      	bmi.n	801493c <_fflush_r+0xc>
 8014972:	89a3      	ldrh	r3, [r4, #12]
 8014974:	059b      	lsls	r3, r3, #22
 8014976:	d4e1      	bmi.n	801493c <_fflush_r+0xc>
 8014978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801497a:	f7ff fa7d 	bl	8013e78 <__retarget_lock_release_recursive>
 801497e:	e7dd      	b.n	801493c <_fflush_r+0xc>

08014980 <__malloc_lock>:
 8014980:	4801      	ldr	r0, [pc, #4]	@ (8014988 <__malloc_lock+0x8>)
 8014982:	f7ff ba78 	b.w	8013e76 <__retarget_lock_acquire_recursive>
 8014986:	bf00      	nop
 8014988:	20002150 	.word	0x20002150

0801498c <__malloc_unlock>:
 801498c:	4801      	ldr	r0, [pc, #4]	@ (8014994 <__malloc_unlock+0x8>)
 801498e:	f7ff ba73 	b.w	8013e78 <__retarget_lock_release_recursive>
 8014992:	bf00      	nop
 8014994:	20002150 	.word	0x20002150

08014998 <__sread>:
 8014998:	b510      	push	{r4, lr}
 801499a:	460c      	mov	r4, r1
 801499c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149a0:	f000 f9f4 	bl	8014d8c <_read_r>
 80149a4:	2800      	cmp	r0, #0
 80149a6:	bfab      	itete	ge
 80149a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80149aa:	89a3      	ldrhlt	r3, [r4, #12]
 80149ac:	181b      	addge	r3, r3, r0
 80149ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80149b2:	bfac      	ite	ge
 80149b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80149b6:	81a3      	strhlt	r3, [r4, #12]
 80149b8:	bd10      	pop	{r4, pc}

080149ba <__swrite>:
 80149ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149be:	461f      	mov	r7, r3
 80149c0:	898b      	ldrh	r3, [r1, #12]
 80149c2:	05db      	lsls	r3, r3, #23
 80149c4:	4605      	mov	r5, r0
 80149c6:	460c      	mov	r4, r1
 80149c8:	4616      	mov	r6, r2
 80149ca:	d505      	bpl.n	80149d8 <__swrite+0x1e>
 80149cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149d0:	2302      	movs	r3, #2
 80149d2:	2200      	movs	r2, #0
 80149d4:	f000 f9c8 	bl	8014d68 <_lseek_r>
 80149d8:	89a3      	ldrh	r3, [r4, #12]
 80149da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80149de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80149e2:	81a3      	strh	r3, [r4, #12]
 80149e4:	4632      	mov	r2, r6
 80149e6:	463b      	mov	r3, r7
 80149e8:	4628      	mov	r0, r5
 80149ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80149ee:	f000 b9ef 	b.w	8014dd0 <_write_r>

080149f2 <__sseek>:
 80149f2:	b510      	push	{r4, lr}
 80149f4:	460c      	mov	r4, r1
 80149f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149fa:	f000 f9b5 	bl	8014d68 <_lseek_r>
 80149fe:	1c43      	adds	r3, r0, #1
 8014a00:	89a3      	ldrh	r3, [r4, #12]
 8014a02:	bf15      	itete	ne
 8014a04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014a06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014a0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014a0e:	81a3      	strheq	r3, [r4, #12]
 8014a10:	bf18      	it	ne
 8014a12:	81a3      	strhne	r3, [r4, #12]
 8014a14:	bd10      	pop	{r4, pc}

08014a16 <__sclose>:
 8014a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a1a:	f000 b973 	b.w	8014d04 <_close_r>

08014a1e <_realloc_r>:
 8014a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a22:	4680      	mov	r8, r0
 8014a24:	4615      	mov	r5, r2
 8014a26:	460c      	mov	r4, r1
 8014a28:	b921      	cbnz	r1, 8014a34 <_realloc_r+0x16>
 8014a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a2e:	4611      	mov	r1, r2
 8014a30:	f7ff bcec 	b.w	801440c <_malloc_r>
 8014a34:	b92a      	cbnz	r2, 8014a42 <_realloc_r+0x24>
 8014a36:	f000 f9dd 	bl	8014df4 <_free_r>
 8014a3a:	2400      	movs	r4, #0
 8014a3c:	4620      	mov	r0, r4
 8014a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a42:	f000 fa21 	bl	8014e88 <_malloc_usable_size_r>
 8014a46:	4285      	cmp	r5, r0
 8014a48:	4606      	mov	r6, r0
 8014a4a:	d802      	bhi.n	8014a52 <_realloc_r+0x34>
 8014a4c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014a50:	d8f4      	bhi.n	8014a3c <_realloc_r+0x1e>
 8014a52:	4629      	mov	r1, r5
 8014a54:	4640      	mov	r0, r8
 8014a56:	f7ff fcd9 	bl	801440c <_malloc_r>
 8014a5a:	4607      	mov	r7, r0
 8014a5c:	2800      	cmp	r0, #0
 8014a5e:	d0ec      	beq.n	8014a3a <_realloc_r+0x1c>
 8014a60:	42b5      	cmp	r5, r6
 8014a62:	462a      	mov	r2, r5
 8014a64:	4621      	mov	r1, r4
 8014a66:	bf28      	it	cs
 8014a68:	4632      	movcs	r2, r6
 8014a6a:	f7ff fa06 	bl	8013e7a <memcpy>
 8014a6e:	4621      	mov	r1, r4
 8014a70:	4640      	mov	r0, r8
 8014a72:	f000 f9bf 	bl	8014df4 <_free_r>
 8014a76:	463c      	mov	r4, r7
 8014a78:	e7e0      	b.n	8014a3c <_realloc_r+0x1e>

08014a7a <__swbuf_r>:
 8014a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a7c:	460e      	mov	r6, r1
 8014a7e:	4614      	mov	r4, r2
 8014a80:	4605      	mov	r5, r0
 8014a82:	b118      	cbz	r0, 8014a8c <__swbuf_r+0x12>
 8014a84:	6a03      	ldr	r3, [r0, #32]
 8014a86:	b90b      	cbnz	r3, 8014a8c <__swbuf_r+0x12>
 8014a88:	f7ff f914 	bl	8013cb4 <__sinit>
 8014a8c:	69a3      	ldr	r3, [r4, #24]
 8014a8e:	60a3      	str	r3, [r4, #8]
 8014a90:	89a3      	ldrh	r3, [r4, #12]
 8014a92:	071a      	lsls	r2, r3, #28
 8014a94:	d501      	bpl.n	8014a9a <__swbuf_r+0x20>
 8014a96:	6923      	ldr	r3, [r4, #16]
 8014a98:	b943      	cbnz	r3, 8014aac <__swbuf_r+0x32>
 8014a9a:	4621      	mov	r1, r4
 8014a9c:	4628      	mov	r0, r5
 8014a9e:	f000 f82b 	bl	8014af8 <__swsetup_r>
 8014aa2:	b118      	cbz	r0, 8014aac <__swbuf_r+0x32>
 8014aa4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8014aa8:	4638      	mov	r0, r7
 8014aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014aac:	6823      	ldr	r3, [r4, #0]
 8014aae:	6922      	ldr	r2, [r4, #16]
 8014ab0:	1a98      	subs	r0, r3, r2
 8014ab2:	6963      	ldr	r3, [r4, #20]
 8014ab4:	b2f6      	uxtb	r6, r6
 8014ab6:	4283      	cmp	r3, r0
 8014ab8:	4637      	mov	r7, r6
 8014aba:	dc05      	bgt.n	8014ac8 <__swbuf_r+0x4e>
 8014abc:	4621      	mov	r1, r4
 8014abe:	4628      	mov	r0, r5
 8014ac0:	f7ff ff36 	bl	8014930 <_fflush_r>
 8014ac4:	2800      	cmp	r0, #0
 8014ac6:	d1ed      	bne.n	8014aa4 <__swbuf_r+0x2a>
 8014ac8:	68a3      	ldr	r3, [r4, #8]
 8014aca:	3b01      	subs	r3, #1
 8014acc:	60a3      	str	r3, [r4, #8]
 8014ace:	6823      	ldr	r3, [r4, #0]
 8014ad0:	1c5a      	adds	r2, r3, #1
 8014ad2:	6022      	str	r2, [r4, #0]
 8014ad4:	701e      	strb	r6, [r3, #0]
 8014ad6:	6962      	ldr	r2, [r4, #20]
 8014ad8:	1c43      	adds	r3, r0, #1
 8014ada:	429a      	cmp	r2, r3
 8014adc:	d004      	beq.n	8014ae8 <__swbuf_r+0x6e>
 8014ade:	89a3      	ldrh	r3, [r4, #12]
 8014ae0:	07db      	lsls	r3, r3, #31
 8014ae2:	d5e1      	bpl.n	8014aa8 <__swbuf_r+0x2e>
 8014ae4:	2e0a      	cmp	r6, #10
 8014ae6:	d1df      	bne.n	8014aa8 <__swbuf_r+0x2e>
 8014ae8:	4621      	mov	r1, r4
 8014aea:	4628      	mov	r0, r5
 8014aec:	f7ff ff20 	bl	8014930 <_fflush_r>
 8014af0:	2800      	cmp	r0, #0
 8014af2:	d0d9      	beq.n	8014aa8 <__swbuf_r+0x2e>
 8014af4:	e7d6      	b.n	8014aa4 <__swbuf_r+0x2a>
	...

08014af8 <__swsetup_r>:
 8014af8:	b538      	push	{r3, r4, r5, lr}
 8014afa:	4b29      	ldr	r3, [pc, #164]	@ (8014ba0 <__swsetup_r+0xa8>)
 8014afc:	4605      	mov	r5, r0
 8014afe:	6818      	ldr	r0, [r3, #0]
 8014b00:	460c      	mov	r4, r1
 8014b02:	b118      	cbz	r0, 8014b0c <__swsetup_r+0x14>
 8014b04:	6a03      	ldr	r3, [r0, #32]
 8014b06:	b90b      	cbnz	r3, 8014b0c <__swsetup_r+0x14>
 8014b08:	f7ff f8d4 	bl	8013cb4 <__sinit>
 8014b0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b10:	0719      	lsls	r1, r3, #28
 8014b12:	d422      	bmi.n	8014b5a <__swsetup_r+0x62>
 8014b14:	06da      	lsls	r2, r3, #27
 8014b16:	d407      	bmi.n	8014b28 <__swsetup_r+0x30>
 8014b18:	2209      	movs	r2, #9
 8014b1a:	602a      	str	r2, [r5, #0]
 8014b1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014b20:	81a3      	strh	r3, [r4, #12]
 8014b22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014b26:	e033      	b.n	8014b90 <__swsetup_r+0x98>
 8014b28:	0758      	lsls	r0, r3, #29
 8014b2a:	d512      	bpl.n	8014b52 <__swsetup_r+0x5a>
 8014b2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014b2e:	b141      	cbz	r1, 8014b42 <__swsetup_r+0x4a>
 8014b30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014b34:	4299      	cmp	r1, r3
 8014b36:	d002      	beq.n	8014b3e <__swsetup_r+0x46>
 8014b38:	4628      	mov	r0, r5
 8014b3a:	f000 f95b 	bl	8014df4 <_free_r>
 8014b3e:	2300      	movs	r3, #0
 8014b40:	6363      	str	r3, [r4, #52]	@ 0x34
 8014b42:	89a3      	ldrh	r3, [r4, #12]
 8014b44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014b48:	81a3      	strh	r3, [r4, #12]
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	6063      	str	r3, [r4, #4]
 8014b4e:	6923      	ldr	r3, [r4, #16]
 8014b50:	6023      	str	r3, [r4, #0]
 8014b52:	89a3      	ldrh	r3, [r4, #12]
 8014b54:	f043 0308 	orr.w	r3, r3, #8
 8014b58:	81a3      	strh	r3, [r4, #12]
 8014b5a:	6923      	ldr	r3, [r4, #16]
 8014b5c:	b94b      	cbnz	r3, 8014b72 <__swsetup_r+0x7a>
 8014b5e:	89a3      	ldrh	r3, [r4, #12]
 8014b60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014b64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014b68:	d003      	beq.n	8014b72 <__swsetup_r+0x7a>
 8014b6a:	4621      	mov	r1, r4
 8014b6c:	4628      	mov	r0, r5
 8014b6e:	f000 f83f 	bl	8014bf0 <__smakebuf_r>
 8014b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b76:	f013 0201 	ands.w	r2, r3, #1
 8014b7a:	d00a      	beq.n	8014b92 <__swsetup_r+0x9a>
 8014b7c:	2200      	movs	r2, #0
 8014b7e:	60a2      	str	r2, [r4, #8]
 8014b80:	6962      	ldr	r2, [r4, #20]
 8014b82:	4252      	negs	r2, r2
 8014b84:	61a2      	str	r2, [r4, #24]
 8014b86:	6922      	ldr	r2, [r4, #16]
 8014b88:	b942      	cbnz	r2, 8014b9c <__swsetup_r+0xa4>
 8014b8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014b8e:	d1c5      	bne.n	8014b1c <__swsetup_r+0x24>
 8014b90:	bd38      	pop	{r3, r4, r5, pc}
 8014b92:	0799      	lsls	r1, r3, #30
 8014b94:	bf58      	it	pl
 8014b96:	6962      	ldrpl	r2, [r4, #20]
 8014b98:	60a2      	str	r2, [r4, #8]
 8014b9a:	e7f4      	b.n	8014b86 <__swsetup_r+0x8e>
 8014b9c:	2000      	movs	r0, #0
 8014b9e:	e7f7      	b.n	8014b90 <__swsetup_r+0x98>
 8014ba0:	20000170 	.word	0x20000170

08014ba4 <__swhatbuf_r>:
 8014ba4:	b570      	push	{r4, r5, r6, lr}
 8014ba6:	460c      	mov	r4, r1
 8014ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bac:	2900      	cmp	r1, #0
 8014bae:	b096      	sub	sp, #88	@ 0x58
 8014bb0:	4615      	mov	r5, r2
 8014bb2:	461e      	mov	r6, r3
 8014bb4:	da0d      	bge.n	8014bd2 <__swhatbuf_r+0x2e>
 8014bb6:	89a3      	ldrh	r3, [r4, #12]
 8014bb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014bbc:	f04f 0100 	mov.w	r1, #0
 8014bc0:	bf14      	ite	ne
 8014bc2:	2340      	movne	r3, #64	@ 0x40
 8014bc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014bc8:	2000      	movs	r0, #0
 8014bca:	6031      	str	r1, [r6, #0]
 8014bcc:	602b      	str	r3, [r5, #0]
 8014bce:	b016      	add	sp, #88	@ 0x58
 8014bd0:	bd70      	pop	{r4, r5, r6, pc}
 8014bd2:	466a      	mov	r2, sp
 8014bd4:	f000 f8a6 	bl	8014d24 <_fstat_r>
 8014bd8:	2800      	cmp	r0, #0
 8014bda:	dbec      	blt.n	8014bb6 <__swhatbuf_r+0x12>
 8014bdc:	9901      	ldr	r1, [sp, #4]
 8014bde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014be2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014be6:	4259      	negs	r1, r3
 8014be8:	4159      	adcs	r1, r3
 8014bea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014bee:	e7eb      	b.n	8014bc8 <__swhatbuf_r+0x24>

08014bf0 <__smakebuf_r>:
 8014bf0:	898b      	ldrh	r3, [r1, #12]
 8014bf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014bf4:	079d      	lsls	r5, r3, #30
 8014bf6:	4606      	mov	r6, r0
 8014bf8:	460c      	mov	r4, r1
 8014bfa:	d507      	bpl.n	8014c0c <__smakebuf_r+0x1c>
 8014bfc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014c00:	6023      	str	r3, [r4, #0]
 8014c02:	6123      	str	r3, [r4, #16]
 8014c04:	2301      	movs	r3, #1
 8014c06:	6163      	str	r3, [r4, #20]
 8014c08:	b003      	add	sp, #12
 8014c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c0c:	ab01      	add	r3, sp, #4
 8014c0e:	466a      	mov	r2, sp
 8014c10:	f7ff ffc8 	bl	8014ba4 <__swhatbuf_r>
 8014c14:	9f00      	ldr	r7, [sp, #0]
 8014c16:	4605      	mov	r5, r0
 8014c18:	4639      	mov	r1, r7
 8014c1a:	4630      	mov	r0, r6
 8014c1c:	f7ff fbf6 	bl	801440c <_malloc_r>
 8014c20:	b948      	cbnz	r0, 8014c36 <__smakebuf_r+0x46>
 8014c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c26:	059a      	lsls	r2, r3, #22
 8014c28:	d4ee      	bmi.n	8014c08 <__smakebuf_r+0x18>
 8014c2a:	f023 0303 	bic.w	r3, r3, #3
 8014c2e:	f043 0302 	orr.w	r3, r3, #2
 8014c32:	81a3      	strh	r3, [r4, #12]
 8014c34:	e7e2      	b.n	8014bfc <__smakebuf_r+0xc>
 8014c36:	89a3      	ldrh	r3, [r4, #12]
 8014c38:	6020      	str	r0, [r4, #0]
 8014c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014c3e:	81a3      	strh	r3, [r4, #12]
 8014c40:	9b01      	ldr	r3, [sp, #4]
 8014c42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014c46:	b15b      	cbz	r3, 8014c60 <__smakebuf_r+0x70>
 8014c48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c4c:	4630      	mov	r0, r6
 8014c4e:	f000 f87b 	bl	8014d48 <_isatty_r>
 8014c52:	b128      	cbz	r0, 8014c60 <__smakebuf_r+0x70>
 8014c54:	89a3      	ldrh	r3, [r4, #12]
 8014c56:	f023 0303 	bic.w	r3, r3, #3
 8014c5a:	f043 0301 	orr.w	r3, r3, #1
 8014c5e:	81a3      	strh	r3, [r4, #12]
 8014c60:	89a3      	ldrh	r3, [r4, #12]
 8014c62:	431d      	orrs	r5, r3
 8014c64:	81a5      	strh	r5, [r4, #12]
 8014c66:	e7cf      	b.n	8014c08 <__smakebuf_r+0x18>

08014c68 <_putc_r>:
 8014c68:	b570      	push	{r4, r5, r6, lr}
 8014c6a:	460d      	mov	r5, r1
 8014c6c:	4614      	mov	r4, r2
 8014c6e:	4606      	mov	r6, r0
 8014c70:	b118      	cbz	r0, 8014c7a <_putc_r+0x12>
 8014c72:	6a03      	ldr	r3, [r0, #32]
 8014c74:	b90b      	cbnz	r3, 8014c7a <_putc_r+0x12>
 8014c76:	f7ff f81d 	bl	8013cb4 <__sinit>
 8014c7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014c7c:	07d8      	lsls	r0, r3, #31
 8014c7e:	d405      	bmi.n	8014c8c <_putc_r+0x24>
 8014c80:	89a3      	ldrh	r3, [r4, #12]
 8014c82:	0599      	lsls	r1, r3, #22
 8014c84:	d402      	bmi.n	8014c8c <_putc_r+0x24>
 8014c86:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014c88:	f7ff f8f5 	bl	8013e76 <__retarget_lock_acquire_recursive>
 8014c8c:	68a3      	ldr	r3, [r4, #8]
 8014c8e:	3b01      	subs	r3, #1
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	60a3      	str	r3, [r4, #8]
 8014c94:	da05      	bge.n	8014ca2 <_putc_r+0x3a>
 8014c96:	69a2      	ldr	r2, [r4, #24]
 8014c98:	4293      	cmp	r3, r2
 8014c9a:	db12      	blt.n	8014cc2 <_putc_r+0x5a>
 8014c9c:	b2eb      	uxtb	r3, r5
 8014c9e:	2b0a      	cmp	r3, #10
 8014ca0:	d00f      	beq.n	8014cc2 <_putc_r+0x5a>
 8014ca2:	6823      	ldr	r3, [r4, #0]
 8014ca4:	1c5a      	adds	r2, r3, #1
 8014ca6:	6022      	str	r2, [r4, #0]
 8014ca8:	701d      	strb	r5, [r3, #0]
 8014caa:	b2ed      	uxtb	r5, r5
 8014cac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014cae:	07da      	lsls	r2, r3, #31
 8014cb0:	d405      	bmi.n	8014cbe <_putc_r+0x56>
 8014cb2:	89a3      	ldrh	r3, [r4, #12]
 8014cb4:	059b      	lsls	r3, r3, #22
 8014cb6:	d402      	bmi.n	8014cbe <_putc_r+0x56>
 8014cb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014cba:	f7ff f8dd 	bl	8013e78 <__retarget_lock_release_recursive>
 8014cbe:	4628      	mov	r0, r5
 8014cc0:	bd70      	pop	{r4, r5, r6, pc}
 8014cc2:	4629      	mov	r1, r5
 8014cc4:	4622      	mov	r2, r4
 8014cc6:	4630      	mov	r0, r6
 8014cc8:	f7ff fed7 	bl	8014a7a <__swbuf_r>
 8014ccc:	4605      	mov	r5, r0
 8014cce:	e7ed      	b.n	8014cac <_putc_r+0x44>

08014cd0 <memmove>:
 8014cd0:	4288      	cmp	r0, r1
 8014cd2:	b510      	push	{r4, lr}
 8014cd4:	eb01 0402 	add.w	r4, r1, r2
 8014cd8:	d902      	bls.n	8014ce0 <memmove+0x10>
 8014cda:	4284      	cmp	r4, r0
 8014cdc:	4623      	mov	r3, r4
 8014cde:	d807      	bhi.n	8014cf0 <memmove+0x20>
 8014ce0:	1e43      	subs	r3, r0, #1
 8014ce2:	42a1      	cmp	r1, r4
 8014ce4:	d008      	beq.n	8014cf8 <memmove+0x28>
 8014ce6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014cea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014cee:	e7f8      	b.n	8014ce2 <memmove+0x12>
 8014cf0:	4402      	add	r2, r0
 8014cf2:	4601      	mov	r1, r0
 8014cf4:	428a      	cmp	r2, r1
 8014cf6:	d100      	bne.n	8014cfa <memmove+0x2a>
 8014cf8:	bd10      	pop	{r4, pc}
 8014cfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014cfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014d02:	e7f7      	b.n	8014cf4 <memmove+0x24>

08014d04 <_close_r>:
 8014d04:	b538      	push	{r3, r4, r5, lr}
 8014d06:	4d06      	ldr	r5, [pc, #24]	@ (8014d20 <_close_r+0x1c>)
 8014d08:	2300      	movs	r3, #0
 8014d0a:	4604      	mov	r4, r0
 8014d0c:	4608      	mov	r0, r1
 8014d0e:	602b      	str	r3, [r5, #0]
 8014d10:	f7ee f90f 	bl	8002f32 <_close>
 8014d14:	1c43      	adds	r3, r0, #1
 8014d16:	d102      	bne.n	8014d1e <_close_r+0x1a>
 8014d18:	682b      	ldr	r3, [r5, #0]
 8014d1a:	b103      	cbz	r3, 8014d1e <_close_r+0x1a>
 8014d1c:	6023      	str	r3, [r4, #0]
 8014d1e:	bd38      	pop	{r3, r4, r5, pc}
 8014d20:	2000215c 	.word	0x2000215c

08014d24 <_fstat_r>:
 8014d24:	b538      	push	{r3, r4, r5, lr}
 8014d26:	4d07      	ldr	r5, [pc, #28]	@ (8014d44 <_fstat_r+0x20>)
 8014d28:	2300      	movs	r3, #0
 8014d2a:	4604      	mov	r4, r0
 8014d2c:	4608      	mov	r0, r1
 8014d2e:	4611      	mov	r1, r2
 8014d30:	602b      	str	r3, [r5, #0]
 8014d32:	f7ee f90a 	bl	8002f4a <_fstat>
 8014d36:	1c43      	adds	r3, r0, #1
 8014d38:	d102      	bne.n	8014d40 <_fstat_r+0x1c>
 8014d3a:	682b      	ldr	r3, [r5, #0]
 8014d3c:	b103      	cbz	r3, 8014d40 <_fstat_r+0x1c>
 8014d3e:	6023      	str	r3, [r4, #0]
 8014d40:	bd38      	pop	{r3, r4, r5, pc}
 8014d42:	bf00      	nop
 8014d44:	2000215c 	.word	0x2000215c

08014d48 <_isatty_r>:
 8014d48:	b538      	push	{r3, r4, r5, lr}
 8014d4a:	4d06      	ldr	r5, [pc, #24]	@ (8014d64 <_isatty_r+0x1c>)
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	4604      	mov	r4, r0
 8014d50:	4608      	mov	r0, r1
 8014d52:	602b      	str	r3, [r5, #0]
 8014d54:	f7ee f909 	bl	8002f6a <_isatty>
 8014d58:	1c43      	adds	r3, r0, #1
 8014d5a:	d102      	bne.n	8014d62 <_isatty_r+0x1a>
 8014d5c:	682b      	ldr	r3, [r5, #0]
 8014d5e:	b103      	cbz	r3, 8014d62 <_isatty_r+0x1a>
 8014d60:	6023      	str	r3, [r4, #0]
 8014d62:	bd38      	pop	{r3, r4, r5, pc}
 8014d64:	2000215c 	.word	0x2000215c

08014d68 <_lseek_r>:
 8014d68:	b538      	push	{r3, r4, r5, lr}
 8014d6a:	4d07      	ldr	r5, [pc, #28]	@ (8014d88 <_lseek_r+0x20>)
 8014d6c:	4604      	mov	r4, r0
 8014d6e:	4608      	mov	r0, r1
 8014d70:	4611      	mov	r1, r2
 8014d72:	2200      	movs	r2, #0
 8014d74:	602a      	str	r2, [r5, #0]
 8014d76:	461a      	mov	r2, r3
 8014d78:	f7ee f902 	bl	8002f80 <_lseek>
 8014d7c:	1c43      	adds	r3, r0, #1
 8014d7e:	d102      	bne.n	8014d86 <_lseek_r+0x1e>
 8014d80:	682b      	ldr	r3, [r5, #0]
 8014d82:	b103      	cbz	r3, 8014d86 <_lseek_r+0x1e>
 8014d84:	6023      	str	r3, [r4, #0]
 8014d86:	bd38      	pop	{r3, r4, r5, pc}
 8014d88:	2000215c 	.word	0x2000215c

08014d8c <_read_r>:
 8014d8c:	b538      	push	{r3, r4, r5, lr}
 8014d8e:	4d07      	ldr	r5, [pc, #28]	@ (8014dac <_read_r+0x20>)
 8014d90:	4604      	mov	r4, r0
 8014d92:	4608      	mov	r0, r1
 8014d94:	4611      	mov	r1, r2
 8014d96:	2200      	movs	r2, #0
 8014d98:	602a      	str	r2, [r5, #0]
 8014d9a:	461a      	mov	r2, r3
 8014d9c:	f7ee f8ac 	bl	8002ef8 <_read>
 8014da0:	1c43      	adds	r3, r0, #1
 8014da2:	d102      	bne.n	8014daa <_read_r+0x1e>
 8014da4:	682b      	ldr	r3, [r5, #0]
 8014da6:	b103      	cbz	r3, 8014daa <_read_r+0x1e>
 8014da8:	6023      	str	r3, [r4, #0]
 8014daa:	bd38      	pop	{r3, r4, r5, pc}
 8014dac:	2000215c 	.word	0x2000215c

08014db0 <_sbrk_r>:
 8014db0:	b538      	push	{r3, r4, r5, lr}
 8014db2:	4d06      	ldr	r5, [pc, #24]	@ (8014dcc <_sbrk_r+0x1c>)
 8014db4:	2300      	movs	r3, #0
 8014db6:	4604      	mov	r4, r0
 8014db8:	4608      	mov	r0, r1
 8014dba:	602b      	str	r3, [r5, #0]
 8014dbc:	f7ee f8ee 	bl	8002f9c <_sbrk>
 8014dc0:	1c43      	adds	r3, r0, #1
 8014dc2:	d102      	bne.n	8014dca <_sbrk_r+0x1a>
 8014dc4:	682b      	ldr	r3, [r5, #0]
 8014dc6:	b103      	cbz	r3, 8014dca <_sbrk_r+0x1a>
 8014dc8:	6023      	str	r3, [r4, #0]
 8014dca:	bd38      	pop	{r3, r4, r5, pc}
 8014dcc:	2000215c 	.word	0x2000215c

08014dd0 <_write_r>:
 8014dd0:	b538      	push	{r3, r4, r5, lr}
 8014dd2:	4d07      	ldr	r5, [pc, #28]	@ (8014df0 <_write_r+0x20>)
 8014dd4:	4604      	mov	r4, r0
 8014dd6:	4608      	mov	r0, r1
 8014dd8:	4611      	mov	r1, r2
 8014dda:	2200      	movs	r2, #0
 8014ddc:	602a      	str	r2, [r5, #0]
 8014dde:	461a      	mov	r2, r3
 8014de0:	f7fb fede 	bl	8010ba0 <_write>
 8014de4:	1c43      	adds	r3, r0, #1
 8014de6:	d102      	bne.n	8014dee <_write_r+0x1e>
 8014de8:	682b      	ldr	r3, [r5, #0]
 8014dea:	b103      	cbz	r3, 8014dee <_write_r+0x1e>
 8014dec:	6023      	str	r3, [r4, #0]
 8014dee:	bd38      	pop	{r3, r4, r5, pc}
 8014df0:	2000215c 	.word	0x2000215c

08014df4 <_free_r>:
 8014df4:	b538      	push	{r3, r4, r5, lr}
 8014df6:	4605      	mov	r5, r0
 8014df8:	2900      	cmp	r1, #0
 8014dfa:	d041      	beq.n	8014e80 <_free_r+0x8c>
 8014dfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014e00:	1f0c      	subs	r4, r1, #4
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	bfb8      	it	lt
 8014e06:	18e4      	addlt	r4, r4, r3
 8014e08:	f7ff fdba 	bl	8014980 <__malloc_lock>
 8014e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8014e84 <_free_r+0x90>)
 8014e0e:	6813      	ldr	r3, [r2, #0]
 8014e10:	b933      	cbnz	r3, 8014e20 <_free_r+0x2c>
 8014e12:	6063      	str	r3, [r4, #4]
 8014e14:	6014      	str	r4, [r2, #0]
 8014e16:	4628      	mov	r0, r5
 8014e18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014e1c:	f7ff bdb6 	b.w	801498c <__malloc_unlock>
 8014e20:	42a3      	cmp	r3, r4
 8014e22:	d908      	bls.n	8014e36 <_free_r+0x42>
 8014e24:	6820      	ldr	r0, [r4, #0]
 8014e26:	1821      	adds	r1, r4, r0
 8014e28:	428b      	cmp	r3, r1
 8014e2a:	bf01      	itttt	eq
 8014e2c:	6819      	ldreq	r1, [r3, #0]
 8014e2e:	685b      	ldreq	r3, [r3, #4]
 8014e30:	1809      	addeq	r1, r1, r0
 8014e32:	6021      	streq	r1, [r4, #0]
 8014e34:	e7ed      	b.n	8014e12 <_free_r+0x1e>
 8014e36:	461a      	mov	r2, r3
 8014e38:	685b      	ldr	r3, [r3, #4]
 8014e3a:	b10b      	cbz	r3, 8014e40 <_free_r+0x4c>
 8014e3c:	42a3      	cmp	r3, r4
 8014e3e:	d9fa      	bls.n	8014e36 <_free_r+0x42>
 8014e40:	6811      	ldr	r1, [r2, #0]
 8014e42:	1850      	adds	r0, r2, r1
 8014e44:	42a0      	cmp	r0, r4
 8014e46:	d10b      	bne.n	8014e60 <_free_r+0x6c>
 8014e48:	6820      	ldr	r0, [r4, #0]
 8014e4a:	4401      	add	r1, r0
 8014e4c:	1850      	adds	r0, r2, r1
 8014e4e:	4283      	cmp	r3, r0
 8014e50:	6011      	str	r1, [r2, #0]
 8014e52:	d1e0      	bne.n	8014e16 <_free_r+0x22>
 8014e54:	6818      	ldr	r0, [r3, #0]
 8014e56:	685b      	ldr	r3, [r3, #4]
 8014e58:	6053      	str	r3, [r2, #4]
 8014e5a:	4408      	add	r0, r1
 8014e5c:	6010      	str	r0, [r2, #0]
 8014e5e:	e7da      	b.n	8014e16 <_free_r+0x22>
 8014e60:	d902      	bls.n	8014e68 <_free_r+0x74>
 8014e62:	230c      	movs	r3, #12
 8014e64:	602b      	str	r3, [r5, #0]
 8014e66:	e7d6      	b.n	8014e16 <_free_r+0x22>
 8014e68:	6820      	ldr	r0, [r4, #0]
 8014e6a:	1821      	adds	r1, r4, r0
 8014e6c:	428b      	cmp	r3, r1
 8014e6e:	bf04      	itt	eq
 8014e70:	6819      	ldreq	r1, [r3, #0]
 8014e72:	685b      	ldreq	r3, [r3, #4]
 8014e74:	6063      	str	r3, [r4, #4]
 8014e76:	bf04      	itt	eq
 8014e78:	1809      	addeq	r1, r1, r0
 8014e7a:	6021      	streq	r1, [r4, #0]
 8014e7c:	6054      	str	r4, [r2, #4]
 8014e7e:	e7ca      	b.n	8014e16 <_free_r+0x22>
 8014e80:	bd38      	pop	{r3, r4, r5, pc}
 8014e82:	bf00      	nop
 8014e84:	20002158 	.word	0x20002158

08014e88 <_malloc_usable_size_r>:
 8014e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014e8c:	1f18      	subs	r0, r3, #4
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	bfbc      	itt	lt
 8014e92:	580b      	ldrlt	r3, [r1, r0]
 8014e94:	18c0      	addlt	r0, r0, r3
 8014e96:	4770      	bx	lr

08014e98 <_init>:
 8014e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e9a:	bf00      	nop
 8014e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014e9e:	bc08      	pop	{r3}
 8014ea0:	469e      	mov	lr, r3
 8014ea2:	4770      	bx	lr

08014ea4 <_fini>:
 8014ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ea6:	bf00      	nop
 8014ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014eaa:	bc08      	pop	{r3}
 8014eac:	469e      	mov	lr, r3
 8014eae:	4770      	bx	lr
