
WB55-p2p-Client-Legacy-OOB-UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea4c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001498  0800eb8c  0800eb8c  0000fb8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010024  08010024  00011024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801002c  0801002c  0001102c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010030  08010030  00011030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  20000008  08010034  00012008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000039  20000090  080100bc  00012090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000cc  080100f5  000120cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_APP_CONTEXT 0000000a  200000e0  08010106  000120e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001658  200000ec  08010110  000120ec  2**2
                  ALLOC
 11 ._user_heap_stack 00001404  20001744  08010110  00012744  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012a67  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00013000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00013000  2**2
                  ALLOC
 15 .MB_MEM2      00000883  200301e4  08010110  000121e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 16 .debug_info   00033894  00000000  00000000  00012a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00006abb  00000000  00000000  0004632b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002ed0  00000000  00000000  0004cde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002412  00000000  00000000  0004fcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002d9ef  00000000  00000000  000520ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00032f72  00000000  00000000  0007fab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00103a5b  00000000  00000000  000b2a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000043  00000000  00000000  001b6486  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000cea0  00000000  00000000  001b64cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 0000007a  00000000  00000000  001c336c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000ec 	.word	0x200000ec
 800015c:	00000000 	.word	0x00000000
 8000160:	0800eb74 	.word	0x0800eb74

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000f0 	.word	0x200000f0
 800017c:	0800eb74 	.word	0x0800eb74

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000244:	f000 b96a 	b.w	800051c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	460c      	mov	r4, r1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d14e      	bne.n	800030a <__udivmoddi4+0xaa>
 800026c:	4694      	mov	ip, r2
 800026e:	458c      	cmp	ip, r1
 8000270:	4686      	mov	lr, r0
 8000272:	fab2 f282 	clz	r2, r2
 8000276:	d962      	bls.n	800033e <__udivmoddi4+0xde>
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0320 	rsb	r3, r2, #32
 800027e:	4091      	lsls	r1, r2
 8000280:	fa20 f303 	lsr.w	r3, r0, r3
 8000284:	fa0c fc02 	lsl.w	ip, ip, r2
 8000288:	4319      	orrs	r1, r3
 800028a:	fa00 fe02 	lsl.w	lr, r0, r2
 800028e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000292:	fa1f f68c 	uxth.w	r6, ip
 8000296:	fbb1 f4f7 	udiv	r4, r1, r7
 800029a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800029e:	fb07 1114 	mls	r1, r7, r4, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb04 f106 	mul.w	r1, r4, r6
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002b6:	f080 8112 	bcs.w	80004de <__udivmoddi4+0x27e>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 810f 	bls.w	80004de <__udivmoddi4+0x27e>
 80002c0:	3c02      	subs	r4, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a59      	subs	r1, r3, r1
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ce:	fb07 1110 	mls	r1, r7, r0, r1
 80002d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d6:	fb00 f606 	mul.w	r6, r0, r6
 80002da:	429e      	cmp	r6, r3
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0303 	adds.w	r3, ip, r3
 80002e2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002e6:	f080 80fc 	bcs.w	80004e2 <__udivmoddi4+0x282>
 80002ea:	429e      	cmp	r6, r3
 80002ec:	f240 80f9 	bls.w	80004e2 <__udivmoddi4+0x282>
 80002f0:	4463      	add	r3, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	1b9b      	subs	r3, r3, r6
 80002f6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa6>
 80002fe:	40d3      	lsrs	r3, r2
 8000300:	2200      	movs	r2, #0
 8000302:	e9c5 3200 	strd	r3, r2, [r5]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xba>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb4>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa6>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d146      	bne.n	80003b0 <__udivmoddi4+0x150>
 8000322:	42a3      	cmp	r3, r4
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xcc>
 8000326:	4290      	cmp	r0, r2
 8000328:	f0c0 80f0 	bcc.w	800050c <__udivmoddi4+0x2ac>
 800032c:	1a86      	subs	r6, r0, r2
 800032e:	eb64 0303 	sbc.w	r3, r4, r3
 8000332:	2001      	movs	r0, #1
 8000334:	2d00      	cmp	r5, #0
 8000336:	d0e6      	beq.n	8000306 <__udivmoddi4+0xa6>
 8000338:	e9c5 6300 	strd	r6, r3, [r5]
 800033c:	e7e3      	b.n	8000306 <__udivmoddi4+0xa6>
 800033e:	2a00      	cmp	r2, #0
 8000340:	f040 8090 	bne.w	8000464 <__udivmoddi4+0x204>
 8000344:	eba1 040c 	sub.w	r4, r1, ip
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb4 f6f8 	udiv	r6, r4, r8
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb08 4416 	mls	r4, r8, r6, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb07 f006 	mul.w	r0, r7, r6
 8000366:	4298      	cmp	r0, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x11c>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x11a>
 8000374:	4298      	cmp	r0, r3
 8000376:	f200 80cd 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 800037a:	4626      	mov	r6, r4
 800037c:	1a1c      	subs	r4, r3, r0
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	fbb4 f0f8 	udiv	r0, r4, r8
 8000386:	fb08 4410 	mls	r4, r8, r0, r4
 800038a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800038e:	fb00 f707 	mul.w	r7, r0, r7
 8000392:	429f      	cmp	r7, r3
 8000394:	d908      	bls.n	80003a8 <__udivmoddi4+0x148>
 8000396:	eb1c 0303 	adds.w	r3, ip, r3
 800039a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x146>
 80003a0:	429f      	cmp	r7, r3
 80003a2:	f200 80b0 	bhi.w	8000506 <__udivmoddi4+0x2a6>
 80003a6:	4620      	mov	r0, r4
 80003a8:	1bdb      	subs	r3, r3, r7
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	e7a5      	b.n	80002fc <__udivmoddi4+0x9c>
 80003b0:	f1c1 0620 	rsb	r6, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ba:	431f      	orrs	r7, r3
 80003bc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c0:	fa04 f301 	lsl.w	r3, r4, r1
 80003c4:	ea43 030c 	orr.w	r3, r3, ip
 80003c8:	40f4      	lsrs	r4, r6
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	0c38      	lsrs	r0, r7, #16
 80003d0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003d4:	fbb4 fef0 	udiv	lr, r4, r0
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	fb00 441e 	mls	r4, r0, lr, r4
 80003e0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e4:	fb0e f90c 	mul.w	r9, lr, ip
 80003e8:	45a1      	cmp	r9, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90a      	bls.n	8000406 <__udivmoddi4+0x1a6>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003f6:	f080 8084 	bcs.w	8000502 <__udivmoddi4+0x2a2>
 80003fa:	45a1      	cmp	r9, r4
 80003fc:	f240 8081 	bls.w	8000502 <__udivmoddi4+0x2a2>
 8000400:	f1ae 0e02 	sub.w	lr, lr, #2
 8000404:	443c      	add	r4, r7
 8000406:	eba4 0409 	sub.w	r4, r4, r9
 800040a:	fa1f f983 	uxth.w	r9, r3
 800040e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000412:	fb00 4413 	mls	r4, r0, r3, r4
 8000416:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800041a:	fb03 fc0c 	mul.w	ip, r3, ip
 800041e:	45a4      	cmp	ip, r4
 8000420:	d907      	bls.n	8000432 <__udivmoddi4+0x1d2>
 8000422:	193c      	adds	r4, r7, r4
 8000424:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000428:	d267      	bcs.n	80004fa <__udivmoddi4+0x29a>
 800042a:	45a4      	cmp	ip, r4
 800042c:	d965      	bls.n	80004fa <__udivmoddi4+0x29a>
 800042e:	3b02      	subs	r3, #2
 8000430:	443c      	add	r4, r7
 8000432:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000436:	fba0 9302 	umull	r9, r3, r0, r2
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	429c      	cmp	r4, r3
 8000440:	46ce      	mov	lr, r9
 8000442:	469c      	mov	ip, r3
 8000444:	d351      	bcc.n	80004ea <__udivmoddi4+0x28a>
 8000446:	d04e      	beq.n	80004e6 <__udivmoddi4+0x286>
 8000448:	b155      	cbz	r5, 8000460 <__udivmoddi4+0x200>
 800044a:	ebb8 030e 	subs.w	r3, r8, lr
 800044e:	eb64 040c 	sbc.w	r4, r4, ip
 8000452:	fa04 f606 	lsl.w	r6, r4, r6
 8000456:	40cb      	lsrs	r3, r1
 8000458:	431e      	orrs	r6, r3
 800045a:	40cc      	lsrs	r4, r1
 800045c:	e9c5 6400 	strd	r6, r4, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	e750      	b.n	8000306 <__udivmoddi4+0xa6>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f103 	lsr.w	r1, r0, r3
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	fa24 f303 	lsr.w	r3, r4, r3
 8000474:	4094      	lsls	r4, r2
 8000476:	430c      	orrs	r4, r1
 8000478:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800047c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000480:	fa1f f78c 	uxth.w	r7, ip
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3110 	mls	r1, r8, r0, r3
 800048c:	0c23      	lsrs	r3, r4, #16
 800048e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000492:	fb00 f107 	mul.w	r1, r0, r7
 8000496:	4299      	cmp	r1, r3
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x24c>
 800049a:	eb1c 0303 	adds.w	r3, ip, r3
 800049e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004a2:	d22c      	bcs.n	80004fe <__udivmoddi4+0x29e>
 80004a4:	4299      	cmp	r1, r3
 80004a6:	d92a      	bls.n	80004fe <__udivmoddi4+0x29e>
 80004a8:	3802      	subs	r0, #2
 80004aa:	4463      	add	r3, ip
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b4:	fb08 3311 	mls	r3, r8, r1, r3
 80004b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004bc:	fb01 f307 	mul.w	r3, r1, r7
 80004c0:	42a3      	cmp	r3, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x276>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004cc:	d213      	bcs.n	80004f6 <__udivmoddi4+0x296>
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d911      	bls.n	80004f6 <__udivmoddi4+0x296>
 80004d2:	3902      	subs	r1, #2
 80004d4:	4464      	add	r4, ip
 80004d6:	1ae4      	subs	r4, r4, r3
 80004d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004dc:	e739      	b.n	8000352 <__udivmoddi4+0xf2>
 80004de:	4604      	mov	r4, r0
 80004e0:	e6f0      	b.n	80002c4 <__udivmoddi4+0x64>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e706      	b.n	80002f4 <__udivmoddi4+0x94>
 80004e6:	45c8      	cmp	r8, r9
 80004e8:	d2ae      	bcs.n	8000448 <__udivmoddi4+0x1e8>
 80004ea:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ee:	eb63 0c07 	sbc.w	ip, r3, r7
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a8      	b.n	8000448 <__udivmoddi4+0x1e8>
 80004f6:	4631      	mov	r1, r6
 80004f8:	e7ed      	b.n	80004d6 <__udivmoddi4+0x276>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e799      	b.n	8000432 <__udivmoddi4+0x1d2>
 80004fe:	4630      	mov	r0, r6
 8000500:	e7d4      	b.n	80004ac <__udivmoddi4+0x24c>
 8000502:	46d6      	mov	lr, sl
 8000504:	e77f      	b.n	8000406 <__udivmoddi4+0x1a6>
 8000506:	4463      	add	r3, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e74d      	b.n	80003a8 <__udivmoddi4+0x148>
 800050c:	4606      	mov	r6, r0
 800050e:	4623      	mov	r3, r4
 8000510:	4608      	mov	r0, r1
 8000512:	e70f      	b.n	8000334 <__udivmoddi4+0xd4>
 8000514:	3e02      	subs	r6, #2
 8000516:	4463      	add	r3, ip
 8000518:	e730      	b.n	800037c <__udivmoddi4+0x11c>
 800051a:	bf00      	nop

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000528:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <LL_EXTI_EnableIT_32_63+0x24>)
 800052a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800052e:	4905      	ldr	r1, [pc, #20]	@ (8000544 <LL_EXTI_EnableIT_32_63+0x24>)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4313      	orrs	r3, r2
 8000534:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000538:	bf00      	nop
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	58000800 	.word	0x58000800

08000548 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000554:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000556:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4313      	orrs	r3, r2
 800055e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000560:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000564:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4013      	ands	r3, r2
 800056a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800056c:	68fb      	ldr	r3, [r7, #12]
}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr

0800057a <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800057a:	b480      	push	{r7}
 800057c:	b085      	sub	sp, #20
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000582:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000586:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 800058a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4313      	orrs	r3, r2
 8000592:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000596:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800059a:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4013      	ands	r3, r2
 80005a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005a4:	68fb      	ldr	r3, [r7, #12]
}
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 80005b6:	f002 fac1 	bl	8002b3c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80005ba:	f002 fac5 	bl	8002b48 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 80005be:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80005c2:	f7ff ffad 	bl	8000520 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 80005c6:	f00a faaf 	bl	800ab28 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 80005ca:	f000 f821 	bl	8000610 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 80005ce:	f000 f8c1 	bl	8000754 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 80005d2:	bf00      	nop
}
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80005de:	4b0b      	ldr	r3, [pc, #44]	@ (800060c <APPD_EnableCPU2+0x34>)
 80005e0:	1d3c      	adds	r4, r7, #4
 80005e2:	461d      	mov	r5, r3
 80005e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ec:	c403      	stmia	r4!, {r0, r1}
 80005ee:	8022      	strh	r2, [r4, #0]
 80005f0:	3402      	adds	r4, #2
 80005f2:	0c13      	lsrs	r3, r2, #16
 80005f4:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80005f6:	f00a f9d3 	bl	800a9a0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	4618      	mov	r0, r3
 80005fe:	f009 fc6e 	bl	8009ede <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000602:	bf00      	nop
}
 8000604:	3720      	adds	r7, #32
 8000606:	46bd      	mov	sp, r7
 8000608:	bdb0      	pop	{r4, r5, r7, pc}
 800060a:	bf00      	nop
 800060c:	0800eb8c 	.word	0x0800eb8c

08000610 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000630:	2300      	movs	r3, #0
 8000632:	77fb      	strb	r3, [r7, #31]
 8000634:	e036      	b.n	80006a4 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000636:	7ffb      	ldrb	r3, [r7, #31]
 8000638:	4a43      	ldr	r2, [pc, #268]	@ (8000748 <APPD_SetCPU2GpioConfig+0x138>)
 800063a:	00db      	lsls	r3, r3, #3
 800063c:	4413      	add	r3, r2
 800063e:	799b      	ldrb	r3, [r3, #6]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d02c      	beq.n	800069e <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000644:	7ffb      	ldrb	r3, [r7, #31]
 8000646:	4a40      	ldr	r2, [pc, #256]	@ (8000748 <APPD_SetCPU2GpioConfig+0x138>)
 8000648:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800064c:	4a3f      	ldr	r2, [pc, #252]	@ (800074c <APPD_SetCPU2GpioConfig+0x13c>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d01b      	beq.n	800068a <APPD_SetCPU2GpioConfig+0x7a>
 8000652:	4a3e      	ldr	r2, [pc, #248]	@ (800074c <APPD_SetCPU2GpioConfig+0x13c>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d821      	bhi.n	800069c <APPD_SetCPU2GpioConfig+0x8c>
 8000658:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800065c:	d003      	beq.n	8000666 <APPD_SetCPU2GpioConfig+0x56>
 800065e:	4a3c      	ldr	r2, [pc, #240]	@ (8000750 <APPD_SetCPU2GpioConfig+0x140>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d009      	beq.n	8000678 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8000664:	e01a      	b.n	800069c <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000666:	7ffb      	ldrb	r3, [r7, #31]
 8000668:	4a37      	ldr	r2, [pc, #220]	@ (8000748 <APPD_SetCPU2GpioConfig+0x138>)
 800066a:	00db      	lsls	r3, r3, #3
 800066c:	4413      	add	r3, r2
 800066e:	889a      	ldrh	r2, [r3, #4]
 8000670:	8bbb      	ldrh	r3, [r7, #28]
 8000672:	4313      	orrs	r3, r2
 8000674:	83bb      	strh	r3, [r7, #28]
          break;
 8000676:	e012      	b.n	800069e <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000678:	7ffb      	ldrb	r3, [r7, #31]
 800067a:	4a33      	ldr	r2, [pc, #204]	@ (8000748 <APPD_SetCPU2GpioConfig+0x138>)
 800067c:	00db      	lsls	r3, r3, #3
 800067e:	4413      	add	r3, r2
 8000680:	889a      	ldrh	r2, [r3, #4]
 8000682:	8b7b      	ldrh	r3, [r7, #26]
 8000684:	4313      	orrs	r3, r2
 8000686:	837b      	strh	r3, [r7, #26]
          break;
 8000688:	e009      	b.n	800069e <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 800068a:	7ffb      	ldrb	r3, [r7, #31]
 800068c:	4a2e      	ldr	r2, [pc, #184]	@ (8000748 <APPD_SetCPU2GpioConfig+0x138>)
 800068e:	00db      	lsls	r3, r3, #3
 8000690:	4413      	add	r3, r2
 8000692:	889a      	ldrh	r2, [r3, #4]
 8000694:	8b3b      	ldrh	r3, [r7, #24]
 8000696:	4313      	orrs	r3, r2
 8000698:	833b      	strh	r3, [r7, #24]
          break;
 800069a:	e000      	b.n	800069e <APPD_SetCPU2GpioConfig+0x8e>
          break;
 800069c:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800069e:	7ffb      	ldrb	r3, [r7, #31]
 80006a0:	3301      	adds	r3, #1
 80006a2:	77fb      	strb	r3, [r7, #31]
 80006a4:	7ffb      	ldrb	r3, [r7, #31]
 80006a6:	2b25      	cmp	r3, #37	@ 0x25
 80006a8:	d9c5      	bls.n	8000636 <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b2:	2303      	movs	r3, #3
 80006b4:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 80006b6:	8bbb      	ldrh	r3, [r7, #28]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d014      	beq.n	80006e6 <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 80006bc:	8bbb      	ldrh	r3, [r7, #28]
 80006be:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c0:	2001      	movs	r0, #1
 80006c2:	f7ff ff41 	bl	8000548 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80006c6:	2001      	movs	r0, #1
 80006c8:	f7ff ff57 	bl	800057a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	4619      	mov	r1, r3
 80006d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d4:	f002 ff0a 	bl	80034ec <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80006d8:	8bbb      	ldrh	r3, [r7, #28]
 80006da:	2200      	movs	r2, #0
 80006dc:	4619      	mov	r1, r3
 80006de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e2:	f003 f88b 	bl	80037fc <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80006e6:	8b7b      	ldrh	r3, [r7, #26]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d012      	beq.n	8000712 <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 80006ec:	8b7b      	ldrh	r3, [r7, #26]
 80006ee:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f0:	2002      	movs	r0, #2
 80006f2:	f7ff ff29 	bl	8000548 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 80006f6:	2002      	movs	r0, #2
 80006f8:	f7ff ff3f 	bl	800057a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	4619      	mov	r1, r3
 8000700:	4813      	ldr	r0, [pc, #76]	@ (8000750 <APPD_SetCPU2GpioConfig+0x140>)
 8000702:	f002 fef3 	bl	80034ec <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000706:	8b7b      	ldrh	r3, [r7, #26]
 8000708:	2200      	movs	r2, #0
 800070a:	4619      	mov	r1, r3
 800070c:	4810      	ldr	r0, [pc, #64]	@ (8000750 <APPD_SetCPU2GpioConfig+0x140>)
 800070e:	f003 f875 	bl	80037fc <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000712:	8b3b      	ldrh	r3, [r7, #24]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d013      	beq.n	8000740 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000718:	8b3b      	ldrh	r3, [r7, #24]
 800071a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800071c:	2004      	movs	r0, #4
 800071e:	f7ff ff13 	bl	8000548 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000722:	2004      	movs	r0, #4
 8000724:	f7ff ff29 	bl	800057a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	4619      	mov	r1, r3
 800072c:	4807      	ldr	r0, [pc, #28]	@ (800074c <APPD_SetCPU2GpioConfig+0x13c>)
 800072e:	f002 fedd 	bl	80034ec <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000732:	8b3b      	ldrh	r3, [r7, #24]
 8000734:	2200      	movs	r2, #0
 8000736:	4619      	mov	r1, r3
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <APPD_SetCPU2GpioConfig+0x13c>)
 800073a:	f003 f85f 	bl	80037fc <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 800073e:	bf00      	nop
 8000740:	bf00      	nop
}
 8000742:	3720      	adds	r7, #32
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	0800fdc0 	.word	0x0800fdc0
 800074c:	48000800 	.word	0x48000800
 8000750:	48000400 	.word	0x48000400

08000754 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000758:	bf00      	nop
}
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000762:	b580      	push	{r7, lr}
 8000764:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000766:	f001 fcc9 	bl	80020fc <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 800076a:	bf00      	nop
}
 800076c:	bd80      	pop	{r7, pc}

0800076e <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b084      	sub	sp, #16
 8000772:	af00      	add	r7, sp, #0
 8000774:	60f8      	str	r0, [r7, #12]
 8000776:	460b      	mov	r3, r1
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 800077c:	897a      	ldrh	r2, [r7, #10]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	68f9      	ldr	r1, [r7, #12]
 8000782:	2000      	movs	r0, #0
 8000784:	f001 fa58 	bl	8001c38 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000788:	bf00      	nop
}
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000798:	4b07      	ldr	r3, [pc, #28]	@ (80007b8 <LL_C2_PWR_SetPowerMode+0x28>)
 800079a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800079e:	f023 0207 	bic.w	r2, r3, #7
 80007a2:	4905      	ldr	r1, [pc, #20]	@ (80007b8 <LL_C2_PWR_SetPowerMode+0x28>)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4313      	orrs	r3, r2
 80007a8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	58000400 	.word	0x58000400

080007bc <LL_EXTI_EnableIT_32_63>:
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <LL_EXTI_EnableIT_32_63+0x24>)
 80007c6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80007ca:	4905      	ldr	r1, [pc, #20]	@ (80007e0 <LL_EXTI_EnableIT_32_63+0x24>)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4313      	orrs	r3, r2
 80007d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	58000800 	.word	0x58000800

080007e4 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80007ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007f0:	4a0a      	ldr	r2, [pc, #40]	@ (800081c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80007f2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80007f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80007fe:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800080a:	4313      	orrs	r3, r2
 800080c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	cafecafe 	.word	0xcafecafe

08000820 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800082c:	689b      	ldr	r3, [r3, #8]
 800082e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000832:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4313      	orrs	r3, r2
 800083a:	608b      	str	r3, [r1, #8]
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800084c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000854:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800085c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800086e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000876:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800087a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800087e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000890:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000894:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000898:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800089c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80008a0:	d101      	bne.n	80008a6 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80008a2:	2301      	movs	r3, #1
 80008a4:	e000      	b.n	80008a8 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80008a6:	2300      	movs	r3, #0
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80008b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80008be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80008c6:	d101      	bne.n	80008cc <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80008c8:	2301      	movs	r3, #1
 80008ca:	e000      	b.n	80008ce <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <LL_AHB3_GRP1_EnableClock>:
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80008e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80008e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80008f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4013      	ands	r3, r2
 80008fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008fc:	68fb      	ldr	r3, [r7, #12]
}
 80008fe:	bf00      	nop
 8000900:	3714      	adds	r7, #20
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
	...

0800090c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000910:	4b04      	ldr	r3, [pc, #16]	@ (8000924 <LL_DBGMCU_GetDeviceID+0x18>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000918:	4618      	mov	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e0042000 	.word	0xe0042000

08000928 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800092c:	4b04      	ldr	r3, [pc, #16]	@ (8000940 <LL_DBGMCU_GetRevisionID+0x18>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	0c1b      	lsrs	r3, r3, #16
 8000932:	b29b      	uxth	r3, r3
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e0042000 	.word	0xe0042000

08000944 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	685a      	ldr	r2, [r3, #4]
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	041b      	lsls	r3, r3, #16
 8000956:	431a      	orrs	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	605a      	str	r2, [r3, #4]
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	685a      	ldr	r2, [r3, #4]
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	431a      	orrs	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	605a      	str	r2, [r3, #4]
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800098a:	b480      	push	{r7}
 800098c:	b083      	sub	sp, #12
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	695a      	ldr	r2, [r3, #20]
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	041b      	lsls	r3, r3, #16
 800099c:	431a      	orrs	r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	615a      	str	r2, [r3, #20]
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009ae:	b480      	push	{r7}
 80009b0:	b083      	sub	sp, #12
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
 80009b6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	695a      	ldr	r2, [r3, #20]
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	431a      	orrs	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	615a      	str	r2, [r3, #20]
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	683a      	ldr	r2, [r7, #0]
 80009de:	609a      	str	r2, [r3, #8]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	683a      	ldr	r2, [r7, #0]
 80009fa:	619a      	str	r2, [r3, #24]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	22ff      	movs	r2, #255	@ 0xff
 8000a14:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	22ca      	movs	r2, #202	@ 0xca
 8000a2e:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2253      	movs	r2, #83	@ 0x53
 8000a34:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
 8000a4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	f023 0207 	bic.w	r2, r3, #7
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	431a      	orrs	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000a6c:	4b04      	ldr	r3, [pc, #16]	@ (8000a80 <MX_APPE_Config+0x18>)
 8000a6e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a72:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000a74:	f000 f82a 	bl	8000acc <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000a78:	f000 f86a 	bl	8000b50 <Config_HSE>

  return;
 8000a7c:	bf00      	nop
}
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	58004000 	.word	0x58004000

08000a84 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000a88:	f000 f876 	bl	8000b78 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000a8c:	f000 f88e 	bl	8000bac <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000a90:	4906      	ldr	r1, [pc, #24]	@ (8000aac <MX_APPE_Init+0x28>)
 8000a92:	2000      	movs	r0, #0
 8000a94:	f000 fe40 	bl	8001718 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000a98:	f7ff fd8b 	bl	80005b2 <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	f00c fc60 	bl	800d364 <UTIL_LPM_SetOffMode>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000aa4:	f000 f890 	bl	8000bc8 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000aa8:	bf00      	nop
}
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000374 	.word	0x20000374

08000ab0 <Init_Smps>:

void Init_Smps(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000ab4:	bf00      	nop
}
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <Init_Exti>:

void Init_Exti(void)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000ac2:	2050      	movs	r0, #80	@ 0x50
 8000ac4:	f7ff fe7a 	bl	80007bc <LL_EXTI_EnableIT_32_63>

  return;
 8000ac8:	bf00      	nop
}
 8000aca:	bd80      	pop	{r7, pc}

08000acc <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8000ad0:	f000 f804 	bl	8000adc <Reset_BackupDomain>

  Reset_IPCC();
 8000ad4:	f000 f81a 	bl	8000b0c <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000ad8:	bf00      	nop
}
 8000ada:	bd80      	pop	{r7, pc}

08000adc <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000ae0:	f7ff fed4 	bl	800088c <LL_RCC_IsActiveFlag_PINRST>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d00d      	beq.n	8000b06 <Reset_BackupDomain+0x2a>
 8000aea:	f7ff fee2 	bl	80008b2 <LL_RCC_IsActiveFlag_SFTRST>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d108      	bne.n	8000b06 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000af4:	f002 ff5e 	bl	80039b4 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000af8:	f002 ff5c 	bl	80039b4 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000afc:	f7ff fea4 	bl	8000848 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000b00:	f7ff feb3 	bl	800086a <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000b04:	bf00      	nop
 8000b06:	bf00      	nop
}
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000b10:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000b14:	f7ff fee0 	bl	80008d8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000b18:	213f      	movs	r1, #63	@ 0x3f
 8000b1a:	480c      	ldr	r0, [pc, #48]	@ (8000b4c <Reset_IPCC+0x40>)
 8000b1c:	f7ff ff58 	bl	80009d0 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000b20:	213f      	movs	r1, #63	@ 0x3f
 8000b22:	480a      	ldr	r0, [pc, #40]	@ (8000b4c <Reset_IPCC+0x40>)
 8000b24:	f7ff ff62 	bl	80009ec <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000b28:	213f      	movs	r1, #63	@ 0x3f
 8000b2a:	4808      	ldr	r0, [pc, #32]	@ (8000b4c <Reset_IPCC+0x40>)
 8000b2c:	f7ff ff0a 	bl	8000944 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000b30:	213f      	movs	r1, #63	@ 0x3f
 8000b32:	4806      	ldr	r0, [pc, #24]	@ (8000b4c <Reset_IPCC+0x40>)
 8000b34:	f7ff ff29 	bl	800098a <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000b38:	213f      	movs	r1, #63	@ 0x3f
 8000b3a:	4804      	ldr	r0, [pc, #16]	@ (8000b4c <Reset_IPCC+0x40>)
 8000b3c:	f7ff ff14 	bl	8000968 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000b40:	213f      	movs	r1, #63	@ 0x3f
 8000b42:	4802      	ldr	r0, [pc, #8]	@ (8000b4c <Reset_IPCC+0x40>)
 8000b44:	f7ff ff33 	bl	80009ae <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000b48:	bf00      	nop
}
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	58000c00 	.word	0x58000c00

08000b50 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000b56:	2000      	movs	r0, #0
 8000b58:	f00a f864 	bl	800ac24 <OTP_Read>
 8000b5c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d005      	beq.n	8000b70 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	799b      	ldrb	r3, [r3, #6]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fe3b 	bl	80007e4 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000b6e:	bf00      	nop
 8000b70:	bf00      	nop
}
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <System_Init>:

static void System_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  Init_Smps();
 8000b7c:	f7ff ff98 	bl	8000ab0 <Init_Smps>

  Init_Exti();
 8000b80:	f7ff ff9d 	bl	8000abe <Init_Exti>

  Init_Rtc();
 8000b84:	f000 f802 	bl	8000b8c <Init_Rtc>

  return;
 8000b88:	bf00      	nop
}
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <Init_Rtc>:

static void Init_Rtc(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000b90:	4805      	ldr	r0, [pc, #20]	@ (8000ba8 <Init_Rtc+0x1c>)
 8000b92:	f7ff ff46 	bl	8000a22 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000b96:	2100      	movs	r1, #0
 8000b98:	4803      	ldr	r0, [pc, #12]	@ (8000ba8 <Init_Rtc+0x1c>)
 8000b9a:	f7ff ff52 	bl	8000a42 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000b9e:	4802      	ldr	r0, [pc, #8]	@ (8000ba8 <Init_Rtc+0x1c>)
 8000ba0:	f7ff ff32 	bl	8000a08 <LL_RTC_EnableWriteProtection>

  return;
 8000ba4:	bf00      	nop
}
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40002800 	.word	0x40002800

08000bac <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000bb0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000bb4:	f7ff fe34 	bl	8000820 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000bb8:	f00c fbc2 	bl	800d340 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000bbc:	2004      	movs	r0, #4
 8000bbe:	f7ff fde7 	bl	8000790 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000bc2:	bf00      	nop
}
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000bce:	f009 fd31 	bl	800a634 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000bd2:	4a11      	ldr	r2, [pc, #68]	@ (8000c18 <appe_Tl_Init+0x50>)
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000bda:	f00c fcef 	bl	800d5bc <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000bde:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <appe_Tl_Init+0x54>)
 8000be0:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000be2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c20 <appe_Tl_Init+0x58>)
 8000be4:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000be6:	463b      	mov	r3, r7
 8000be8:	4619      	mov	r1, r3
 8000bea:	480e      	ldr	r0, [pc, #56]	@ (8000c24 <appe_Tl_Init+0x5c>)
 8000bec:	f009 fbe8 	bl	800a3c0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8000c28 <appe_Tl_Init+0x60>)
 8000bf2:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8000c2c <appe_Tl_Init+0x64>)
 8000bf6:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <appe_Tl_Init+0x68>)
 8000bfa:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000bfc:	f240 533c 	movw	r3, #1340	@ 0x53c
 8000c00:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	4618      	mov	r0, r3
 8000c08:	f009 fe56 	bl	800a8b8 <TL_MM_Init>

  TL_Enable();
 8000c0c:	f009 fd0c 	bl	800a628 <TL_Enable>

  return;
 8000c10:	bf00      	nop
}
 8000c12:	3720      	adds	r7, #32
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	0800a3f9 	.word	0x0800a3f9
 8000c1c:	20030734 	.word	0x20030734
 8000c20:	08000c35 	.word	0x08000c35
 8000c24:	08000c4d 	.word	0x08000c4d
 8000c28:	2003094c 	.word	0x2003094c
 8000c2c:	20030840 	.word	0x20030840
 8000c30:	200301f8 	.word	0x200301f8

08000c34 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000c3e:	bf00      	nop
}
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
	...

08000c4c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	330b      	adds	r3, #11
 8000c5a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8000c66:	2b07      	cmp	r3, #7
 8000c68:	d860      	bhi.n	8000d2c <APPE_SysUserEvtRx+0xe0>
 8000c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c70 <APPE_SysUserEvtRx+0x24>)
 8000c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c70:	08000c91 	.word	0x08000c91
 8000c74:	08000cd3 	.word	0x08000cd3
 8000c78:	08000ce1 	.word	0x08000ce1
 8000c7c:	08000d2d 	.word	0x08000d2d
 8000c80:	08000cfd 	.word	0x08000cfd
 8000c84:	08000d0d 	.word	0x08000d0d
 8000c88:	08000d15 	.word	0x08000d15
 8000c8c:	08000d25 	.word	0x08000d25
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	4618      	mov	r0, r3
 8000c96:	f009 f94f 	bl	8009f38 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8000c9a:	7b3b      	ldrb	r3, [r7, #12]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	7b7b      	ldrb	r3, [r7, #13]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	7bbb      	ldrb	r3, [r7, #14]
 8000ca4:	4824      	ldr	r0, [pc, #144]	@ (8000d38 <APPE_SysUserEvtRx+0xec>)
 8000ca6:	f00c fea9 	bl	800d9fc <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8000caa:	7c3b      	ldrb	r3, [r7, #16]
 8000cac:	4619      	mov	r1, r3
 8000cae:	4823      	ldr	r0, [pc, #140]	@ (8000d3c <APPE_SysUserEvtRx+0xf0>)
 8000cb0:	f00c fea4 	bl	800d9fc <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8000cb4:	7dbb      	ldrb	r3, [r7, #22]
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	7dfb      	ldrb	r3, [r7, #23]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	7e3b      	ldrb	r3, [r7, #24]
 8000cbe:	4820      	ldr	r0, [pc, #128]	@ (8000d40 <APPE_SysUserEvtRx+0xf4>)
 8000cc0:	f00c fe9c 	bl	800d9fc <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8000cc4:	481f      	ldr	r0, [pc, #124]	@ (8000d44 <APPE_SysUserEvtRx+0xf8>)
 8000cc6:	f00c fe99 	bl	800d9fc <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f000 f870 	bl	8000db0 <APPE_SysEvtReadyProcessing>
    break;
 8000cd0:	e02d      	b.n	8000d2e <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8000cd2:	481d      	ldr	r0, [pc, #116]	@ (8000d48 <APPE_SysUserEvtRx+0xfc>)
 8000cd4:	f00c fe92 	bl	800d9fc <iprintf>
    APPE_SysEvtError(pPayload);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f000 f843 	bl	8000d64 <APPE_SysEvtError>
    break;
 8000cde:	e026      	b.n	8000d2e <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8000ce0:	481a      	ldr	r0, [pc, #104]	@ (8000d4c <APPE_SysUserEvtRx+0x100>)
 8000ce2:	f00c fefb 	bl	800dadc <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8000cea:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4816      	ldr	r0, [pc, #88]	@ (8000d50 <APPE_SysUserEvtRx+0x104>)
 8000cf6:	f00c fe81 	bl	800d9fc <iprintf>
    break;
 8000cfa:	e018      	b.n	8000d2e <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4619      	mov	r1, r3
 8000d04:	4813      	ldr	r0, [pc, #76]	@ (8000d54 <APPE_SysUserEvtRx+0x108>)
 8000d06:	f00c fe79 	bl	800d9fc <iprintf>
    break;
 8000d0a:	e010      	b.n	8000d2e <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8000d0c:	4812      	ldr	r0, [pc, #72]	@ (8000d58 <APPE_SysUserEvtRx+0x10c>)
 8000d0e:	f00c fe75 	bl	800d9fc <iprintf>
    break;
 8000d12:	e00c      	b.n	8000d2e <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	480f      	ldr	r0, [pc, #60]	@ (8000d5c <APPE_SysUserEvtRx+0x110>)
 8000d1e:	f00c fe6d 	bl	800d9fc <iprintf>
    break;
 8000d22:	e004      	b.n	8000d2e <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8000d24:	480e      	ldr	r0, [pc, #56]	@ (8000d60 <APPE_SysUserEvtRx+0x114>)
 8000d26:	f00c fe69 	bl	800d9fc <iprintf>
    break;
 8000d2a:	e000      	b.n	8000d2e <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 8000d2c:	bf00      	nop
  }

  return;
 8000d2e:	bf00      	nop
}
 8000d30:	3720      	adds	r7, #32
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	0800eba8 	.word	0x0800eba8
 8000d3c:	0800ebcc 	.word	0x0800ebcc
 8000d40:	0800ebe8 	.word	0x0800ebe8
 8000d44:	0800ec00 	.word	0x0800ec00
 8000d48:	0800ec20 	.word	0x0800ec20
 8000d4c:	0800ec44 	.word	0x0800ec44
 8000d50:	0800ec94 	.word	0x0800ec94
 8000d54:	0800ecbc 	.word	0x0800ecbc
 8000d58:	0800ecf8 	.word	0x0800ecf8
 8000d5c:	0800ed1c 	.word	0x0800ed1c
 8000d60:	0800ed58 	.word	0x0800ed58

08000d64 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	330b      	adds	r3, #11
 8000d72:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	3302      	adds	r3, #2
 8000d78:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4808      	ldr	r0, [pc, #32]	@ (8000da4 <APPE_SysEvtError+0x40>)
 8000d82:	f00c fe3b 	bl	800d9fc <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d103      	bne.n	8000d96 <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8000d8e:	4806      	ldr	r0, [pc, #24]	@ (8000da8 <APPE_SysEvtError+0x44>)
 8000d90:	f00c fea4 	bl	800dadc <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000d94:	e003      	b.n	8000d9e <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8000d96:	4805      	ldr	r0, [pc, #20]	@ (8000dac <APPE_SysEvtError+0x48>)
 8000d98:	f00c fea0 	bl	800dadc <puts>
  return;
 8000d9c:	bf00      	nop
}
 8000d9e:	3710      	adds	r7, #16
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	0800ed7c 	.word	0x0800ed7c
 8000da8:	0800edac 	.word	0x0800edac
 8000dac:	0800ede8 	.word	0x0800ede8

08000db0 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	@ 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000db8:	f107 0308 	add.w	r3, r7, #8
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	330b      	adds	r3, #11
 8000dd4:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3302      	adds	r3, #2
 8000dda:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d128      	bne.n	8000e36 <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8000de4:	481d      	ldr	r0, [pc, #116]	@ (8000e5c <APPE_SysEvtReadyProcessing+0xac>)
 8000de6:	f00c fe79 	bl	800dadc <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000dea:	f7ff fbf5 	bl	80005d8 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000dee:	230f      	movs	r3, #15
 8000df0:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000df2:	237f      	movs	r3, #127	@ 0x7f
 8000df4:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000df6:	f7ff fd97 	bl	8000928 <LL_DBGMCU_GetRevisionID>
 8000dfa:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8000dfc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000dfe:	4818      	ldr	r0, [pc, #96]	@ (8000e60 <APPE_SysEvtReadyProcessing+0xb0>)
 8000e00:	f00c fdfc 	bl	800d9fc <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8000e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000e0a:	f7ff fd7f 	bl	800090c <LL_DBGMCU_GetDeviceID>
 8000e0e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8000e10:	6a39      	ldr	r1, [r7, #32]
 8000e12:	4814      	ldr	r0, [pc, #80]	@ (8000e64 <APPE_SysEvtReadyProcessing+0xb4>)
 8000e14:	f00c fdf2 	bl	800d9fc <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8000e18:	6a3b      	ldr	r3, [r7, #32]
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000e1e:	f107 0308 	add.w	r3, r7, #8
 8000e22:	4618      	mov	r0, r3
 8000e24:	f009 f872 	bl	8009f0c <SHCI_C2_Config>

    APP_BLE_Init();
 8000e28:	f00a fc02 	bl	800b630 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2001      	movs	r0, #1
 8000e30:	f00c fa98 	bl	800d364 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000e34:	e00e      	b.n	8000e54 <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d106      	bne.n	8000e4c <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8000e3e:	480a      	ldr	r0, [pc, #40]	@ (8000e68 <APPE_SysEvtReadyProcessing+0xb8>)
 8000e40:	f00c fddc 	bl	800d9fc <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
  return;
 8000e4a:	e003      	b.n	8000e54 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8000e4c:	4807      	ldr	r0, [pc, #28]	@ (8000e6c <APPE_SysEvtReadyProcessing+0xbc>)
 8000e4e:	f00c fdd5 	bl	800d9fc <iprintf>
  return;
 8000e52:	bf00      	nop
}
 8000e54:	3728      	adds	r7, #40	@ 0x28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	0800ee20 	.word	0x0800ee20
 8000e60:	0800ee3c 	.word	0x0800ee3c
 8000e64:	0800ee60 	.word	0x0800ee60
 8000e68:	0800ee80 	.word	0x0800ee80
 8000e6c:	0800eeb4 	.word	0x0800eeb4

08000e70 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e78:	f00c faa4 	bl	800d3c4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000e84:	bf00      	nop
}
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
 8000e96:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e9c:	f00c fa92 	bl	800d3c4 <UTIL_SEQ_Run>

  return;
 8000ea0:	bf00      	nop
}
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000eb6:	f00c fba3 	bl	800d600 <UTIL_SEQ_SetTask>
  return;
 8000eba:	bf00      	nop
}
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000eca:	2002      	movs	r0, #2
 8000ecc:	f00c fc04 	bl	800d6d8 <UTIL_SEQ_SetEvt>
  return;
 8000ed0:	bf00      	nop
}
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000ee0:	2002      	movs	r0, #2
 8000ee2:	f00c fc19 	bl	800d718 <UTIL_SEQ_WaitEvt>
  return;
 8000ee6:	bf00      	nop
}
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <LL_EXTI_EnableIT_0_31>:
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <LL_EXTI_EnableIT_0_31+0x24>)
 8000efa:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8000efe:	4905      	ldr	r1, [pc, #20]	@ (8000f14 <LL_EXTI_EnableIT_0_31+0x24>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	58000800 	.word	0x58000800

08000f18 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000f20:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4904      	ldr	r1, [pc, #16]	@ (8000f38 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	600b      	str	r3, [r1, #0]

}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	58000800 	.word	0x58000800

08000f3c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000f42:	4b0d      	ldr	r3, [pc, #52]	@ (8000f78 <ReadRtcSsrValue+0x3c>)
 8000f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f78 <ReadRtcSsrValue+0x3c>)
 8000f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000f52:	e005      	b.n	8000f60 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000f58:	4b07      	ldr	r3, [pc, #28]	@ (8000f78 <ReadRtcSsrValue+0x3c>)
 8000f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d1f5      	bne.n	8000f54 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000f68:	683b      	ldr	r3, [r7, #0]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40002800 	.word	0x40002800

08000f7c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	460a      	mov	r2, r1
 8000f86:	71fb      	strb	r3, [r7, #7]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000f8c:	79ba      	ldrb	r2, [r7, #6]
 8000f8e:	491d      	ldr	r1, [pc, #116]	@ (8001004 <LinkTimerAfter+0x88>)
 8000f90:	4613      	mov	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4413      	add	r3, r2
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	440b      	add	r3, r1
 8000f9a:	3315      	adds	r3, #21
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	2b06      	cmp	r3, #6
 8000fa4:	d009      	beq.n	8000fba <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000fa6:	7bfa      	ldrb	r2, [r7, #15]
 8000fa8:	4916      	ldr	r1, [pc, #88]	@ (8001004 <LinkTimerAfter+0x88>)
 8000faa:	4613      	mov	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4413      	add	r3, r2
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	440b      	add	r3, r1
 8000fb4:	3314      	adds	r3, #20
 8000fb6:	79fa      	ldrb	r2, [r7, #7]
 8000fb8:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000fba:	79fa      	ldrb	r2, [r7, #7]
 8000fbc:	4911      	ldr	r1, [pc, #68]	@ (8001004 <LinkTimerAfter+0x88>)
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4413      	add	r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	440b      	add	r3, r1
 8000fc8:	3315      	adds	r3, #21
 8000fca:	7bfa      	ldrb	r2, [r7, #15]
 8000fcc:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000fce:	79fa      	ldrb	r2, [r7, #7]
 8000fd0:	490c      	ldr	r1, [pc, #48]	@ (8001004 <LinkTimerAfter+0x88>)
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	440b      	add	r3, r1
 8000fdc:	3314      	adds	r3, #20
 8000fde:	79ba      	ldrb	r2, [r7, #6]
 8000fe0:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000fe2:	79ba      	ldrb	r2, [r7, #6]
 8000fe4:	4907      	ldr	r1, [pc, #28]	@ (8001004 <LinkTimerAfter+0x88>)
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	4413      	add	r3, r2
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	440b      	add	r3, r1
 8000ff0:	3315      	adds	r3, #21
 8000ff2:	79fa      	ldrb	r2, [r7, #7]
 8000ff4:	701a      	strb	r2, [r3, #0]

  return;
 8000ff6:	bf00      	nop
}
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000108 	.word	0x20000108

08001008 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	460a      	mov	r2, r1
 8001012:	71fb      	strb	r3, [r7, #7]
 8001014:	4613      	mov	r3, r2
 8001016:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001018:	4b29      	ldr	r3, [pc, #164]	@ (80010c0 <LinkTimerBefore+0xb8>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	79ba      	ldrb	r2, [r7, #6]
 8001020:	429a      	cmp	r2, r3
 8001022:	d032      	beq.n	800108a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001024:	79ba      	ldrb	r2, [r7, #6]
 8001026:	4927      	ldr	r1, [pc, #156]	@ (80010c4 <LinkTimerBefore+0xbc>)
 8001028:	4613      	mov	r3, r2
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	4413      	add	r3, r2
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	440b      	add	r3, r1
 8001032:	3314      	adds	r3, #20
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001038:	7bfa      	ldrb	r2, [r7, #15]
 800103a:	4922      	ldr	r1, [pc, #136]	@ (80010c4 <LinkTimerBefore+0xbc>)
 800103c:	4613      	mov	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4413      	add	r3, r2
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	440b      	add	r3, r1
 8001046:	3315      	adds	r3, #21
 8001048:	79fa      	ldrb	r2, [r7, #7]
 800104a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 800104c:	79fa      	ldrb	r2, [r7, #7]
 800104e:	491d      	ldr	r1, [pc, #116]	@ (80010c4 <LinkTimerBefore+0xbc>)
 8001050:	4613      	mov	r3, r2
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	4413      	add	r3, r2
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	440b      	add	r3, r1
 800105a:	3315      	adds	r3, #21
 800105c:	79ba      	ldrb	r2, [r7, #6]
 800105e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001060:	79fa      	ldrb	r2, [r7, #7]
 8001062:	4918      	ldr	r1, [pc, #96]	@ (80010c4 <LinkTimerBefore+0xbc>)
 8001064:	4613      	mov	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4413      	add	r3, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	440b      	add	r3, r1
 800106e:	3314      	adds	r3, #20
 8001070:	7bfa      	ldrb	r2, [r7, #15]
 8001072:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001074:	79ba      	ldrb	r2, [r7, #6]
 8001076:	4913      	ldr	r1, [pc, #76]	@ (80010c4 <LinkTimerBefore+0xbc>)
 8001078:	4613      	mov	r3, r2
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	4413      	add	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	440b      	add	r3, r1
 8001082:	3314      	adds	r3, #20
 8001084:	79fa      	ldrb	r2, [r7, #7]
 8001086:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001088:	e014      	b.n	80010b4 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800108a:	79fa      	ldrb	r2, [r7, #7]
 800108c:	490d      	ldr	r1, [pc, #52]	@ (80010c4 <LinkTimerBefore+0xbc>)
 800108e:	4613      	mov	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4413      	add	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	440b      	add	r3, r1
 8001098:	3315      	adds	r3, #21
 800109a:	79ba      	ldrb	r2, [r7, #6]
 800109c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800109e:	79ba      	ldrb	r2, [r7, #6]
 80010a0:	4908      	ldr	r1, [pc, #32]	@ (80010c4 <LinkTimerBefore+0xbc>)
 80010a2:	4613      	mov	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4413      	add	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	440b      	add	r3, r1
 80010ac:	3314      	adds	r3, #20
 80010ae:	79fa      	ldrb	r2, [r7, #7]
 80010b0:	701a      	strb	r2, [r3, #0]
  return;
 80010b2:	bf00      	nop
}
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000198 	.word	0x20000198
 80010c4:	20000108 	.word	0x20000108

080010c8 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010d2:	4b4e      	ldr	r3, [pc, #312]	@ (800120c <linkTimer+0x144>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b06      	cmp	r3, #6
 80010da:	d118      	bne.n	800110e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80010dc:	4b4b      	ldr	r3, [pc, #300]	@ (800120c <linkTimer+0x144>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b4b      	ldr	r3, [pc, #300]	@ (8001210 <linkTimer+0x148>)
 80010e4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80010e6:	4a49      	ldr	r2, [pc, #292]	@ (800120c <linkTimer+0x144>)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80010ec:	79fa      	ldrb	r2, [r7, #7]
 80010ee:	4949      	ldr	r1, [pc, #292]	@ (8001214 <linkTimer+0x14c>)
 80010f0:	4613      	mov	r3, r2
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	4413      	add	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	440b      	add	r3, r1
 80010fa:	3315      	adds	r3, #21
 80010fc:	2206      	movs	r2, #6
 80010fe:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001100:	4b45      	ldr	r3, [pc, #276]	@ (8001218 <linkTimer+0x150>)
 8001102:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001106:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	81fb      	strh	r3, [r7, #14]
 800110c:	e078      	b.n	8001200 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800110e:	f000 f909 	bl	8001324 <ReturnTimeElapsed>
 8001112:	4603      	mov	r3, r0
 8001114:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001116:	79fa      	ldrb	r2, [r7, #7]
 8001118:	493e      	ldr	r1, [pc, #248]	@ (8001214 <linkTimer+0x14c>)
 800111a:	4613      	mov	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4413      	add	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	440b      	add	r3, r1
 8001124:	3308      	adds	r3, #8
 8001126:	6819      	ldr	r1, [r3, #0]
 8001128:	89fb      	ldrh	r3, [r7, #14]
 800112a:	79fa      	ldrb	r2, [r7, #7]
 800112c:	4419      	add	r1, r3
 800112e:	4839      	ldr	r0, [pc, #228]	@ (8001214 <linkTimer+0x14c>)
 8001130:	4613      	mov	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4413      	add	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	4403      	add	r3, r0
 800113a:	3308      	adds	r3, #8
 800113c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800113e:	79fa      	ldrb	r2, [r7, #7]
 8001140:	4934      	ldr	r1, [pc, #208]	@ (8001214 <linkTimer+0x14c>)
 8001142:	4613      	mov	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4413      	add	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	440b      	add	r3, r1
 800114c:	3308      	adds	r3, #8
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001152:	4b2e      	ldr	r3, [pc, #184]	@ (800120c <linkTimer+0x144>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	b2db      	uxtb	r3, r3
 8001158:	4619      	mov	r1, r3
 800115a:	4a2e      	ldr	r2, [pc, #184]	@ (8001214 <linkTimer+0x14c>)
 800115c:	460b      	mov	r3, r1
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	440b      	add	r3, r1
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	4413      	add	r3, r2
 8001166:	3308      	adds	r3, #8
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	429a      	cmp	r2, r3
 800116e:	d337      	bcc.n	80011e0 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001170:	4b26      	ldr	r3, [pc, #152]	@ (800120c <linkTimer+0x144>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001176:	7b7a      	ldrb	r2, [r7, #13]
 8001178:	4926      	ldr	r1, [pc, #152]	@ (8001214 <linkTimer+0x14c>)
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	440b      	add	r3, r1
 8001184:	3315      	adds	r3, #21
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800118a:	e013      	b.n	80011b4 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 800118c:	7b7a      	ldrb	r2, [r7, #13]
 800118e:	4921      	ldr	r1, [pc, #132]	@ (8001214 <linkTimer+0x14c>)
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	440b      	add	r3, r1
 800119a:	3315      	adds	r3, #21
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80011a0:	7b7a      	ldrb	r2, [r7, #13]
 80011a2:	491c      	ldr	r1, [pc, #112]	@ (8001214 <linkTimer+0x14c>)
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	440b      	add	r3, r1
 80011ae:	3315      	adds	r3, #21
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80011b4:	7b3b      	ldrb	r3, [r7, #12]
 80011b6:	2b06      	cmp	r3, #6
 80011b8:	d00b      	beq.n	80011d2 <linkTimer+0x10a>
 80011ba:	7b3a      	ldrb	r2, [r7, #12]
 80011bc:	4915      	ldr	r1, [pc, #84]	@ (8001214 <linkTimer+0x14c>)
 80011be:	4613      	mov	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	440b      	add	r3, r1
 80011c8:	3308      	adds	r3, #8
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d2dc      	bcs.n	800118c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80011d2:	7b7a      	ldrb	r2, [r7, #13]
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fecf 	bl	8000f7c <LinkTimerAfter>
 80011de:	e00f      	b.n	8001200 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80011e0:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <linkTimer+0x144>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	4611      	mov	r1, r2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ff0c 	bl	8001008 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <linkTimer+0x144>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <linkTimer+0x148>)
 80011f8:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80011fa:	4a04      	ldr	r2, [pc, #16]	@ (800120c <linkTimer+0x144>)
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001200:	89fb      	ldrh	r3, [r7, #14]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000198 	.word	0x20000198
 8001210:	20000199 	.word	0x20000199
 8001214:	20000108 	.word	0x20000108
 8001218:	2000019c 	.word	0x2000019c

0800121c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	460a      	mov	r2, r1
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	4613      	mov	r3, r2
 800122a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800122c:	4b39      	ldr	r3, [pc, #228]	@ (8001314 <UnlinkTimer+0xf8>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	79fa      	ldrb	r2, [r7, #7]
 8001234:	429a      	cmp	r2, r3
 8001236:	d111      	bne.n	800125c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001238:	4b36      	ldr	r3, [pc, #216]	@ (8001314 <UnlinkTimer+0xf8>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4b36      	ldr	r3, [pc, #216]	@ (8001318 <UnlinkTimer+0xfc>)
 8001240:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001242:	79fa      	ldrb	r2, [r7, #7]
 8001244:	4935      	ldr	r1, [pc, #212]	@ (800131c <UnlinkTimer+0x100>)
 8001246:	4613      	mov	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	440b      	add	r3, r1
 8001250:	3315      	adds	r3, #21
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b2f      	ldr	r3, [pc, #188]	@ (8001314 <UnlinkTimer+0xf8>)
 8001258:	701a      	strb	r2, [r3, #0]
 800125a:	e03e      	b.n	80012da <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 800125c:	79fa      	ldrb	r2, [r7, #7]
 800125e:	492f      	ldr	r1, [pc, #188]	@ (800131c <UnlinkTimer+0x100>)
 8001260:	4613      	mov	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	440b      	add	r3, r1
 800126a:	3314      	adds	r3, #20
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001270:	79fa      	ldrb	r2, [r7, #7]
 8001272:	492a      	ldr	r1, [pc, #168]	@ (800131c <UnlinkTimer+0x100>)
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	440b      	add	r3, r1
 800127e:	3315      	adds	r3, #21
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001284:	79f9      	ldrb	r1, [r7, #7]
 8001286:	7bfa      	ldrb	r2, [r7, #15]
 8001288:	4824      	ldr	r0, [pc, #144]	@ (800131c <UnlinkTimer+0x100>)
 800128a:	460b      	mov	r3, r1
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	440b      	add	r3, r1
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	4403      	add	r3, r0
 8001294:	3315      	adds	r3, #21
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b2d8      	uxtb	r0, r3
 800129a:	4920      	ldr	r1, [pc, #128]	@ (800131c <UnlinkTimer+0x100>)
 800129c:	4613      	mov	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	440b      	add	r3, r1
 80012a6:	3315      	adds	r3, #21
 80012a8:	4602      	mov	r2, r0
 80012aa:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80012ac:	7bbb      	ldrb	r3, [r7, #14]
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d013      	beq.n	80012da <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80012b2:	79f9      	ldrb	r1, [r7, #7]
 80012b4:	7bba      	ldrb	r2, [r7, #14]
 80012b6:	4819      	ldr	r0, [pc, #100]	@ (800131c <UnlinkTimer+0x100>)
 80012b8:	460b      	mov	r3, r1
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	440b      	add	r3, r1
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	4403      	add	r3, r0
 80012c2:	3314      	adds	r3, #20
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b2d8      	uxtb	r0, r3
 80012c8:	4914      	ldr	r1, [pc, #80]	@ (800131c <UnlinkTimer+0x100>)
 80012ca:	4613      	mov	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	440b      	add	r3, r1
 80012d4:	3314      	adds	r3, #20
 80012d6:	4602      	mov	r2, r0
 80012d8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80012da:	79fa      	ldrb	r2, [r7, #7]
 80012dc:	490f      	ldr	r1, [pc, #60]	@ (800131c <UnlinkTimer+0x100>)
 80012de:	4613      	mov	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4413      	add	r3, r2
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	440b      	add	r3, r1
 80012e8:	330c      	adds	r3, #12
 80012ea:	2201      	movs	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80012ee:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <UnlinkTimer+0xf8>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b06      	cmp	r3, #6
 80012f6:	d107      	bne.n	8001308 <UnlinkTimer+0xec>
 80012f8:	79bb      	ldrb	r3, [r7, #6]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d104      	bne.n	8001308 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <UnlinkTimer+0x104>)
 8001300:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001304:	601a      	str	r2, [r3, #0]
  }

  return;
 8001306:	bf00      	nop
 8001308:	bf00      	nop
}
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	20000198 	.word	0x20000198
 8001318:	20000199 	.word	0x20000199
 800131c:	20000108 	.word	0x20000108
 8001320:	2000019c 	.word	0x2000019c

08001324 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800132a:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <ReturnTimeElapsed+0x70>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001332:	d026      	beq.n	8001382 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001334:	f7ff fe02 	bl	8000f3c <ReadRtcSsrValue>
 8001338:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800133a:	4b16      	ldr	r3, [pc, #88]	@ (8001394 <ReturnTimeElapsed+0x70>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	429a      	cmp	r2, r3
 8001342:	d805      	bhi.n	8001350 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001344:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <ReturnTimeElapsed+0x70>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	e00a      	b.n	8001366 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001350:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <ReturnTimeElapsed+0x74>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 800135c:	4b0d      	ldr	r3, [pc, #52]	@ (8001394 <ReturnTimeElapsed+0x70>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	4413      	add	r3, r2
 8001364:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001366:	4b0d      	ldr	r3, [pc, #52]	@ (800139c <ReturnTimeElapsed+0x78>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	fb02 f303 	mul.w	r3, r2, r3
 8001372:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001374:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <ReturnTimeElapsed+0x7c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	40d3      	lsrs	r3, r2
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	e001      	b.n	8001386 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	b29b      	uxth	r3, r3
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	2000019c 	.word	0x2000019c
 8001398:	200001a4 	.word	0x200001a4
 800139c:	200001a2 	.word	0x200001a2
 80013a0:	200001a1 	.word	0x200001a1

080013a4 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80013ae:	88fb      	ldrh	r3, [r7, #6]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d108      	bne.n	80013c6 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80013b4:	f7ff fdc2 	bl	8000f3c <ReadRtcSsrValue>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4a21      	ldr	r2, [pc, #132]	@ (8001440 <RestartWakeupCounter+0x9c>)
 80013bc:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80013be:	2003      	movs	r0, #3
 80013c0:	f001 fd45 	bl	8002e4e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80013c4:	e039      	b.n	800143a <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80013c6:	88fb      	ldrh	r3, [r7, #6]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d803      	bhi.n	80013d4 <RestartWakeupCounter+0x30>
 80013cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001444 <RestartWakeupCounter+0xa0>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d002      	beq.n	80013da <RestartWakeupCounter+0x36>
      Value -= 1;
 80013d4:	88fb      	ldrh	r3, [r7, #6]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80013da:	bf00      	nop
 80013dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001448 <RestartWakeupCounter+0xa4>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f8      	beq.n	80013dc <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80013ea:	4b17      	ldr	r3, [pc, #92]	@ (8001448 <RestartWakeupCounter+0xa4>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4b15      	ldr	r3, [pc, #84]	@ (8001448 <RestartWakeupCounter+0xa4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80013fa:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80013fc:	4b13      	ldr	r3, [pc, #76]	@ (800144c <RestartWakeupCounter+0xa8>)
 80013fe:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001402:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001404:	2003      	movs	r0, #3
 8001406:	f001 fd30 	bl	8002e6a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800140a:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <RestartWakeupCounter+0xac>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	0c1b      	lsrs	r3, r3, #16
 8001410:	041b      	lsls	r3, r3, #16
 8001412:	88fa      	ldrh	r2, [r7, #6]
 8001414:	490e      	ldr	r1, [pc, #56]	@ (8001450 <RestartWakeupCounter+0xac>)
 8001416:	4313      	orrs	r3, r2
 8001418:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800141a:	f7ff fd8f 	bl	8000f3c <ReadRtcSsrValue>
 800141e:	4603      	mov	r3, r0
 8001420:	4a07      	ldr	r2, [pc, #28]	@ (8001440 <RestartWakeupCounter+0x9c>)
 8001422:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001424:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <RestartWakeupCounter+0xa4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	4b07      	ldr	r3, [pc, #28]	@ (8001448 <RestartWakeupCounter+0xa4>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001432:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001434:	f3af 8000 	nop.w
  return ;
 8001438:	bf00      	nop
}
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	2000019c 	.word	0x2000019c
 8001444:	200001a1 	.word	0x200001a1
 8001448:	20000374 	.word	0x20000374
 800144c:	58000800 	.word	0x58000800
 8001450:	40002800 	.word	0x40002800

08001454 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800145a:	4b45      	ldr	r3, [pc, #276]	@ (8001570 <RescheduleTimerList+0x11c>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001462:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001466:	d107      	bne.n	8001478 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001468:	bf00      	nop
 800146a:	4b42      	ldr	r3, [pc, #264]	@ (8001574 <RescheduleTimerList+0x120>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1f8      	bne.n	800146a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001478:	4b3e      	ldr	r3, [pc, #248]	@ (8001574 <RescheduleTimerList+0x120>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	4b3d      	ldr	r3, [pc, #244]	@ (8001574 <RescheduleTimerList+0x120>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001486:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001488:	4b3b      	ldr	r3, [pc, #236]	@ (8001578 <RescheduleTimerList+0x124>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800148e:	7bfa      	ldrb	r2, [r7, #15]
 8001490:	493a      	ldr	r1, [pc, #232]	@ (800157c <RescheduleTimerList+0x128>)
 8001492:	4613      	mov	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	440b      	add	r3, r1
 800149c:	3308      	adds	r3, #8
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80014a2:	f7ff ff3f 	bl	8001324 <ReturnTimeElapsed>
 80014a6:	4603      	mov	r3, r0
 80014a8:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	68ba      	ldr	r2, [r7, #8]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d205      	bcs.n	80014be <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80014b6:	4b32      	ldr	r3, [pc, #200]	@ (8001580 <RescheduleTimerList+0x12c>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
 80014bc:	e04d      	b.n	800155a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	4a30      	ldr	r2, [pc, #192]	@ (8001584 <RescheduleTimerList+0x130>)
 80014c2:	8812      	ldrh	r2, [r2, #0]
 80014c4:	b292      	uxth	r2, r2
 80014c6:	4413      	add	r3, r2
 80014c8:	461a      	mov	r2, r3
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d906      	bls.n	80014de <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80014d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001584 <RescheduleTimerList+0x130>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80014d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001580 <RescheduleTimerList+0x12c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
 80014dc:	e03d      	b.n	800155a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80014e8:	4b25      	ldr	r3, [pc, #148]	@ (8001580 <RescheduleTimerList+0x12c>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80014ee:	e034      	b.n	800155a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	4922      	ldr	r1, [pc, #136]	@ (800157c <RescheduleTimerList+0x128>)
 80014f4:	4613      	mov	r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	4413      	add	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	440b      	add	r3, r1
 80014fe:	3308      	adds	r3, #8
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	429a      	cmp	r2, r3
 8001506:	d20a      	bcs.n	800151e <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001508:	7bfa      	ldrb	r2, [r7, #15]
 800150a:	491c      	ldr	r1, [pc, #112]	@ (800157c <RescheduleTimerList+0x128>)
 800150c:	4613      	mov	r3, r2
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4413      	add	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	440b      	add	r3, r1
 8001516:	3308      	adds	r3, #8
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	e013      	b.n	8001546 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800151e:	7bfa      	ldrb	r2, [r7, #15]
 8001520:	4916      	ldr	r1, [pc, #88]	@ (800157c <RescheduleTimerList+0x128>)
 8001522:	4613      	mov	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	4413      	add	r3, r2
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	440b      	add	r3, r1
 800152c:	3308      	adds	r3, #8
 800152e:	6819      	ldr	r1, [r3, #0]
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	7bfa      	ldrb	r2, [r7, #15]
 8001534:	1ac9      	subs	r1, r1, r3
 8001536:	4811      	ldr	r0, [pc, #68]	@ (800157c <RescheduleTimerList+0x128>)
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	4403      	add	r3, r0
 8001542:	3308      	adds	r3, #8
 8001544:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001546:	7bfa      	ldrb	r2, [r7, #15]
 8001548:	490c      	ldr	r1, [pc, #48]	@ (800157c <RescheduleTimerList+0x128>)
 800154a:	4613      	mov	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4413      	add	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	440b      	add	r3, r1
 8001554:	3315      	adds	r3, #21
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	2b06      	cmp	r3, #6
 800155e:	d1c7      	bne.n	80014f0 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001560:	89bb      	ldrh	r3, [r7, #12]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ff1e 	bl	80013a4 <RestartWakeupCounter>

  return ;
 8001568:	bf00      	nop
}
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40002800 	.word	0x40002800
 8001574:	20000374 	.word	0x20000374
 8001578:	20000198 	.word	0x20000198
 800157c:	20000108 	.word	0x20000108
 8001580:	200001a0 	.word	0x200001a0
 8001584:	200001a6 	.word	0x200001a6

08001588 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	@ 0x28
 800158c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800158e:	f3ef 8310 	mrs	r3, PRIMASK
 8001592:	617b      	str	r3, [r7, #20]
  return(result);
 8001594:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001596:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001598:	b672      	cpsid	i
}
 800159a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800159c:	4b59      	ldr	r3, [pc, #356]	@ (8001704 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	22ca      	movs	r2, #202	@ 0xca
 80015a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80015a4:	4b57      	ldr	r3, [pc, #348]	@ (8001704 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2253      	movs	r2, #83	@ 0x53
 80015aa:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80015ac:	4b55      	ldr	r3, [pc, #340]	@ (8001704 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	4b54      	ldr	r3, [pc, #336]	@ (8001704 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015ba:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80015bc:	4b52      	ldr	r3, [pc, #328]	@ (8001708 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80015c4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80015c8:	4950      	ldr	r1, [pc, #320]	@ (800170c <HW_TS_RTC_Wakeup_Handler+0x184>)
 80015ca:	4613      	mov	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4413      	add	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	440b      	add	r3, r1
 80015d4:	330c      	adds	r3, #12
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d16e      	bne.n	80016bc <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80015de:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80015e2:	494a      	ldr	r1, [pc, #296]	@ (800170c <HW_TS_RTC_Wakeup_Handler+0x184>)
 80015e4:	4613      	mov	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	440b      	add	r3, r1
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80015f2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80015f6:	4945      	ldr	r1, [pc, #276]	@ (800170c <HW_TS_RTC_Wakeup_Handler+0x184>)
 80015f8:	4613      	mov	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4413      	add	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	440b      	add	r3, r1
 8001602:	3310      	adds	r3, #16
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001608:	4b41      	ldr	r3, [pc, #260]	@ (8001710 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d04c      	beq.n	80016ac <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001612:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001616:	493d      	ldr	r1, [pc, #244]	@ (800170c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001618:	4613      	mov	r3, r2
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4413      	add	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	440b      	add	r3, r1
 8001622:	330d      	adds	r3, #13
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b01      	cmp	r3, #1
 800162a:	d124      	bne.n	8001676 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800162c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001630:	2101      	movs	r1, #1
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fdf2 	bl	800121c <UnlinkTimer>
 8001638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	f383 8810 	msr	PRIMASK, r3
}
 8001642:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001644:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001648:	4930      	ldr	r1, [pc, #192]	@ (800170c <HW_TS_RTC_Wakeup_Handler+0x184>)
 800164a:	4613      	mov	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	440b      	add	r3, r1
 8001654:	3304      	adds	r3, #4
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800165c:	4611      	mov	r1, r2
 800165e:	4618      	mov	r0, r3
 8001660:	f000 fa32 	bl	8001ac8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001664:	4b27      	ldr	r3, [pc, #156]	@ (8001704 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	22ca      	movs	r2, #202	@ 0xca
 800166a:	625a      	str	r2, [r3, #36]	@ 0x24
 800166c:	4b25      	ldr	r3, [pc, #148]	@ (8001704 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2253      	movs	r2, #83	@ 0x53
 8001672:	625a      	str	r2, [r3, #36]	@ 0x24
 8001674:	e012      	b.n	800169c <HW_TS_RTC_Wakeup_Handler+0x114>
 8001676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001678:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f383 8810 	msr	PRIMASK, r3
}
 8001680:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001682:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001686:	4618      	mov	r0, r3
 8001688:	f000 f99a 	bl	80019c0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800168c:	4b1d      	ldr	r3, [pc, #116]	@ (8001704 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	22ca      	movs	r2, #202	@ 0xca
 8001692:	625a      	str	r2, [r3, #36]	@ 0x24
 8001694:	4b1b      	ldr	r3, [pc, #108]	@ (8001704 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2253      	movs	r2, #83	@ 0x53
 800169a:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800169c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80016a0:	69fa      	ldr	r2, [r7, #28]
 80016a2:	4619      	mov	r1, r3
 80016a4:	69b8      	ldr	r0, [r7, #24]
 80016a6:	f000 fa95 	bl	8001bd4 <HW_TS_RTC_Int_AppNot>
 80016aa:	e022      	b.n	80016f2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80016ac:	f7ff fed2 	bl	8001454 <RescheduleTimerList>
 80016b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	f383 8810 	msr	PRIMASK, r3
}
 80016ba:	e01a      	b.n	80016f2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80016bc:	bf00      	nop
 80016be:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0f8      	beq.n	80016be <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80016cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001704 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80016dc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80016de:	4b0d      	ldr	r3, [pc, #52]	@ (8001714 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80016e0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f383 8810 	msr	PRIMASK, r3
}
 80016f0:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80016f2:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	22ff      	movs	r2, #255	@ 0xff
 80016f8:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 80016fa:	bf00      	nop
}
 80016fc:	3728      	adds	r7, #40	@ 0x28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000374 	.word	0x20000374
 8001708:	20000198 	.word	0x20000198
 800170c:	20000108 	.word	0x20000108
 8001710:	200001a0 	.word	0x200001a0
 8001714:	58000800 	.word	0x58000800

08001718 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001724:	4b5e      	ldr	r3, [pc, #376]	@ (80018a0 <HW_TS_Init+0x188>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	22ca      	movs	r2, #202	@ 0xca
 800172a:	625a      	str	r2, [r3, #36]	@ 0x24
 800172c:	4b5c      	ldr	r3, [pc, #368]	@ (80018a0 <HW_TS_Init+0x188>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2253      	movs	r2, #83	@ 0x53
 8001732:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001734:	4b5b      	ldr	r3, [pc, #364]	@ (80018a4 <HW_TS_Init+0x18c>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	4a5a      	ldr	r2, [pc, #360]	@ (80018a4 <HW_TS_Init+0x18c>)
 800173a:	f043 0320 	orr.w	r3, r3, #32
 800173e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001740:	4b58      	ldr	r3, [pc, #352]	@ (80018a4 <HW_TS_Init+0x18c>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	b2db      	uxtb	r3, r3
 800174c:	f1c3 0304 	rsb	r3, r3, #4
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4b55      	ldr	r3, [pc, #340]	@ (80018a8 <HW_TS_Init+0x190>)
 8001754:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001756:	4b53      	ldr	r3, [pc, #332]	@ (80018a4 <HW_TS_Init+0x18c>)
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800175e:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8001762:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	fa92 f2a2 	rbit	r2, r2
 800176a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	2a00      	cmp	r2, #0
 8001774:	d101      	bne.n	800177a <HW_TS_Init+0x62>
  {
    return 32U;
 8001776:	2220      	movs	r2, #32
 8001778:	e003      	b.n	8001782 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	fab2 f282 	clz	r2, r2
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	40d3      	lsrs	r3, r2
 8001784:	b2db      	uxtb	r3, r3
 8001786:	3301      	adds	r3, #1
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4b48      	ldr	r3, [pc, #288]	@ (80018ac <HW_TS_Init+0x194>)
 800178c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800178e:	4b45      	ldr	r3, [pc, #276]	@ (80018a4 <HW_TS_Init+0x18c>)
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	b29b      	uxth	r3, r3
 8001794:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001798:	b29b      	uxth	r3, r3
 800179a:	3301      	adds	r3, #1
 800179c:	b29a      	uxth	r2, r3
 800179e:	4b44      	ldr	r3, [pc, #272]	@ (80018b0 <HW_TS_Init+0x198>)
 80017a0:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80017a2:	4b43      	ldr	r3, [pc, #268]	@ (80018b0 <HW_TS_Init+0x198>)
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	4a40      	ldr	r2, [pc, #256]	@ (80018ac <HW_TS_Init+0x194>)
 80017aa:	7812      	ldrb	r2, [r2, #0]
 80017ac:	fb02 f303 	mul.w	r3, r2, r3
 80017b0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80017b4:	4a3c      	ldr	r2, [pc, #240]	@ (80018a8 <HW_TS_Init+0x190>)
 80017b6:	7812      	ldrb	r2, [r2, #0]
 80017b8:	40d3      	lsrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d904      	bls.n	80017d0 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80017c6:	4b3b      	ldr	r3, [pc, #236]	@ (80018b4 <HW_TS_Init+0x19c>)
 80017c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017cc:	801a      	strh	r2, [r3, #0]
 80017ce:	e003      	b.n	80017d8 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	4b37      	ldr	r3, [pc, #220]	@ (80018b4 <HW_TS_Init+0x19c>)
 80017d6:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80017d8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80017dc:	f7ff fb9c 	bl	8000f18 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80017e0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80017e4:	f7ff fb84 	bl	8000ef0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d13d      	bne.n	800186a <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80017ee:	4b32      	ldr	r3, [pc, #200]	@ (80018b8 <HW_TS_Init+0x1a0>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80017f4:	4b31      	ldr	r3, [pc, #196]	@ (80018bc <HW_TS_Init+0x1a4>)
 80017f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017fa:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80017fc:	2300      	movs	r3, #0
 80017fe:	77fb      	strb	r3, [r7, #31]
 8001800:	e00c      	b.n	800181c <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001802:	7ffa      	ldrb	r2, [r7, #31]
 8001804:	492e      	ldr	r1, [pc, #184]	@ (80018c0 <HW_TS_Init+0x1a8>)
 8001806:	4613      	mov	r3, r2
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4413      	add	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	440b      	add	r3, r1
 8001810:	330c      	adds	r3, #12
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001816:	7ffb      	ldrb	r3, [r7, #31]
 8001818:	3301      	adds	r3, #1
 800181a:	77fb      	strb	r3, [r7, #31]
 800181c:	7ffb      	ldrb	r3, [r7, #31]
 800181e:	2b05      	cmp	r3, #5
 8001820:	d9ef      	bls.n	8001802 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001822:	4b28      	ldr	r3, [pc, #160]	@ (80018c4 <HW_TS_Init+0x1ac>)
 8001824:	2206      	movs	r2, #6
 8001826:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001828:	4b1d      	ldr	r3, [pc, #116]	@ (80018a0 <HW_TS_Init+0x188>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	4b1c      	ldr	r3, [pc, #112]	@ (80018a0 <HW_TS_Init+0x188>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001836:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001838:	4b19      	ldr	r3, [pc, #100]	@ (80018a0 <HW_TS_Init+0x188>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	4b17      	ldr	r3, [pc, #92]	@ (80018a0 <HW_TS_Init+0x188>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001848:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800184a:	4b1f      	ldr	r3, [pc, #124]	@ (80018c8 <HW_TS_Init+0x1b0>)
 800184c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001850:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001852:	2003      	movs	r0, #3
 8001854:	f001 fb09 	bl	8002e6a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001858:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <HW_TS_Init+0x188>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <HW_TS_Init+0x188>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	e009      	b.n	800187e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800186a:	4b0d      	ldr	r3, [pc, #52]	@ (80018a0 <HW_TS_Init+0x188>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001874:	2b00      	cmp	r3, #0
 8001876:	d002      	beq.n	800187e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001878:	2003      	movs	r0, #3
 800187a:	f001 fae8 	bl	8002e4e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800187e:	4b08      	ldr	r3, [pc, #32]	@ (80018a0 <HW_TS_Init+0x188>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	22ff      	movs	r2, #255	@ 0xff
 8001884:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001886:	2200      	movs	r2, #0
 8001888:	2103      	movs	r1, #3
 800188a:	2003      	movs	r0, #3
 800188c:	f001 fa9d 	bl	8002dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001890:	2003      	movs	r0, #3
 8001892:	f001 fab4 	bl	8002dfe <HAL_NVIC_EnableIRQ>

  return;
 8001896:	bf00      	nop
}
 8001898:	3720      	adds	r7, #32
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000374 	.word	0x20000374
 80018a4:	40002800 	.word	0x40002800
 80018a8:	200001a1 	.word	0x200001a1
 80018ac:	200001a2 	.word	0x200001a2
 80018b0:	200001a4 	.word	0x200001a4
 80018b4:	200001a6 	.word	0x200001a6
 80018b8:	200001a0 	.word	0x200001a0
 80018bc:	2000019c 	.word	0x2000019c
 80018c0:	20000108 	.word	0x20000108
 80018c4:	20000198 	.word	0x20000198
 80018c8:	58000800 	.word	0x58000800

080018cc <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b08b      	sub	sp, #44	@ 0x2c
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	603b      	str	r3, [r7, #0]
 80018d8:	4613      	mov	r3, r2
 80018da:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018e2:	f3ef 8310 	mrs	r3, PRIMASK
 80018e6:	61fb      	str	r3, [r7, #28]
  return(result);
 80018e8:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80018ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80018ec:	b672      	cpsid	i
}
 80018ee:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80018f0:	e004      	b.n	80018fc <HW_TS_Create+0x30>
  {
    loop++;
 80018f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018f6:	3301      	adds	r3, #1
 80018f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80018fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001900:	2b05      	cmp	r3, #5
 8001902:	d80c      	bhi.n	800191e <HW_TS_Create+0x52>
 8001904:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001908:	492c      	ldr	r1, [pc, #176]	@ (80019bc <HW_TS_Create+0xf0>)
 800190a:	4613      	mov	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	440b      	add	r3, r1
 8001914:	330c      	adds	r3, #12
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1e9      	bne.n	80018f2 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800191e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001922:	2b06      	cmp	r3, #6
 8001924:	d038      	beq.n	8001998 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001926:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800192a:	4924      	ldr	r1, [pc, #144]	@ (80019bc <HW_TS_Create+0xf0>)
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	440b      	add	r3, r1
 8001936:	330c      	adds	r3, #12
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
 800193c:	6a3b      	ldr	r3, [r7, #32]
 800193e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	f383 8810 	msr	PRIMASK, r3
}
 8001946:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001948:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800194c:	491b      	ldr	r1, [pc, #108]	@ (80019bc <HW_TS_Create+0xf0>)
 800194e:	4613      	mov	r3, r2
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	4413      	add	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	440b      	add	r3, r1
 8001958:	3310      	adds	r3, #16
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800195e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001962:	4916      	ldr	r1, [pc, #88]	@ (80019bc <HW_TS_Create+0xf0>)
 8001964:	4613      	mov	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	440b      	add	r3, r1
 800196e:	330d      	adds	r3, #13
 8001970:	79fa      	ldrb	r2, [r7, #7]
 8001972:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001974:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001978:	4910      	ldr	r1, [pc, #64]	@ (80019bc <HW_TS_Create+0xf0>)
 800197a:	4613      	mov	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4413      	add	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	440b      	add	r3, r1
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800198e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001990:	2300      	movs	r3, #0
 8001992:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001996:	e008      	b.n	80019aa <HW_TS_Create+0xde>
 8001998:	6a3b      	ldr	r3, [r7, #32]
 800199a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f383 8810 	msr	PRIMASK, r3
}
 80019a2:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80019a4:	2301      	movs	r3, #1
 80019a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 80019aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	372c      	adds	r7, #44	@ 0x2c
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	20000108 	.word	0x20000108

080019c0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019ca:	f3ef 8310 	mrs	r3, PRIMASK
 80019ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80019d0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80019d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80019d4:	b672      	cpsid	i
}
 80019d6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80019d8:	2003      	movs	r0, #3
 80019da:	f001 fa1e 	bl	8002e1a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80019de:	4b34      	ldr	r3, [pc, #208]	@ (8001ab0 <HW_TS_Stop+0xf0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	22ca      	movs	r2, #202	@ 0xca
 80019e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80019e6:	4b32      	ldr	r3, [pc, #200]	@ (8001ab0 <HW_TS_Stop+0xf0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2253      	movs	r2, #83	@ 0x53
 80019ec:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80019ee:	79fa      	ldrb	r2, [r7, #7]
 80019f0:	4930      	ldr	r1, [pc, #192]	@ (8001ab4 <HW_TS_Stop+0xf4>)
 80019f2:	4613      	mov	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	440b      	add	r3, r1
 80019fc:	330c      	adds	r3, #12
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d142      	bne.n	8001a8c <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fc06 	bl	800121c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001a10:	4b29      	ldr	r3, [pc, #164]	@ (8001ab8 <HW_TS_Stop+0xf8>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a16:	7cfb      	ldrb	r3, [r7, #19]
 8001a18:	2b06      	cmp	r3, #6
 8001a1a:	d12f      	bne.n	8001a7c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001a1c:	4b27      	ldr	r3, [pc, #156]	@ (8001abc <HW_TS_Stop+0xfc>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a28:	d107      	bne.n	8001a3a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001a2a:	bf00      	nop
 8001a2c:	4b20      	ldr	r3, [pc, #128]	@ (8001ab0 <HW_TS_Stop+0xf0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f8      	bne.n	8001a2c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab0 <HW_TS_Stop+0xf0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab0 <HW_TS_Stop+0xf0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a48:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001a4a:	bf00      	nop
 8001a4c:	4b18      	ldr	r3, [pc, #96]	@ (8001ab0 <HW_TS_Stop+0xf0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f8      	beq.n	8001a4c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001a5a:	4b15      	ldr	r3, [pc, #84]	@ (8001ab0 <HW_TS_Stop+0xf0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	4b13      	ldr	r3, [pc, #76]	@ (8001ab0 <HW_TS_Stop+0xf0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001a6a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001a6c:	4b14      	ldr	r3, [pc, #80]	@ (8001ac0 <HW_TS_Stop+0x100>)
 8001a6e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001a72:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001a74:	2003      	movs	r0, #3
 8001a76:	f001 f9f8 	bl	8002e6a <HAL_NVIC_ClearPendingIRQ>
 8001a7a:	e007      	b.n	8001a8c <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001a7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ac4 <HW_TS_Stop+0x104>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	7cfa      	ldrb	r2, [r7, #19]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001a88:	f7ff fce4 	bl	8001454 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001a8c:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <HW_TS_Stop+0xf0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	22ff      	movs	r2, #255	@ 0xff
 8001a92:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001a94:	2003      	movs	r0, #3
 8001a96:	f001 f9b2 	bl	8002dfe <HAL_NVIC_EnableIRQ>
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	f383 8810 	msr	PRIMASK, r3
}
 8001aa4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001aa6:	bf00      	nop
}
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000374 	.word	0x20000374
 8001ab4:	20000108 	.word	0x20000108
 8001ab8:	20000198 	.word	0x20000198
 8001abc:	40002800 	.word	0x40002800
 8001ac0:	58000800 	.word	0x58000800
 8001ac4:	20000199 	.word	0x20000199

08001ac8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	6039      	str	r1, [r7, #0]
 8001ad2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001ad4:	79fa      	ldrb	r2, [r7, #7]
 8001ad6:	493b      	ldr	r1, [pc, #236]	@ (8001bc4 <HW_TS_Start+0xfc>)
 8001ad8:	4613      	mov	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4413      	add	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	440b      	add	r3, r1
 8001ae2:	330c      	adds	r3, #12
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d103      	bne.n	8001af4 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff ff66 	bl	80019c0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001af4:	f3ef 8310 	mrs	r3, PRIMASK
 8001af8:	60fb      	str	r3, [r7, #12]
  return(result);
 8001afa:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001afc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001afe:	b672      	cpsid	i
}
 8001b00:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001b02:	2003      	movs	r0, #3
 8001b04:	f001 f989 	bl	8002e1a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001b08:	4b2f      	ldr	r3, [pc, #188]	@ (8001bc8 <HW_TS_Start+0x100>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	22ca      	movs	r2, #202	@ 0xca
 8001b0e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b10:	4b2d      	ldr	r3, [pc, #180]	@ (8001bc8 <HW_TS_Start+0x100>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2253      	movs	r2, #83	@ 0x53
 8001b16:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001b18:	79fa      	ldrb	r2, [r7, #7]
 8001b1a:	492a      	ldr	r1, [pc, #168]	@ (8001bc4 <HW_TS_Start+0xfc>)
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4413      	add	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	440b      	add	r3, r1
 8001b26:	330c      	adds	r3, #12
 8001b28:	2202      	movs	r2, #2
 8001b2a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001b2c:	79fa      	ldrb	r2, [r7, #7]
 8001b2e:	4925      	ldr	r1, [pc, #148]	@ (8001bc4 <HW_TS_Start+0xfc>)
 8001b30:	4613      	mov	r3, r2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	4413      	add	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	440b      	add	r3, r1
 8001b3a:	3308      	adds	r3, #8
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001b40:	79fa      	ldrb	r2, [r7, #7]
 8001b42:	4920      	ldr	r1, [pc, #128]	@ (8001bc4 <HW_TS_Start+0xfc>)
 8001b44:	4613      	mov	r3, r2
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4413      	add	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	440b      	add	r3, r1
 8001b4e:	3304      	adds	r3, #4
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fab6 	bl	80010c8 <linkTimer>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001b60:	4b1a      	ldr	r3, [pc, #104]	@ (8001bcc <HW_TS_Start+0x104>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001b66:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd0 <HW_TS_Start+0x108>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	7c7a      	ldrb	r2, [r7, #17]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d002      	beq.n	8001b78 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001b72:	f7ff fc6f 	bl	8001454 <RescheduleTimerList>
 8001b76:	e013      	b.n	8001ba0 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001b78:	79fa      	ldrb	r2, [r7, #7]
 8001b7a:	4912      	ldr	r1, [pc, #72]	@ (8001bc4 <HW_TS_Start+0xfc>)
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	440b      	add	r3, r1
 8001b86:	3308      	adds	r3, #8
 8001b88:	6819      	ldr	r1, [r3, #0]
 8001b8a:	8a7b      	ldrh	r3, [r7, #18]
 8001b8c:	79fa      	ldrb	r2, [r7, #7]
 8001b8e:	1ac9      	subs	r1, r1, r3
 8001b90:	480c      	ldr	r0, [pc, #48]	@ (8001bc4 <HW_TS_Start+0xfc>)
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	4403      	add	r3, r0
 8001b9c:	3308      	adds	r3, #8
 8001b9e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001ba0:	4b09      	ldr	r3, [pc, #36]	@ (8001bc8 <HW_TS_Start+0x100>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	22ff      	movs	r2, #255	@ 0xff
 8001ba6:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001ba8:	2003      	movs	r0, #3
 8001baa:	f001 f928 	bl	8002dfe <HAL_NVIC_EnableIRQ>
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	f383 8810 	msr	PRIMASK, r3
}
 8001bb8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001bba:	bf00      	nop
}
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000108 	.word	0x20000108
 8001bc8:	20000374 	.word	0x20000374
 8001bcc:	20000198 	.word	0x20000198
 8001bd0:	20000199 	.word	0x20000199

08001bd4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	607a      	str	r2, [r7, #4]
 8001be0:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4798      	blx	r3

  return;
 8001be6:	bf00      	nop
}
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	73fb      	strb	r3, [r7, #15]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d10c      	bne.n	8001c22 <HW_UART_Receive_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 8001c08:	4a08      	ldr	r2, [pc, #32]	@ (8001c2c <HW_UART_Receive_IT+0x3c>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	4b08      	ldr	r3, [pc, #32]	@ (8001c30 <HW_UART_Receive_IT+0x40>)
 8001c10:	4a08      	ldr	r2, [pc, #32]	@ (8001c34 <HW_UART_Receive_IT+0x44>)
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	89bb      	ldrh	r3, [r7, #12]
 8001c16:	461a      	mov	r2, r3
 8001c18:	68b9      	ldr	r1, [r7, #8]
 8001c1a:	4805      	ldr	r0, [pc, #20]	@ (8001c30 <HW_UART_Receive_IT+0x40>)
 8001c1c:	f004 fbba 	bl	8006394 <HAL_UART_Receive_IT>
            break;
 8001c20:	e000      	b.n	8001c24 <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8001c22:	bf00      	nop
    }

    return;
 8001c24:	bf00      	nop
}
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	200001a8 	.word	0x200001a8
 8001c30:	20000280 	.word	0x20000280
 8001c34:	40013800 	.word	0x40013800

08001c38 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	4603      	mov	r3, r0
 8001c44:	73fb      	strb	r3, [r7, #15]
 8001c46:	4613      	mov	r3, r2
 8001c48:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10e      	bne.n	8001c76 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8001c58:	4a17      	ldr	r2, [pc, #92]	@ (8001cb8 <HW_UART_Transmit_DMA+0x80>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8001c5e:	4b17      	ldr	r3, [pc, #92]	@ (8001cbc <HW_UART_Transmit_DMA+0x84>)
 8001c60:	4a17      	ldr	r2, [pc, #92]	@ (8001cc0 <HW_UART_Transmit_DMA+0x88>)
 8001c62:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001c64:	89bb      	ldrh	r3, [r7, #12]
 8001c66:	461a      	mov	r2, r3
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	4814      	ldr	r0, [pc, #80]	@ (8001cbc <HW_UART_Transmit_DMA+0x84>)
 8001c6c:	f004 fbde 	bl	800642c <HAL_UART_Transmit_DMA>
 8001c70:	4603      	mov	r3, r0
 8001c72:	75fb      	strb	r3, [r7, #23]
            break;
 8001c74:	e000      	b.n	8001c78 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8001c76:	bf00      	nop
    }

    switch (hal_status)
 8001c78:	7dfb      	ldrb	r3, [r7, #23]
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d816      	bhi.n	8001cac <HW_UART_Transmit_DMA+0x74>
 8001c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c84 <HW_UART_Transmit_DMA+0x4c>)
 8001c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c84:	08001c95 	.word	0x08001c95
 8001c88:	08001c9b 	.word	0x08001c9b
 8001c8c:	08001ca1 	.word	0x08001ca1
 8001c90:	08001ca7 	.word	0x08001ca7
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8001c94:	2300      	movs	r3, #0
 8001c96:	75bb      	strb	r3, [r7, #22]
            break;
 8001c98:	e009      	b.n	8001cae <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	75bb      	strb	r3, [r7, #22]
            break;
 8001c9e:	e006      	b.n	8001cae <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	75bb      	strb	r3, [r7, #22]
            break;
 8001ca4:	e003      	b.n	8001cae <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	75bb      	strb	r3, [r7, #22]
            break;
 8001caa:	e000      	b.n	8001cae <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8001cac:	bf00      	nop
    }

    return hw_status;
 8001cae:	7dbb      	ldrb	r3, [r7, #22]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	200001ac 	.word	0x200001ac
 8001cbc:	20000280 	.word	0x20000280
 8001cc0:	40013800 	.word	0x40013800

08001cc4 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b09      	ldr	r3, [pc, #36]	@ (8001cf8 <HAL_UART_RxCpltCallback+0x34>)
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d107      	bne.n	8001ce8 <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8001cd8:	4b08      	ldr	r3, [pc, #32]	@ (8001cfc <HAL_UART_RxCpltCallback+0x38>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 8001ce0:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <HAL_UART_RxCpltCallback+0x38>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4798      	blx	r3
            }
            break;
 8001ce6:	e001      	b.n	8001cec <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001ce8:	bf00      	nop
 8001cea:	e000      	b.n	8001cee <HAL_UART_RxCpltCallback+0x2a>
            break;
 8001cec:	bf00      	nop
    }

    return;
 8001cee:	bf00      	nop
}
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40013800 	.word	0x40013800
 8001cfc:	200001a8 	.word	0x200001a8

08001d00 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b09      	ldr	r3, [pc, #36]	@ (8001d34 <HAL_UART_TxCpltCallback+0x34>)
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d107      	bne.n	8001d24 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8001d14:	4b08      	ldr	r3, [pc, #32]	@ (8001d38 <HAL_UART_TxCpltCallback+0x38>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8001d1c:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <HAL_UART_TxCpltCallback+0x38>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4798      	blx	r3
            }
            break;
 8001d22:	e001      	b.n	8001d28 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001d24:	bf00      	nop
 8001d26:	e000      	b.n	8001d2a <HAL_UART_TxCpltCallback+0x2a>
            break;
 8001d28:	bf00      	nop
    }

    return;
 8001d2a:	bf00      	nop
}
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40013800 	.word	0x40013800
 8001d38:	200001ac 	.word	0x200001ac

08001d3c <LL_RCC_LSE_SetDriveCapability>:
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001d44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d4c:	f023 0218 	bic.w	r2, r3, #24
 8001d50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LL_AHB1_GRP1_EnableClock>:
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001d70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001d76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001d80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
}
 8001d8e:	bf00      	nop
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <LL_AHB2_GRP1_EnableClock>:
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b085      	sub	sp, #20
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001da2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001da6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001da8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001db2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001db6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_TIM_PeriodElapsedCallback>:

GPIO_PinState lastButtonStates[NUM_BUTTONS] = {GPIO_PIN_SET, GPIO_PIN_SET};

/* USER CODE BEGIN PV */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
    if (htim->Instance != TIM2) return;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ddc:	f040 808a 	bne.w	8001ef4 <HAL_TIM_PeriodElapsedCallback+0x128>

    uint32_t currentTime = HAL_GetTick();
 8001de0:	f000 fe94 	bl	8002b0c <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

    for (int i = 0; i < NUM_BUTTONS; i++) {
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	e07e      	b.n	8001eea <HAL_TIM_PeriodElapsedCallback+0x11e>
        GPIO_PinState currentState = HAL_GPIO_ReadPin(buttons[i].port, buttons[i].pin);
 8001dec:	4943      	ldr	r1, [pc, #268]	@ (8001efc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	4613      	mov	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	493f      	ldr	r1, [pc, #252]	@ (8001efc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4613      	mov	r3, r2
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f001 fcdc 	bl	80037cc <HAL_GPIO_ReadPin>
 8001e14:	4603      	mov	r3, r0
 8001e16:	73fb      	strb	r3, [r7, #15]

        if (currentState != buttons[i].pressed) {
 8001e18:	4938      	ldr	r1, [pc, #224]	@ (8001efc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	3307      	adds	r3, #7
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d009      	beq.n	8001e46 <HAL_TIM_PeriodElapsedCallback+0x7a>
            buttons[i].lastDebounceTime = currentTime;
 8001e32:	4932      	ldr	r1, [pc, #200]	@ (8001efc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	4613      	mov	r3, r2
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4413      	add	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	440b      	add	r3, r1
 8001e40:	3308      	adds	r3, #8
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	601a      	str	r2, [r3, #0]
        }

        if ((currentTime - buttons[i].lastDebounceTime) > debounceDelay) {
 8001e46:	492d      	ldr	r1, [pc, #180]	@ (8001efc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	440b      	add	r3, r1
 8001e54:	3308      	adds	r3, #8
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2214      	movs	r2, #20
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d940      	bls.n	8001ee4 <HAL_TIM_PeriodElapsedCallback+0x118>
            if (currentState == GPIO_PIN_RESET && !buttons[i].pressed) {
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d125      	bne.n	8001eb4 <HAL_TIM_PeriodElapsedCallback+0xe8>
 8001e68:	4924      	ldr	r1, [pc, #144]	@ (8001efc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4413      	add	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	3307      	adds	r3, #7
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	f083 0301 	eor.w	r3, r3, #1
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d017      	beq.n	8001eb4 <HAL_TIM_PeriodElapsedCallback+0xe8>
                // Wywołanie odpowiedniej funkcji w zależności od przycisku
                switch (i) {
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_TIM_PeriodElapsedCallback+0xc6>
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d003      	beq.n	8001e98 <HAL_TIM_PeriodElapsedCallback+0xcc>
 8001e90:	e005      	b.n	8001e9e <HAL_TIM_PeriodElapsedCallback+0xd2>
                    case 0:
                        APP_BLE_Key_Button1_Action();
 8001e92:	f009 ff71 	bl	800bd78 <APP_BLE_Key_Button1_Action>
                        break;
 8001e96:	e002      	b.n	8001e9e <HAL_TIM_PeriodElapsedCallback+0xd2>
                    case 1:
                        APP_BLE_Key_Button2_Action();
 8001e98:	f009 ff8a 	bl	800bdb0 <APP_BLE_Key_Button2_Action>
                        break;
 8001e9c:	bf00      	nop

                }

                buttons[i].pressed = true;
 8001e9e:	4917      	ldr	r1, [pc, #92]	@ (8001efc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4413      	add	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	3307      	adds	r3, #7
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
 8001eb2:	e017      	b.n	8001ee4 <HAL_TIM_PeriodElapsedCallback+0x118>
            } else if (currentState == GPIO_PIN_SET && buttons[i].pressed) {
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d114      	bne.n	8001ee4 <HAL_TIM_PeriodElapsedCallback+0x118>
 8001eba:	4910      	ldr	r1, [pc, #64]	@ (8001efc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	3307      	adds	r3, #7
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d009      	beq.n	8001ee4 <HAL_TIM_PeriodElapsedCallback+0x118>
                buttons[i].pressed = false;
 8001ed0:	490a      	ldr	r1, [pc, #40]	@ (8001efc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	3307      	adds	r3, #7
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_BUTTONS; i++) {
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	f77f af7d 	ble.w	8001dec <HAL_TIM_PeriodElapsedCallback+0x20>
 8001ef2:	e000      	b.n	8001ef6 <HAL_TIM_PeriodElapsedCallback+0x12a>
    if (htim->Instance != TIM2) return;
 8001ef4:	bf00      	nop
            }
        }
    }
}
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000008 	.word	0x20000008

08001f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f04:	f000 fd94 	bl	8002a30 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001f08:	f7fe fdae 	bl	8000a68 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f0c:	f000 f81a 	bl	8001f44 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001f10:	f000 f874 	bl	8001ffc <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001f14:	f000 f892 	bl	800203c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 8001f18:	f000 f93e 	bl	8002198 <MX_RF_Init>
  MX_GPIO_Init();
 8001f1c:	f000 f9e0 	bl	80022e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f20:	f000 f9cc 	bl	80022bc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001f24:	f000 f89e 	bl	8002064 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8001f28:	f000 f93e 	bl	80021a8 <MX_RTC_Init>
  MX_TIM2_Init();
 8001f2c:	f000 f978 	bl	8002220 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001f30:	4803      	ldr	r0, [pc, #12]	@ (8001f40 <main+0x40>)
 8001f32:	f003 fd55 	bl	80059e0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001f36:	f7fe fda5 	bl	8000a84 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001f3a:	f7fe ff99 	bl	8000e70 <MX_APPE_Process>
 8001f3e:	e7fc      	b.n	8001f3a <main+0x3a>
 8001f40:	20000398 	.word	0x20000398

08001f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b09a      	sub	sp, #104	@ 0x68
 8001f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f4a:	f107 0320 	add.w	r3, r7, #32
 8001f4e:	2248      	movs	r2, #72	@ 0x48
 8001f50:	2100      	movs	r1, #0
 8001f52:	4618      	mov	r0, r3
 8001f54:	f00b fdca 	bl	800daec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f58:	1d3b      	adds	r3, r7, #4
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]
 8001f62:	60da      	str	r2, [r3, #12]
 8001f64:	611a      	str	r2, [r3, #16]
 8001f66:	615a      	str	r2, [r3, #20]
 8001f68:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f6a:	f001 fd23 	bl	80039b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f7ff fee4 	bl	8001d3c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f74:	4b20      	ldr	r3, [pc, #128]	@ (8001ff8 <SystemClock_Config+0xb4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f7c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ff8 <SystemClock_Config+0xb4>)
 8001f7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff8 <SystemClock_Config+0xb4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f8c:	603b      	str	r3, [r7, #0]
 8001f8e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001f90:	2307      	movs	r3, #7
 8001f92:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f98:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fa4:	2340      	movs	r3, #64	@ 0x40
 8001fa6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fac:	f107 0320 	add.w	r3, r7, #32
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f002 f893 	bl	80040dc <HAL_RCC_OscConfig>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001fbc:	f000 f9c8 	bl	8002350 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001fc0:	236f      	movs	r3, #111	@ 0x6f
 8001fc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	2101      	movs	r1, #1
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f002 fbef 	bl	80047c4 <HAL_RCC_ClockConfig>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001fec:	f000 f9b0 	bl	8002350 <Error_Handler>
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	3768      	adds	r7, #104	@ 0x68
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	58000400 	.word	0x58000400

08001ffc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b094      	sub	sp, #80	@ 0x50
 8002000:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002002:	463b      	mov	r3, r7
 8002004:	2250      	movs	r2, #80	@ 0x50
 8002006:	2100      	movs	r1, #0
 8002008:	4618      	mov	r0, r3
 800200a:	f00b fd6f 	bl	800daec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800200e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002012:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002014:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002018:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800201a:	2302      	movs	r3, #2
 800201c:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800201e:	2310      	movs	r3, #16
 8002020:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002022:	463b      	mov	r3, r7
 8002024:	4618      	mov	r0, r3
 8002026:	f003 f80a 	bl	800503e <HAL_RCCEx_PeriphCLKConfig>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002030:	f000 f98e 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002034:	bf00      	nop
 8002036:	3750      	adds	r7, #80	@ 0x50
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002040:	4b06      	ldr	r3, [pc, #24]	@ (800205c <MX_IPCC_Init+0x20>)
 8002042:	4a07      	ldr	r2, [pc, #28]	@ (8002060 <MX_IPCC_Init+0x24>)
 8002044:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002046:	4805      	ldr	r0, [pc, #20]	@ (800205c <MX_IPCC_Init+0x20>)
 8002048:	f001 fc2e 	bl	80038a8 <HAL_IPCC_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002052:	f000 f97d 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	200001b0 	.word	0x200001b0
 8002060:	58000c00 	.word	0x58000c00

08002064 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002068:	4b22      	ldr	r3, [pc, #136]	@ (80020f4 <MX_LPUART1_UART_Init+0x90>)
 800206a:	4a23      	ldr	r2, [pc, #140]	@ (80020f8 <MX_LPUART1_UART_Init+0x94>)
 800206c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800206e:	4b21      	ldr	r3, [pc, #132]	@ (80020f4 <MX_LPUART1_UART_Init+0x90>)
 8002070:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002074:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002076:	4b1f      	ldr	r3, [pc, #124]	@ (80020f4 <MX_LPUART1_UART_Init+0x90>)
 8002078:	2200      	movs	r2, #0
 800207a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800207c:	4b1d      	ldr	r3, [pc, #116]	@ (80020f4 <MX_LPUART1_UART_Init+0x90>)
 800207e:	2200      	movs	r2, #0
 8002080:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002082:	4b1c      	ldr	r3, [pc, #112]	@ (80020f4 <MX_LPUART1_UART_Init+0x90>)
 8002084:	2200      	movs	r2, #0
 8002086:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002088:	4b1a      	ldr	r3, [pc, #104]	@ (80020f4 <MX_LPUART1_UART_Init+0x90>)
 800208a:	220c      	movs	r2, #12
 800208c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800208e:	4b19      	ldr	r3, [pc, #100]	@ (80020f4 <MX_LPUART1_UART_Init+0x90>)
 8002090:	2200      	movs	r2, #0
 8002092:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002094:	4b17      	ldr	r3, [pc, #92]	@ (80020f4 <MX_LPUART1_UART_Init+0x90>)
 8002096:	2200      	movs	r2, #0
 8002098:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800209a:	4b16      	ldr	r3, [pc, #88]	@ (80020f4 <MX_LPUART1_UART_Init+0x90>)
 800209c:	2200      	movs	r2, #0
 800209e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020a0:	4b14      	ldr	r3, [pc, #80]	@ (80020f4 <MX_LPUART1_UART_Init+0x90>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80020a6:	4b13      	ldr	r3, [pc, #76]	@ (80020f4 <MX_LPUART1_UART_Init+0x90>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80020ac:	4811      	ldr	r0, [pc, #68]	@ (80020f4 <MX_LPUART1_UART_Init+0x90>)
 80020ae:	f004 f893 	bl	80061d8 <HAL_UART_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80020b8:	f000 f94a 	bl	8002350 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020bc:	2100      	movs	r1, #0
 80020be:	480d      	ldr	r0, [pc, #52]	@ (80020f4 <MX_LPUART1_UART_Init+0x90>)
 80020c0:	f006 f96d 	bl	800839e <HAL_UARTEx_SetTxFifoThreshold>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80020ca:	f000 f941 	bl	8002350 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020ce:	2100      	movs	r1, #0
 80020d0:	4808      	ldr	r0, [pc, #32]	@ (80020f4 <MX_LPUART1_UART_Init+0x90>)
 80020d2:	f006 f9a2 	bl	800841a <HAL_UARTEx_SetRxFifoThreshold>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80020dc:	f000 f938 	bl	8002350 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80020e0:	4804      	ldr	r0, [pc, #16]	@ (80020f4 <MX_LPUART1_UART_Init+0x90>)
 80020e2:	f006 f923 	bl	800832c <HAL_UARTEx_DisableFifoMode>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80020ec:	f000 f930 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	200001ec 	.word	0x200001ec
 80020f8:	40008000 	.word	0x40008000

080020fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002100:	4b23      	ldr	r3, [pc, #140]	@ (8002190 <MX_USART1_UART_Init+0x94>)
 8002102:	4a24      	ldr	r2, [pc, #144]	@ (8002194 <MX_USART1_UART_Init+0x98>)
 8002104:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002106:	4b22      	ldr	r3, [pc, #136]	@ (8002190 <MX_USART1_UART_Init+0x94>)
 8002108:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800210c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800210e:	4b20      	ldr	r3, [pc, #128]	@ (8002190 <MX_USART1_UART_Init+0x94>)
 8002110:	2200      	movs	r2, #0
 8002112:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002114:	4b1e      	ldr	r3, [pc, #120]	@ (8002190 <MX_USART1_UART_Init+0x94>)
 8002116:	2200      	movs	r2, #0
 8002118:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800211a:	4b1d      	ldr	r3, [pc, #116]	@ (8002190 <MX_USART1_UART_Init+0x94>)
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002120:	4b1b      	ldr	r3, [pc, #108]	@ (8002190 <MX_USART1_UART_Init+0x94>)
 8002122:	220c      	movs	r2, #12
 8002124:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002126:	4b1a      	ldr	r3, [pc, #104]	@ (8002190 <MX_USART1_UART_Init+0x94>)
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 800212c:	4b18      	ldr	r3, [pc, #96]	@ (8002190 <MX_USART1_UART_Init+0x94>)
 800212e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002132:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002134:	4b16      	ldr	r3, [pc, #88]	@ (8002190 <MX_USART1_UART_Init+0x94>)
 8002136:	2200      	movs	r2, #0
 8002138:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800213a:	4b15      	ldr	r3, [pc, #84]	@ (8002190 <MX_USART1_UART_Init+0x94>)
 800213c:	2200      	movs	r2, #0
 800213e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002140:	4b13      	ldr	r3, [pc, #76]	@ (8002190 <MX_USART1_UART_Init+0x94>)
 8002142:	2200      	movs	r2, #0
 8002144:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002146:	4812      	ldr	r0, [pc, #72]	@ (8002190 <MX_USART1_UART_Init+0x94>)
 8002148:	f004 f846 	bl	80061d8 <HAL_UART_Init>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002152:	f000 f8fd 	bl	8002350 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002156:	2100      	movs	r1, #0
 8002158:	480d      	ldr	r0, [pc, #52]	@ (8002190 <MX_USART1_UART_Init+0x94>)
 800215a:	f006 f920 	bl	800839e <HAL_UARTEx_SetTxFifoThreshold>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002164:	f000 f8f4 	bl	8002350 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002168:	2100      	movs	r1, #0
 800216a:	4809      	ldr	r0, [pc, #36]	@ (8002190 <MX_USART1_UART_Init+0x94>)
 800216c:	f006 f955 	bl	800841a <HAL_UARTEx_SetRxFifoThreshold>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002176:	f000 f8eb 	bl	8002350 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800217a:	4805      	ldr	r0, [pc, #20]	@ (8002190 <MX_USART1_UART_Init+0x94>)
 800217c:	f006 f8d6 	bl	800832c <HAL_UARTEx_DisableFifoMode>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002186:	f000 f8e3 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000280 	.word	0x20000280
 8002194:	40013800 	.word	0x40013800

08002198 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
	...

080021a8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80021ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002218 <MX_RTC_Init+0x70>)
 80021ae:	4a1b      	ldr	r2, [pc, #108]	@ (800221c <MX_RTC_Init+0x74>)
 80021b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80021b2:	4b19      	ldr	r3, [pc, #100]	@ (8002218 <MX_RTC_Init+0x70>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80021b8:	4b17      	ldr	r3, [pc, #92]	@ (8002218 <MX_RTC_Init+0x70>)
 80021ba:	220f      	movs	r2, #15
 80021bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80021be:	4b16      	ldr	r3, [pc, #88]	@ (8002218 <MX_RTC_Init+0x70>)
 80021c0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80021c4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80021c6:	4b14      	ldr	r3, [pc, #80]	@ (8002218 <MX_RTC_Init+0x70>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80021cc:	4b12      	ldr	r3, [pc, #72]	@ (8002218 <MX_RTC_Init+0x70>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80021d2:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <MX_RTC_Init+0x70>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80021d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002218 <MX_RTC_Init+0x70>)
 80021da:	2200      	movs	r2, #0
 80021dc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021de:	480e      	ldr	r0, [pc, #56]	@ (8002218 <MX_RTC_Init+0x70>)
 80021e0:	f003 f9b4 	bl	800554c <HAL_RTC_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80021ea:	f000 f8b1 	bl	8002350 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xFFFF, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80021ee:	2200      	movs	r2, #0
 80021f0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80021f4:	4808      	ldr	r0, [pc, #32]	@ (8002218 <MX_RTC_Init+0x70>)
 80021f6:	f003 faa9 	bl	800574c <HAL_RTCEx_SetWakeUpTimer_IT>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8002200:	f000 f8a6 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  // [STM] https://community.st.com/s/question/0D53W00001K2koYSAR/hwtimerserver-hangs-on-stm32wb-w-ble
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002204:	4b04      	ldr	r3, [pc, #16]	@ (8002218 <MX_RTC_Init+0x70>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	4b03      	ldr	r3, [pc, #12]	@ (8002218 <MX_RTC_Init+0x70>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002212:	609a      	str	r2, [r3, #8]
  /* USER CODE END RTC_Init 2 */

}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20000374 	.word	0x20000374
 800221c:	40002800 	.word	0x40002800

08002220 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002226:	f107 0310 	add.w	r3, r7, #16
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	605a      	str	r2, [r3, #4]
 8002230:	609a      	str	r2, [r3, #8]
 8002232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002234:	1d3b      	adds	r3, r7, #4
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800223e:	4b1e      	ldr	r3, [pc, #120]	@ (80022b8 <MX_TIM2_Init+0x98>)
 8002240:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002244:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 8002246:	4b1c      	ldr	r3, [pc, #112]	@ (80022b8 <MX_TIM2_Init+0x98>)
 8002248:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 800224c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800224e:	4b1a      	ldr	r3, [pc, #104]	@ (80022b8 <MX_TIM2_Init+0x98>)
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8002254:	4b18      	ldr	r3, [pc, #96]	@ (80022b8 <MX_TIM2_Init+0x98>)
 8002256:	2264      	movs	r2, #100	@ 0x64
 8002258:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800225a:	4b17      	ldr	r3, [pc, #92]	@ (80022b8 <MX_TIM2_Init+0x98>)
 800225c:	2200      	movs	r2, #0
 800225e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002260:	4b15      	ldr	r3, [pc, #84]	@ (80022b8 <MX_TIM2_Init+0x98>)
 8002262:	2200      	movs	r2, #0
 8002264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002266:	4814      	ldr	r0, [pc, #80]	@ (80022b8 <MX_TIM2_Init+0x98>)
 8002268:	f003 fb62 	bl	8005930 <HAL_TIM_Base_Init>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002272:	f000 f86d 	bl	8002350 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002276:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800227a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800227c:	f107 0310 	add.w	r3, r7, #16
 8002280:	4619      	mov	r1, r3
 8002282:	480d      	ldr	r0, [pc, #52]	@ (80022b8 <MX_TIM2_Init+0x98>)
 8002284:	f003 fd19 	bl	8005cba <HAL_TIM_ConfigClockSource>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800228e:	f000 f85f 	bl	8002350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002292:	2300      	movs	r3, #0
 8002294:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	4619      	mov	r1, r3
 800229e:	4806      	ldr	r0, [pc, #24]	@ (80022b8 <MX_TIM2_Init+0x98>)
 80022a0:	f003 fefc 	bl	800609c <HAL_TIMEx_MasterConfigSynchronization>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80022aa:	f000 f851 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022ae:	bf00      	nop
 80022b0:	3720      	adds	r7, #32
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000398 	.word	0x20000398

080022bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80022c0:	2004      	movs	r0, #4
 80022c2:	f7ff fd51 	bl	8001d68 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022c6:	2002      	movs	r0, #2
 80022c8:	f7ff fd4e 	bl	8001d68 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 14, 0);
 80022cc:	2200      	movs	r2, #0
 80022ce:	210e      	movs	r1, #14
 80022d0:	203a      	movs	r0, #58	@ 0x3a
 80022d2:	f000 fd7a 	bl	8002dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80022d6:	203a      	movs	r0, #58	@ 0x3a
 80022d8:	f000 fd91 	bl	8002dfe <HAL_NVIC_EnableIRQ>

}
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}

080022e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f4:	2004      	movs	r0, #4
 80022f6:	f7ff fd50 	bl	8001d9a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fa:	2001      	movs	r0, #1
 80022fc:	f7ff fd4d 	bl	8001d9a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002300:	2002      	movs	r0, #2
 8002302:	f7ff fd4a 	bl	8001d9a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8002306:	2200      	movs	r2, #0
 8002308:	2123      	movs	r1, #35	@ 0x23
 800230a:	4810      	ldr	r0, [pc, #64]	@ (800234c <MX_GPIO_Init+0x6c>)
 800230c:	f001 fa76 	bl	80037fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 8002310:	2313      	movs	r3, #19
 8002312:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002314:	2300      	movs	r3, #0
 8002316:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002318:	2301      	movs	r3, #1
 800231a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231c:	1d3b      	adds	r3, r7, #4
 800231e:	4619      	mov	r1, r3
 8002320:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002324:	f001 f8e2 	bl	80034ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8002328:	2323      	movs	r3, #35	@ 0x23
 800232a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800232c:	2301      	movs	r3, #1
 800232e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002334:	2300      	movs	r3, #0
 8002336:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	4619      	mov	r1, r3
 800233c:	4803      	ldr	r0, [pc, #12]	@ (800234c <MX_GPIO_Init+0x6c>)
 800233e:	f001 f8d5 	bl	80034ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002342:	bf00      	nop
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	48000400 	.word	0x48000400

08002350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002354:	b672      	cpsid	i
}
 8002356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002358:	bf00      	nop
 800235a:	e7fd      	b.n	8002358 <Error_Handler+0x8>

0800235c <LL_RCC_EnableRTC>:
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002360:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002368:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800236c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002370:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <LL_AHB2_GRP1_EnableClock>:
{
 800237e:	b480      	push	{r7}
 8002380:	b085      	sub	sp, #20
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002386:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800238a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800238c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4313      	orrs	r3, r2
 8002394:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002396:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800239a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4013      	ands	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023a2:	68fb      	ldr	r3, [r7, #12]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <LL_AHB3_GRP1_EnableClock>:
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80023b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80023c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4013      	ands	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023d4:	68fb      	ldr	r3, [r7, #12]
}
 80023d6:	bf00      	nop
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <LL_APB1_GRP1_EnableClock>:
{
 80023e2:	b480      	push	{r7}
 80023e4:	b085      	sub	sp, #20
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80023ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023ee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80023f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80023fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023fe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4013      	ands	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002406:	68fb      	ldr	r3, [r7, #12]
}
 8002408:	bf00      	nop
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <LL_APB1_GRP2_EnableClock>:
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 800241c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002420:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002422:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4313      	orrs	r3, r2
 800242a:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800242c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002430:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4013      	ands	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002438:	68fb      	ldr	r3, [r7, #12]
}
 800243a:	bf00      	nop
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <LL_APB2_GRP1_EnableClock>:
{
 8002446:	b480      	push	{r7}
 8002448:	b085      	sub	sp, #20
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800244e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002452:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002454:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4313      	orrs	r3, r2
 800245c:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800245e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002462:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4013      	ands	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800246a:	68fb      	ldr	r3, [r7, #12]
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800247c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002480:	f7ff ff96 	bl	80023b0 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002484:	2200      	movs	r2, #0
 8002486:	2100      	movs	r1, #0
 8002488:	202e      	movs	r0, #46	@ 0x2e
 800248a:	f000 fc9e 	bl	8002dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800248e:	202e      	movs	r0, #46	@ 0x2e
 8002490:	f000 fcb5 	bl	8002dfe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002494:	bf00      	nop
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0d      	ldr	r2, [pc, #52]	@ (80024dc <HAL_IPCC_MspInit+0x44>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d113      	bne.n	80024d2 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80024aa:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80024ae:	f7ff ff7f 	bl	80023b0 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80024b2:	2200      	movs	r2, #0
 80024b4:	2100      	movs	r1, #0
 80024b6:	202c      	movs	r0, #44	@ 0x2c
 80024b8:	f000 fc87 	bl	8002dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80024bc:	202c      	movs	r0, #44	@ 0x2c
 80024be:	f000 fc9e 	bl	8002dfe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80024c2:	2200      	movs	r2, #0
 80024c4:	2100      	movs	r1, #0
 80024c6:	202d      	movs	r0, #45	@ 0x2d
 80024c8:	f000 fc7f 	bl	8002dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80024cc:	202d      	movs	r0, #45	@ 0x2d
 80024ce:	f000 fc96 	bl	8002dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	58000c00 	.word	0x58000c00

080024e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b09c      	sub	sp, #112	@ 0x70
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024f8:	f107 030c 	add.w	r3, r7, #12
 80024fc:	2250      	movs	r2, #80	@ 0x50
 80024fe:	2100      	movs	r1, #0
 8002500:	4618      	mov	r0, r3
 8002502:	f00b faf3 	bl	800daec <memset>
  if(huart->Instance==LPUART1)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a48      	ldr	r2, [pc, #288]	@ (800262c <HAL_UART_MspInit+0x14c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d12d      	bne.n	800256c <HAL_UART_MspInit+0x8c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002510:	2302      	movs	r3, #2
 8002512:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002514:	2300      	movs	r3, #0
 8002516:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002518:	f107 030c 	add.w	r3, r7, #12
 800251c:	4618      	mov	r0, r3
 800251e:	f002 fd8e 	bl	800503e <HAL_RCCEx_PeriphCLKConfig>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002528:	f7ff ff12 	bl	8002350 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800252c:	2001      	movs	r0, #1
 800252e:	f7ff ff71 	bl	8002414 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002532:	2001      	movs	r0, #1
 8002534:	f7ff ff23 	bl	800237e <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002538:	230c      	movs	r3, #12
 800253a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002544:	2303      	movs	r3, #3
 8002546:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002548:	2308      	movs	r3, #8
 800254a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002550:	4619      	mov	r1, r3
 8002552:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002556:	f000 ffc9 	bl	80034ec <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 13, 0);
 800255a:	2200      	movs	r2, #0
 800255c:	210d      	movs	r1, #13
 800255e:	2025      	movs	r0, #37	@ 0x25
 8002560:	f000 fc33 	bl	8002dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002564:	2025      	movs	r0, #37	@ 0x25
 8002566:	f000 fc4a 	bl	8002dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800256a:	e05a      	b.n	8002622 <HAL_UART_MspInit+0x142>
  else if(huart->Instance==USART1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a2f      	ldr	r2, [pc, #188]	@ (8002630 <HAL_UART_MspInit+0x150>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d155      	bne.n	8002622 <HAL_UART_MspInit+0x142>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002576:	2301      	movs	r3, #1
 8002578:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800257a:	2300      	movs	r3, #0
 800257c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800257e:	f107 030c 	add.w	r3, r7, #12
 8002582:	4618      	mov	r0, r3
 8002584:	f002 fd5b 	bl	800503e <HAL_RCCEx_PeriphCLKConfig>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_UART_MspInit+0xb2>
      Error_Handler();
 800258e:	f7ff fedf 	bl	8002350 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002592:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002596:	f7ff ff56 	bl	8002446 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800259a:	2002      	movs	r0, #2
 800259c:	f7ff feef 	bl	800237e <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025a0:	23c0      	movs	r3, #192	@ 0xc0
 80025a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a4:	2302      	movs	r3, #2
 80025a6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025a8:	2301      	movs	r3, #1
 80025aa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ac:	2303      	movs	r3, #3
 80025ae:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025b0:	2307      	movs	r3, #7
 80025b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80025b8:	4619      	mov	r1, r3
 80025ba:	481e      	ldr	r0, [pc, #120]	@ (8002634 <HAL_UART_MspInit+0x154>)
 80025bc:	f000 ff96 	bl	80034ec <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 80025c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002638 <HAL_UART_MspInit+0x158>)
 80025c2:	4a1e      	ldr	r2, [pc, #120]	@ (800263c <HAL_UART_MspInit+0x15c>)
 80025c4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80025c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002638 <HAL_UART_MspInit+0x158>)
 80025c8:	220f      	movs	r2, #15
 80025ca:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002638 <HAL_UART_MspInit+0x158>)
 80025ce:	2210      	movs	r2, #16
 80025d0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025d2:	4b19      	ldr	r3, [pc, #100]	@ (8002638 <HAL_UART_MspInit+0x158>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025d8:	4b17      	ldr	r3, [pc, #92]	@ (8002638 <HAL_UART_MspInit+0x158>)
 80025da:	2280      	movs	r2, #128	@ 0x80
 80025dc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025de:	4b16      	ldr	r3, [pc, #88]	@ (8002638 <HAL_UART_MspInit+0x158>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025e4:	4b14      	ldr	r3, [pc, #80]	@ (8002638 <HAL_UART_MspInit+0x158>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80025ea:	4b13      	ldr	r3, [pc, #76]	@ (8002638 <HAL_UART_MspInit+0x158>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025f0:	4b11      	ldr	r3, [pc, #68]	@ (8002638 <HAL_UART_MspInit+0x158>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80025f6:	4810      	ldr	r0, [pc, #64]	@ (8002638 <HAL_UART_MspInit+0x158>)
 80025f8:	f000 fc46 	bl	8002e88 <HAL_DMA_Init>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <HAL_UART_MspInit+0x126>
      Error_Handler();
 8002602:	f7ff fea5 	bl	8002350 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a0b      	ldr	r2, [pc, #44]	@ (8002638 <HAL_UART_MspInit+0x158>)
 800260a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800260c:	4a0a      	ldr	r2, [pc, #40]	@ (8002638 <HAL_UART_MspInit+0x158>)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 13, 0);
 8002612:	2200      	movs	r2, #0
 8002614:	210d      	movs	r1, #13
 8002616:	2024      	movs	r0, #36	@ 0x24
 8002618:	f000 fbd7 	bl	8002dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800261c:	2024      	movs	r0, #36	@ 0x24
 800261e:	f000 fbee 	bl	8002dfe <HAL_NVIC_EnableIRQ>
}
 8002622:	bf00      	nop
 8002624:	3770      	adds	r7, #112	@ 0x70
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40008000 	.word	0x40008000
 8002630:	40013800 	.word	0x40013800
 8002634:	48000400 	.word	0x48000400
 8002638:	20000314 	.word	0x20000314
 800263c:	40020444 	.word	0x40020444

08002640 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b096      	sub	sp, #88	@ 0x58
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002648:	f107 0308 	add.w	r3, r7, #8
 800264c:	2250      	movs	r2, #80	@ 0x50
 800264e:	2100      	movs	r1, #0
 8002650:	4618      	mov	r0, r3
 8002652:	f00b fa4b 	bl	800daec <memset>
  if(hrtc->Instance==RTC)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a14      	ldr	r2, [pc, #80]	@ (80026ac <HAL_RTC_MspInit+0x6c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d120      	bne.n	80026a2 <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002660:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002664:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002666:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800266a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800266c:	f107 0308 	add.w	r3, r7, #8
 8002670:	4618      	mov	r0, r3
 8002672:	f002 fce4 	bl	800503e <HAL_RCCEx_PeriphCLKConfig>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800267c:	f7ff fe68 	bl	8002350 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002680:	f7ff fe6c 	bl	800235c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002684:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002688:	f7ff feab 	bl	80023e2 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 800268c:	2200      	movs	r2, #0
 800268e:	2105      	movs	r1, #5
 8002690:	2003      	movs	r0, #3
 8002692:	f000 fb9a 	bl	8002dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002696:	2003      	movs	r0, #3
 8002698:	f000 fbb1 	bl	8002dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f003 f911 	bl	80058c4 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 80026a2:	bf00      	nop
 80026a4:	3758      	adds	r7, #88	@ 0x58
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40002800 	.word	0x40002800

080026b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026c0:	d10a      	bne.n	80026d8 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026c2:	2001      	movs	r0, #1
 80026c4:	f7ff fe8d 	bl	80023e2 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026c8:	2200      	movs	r2, #0
 80026ca:	2100      	movs	r1, #0
 80026cc:	201c      	movs	r0, #28
 80026ce:	f000 fb7c 	bl	8002dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026d2:	201c      	movs	r0, #28
 80026d4:	f000 fb93 	bl	8002dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026e4:	bf00      	nop
 80026e6:	e7fd      	b.n	80026e4 <NMI_Handler+0x4>

080026e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ec:	bf00      	nop
 80026ee:	e7fd      	b.n	80026ec <HardFault_Handler+0x4>

080026f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026f4:	bf00      	nop
 80026f6:	e7fd      	b.n	80026f4 <MemManage_Handler+0x4>

080026f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026fc:	bf00      	nop
 80026fe:	e7fd      	b.n	80026fc <BusFault_Handler+0x4>

08002700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002704:	bf00      	nop
 8002706:	e7fd      	b.n	8002704 <UsageFault_Handler+0x4>

08002708 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002716:	b480      	push	{r7}
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002736:	f000 f9d5 	bl	8002ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}

0800273e <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002742:	f7fe ff21 	bl	8001588 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002750:	4802      	ldr	r0, [pc, #8]	@ (800275c <TIM2_IRQHandler+0x10>)
 8002752:	f003 f993 	bl	8005a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000398 	.word	0x20000398

08002760 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002764:	4802      	ldr	r0, [pc, #8]	@ (8002770 <USART1_IRQHandler+0x10>)
 8002766:	f003 fee1 	bl	800652c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000280 	.word	0x20000280

08002774 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002778:	4802      	ldr	r0, [pc, #8]	@ (8002784 <LPUART1_IRQHandler+0x10>)
 800277a:	f003 fed7 	bl	800652c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	200001ec 	.word	0x200001ec

08002788 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800278c:	f00a fc9a 	bl	800d0c4 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002790:	bf00      	nop
 8002792:	bd80      	pop	{r7, pc}

08002794 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002798:	f00a fcca 	bl	800d130 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80027a4:	f001 f85c 	bl	8003860 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80027a8:	bf00      	nop
 80027aa:	bd80      	pop	{r7, pc}

080027ac <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80027b0:	4802      	ldr	r0, [pc, #8]	@ (80027bc <DMA2_Channel4_IRQHandler+0x10>)
 80027b2:	f000 fd4a 	bl	800324a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000314 	.word	0x20000314

080027c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	e00a      	b.n	80027e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027d2:	f3af 8000 	nop.w
 80027d6:	4601      	mov	r1, r0
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	60ba      	str	r2, [r7, #8]
 80027de:	b2ca      	uxtb	r2, r1
 80027e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	3301      	adds	r3, #1
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	dbf0      	blt.n	80027d2 <_read+0x12>
  }

  return len;
 80027f0:	687b      	ldr	r3, [r7, #4]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <_close>:
  }
  return len;
}

int _close(int file)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002802:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002806:	4618      	mov	r0, r3
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002822:	605a      	str	r2, [r3, #4]
  return 0;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <_isatty>:

int _isatty(int file)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800283a:	2301      	movs	r3, #1
}
 800283c:	4618      	mov	r0, r3
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
	...

08002864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800286c:	4a14      	ldr	r2, [pc, #80]	@ (80028c0 <_sbrk+0x5c>)
 800286e:	4b15      	ldr	r3, [pc, #84]	@ (80028c4 <_sbrk+0x60>)
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002878:	4b13      	ldr	r3, [pc, #76]	@ (80028c8 <_sbrk+0x64>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d102      	bne.n	8002886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002880:	4b11      	ldr	r3, [pc, #68]	@ (80028c8 <_sbrk+0x64>)
 8002882:	4a12      	ldr	r2, [pc, #72]	@ (80028cc <_sbrk+0x68>)
 8002884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002886:	4b10      	ldr	r3, [pc, #64]	@ (80028c8 <_sbrk+0x64>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4413      	add	r3, r2
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	429a      	cmp	r2, r3
 8002892:	d207      	bcs.n	80028a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002894:	f00b f932 	bl	800dafc <__errno>
 8002898:	4603      	mov	r3, r0
 800289a:	220c      	movs	r2, #12
 800289c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800289e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028a2:	e009      	b.n	80028b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028a4:	4b08      	ldr	r3, [pc, #32]	@ (80028c8 <_sbrk+0x64>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028aa:	4b07      	ldr	r3, [pc, #28]	@ (80028c8 <_sbrk+0x64>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4413      	add	r3, r2
 80028b2:	4a05      	ldr	r2, [pc, #20]	@ (80028c8 <_sbrk+0x64>)
 80028b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028b6:	68fb      	ldr	r3, [r7, #12]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20030000 	.word	0x20030000
 80028c4:	00001000 	.word	0x00001000
 80028c8:	200003e4 	.word	0x200003e4
 80028cc:	20001748 	.word	0x20001748

080028d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80028d4:	4b26      	ldr	r3, [pc, #152]	@ (8002970 <SystemInit+0xa0>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80028da:	4b25      	ldr	r3, [pc, #148]	@ (8002970 <SystemInit+0xa0>)
 80028dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e0:	4a23      	ldr	r2, [pc, #140]	@ (8002970 <SystemInit+0xa0>)
 80028e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028e6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80028ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80028fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028fe:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8002902:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800290e:	4b19      	ldr	r3, [pc, #100]	@ (8002974 <SystemInit+0xa4>)
 8002910:	4013      	ands	r3, r2
 8002912:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002914:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002918:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800291c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002920:	f023 0305 	bic.w	r3, r3, #5
 8002924:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002928:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800292c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002930:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800293c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002940:	4a0d      	ldr	r2, [pc, #52]	@ (8002978 <SystemInit+0xa8>)
 8002942:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002944:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002948:	4a0b      	ldr	r2, [pc, #44]	@ (8002978 <SystemInit+0xa8>)
 800294a:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800294c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002956:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800295a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800295c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002960:	2200      	movs	r2, #0
 8002962:	619a      	str	r2, [r3, #24]
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	e000ed00 	.word	0xe000ed00
 8002974:	faf6fefb 	.word	0xfaf6fefb
 8002978:	22041000 	.word	0x22041000

0800297c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800297c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800297e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002980:	3304      	adds	r3, #4

08002982 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002982:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002984:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002986:	d3f9      	bcc.n	800297c <CopyDataInit>
  bx lr
 8002988:	4770      	bx	lr

0800298a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800298a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800298c:	3004      	adds	r0, #4

0800298e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800298e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002990:	d3fb      	bcc.n	800298a <FillZerobss>
  bx lr
 8002992:	4770      	bx	lr

08002994 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002994:	480c      	ldr	r0, [pc, #48]	@ (80029c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002996:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002998:	f7ff ff9a 	bl	80028d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800299c:	480b      	ldr	r0, [pc, #44]	@ (80029cc <LoopForever+0x6>)
 800299e:	490c      	ldr	r1, [pc, #48]	@ (80029d0 <LoopForever+0xa>)
 80029a0:	4a0c      	ldr	r2, [pc, #48]	@ (80029d4 <LoopForever+0xe>)
 80029a2:	2300      	movs	r3, #0
 80029a4:	f7ff ffed 	bl	8002982 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80029a8:	480b      	ldr	r0, [pc, #44]	@ (80029d8 <LoopForever+0x12>)
 80029aa:	490c      	ldr	r1, [pc, #48]	@ (80029dc <LoopForever+0x16>)
 80029ac:	4a0c      	ldr	r2, [pc, #48]	@ (80029e0 <LoopForever+0x1a>)
 80029ae:	2300      	movs	r3, #0
 80029b0:	f7ff ffe7 	bl	8002982 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80029b4:	480b      	ldr	r0, [pc, #44]	@ (80029e4 <LoopForever+0x1e>)
 80029b6:	490c      	ldr	r1, [pc, #48]	@ (80029e8 <LoopForever+0x22>)
 80029b8:	2300      	movs	r3, #0
 80029ba:	f7ff ffe8 	bl	800298e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80029be:	f00b f8a3 	bl	800db08 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80029c2:	f7ff fa9d 	bl	8001f00 <main>

080029c6 <LoopForever>:

LoopForever:
  b LoopForever
 80029c6:	e7fe      	b.n	80029c6 <LoopForever>
  ldr   r0, =_estack
 80029c8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80029cc:	20000008 	.word	0x20000008
 80029d0:	20000090 	.word	0x20000090
 80029d4:	08010034 	.word	0x08010034
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80029d8:	200301e4 	.word	0x200301e4
 80029dc:	20030a67 	.word	0x20030a67
 80029e0:	08010110 	.word	0x08010110
  INIT_BSS _sbss, _ebss
 80029e4:	200000ec 	.word	0x200000ec
 80029e8:	20001744 	.word	0x20001744

080029ec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029ec:	e7fe      	b.n	80029ec <ADC1_IRQHandler>
	...

080029f0 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80029f4:	4b05      	ldr	r3, [pc, #20]	@ (8002a0c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4a04      	ldr	r2, [pc, #16]	@ (8002a0c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	6053      	str	r3, [r2, #4]
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	e0042000 	.word	0xe0042000

08002a10 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002a14:	4b05      	ldr	r3, [pc, #20]	@ (8002a2c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	4a04      	ldr	r2, [pc, #16]	@ (8002a2c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002a1a:	f043 0302 	orr.w	r3, r3, #2
 8002a1e:	6053      	str	r3, [r2, #4]
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	e0042000 	.word	0xe0042000

08002a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a6c <HAL_Init+0x3c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a0b      	ldr	r2, [pc, #44]	@ (8002a6c <HAL_Init+0x3c>)
 8002a40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a44:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a46:	2003      	movs	r0, #3
 8002a48:	f000 f9b4 	bl	8002db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a4c:	200f      	movs	r0, #15
 8002a4e:	f000 f80f 	bl	8002a70 <HAL_InitTick>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d002      	beq.n	8002a5e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	71fb      	strb	r3, [r7, #7]
 8002a5c:	e001      	b.n	8002a62 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a5e:	f7ff fd0b 	bl	8002478 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a62:	79fb      	ldrb	r3, [r7, #7]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	58004000 	.word	0x58004000

08002a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002a7c:	4b17      	ldr	r3, [pc, #92]	@ (8002adc <HAL_InitTick+0x6c>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d024      	beq.n	8002ace <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002a84:	f002 f84a 	bl	8004b1c <HAL_RCC_GetHCLKFreq>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	4b14      	ldr	r3, [pc, #80]	@ (8002adc <HAL_InitTick+0x6c>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	4619      	mov	r1, r3
 8002a90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a94:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 f9ca 	bl	8002e36 <HAL_SYSTICK_Config>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10f      	bne.n	8002ac8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b0f      	cmp	r3, #15
 8002aac:	d809      	bhi.n	8002ac2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aae:	2200      	movs	r2, #0
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ab6:	f000 f988 	bl	8002dca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002aba:	4a09      	ldr	r2, [pc, #36]	@ (8002ae0 <HAL_InitTick+0x70>)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	e007      	b.n	8002ad2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
 8002ac6:	e004      	b.n	8002ad2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
 8002acc:	e001      	b.n	8002ad2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20000028 	.word	0x20000028
 8002ae0:	20000024 	.word	0x20000024

08002ae4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ae8:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <HAL_IncTick+0x20>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <HAL_IncTick+0x24>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4413      	add	r3, r2
 8002af4:	4a04      	ldr	r2, [pc, #16]	@ (8002b08 <HAL_IncTick+0x24>)
 8002af6:	6013      	str	r3, [r2, #0]
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20000028 	.word	0x20000028
 8002b08:	200003e8 	.word	0x200003e8

08002b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b10:	4b03      	ldr	r3, [pc, #12]	@ (8002b20 <HAL_GetTick+0x14>)
 8002b12:	681b      	ldr	r3, [r3, #0]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	200003e8 	.word	0x200003e8

08002b24 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002b28:	4b03      	ldr	r3, [pc, #12]	@ (8002b38 <HAL_GetTickPrio+0x14>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	20000024 	.word	0x20000024

08002b3c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002b40:	f7ff ff56 	bl	80029f0 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002b44:	bf00      	nop
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002b4c:	f7ff ff60 	bl	8002a10 <LL_DBGMCU_EnableDBGStopMode>
}
 8002b50:	bf00      	nop
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b64:	4b0c      	ldr	r3, [pc, #48]	@ (8002b98 <__NVIC_SetPriorityGrouping+0x44>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b70:	4013      	ands	r3, r2
 8002b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b86:	4a04      	ldr	r2, [pc, #16]	@ (8002b98 <__NVIC_SetPriorityGrouping+0x44>)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	60d3      	str	r3, [r2, #12]
}
 8002b8c:	bf00      	nop
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ba0:	4b04      	ldr	r3, [pc, #16]	@ (8002bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	0a1b      	lsrs	r3, r3, #8
 8002ba6:	f003 0307 	and.w	r3, r3, #7
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	e000ed00 	.word	0xe000ed00

08002bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	db0b      	blt.n	8002be2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	f003 021f 	and.w	r2, r3, #31
 8002bd0:	4907      	ldr	r1, [pc, #28]	@ (8002bf0 <__NVIC_EnableIRQ+0x38>)
 8002bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	2001      	movs	r0, #1
 8002bda:	fa00 f202 	lsl.w	r2, r0, r2
 8002bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	e000e100 	.word	0xe000e100

08002bf4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	db12      	blt.n	8002c2c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	f003 021f 	and.w	r2, r3, #31
 8002c0c:	490a      	ldr	r1, [pc, #40]	@ (8002c38 <__NVIC_DisableIRQ+0x44>)
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	2001      	movs	r0, #1
 8002c16:	fa00 f202 	lsl.w	r2, r0, r2
 8002c1a:	3320      	adds	r3, #32
 8002c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c20:	f3bf 8f4f 	dsb	sy
}
 8002c24:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c26:	f3bf 8f6f 	isb	sy
}
 8002c2a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	e000e100 	.word	0xe000e100

08002c3c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	db0c      	blt.n	8002c68 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	f003 021f 	and.w	r2, r3, #31
 8002c54:	4907      	ldr	r1, [pc, #28]	@ (8002c74 <__NVIC_SetPendingIRQ+0x38>)
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c62:	3340      	adds	r3, #64	@ 0x40
 8002c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	e000e100 	.word	0xe000e100

08002c78 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	db0c      	blt.n	8002ca4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	f003 021f 	and.w	r2, r3, #31
 8002c90:	4907      	ldr	r1, [pc, #28]	@ (8002cb0 <__NVIC_ClearPendingIRQ+0x38>)
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	095b      	lsrs	r3, r3, #5
 8002c98:	2001      	movs	r0, #1
 8002c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c9e:	3360      	adds	r3, #96	@ 0x60
 8002ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	e000e100 	.word	0xe000e100

08002cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	6039      	str	r1, [r7, #0]
 8002cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	db0a      	blt.n	8002cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	490c      	ldr	r1, [pc, #48]	@ (8002d00 <__NVIC_SetPriority+0x4c>)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	0112      	lsls	r2, r2, #4
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cdc:	e00a      	b.n	8002cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	4908      	ldr	r1, [pc, #32]	@ (8002d04 <__NVIC_SetPriority+0x50>)
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	3b04      	subs	r3, #4
 8002cec:	0112      	lsls	r2, r2, #4
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	761a      	strb	r2, [r3, #24]
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	e000e100 	.word	0xe000e100
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b089      	sub	sp, #36	@ 0x24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f1c3 0307 	rsb	r3, r3, #7
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	bf28      	it	cs
 8002d26:	2304      	movcs	r3, #4
 8002d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	2b06      	cmp	r3, #6
 8002d30:	d902      	bls.n	8002d38 <NVIC_EncodePriority+0x30>
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	3b03      	subs	r3, #3
 8002d36:	e000      	b.n	8002d3a <NVIC_EncodePriority+0x32>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43da      	mvns	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	401a      	ands	r2, r3
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d50:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5a:	43d9      	mvns	r1, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d60:	4313      	orrs	r3, r2
         );
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3724      	adds	r7, #36	@ 0x24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d80:	d301      	bcc.n	8002d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d82:	2301      	movs	r3, #1
 8002d84:	e00f      	b.n	8002da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d86:	4a0a      	ldr	r2, [pc, #40]	@ (8002db0 <SysTick_Config+0x40>)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d8e:	210f      	movs	r1, #15
 8002d90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d94:	f7ff ff8e 	bl	8002cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d98:	4b05      	ldr	r3, [pc, #20]	@ (8002db0 <SysTick_Config+0x40>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d9e:	4b04      	ldr	r3, [pc, #16]	@ (8002db0 <SysTick_Config+0x40>)
 8002da0:	2207      	movs	r2, #7
 8002da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	e000e010 	.word	0xe000e010

08002db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff fec9 	bl	8002b54 <__NVIC_SetPriorityGrouping>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b086      	sub	sp, #24
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	607a      	str	r2, [r7, #4]
 8002dd6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002dd8:	f7ff fee0 	bl	8002b9c <__NVIC_GetPriorityGrouping>
 8002ddc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	68b9      	ldr	r1, [r7, #8]
 8002de2:	6978      	ldr	r0, [r7, #20]
 8002de4:	f7ff ff90 	bl	8002d08 <NVIC_EncodePriority>
 8002de8:	4602      	mov	r2, r0
 8002dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dee:	4611      	mov	r1, r2
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff ff5f 	bl	8002cb4 <__NVIC_SetPriority>
}
 8002df6:	bf00      	nop
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	4603      	mov	r3, r0
 8002e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff fed3 	bl	8002bb8 <__NVIC_EnableIRQ>
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4603      	mov	r3, r0
 8002e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff fee3 	bl	8002bf4 <__NVIC_DisableIRQ>
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff ff96 	bl	8002d70 <SysTick_Config>
 8002e44:	4603      	mov	r3, r0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	4603      	mov	r3, r0
 8002e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff feed 	bl	8002c3c <__NVIC_SetPendingIRQ>
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	4603      	mov	r3, r0
 8002e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff fefd 	bl	8002c78 <__NVIC_ClearPendingIRQ>
}
 8002e7e:	bf00      	nop
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e08e      	b.n	8002fb8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4b47      	ldr	r3, [pc, #284]	@ (8002fc0 <HAL_DMA_Init+0x138>)
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d80f      	bhi.n	8002ec6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	4b45      	ldr	r3, [pc, #276]	@ (8002fc4 <HAL_DMA_Init+0x13c>)
 8002eae:	4413      	add	r3, r2
 8002eb0:	4a45      	ldr	r2, [pc, #276]	@ (8002fc8 <HAL_DMA_Init+0x140>)
 8002eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb6:	091b      	lsrs	r3, r3, #4
 8002eb8:	009a      	lsls	r2, r3, #2
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a42      	ldr	r2, [pc, #264]	@ (8002fcc <HAL_DMA_Init+0x144>)
 8002ec2:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ec4:	e00e      	b.n	8002ee4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4b40      	ldr	r3, [pc, #256]	@ (8002fd0 <HAL_DMA_Init+0x148>)
 8002ece:	4413      	add	r3, r2
 8002ed0:	4a3d      	ldr	r2, [pc, #244]	@ (8002fc8 <HAL_DMA_Init+0x140>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	091b      	lsrs	r3, r3, #4
 8002ed8:	009a      	lsls	r2, r3, #2
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a3c      	ldr	r2, [pc, #240]	@ (8002fd4 <HAL_DMA_Init+0x14c>)
 8002ee2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002efe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002f08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fa74 	bl	8003424 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f44:	d102      	bne.n	8002f4c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f54:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002f58:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f62:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d010      	beq.n	8002f8e <HAL_DMA_Init+0x106>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d80c      	bhi.n	8002f8e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 fa93 	bl	80034a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002f8a:	605a      	str	r2, [r3, #4]
 8002f8c:	e008      	b.n	8002fa0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40020407 	.word	0x40020407
 8002fc4:	bffdfff8 	.word	0xbffdfff8
 8002fc8:	cccccccd 	.word	0xcccccccd
 8002fcc:	40020000 	.word	0x40020000
 8002fd0:	bffdfbf8 	.word	0xbffdfbf8
 8002fd4:	40020400 	.word	0x40020400

08002fd8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_DMA_Start_IT+0x20>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e066      	b.n	80030c6 <HAL_DMA_Start_IT+0xee>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b01      	cmp	r3, #1
 800300a:	d155      	bne.n	80030b8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0201 	bic.w	r2, r2, #1
 8003028:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	68b9      	ldr	r1, [r7, #8]
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 f9b9 	bl	80033a8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303a:	2b00      	cmp	r3, #0
 800303c:	d008      	beq.n	8003050 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 020e 	orr.w	r2, r2, #14
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	e00f      	b.n	8003070 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0204 	bic.w	r2, r2, #4
 800305e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 020a 	orr.w	r2, r2, #10
 800306e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d007      	beq.n	800308e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003088:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800308c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003092:	2b00      	cmp	r3, #0
 8003094:	d007      	beq.n	80030a6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030a4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 0201 	orr.w	r2, r2, #1
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	e005      	b.n	80030c4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80030c0:	2302      	movs	r3, #2
 80030c2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80030c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e04f      	b.n	8003180 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d008      	beq.n	80030fe <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2204      	movs	r2, #4
 80030f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e040      	b.n	8003180 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 020e 	bic.w	r2, r2, #14
 800310c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003118:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800311c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0201 	bic.w	r2, r2, #1
 800312c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003132:	f003 021c 	and.w	r2, r3, #28
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	2101      	movs	r1, #1
 800313c:	fa01 f202 	lsl.w	r2, r1, r2
 8003140:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800314a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00c      	beq.n	800316e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800315e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003162:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800316c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d005      	beq.n	80031b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2204      	movs	r2, #4
 80031a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	73fb      	strb	r3, [r7, #15]
 80031ae:	e047      	b.n	8003240 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 020e 	bic.w	r2, r2, #14
 80031be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0201 	bic.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e4:	f003 021c 	and.w	r2, r3, #28
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ec:	2101      	movs	r1, #1
 80031ee:	fa01 f202 	lsl.w	r2, r1, r2
 80031f2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00c      	beq.n	8003220 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003210:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003214:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800321e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	4798      	blx	r3
    }
  }
  return status;
 8003240:	7bfb      	ldrb	r3, [r7, #15]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b084      	sub	sp, #16
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003266:	f003 031c 	and.w	r3, r3, #28
 800326a:	2204      	movs	r2, #4
 800326c:	409a      	lsls	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4013      	ands	r3, r2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d026      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x7a>
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d021      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0320 	and.w	r3, r3, #32
 800328a:	2b00      	cmp	r3, #0
 800328c:	d107      	bne.n	800329e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0204 	bic.w	r2, r2, #4
 800329c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a2:	f003 021c 	and.w	r2, r3, #28
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032aa:	2104      	movs	r1, #4
 80032ac:	fa01 f202 	lsl.w	r2, r1, r2
 80032b0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d071      	beq.n	800339e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80032c2:	e06c      	b.n	800339e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c8:	f003 031c 	and.w	r3, r3, #28
 80032cc:	2202      	movs	r2, #2
 80032ce:	409a      	lsls	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d02e      	beq.n	8003336 <HAL_DMA_IRQHandler+0xec>
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d029      	beq.n	8003336 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0320 	and.w	r3, r3, #32
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10b      	bne.n	8003308 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 020a 	bic.w	r2, r2, #10
 80032fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330c:	f003 021c 	and.w	r2, r3, #28
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003314:	2102      	movs	r1, #2
 8003316:	fa01 f202 	lsl.w	r2, r1, r2
 800331a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003328:	2b00      	cmp	r3, #0
 800332a:	d038      	beq.n	800339e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003334:	e033      	b.n	800339e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333a:	f003 031c 	and.w	r3, r3, #28
 800333e:	2208      	movs	r2, #8
 8003340:	409a      	lsls	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4013      	ands	r3, r2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d02a      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x156>
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b00      	cmp	r3, #0
 8003352:	d025      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 020e 	bic.w	r2, r2, #14
 8003362:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003368:	f003 021c 	and.w	r2, r3, #28
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003370:	2101      	movs	r1, #1
 8003372:	fa01 f202 	lsl.w	r2, r1, r2
 8003376:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003392:	2b00      	cmp	r3, #0
 8003394:	d004      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800339e:	bf00      	nop
 80033a0:	bf00      	nop
}
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80033be:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d004      	beq.n	80033d2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80033d0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d6:	f003 021c 	and.w	r2, r3, #28
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	2101      	movs	r1, #1
 80033e0:	fa01 f202 	lsl.w	r2, r1, r2
 80033e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b10      	cmp	r3, #16
 80033f4:	d108      	bne.n	8003408 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003406:	e007      	b.n	8003418 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	60da      	str	r2, [r3, #12]
}
 8003418:	bf00      	nop
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	461a      	mov	r2, r3
 8003432:	4b17      	ldr	r3, [pc, #92]	@ (8003490 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003434:	429a      	cmp	r2, r3
 8003436:	d80a      	bhi.n	800344e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343c:	089b      	lsrs	r3, r3, #2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003444:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6493      	str	r3, [r2, #72]	@ 0x48
 800344c:	e007      	b.n	800345e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003452:	089b      	lsrs	r3, r3, #2
 8003454:	009a      	lsls	r2, r3, #2
 8003456:	4b0f      	ldr	r3, [pc, #60]	@ (8003494 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003458:	4413      	add	r3, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	b2db      	uxtb	r3, r3
 8003464:	3b08      	subs	r3, #8
 8003466:	4a0c      	ldr	r2, [pc, #48]	@ (8003498 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003468:	fba2 2303 	umull	r2, r3, r2, r3
 800346c:	091b      	lsrs	r3, r3, #4
 800346e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a0a      	ldr	r2, [pc, #40]	@ (800349c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003474:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f003 031f 	and.w	r3, r3, #31
 800347c:	2201      	movs	r2, #1
 800347e:	409a      	lsls	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003484:	bf00      	nop
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	40020407 	.word	0x40020407
 8003494:	4002081c 	.word	0x4002081c
 8003498:	cccccccd 	.word	0xcccccccd
 800349c:	40020880 	.word	0x40020880

080034a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034b0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4b0b      	ldr	r3, [pc, #44]	@ (80034e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	461a      	mov	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a09      	ldr	r2, [pc, #36]	@ (80034e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80034c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	3b01      	subs	r3, #1
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	2201      	movs	r2, #1
 80034d0:	409a      	lsls	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80034d6:	bf00      	nop
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	1000823f 	.word	0x1000823f
 80034e8:	40020940 	.word	0x40020940

080034ec <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034fa:	e14c      	b.n	8003796 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	2101      	movs	r1, #1
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	fa01 f303 	lsl.w	r3, r1, r3
 8003508:	4013      	ands	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 813e 	beq.w	8003790 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	2b01      	cmp	r3, #1
 800351e:	d005      	beq.n	800352c <HAL_GPIO_Init+0x40>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d130      	bne.n	800358e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	2203      	movs	r2, #3
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4013      	ands	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003562:	2201      	movs	r2, #1
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43db      	mvns	r3, r3
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4013      	ands	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	091b      	lsrs	r3, r3, #4
 8003578:	f003 0201 	and.w	r2, r3, #1
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	2b03      	cmp	r3, #3
 8003598:	d017      	beq.n	80035ca <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	2203      	movs	r2, #3
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43db      	mvns	r3, r3
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	4013      	ands	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d123      	bne.n	800361e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	08da      	lsrs	r2, r3, #3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3208      	adds	r2, #8
 80035de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	220f      	movs	r2, #15
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43db      	mvns	r3, r3
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4013      	ands	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	691a      	ldr	r2, [r3, #16]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	08da      	lsrs	r2, r3, #3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3208      	adds	r2, #8
 8003618:	6939      	ldr	r1, [r7, #16]
 800361a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	2203      	movs	r2, #3
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4013      	ands	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f003 0203 	and.w	r2, r3, #3
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 8098 	beq.w	8003790 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003660:	4a54      	ldr	r2, [pc, #336]	@ (80037b4 <HAL_GPIO_Init+0x2c8>)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	089b      	lsrs	r3, r3, #2
 8003666:	3302      	adds	r3, #2
 8003668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800366c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	220f      	movs	r2, #15
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4013      	ands	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800368a:	d019      	beq.n	80036c0 <HAL_GPIO_Init+0x1d4>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a4a      	ldr	r2, [pc, #296]	@ (80037b8 <HAL_GPIO_Init+0x2cc>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d013      	beq.n	80036bc <HAL_GPIO_Init+0x1d0>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a49      	ldr	r2, [pc, #292]	@ (80037bc <HAL_GPIO_Init+0x2d0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d00d      	beq.n	80036b8 <HAL_GPIO_Init+0x1cc>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a48      	ldr	r2, [pc, #288]	@ (80037c0 <HAL_GPIO_Init+0x2d4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d007      	beq.n	80036b4 <HAL_GPIO_Init+0x1c8>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a47      	ldr	r2, [pc, #284]	@ (80037c4 <HAL_GPIO_Init+0x2d8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d101      	bne.n	80036b0 <HAL_GPIO_Init+0x1c4>
 80036ac:	2304      	movs	r3, #4
 80036ae:	e008      	b.n	80036c2 <HAL_GPIO_Init+0x1d6>
 80036b0:	2307      	movs	r3, #7
 80036b2:	e006      	b.n	80036c2 <HAL_GPIO_Init+0x1d6>
 80036b4:	2303      	movs	r3, #3
 80036b6:	e004      	b.n	80036c2 <HAL_GPIO_Init+0x1d6>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e002      	b.n	80036c2 <HAL_GPIO_Init+0x1d6>
 80036bc:	2301      	movs	r3, #1
 80036be:	e000      	b.n	80036c2 <HAL_GPIO_Init+0x1d6>
 80036c0:	2300      	movs	r3, #0
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	f002 0203 	and.w	r2, r2, #3
 80036c8:	0092      	lsls	r2, r2, #2
 80036ca:	4093      	lsls	r3, r2
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036d2:	4938      	ldr	r1, [pc, #224]	@ (80037b4 <HAL_GPIO_Init+0x2c8>)
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	089b      	lsrs	r3, r3, #2
 80036d8:	3302      	adds	r3, #2
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036e0:	4b39      	ldr	r3, [pc, #228]	@ (80037c8 <HAL_GPIO_Init+0x2dc>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	43db      	mvns	r3, r3
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4013      	ands	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	4313      	orrs	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003704:	4a30      	ldr	r2, [pc, #192]	@ (80037c8 <HAL_GPIO_Init+0x2dc>)
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800370a:	4b2f      	ldr	r3, [pc, #188]	@ (80037c8 <HAL_GPIO_Init+0x2dc>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	43db      	mvns	r3, r3
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	4013      	ands	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4313      	orrs	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800372e:	4a26      	ldr	r2, [pc, #152]	@ (80037c8 <HAL_GPIO_Init+0x2dc>)
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003734:	4b24      	ldr	r3, [pc, #144]	@ (80037c8 <HAL_GPIO_Init+0x2dc>)
 8003736:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800373a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	43db      	mvns	r3, r3
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4013      	ands	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800375a:	4a1b      	ldr	r2, [pc, #108]	@ (80037c8 <HAL_GPIO_Init+0x2dc>)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8003762:	4b19      	ldr	r3, [pc, #100]	@ (80037c8 <HAL_GPIO_Init+0x2dc>)
 8003764:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	43db      	mvns	r3, r3
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4013      	ands	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4313      	orrs	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003788:	4a0f      	ldr	r2, [pc, #60]	@ (80037c8 <HAL_GPIO_Init+0x2dc>)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	3301      	adds	r3, #1
 8003794:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f47f aeab 	bne.w	80034fc <HAL_GPIO_Init+0x10>
  }
}
 80037a6:	bf00      	nop
 80037a8:	bf00      	nop
 80037aa:	371c      	adds	r7, #28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	40010000 	.word	0x40010000
 80037b8:	48000400 	.word	0x48000400
 80037bc:	48000800 	.word	0x48000800
 80037c0:	48000c00 	.word	0x48000c00
 80037c4:	48001000 	.word	0x48001000
 80037c8:	58000800 	.word	0x58000800

080037cc <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	887b      	ldrh	r3, [r7, #2]
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037e4:	2301      	movs	r3, #1
 80037e6:	73fb      	strb	r3, [r7, #15]
 80037e8:	e001      	b.n	80037ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037ea:	2300      	movs	r3, #0
 80037ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	807b      	strh	r3, [r7, #2]
 8003808:	4613      	mov	r3, r2
 800380a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800380c:	787b      	ldrb	r3, [r7, #1]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003812:	887a      	ldrh	r2, [r7, #2]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003818:	e002      	b.n	8003820 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800381a:	887a      	ldrh	r2, [r7, #2]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800383e:	887a      	ldrh	r2, [r7, #2]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4013      	ands	r3, r2
 8003844:	041a      	lsls	r2, r3, #16
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	43d9      	mvns	r1, r3
 800384a:	887b      	ldrh	r3, [r7, #2]
 800384c:	400b      	ands	r3, r1
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	619a      	str	r2, [r3, #24]
}
 8003854:	bf00      	nop
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003866:	4b0a      	ldr	r3, [pc, #40]	@ (8003890 <HAL_HSEM_IRQHandler+0x30>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800386c:	4b08      	ldr	r3, [pc, #32]	@ (8003890 <HAL_HSEM_IRQHandler+0x30>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	43db      	mvns	r3, r3
 8003874:	4906      	ldr	r1, [pc, #24]	@ (8003890 <HAL_HSEM_IRQHandler+0x30>)
 8003876:	4013      	ands	r3, r2
 8003878:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800387a:	4a05      	ldr	r2, [pc, #20]	@ (8003890 <HAL_HSEM_IRQHandler+0x30>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f807 	bl	8003894 <HAL_HSEM_FreeCallback>
}
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	58001500 	.word	0x58001500

08003894 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d01e      	beq.n	80038f8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80038ba:	4b13      	ldr	r3, [pc, #76]	@ (8003908 <HAL_IPCC_Init+0x60>)
 80038bc:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d102      	bne.n	80038d0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fe fde4 	bl	8002498 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80038d0:	68b8      	ldr	r0, [r7, #8]
 80038d2:	f000 f85b 	bl	800398c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f82c 	bl	8003940 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80038f6:	e001      	b.n	80038fc <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	58000c00 	.word	0x58000c00

0800390c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	4613      	mov	r3, r2
 8003918:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800391a:	bf00      	nop
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003926:	b480      	push	{r7}
 8003928:	b085      	sub	sp, #20
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	4613      	mov	r3, r2
 8003932:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003948:	2300      	movs	r3, #0
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	e00f      	b.n	800396e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	4a0b      	ldr	r2, [pc, #44]	@ (8003984 <IPCC_SetDefaultCallbacks+0x44>)
 8003958:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	3306      	adds	r3, #6
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	4a08      	ldr	r2, [pc, #32]	@ (8003988 <IPCC_SetDefaultCallbacks+0x48>)
 8003966:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	3301      	adds	r3, #1
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2b05      	cmp	r3, #5
 8003972:	d9ec      	bls.n	800394e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	0800390d 	.word	0x0800390d
 8003988:	08003927 	.word	0x08003927

0800398c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 80039a0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	223f      	movs	r2, #63	@ 0x3f
 80039a6:	609a      	str	r2, [r3, #8]
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039b8:	4b05      	ldr	r3, [pc, #20]	@ (80039d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a04      	ldr	r2, [pc, #16]	@ (80039d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039c2:	6013      	str	r3, [r2, #0]
}
 80039c4:	bf00      	nop
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	58000400 	.word	0x58000400

080039d4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80039d8:	4b04      	ldr	r3, [pc, #16]	@ (80039ec <HAL_PWREx_GetVoltageRange+0x18>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	58000400 	.word	0x58000400

080039f0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80039f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a02:	d101      	bne.n	8003a08 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003a04:	2301      	movs	r3, #1
 8003a06:	e000      	b.n	8003a0a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <LL_RCC_HSE_Enable>:
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003a18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a26:	6013      	str	r3, [r2, #0]
}
 8003a28:	bf00      	nop
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <LL_RCC_HSE_Disable>:
{
 8003a32:	b480      	push	{r7}
 8003a34:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003a36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a44:	6013      	str	r3, [r2, #0]
}
 8003a46:	bf00      	nop
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <LL_RCC_HSE_IsReady>:
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003a54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a62:	d101      	bne.n	8003a68 <LL_RCC_HSE_IsReady+0x18>
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <LL_RCC_HSE_IsReady+0x1a>
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <LL_RCC_HSI_Enable>:
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003a78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a86:	6013      	str	r3, [r2, #0]
}
 8003a88:	bf00      	nop
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <LL_RCC_HSI_Disable>:
{
 8003a92:	b480      	push	{r7}
 8003a94:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003a96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003aa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003aa4:	6013      	str	r3, [r2, #0]
}
 8003aa6:	bf00      	nop
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <LL_RCC_HSI_IsReady>:
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003ab4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ac2:	d101      	bne.n	8003ac8 <LL_RCC_HSI_IsReady+0x18>
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e000      	b.n	8003aca <LL_RCC_HSI_IsReady+0x1a>
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003adc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	061b      	lsls	r3, r3, #24
 8003aea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003aee:	4313      	orrs	r3, r2
 8003af0:	604b      	str	r3, [r1, #4]
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <LL_RCC_HSI48_Enable>:
{
 8003afe:	b480      	push	{r7}
 8003b00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003b02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003b16:	bf00      	nop
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <LL_RCC_HSI48_Disable>:
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003b24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b30:	f023 0301 	bic.w	r3, r3, #1
 8003b34:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003b38:	bf00      	nop
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <LL_RCC_HSI48_IsReady>:
{
 8003b42:	b480      	push	{r7}
 8003b44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d101      	bne.n	8003b5a <LL_RCC_HSI48_IsReady+0x18>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <LL_RCC_HSI48_IsReady+0x1a>
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <LL_RCC_LSE_Enable>:
{
 8003b66:	b480      	push	{r7}
 8003b68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b76:	f043 0301 	orr.w	r3, r3, #1
 8003b7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003b7e:	bf00      	nop
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <LL_RCC_LSE_Disable>:
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b98:	f023 0301 	bic.w	r3, r3, #1
 8003b9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003ba0:	bf00      	nop
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <LL_RCC_LSE_EnableBypass>:
{
 8003baa:	b480      	push	{r7}
 8003bac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003bae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bba:	f043 0304 	orr.w	r3, r3, #4
 8003bbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003bc2:	bf00      	nop
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <LL_RCC_LSE_DisableBypass>:
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bdc:	f023 0304 	bic.w	r3, r3, #4
 8003be0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003be4:	bf00      	nop
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <LL_RCC_LSE_IsReady>:
{
 8003bee:	b480      	push	{r7}
 8003bf0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003bf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d101      	bne.n	8003c06 <LL_RCC_LSE_IsReady+0x18>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <LL_RCC_LSE_IsReady+0x1a>
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <LL_RCC_LSI1_Enable>:
{
 8003c12:	b480      	push	{r7}
 8003c14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003c16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c22:	f043 0301 	orr.w	r3, r3, #1
 8003c26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003c2a:	bf00      	nop
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <LL_RCC_LSI1_Disable>:
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003c38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003c4c:	bf00      	nop
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <LL_RCC_LSI1_IsReady>:
{
 8003c56:	b480      	push	{r7}
 8003c58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003c5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d101      	bne.n	8003c6e <LL_RCC_LSI1_IsReady+0x18>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <LL_RCC_LSI1_IsReady+0x1a>
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <LL_RCC_LSI2_Enable>:
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003c7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c8a:	f043 0304 	orr.w	r3, r3, #4
 8003c8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003c92:	bf00      	nop
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <LL_RCC_LSI2_Disable>:
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ca8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cac:	f023 0304 	bic.w	r3, r3, #4
 8003cb0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003cb4:	bf00      	nop
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <LL_RCC_LSI2_IsReady>:
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003cc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d101      	bne.n	8003cd6 <LL_RCC_LSI2_IsReady+0x18>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <LL_RCC_LSI2_IsReady+0x1a>
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <LL_RCC_LSI2_SetTrimming>:
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003cea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cf2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	021b      	lsls	r3, r3, #8
 8003cfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <LL_RCC_MSI_Enable>:
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003d14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d1e:	f043 0301 	orr.w	r3, r3, #1
 8003d22:	6013      	str	r3, [r2, #0]
}
 8003d24:	bf00      	nop
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <LL_RCC_MSI_Disable>:
{
 8003d2e:	b480      	push	{r7}
 8003d30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003d32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d3c:	f023 0301 	bic.w	r3, r3, #1
 8003d40:	6013      	str	r3, [r2, #0]
}
 8003d42:	bf00      	nop
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <LL_RCC_MSI_IsReady>:
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003d50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d101      	bne.n	8003d62 <LL_RCC_MSI_IsReady+0x16>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <LL_RCC_MSI_IsReady+0x18>
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <LL_RCC_MSI_SetRange>:
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003d76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d80:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	600b      	str	r3, [r1, #0]
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <LL_RCC_MSI_GetRange>:
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003d9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003da6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2bb0      	cmp	r3, #176	@ 0xb0
 8003dac:	d901      	bls.n	8003db2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003dae:	23b0      	movs	r3, #176	@ 0xb0
 8003db0:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003db2:	687b      	ldr	r3, [r7, #4]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003dc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	021b      	lsls	r3, r3, #8
 8003dd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	604b      	str	r3, [r1, #4]
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <LL_RCC_SetSysClkSource>:
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003df2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f023 0203 	bic.w	r2, r3, #3
 8003dfc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	608b      	str	r3, [r1, #8]
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <LL_RCC_GetSysClkSource>:
{
 8003e12:	b480      	push	{r7}
 8003e14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003e16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 030c 	and.w	r3, r3, #12
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <LL_RCC_SetAHBPrescaler>:
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003e32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	608b      	str	r3, [r1, #8]
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <LL_C2_RCC_SetAHBPrescaler>:
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003e5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003e62:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <LL_RCC_SetAHB4Prescaler>:
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003e86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003e8e:	f023 020f 	bic.w	r2, r3, #15
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	091b      	lsrs	r3, r3, #4
 8003e96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <LL_RCC_SetAPB1Prescaler>:
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003eb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ebe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	608b      	str	r3, [r1, #8]
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <LL_RCC_SetAPB2Prescaler>:
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003edc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ee6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	608b      	str	r3, [r1, #8]
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <LL_RCC_GetAHBPrescaler>:
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <LL_RCC_GetAHB4Prescaler>:
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003f18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f1c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <LL_RCC_GetAPB1Prescaler>:
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003f34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <LL_RCC_GetAPB2Prescaler>:
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003f4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <LL_RCC_PLL_Enable>:
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003f64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f72:	6013      	str	r3, [r2, #0]
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <LL_RCC_PLL_Disable>:
{
 8003f7e:	b480      	push	{r7}
 8003f80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003f82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f90:	6013      	str	r3, [r2, #0]
}
 8003f92:	bf00      	nop
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <LL_RCC_PLL_IsReady>:
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003fa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003faa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fae:	d101      	bne.n	8003fb4 <LL_RCC_PLL_IsReady+0x18>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e000      	b.n	8003fb6 <LL_RCC_PLL_IsReady+0x1a>
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <LL_RCC_PLL_GetN>:
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003fc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	0a1b      	lsrs	r3, r3, #8
 8003fcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <LL_RCC_PLL_GetR>:
{
 8003fda:	b480      	push	{r7}
 8003fdc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003fde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <LL_RCC_PLL_GetDivider>:
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003ff6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8004000:	4618      	mov	r0, r3
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <LL_RCC_PLL_GetMainSource>:
{
 800400a:	b480      	push	{r7}
 800400c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800400e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0303 	and.w	r3, r3, #3
}
 8004018:	4618      	mov	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <LL_RCC_IsActiveFlag_HPRE>:
{
 8004022:	b480      	push	{r7}
 8004024:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004026:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004030:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004034:	d101      	bne.n	800403a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004046:	b480      	push	{r7}
 8004048:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800404a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800404e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004056:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800405a:	d101      	bne.n	8004060 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800405c:	2301      	movs	r3, #1
 800405e:	e000      	b.n	8004062 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004074:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800407c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004080:	d101      	bne.n	8004086 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004092:	b480      	push	{r7}
 8004094:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004096:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040a4:	d101      	bne.n	80040aa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80040b6:	b480      	push	{r7}
 80040b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80040ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040c8:	d101      	bne.n	80040ce <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
	...

080040dc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040dc:	b590      	push	{r4, r7, lr}
 80040de:	b08d      	sub	sp, #52	@ 0x34
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e363      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 808d 	beq.w	8004216 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040fc:	f7ff fe89 	bl	8003e12 <LL_RCC_GetSysClkSource>
 8004100:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004102:	f7ff ff82 	bl	800400a <LL_RCC_PLL_GetMainSource>
 8004106:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800410a:	2b00      	cmp	r3, #0
 800410c:	d005      	beq.n	800411a <HAL_RCC_OscConfig+0x3e>
 800410e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004110:	2b0c      	cmp	r3, #12
 8004112:	d147      	bne.n	80041a4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004116:	2b01      	cmp	r3, #1
 8004118:	d144      	bne.n	80041a4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e347      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800412a:	f7ff fe34 	bl	8003d96 <LL_RCC_MSI_GetRange>
 800412e:	4603      	mov	r3, r0
 8004130:	429c      	cmp	r4, r3
 8004132:	d914      	bls.n	800415e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004138:	4618      	mov	r0, r3
 800413a:	f000 fd2f 	bl	8004b9c <RCC_SetFlashLatencyFromMSIRange>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e336      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff fe0e 	bl	8003d6e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff fe32 	bl	8003dc0 <LL_RCC_MSI_SetCalibTrimming>
 800415c:	e013      	b.n	8004186 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004162:	4618      	mov	r0, r3
 8004164:	f7ff fe03 	bl	8003d6e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	4618      	mov	r0, r3
 800416e:	f7ff fe27 	bl	8003dc0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fd10 	bl	8004b9c <RCC_SetFlashLatencyFromMSIRange>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e317      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004186:	f000 fcc9 	bl	8004b1c <HAL_RCC_GetHCLKFreq>
 800418a:	4603      	mov	r3, r0
 800418c:	4aa4      	ldr	r2, [pc, #656]	@ (8004420 <HAL_RCC_OscConfig+0x344>)
 800418e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004190:	4ba4      	ldr	r3, [pc, #656]	@ (8004424 <HAL_RCC_OscConfig+0x348>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	f7fe fc6b 	bl	8002a70 <HAL_InitTick>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d039      	beq.n	8004214 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e308      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d01e      	beq.n	80041ea <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041ac:	f7ff fdb0 	bl	8003d10 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041b0:	f7fe fcac 	bl	8002b0c <HAL_GetTick>
 80041b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041b8:	f7fe fca8 	bl	8002b0c <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e2f5      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80041ca:	f7ff fdbf 	bl	8003d4c <LL_RCC_MSI_IsReady>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f1      	beq.n	80041b8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff fdc8 	bl	8003d6e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff fdec 	bl	8003dc0 <LL_RCC_MSI_SetCalibTrimming>
 80041e8:	e015      	b.n	8004216 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041ea:	f7ff fda0 	bl	8003d2e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041ee:	f7fe fc8d 	bl	8002b0c <HAL_GetTick>
 80041f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041f6:	f7fe fc89 	bl	8002b0c <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e2d6      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004208:	f7ff fda0 	bl	8003d4c <LL_RCC_MSI_IsReady>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1f1      	bne.n	80041f6 <HAL_RCC_OscConfig+0x11a>
 8004212:	e000      	b.n	8004216 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004214:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d047      	beq.n	80042b2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004222:	f7ff fdf6 	bl	8003e12 <LL_RCC_GetSysClkSource>
 8004226:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004228:	f7ff feef 	bl	800400a <LL_RCC_PLL_GetMainSource>
 800422c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	2b08      	cmp	r3, #8
 8004232:	d005      	beq.n	8004240 <HAL_RCC_OscConfig+0x164>
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	2b0c      	cmp	r3, #12
 8004238:	d108      	bne.n	800424c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	2b03      	cmp	r3, #3
 800423e:	d105      	bne.n	800424c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d134      	bne.n	80042b2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e2b4      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004254:	d102      	bne.n	800425c <HAL_RCC_OscConfig+0x180>
 8004256:	f7ff fbdd 	bl	8003a14 <LL_RCC_HSE_Enable>
 800425a:	e001      	b.n	8004260 <HAL_RCC_OscConfig+0x184>
 800425c:	f7ff fbe9 	bl	8003a32 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d012      	beq.n	800428e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fe fc50 	bl	8002b0c <HAL_GetTick>
 800426c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004270:	f7fe fc4c 	bl	8002b0c <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b64      	cmp	r3, #100	@ 0x64
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e299      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004282:	f7ff fbe5 	bl	8003a50 <LL_RCC_HSE_IsReady>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f1      	beq.n	8004270 <HAL_RCC_OscConfig+0x194>
 800428c:	e011      	b.n	80042b2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428e:	f7fe fc3d 	bl	8002b0c <HAL_GetTick>
 8004292:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004294:	e008      	b.n	80042a8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004296:	f7fe fc39 	bl	8002b0c <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b64      	cmp	r3, #100	@ 0x64
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e286      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80042a8:	f7ff fbd2 	bl	8003a50 <LL_RCC_HSE_IsReady>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f1      	bne.n	8004296 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d04c      	beq.n	8004358 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042be:	f7ff fda8 	bl	8003e12 <LL_RCC_GetSysClkSource>
 80042c2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042c4:	f7ff fea1 	bl	800400a <LL_RCC_PLL_GetMainSource>
 80042c8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d005      	beq.n	80042dc <HAL_RCC_OscConfig+0x200>
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	2b0c      	cmp	r3, #12
 80042d4:	d10e      	bne.n	80042f4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d10b      	bne.n	80042f4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e266      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff fbf1 	bl	8003ad4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80042f2:	e031      	b.n	8004358 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d019      	beq.n	8004330 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042fc:	f7ff fbba 	bl	8003a74 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004300:	f7fe fc04 	bl	8002b0c <HAL_GetTick>
 8004304:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004308:	f7fe fc00 	bl	8002b0c <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e24d      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800431a:	f7ff fbc9 	bl	8003ab0 <LL_RCC_HSI_IsReady>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0f1      	beq.n	8004308 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff fbd3 	bl	8003ad4 <LL_RCC_HSI_SetCalibTrimming>
 800432e:	e013      	b.n	8004358 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004330:	f7ff fbaf 	bl	8003a92 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004334:	f7fe fbea 	bl	8002b0c <HAL_GetTick>
 8004338:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800433c:	f7fe fbe6 	bl	8002b0c <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e233      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800434e:	f7ff fbaf 	bl	8003ab0 <LL_RCC_HSI_IsReady>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1f1      	bne.n	800433c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b00      	cmp	r3, #0
 8004362:	d106      	bne.n	8004372 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 80a3 	beq.w	80044b8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d076      	beq.n	8004468 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0310 	and.w	r3, r3, #16
 8004382:	2b00      	cmp	r3, #0
 8004384:	d046      	beq.n	8004414 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004386:	f7ff fc66 	bl	8003c56 <LL_RCC_LSI1_IsReady>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d113      	bne.n	80043b8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004390:	f7ff fc3f 	bl	8003c12 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004394:	f7fe fbba 	bl	8002b0c <HAL_GetTick>
 8004398:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800439c:	f7fe fbb6 	bl	8002b0c <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e203      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80043ae:	f7ff fc52 	bl	8003c56 <LL_RCC_LSI1_IsReady>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0f1      	beq.n	800439c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80043b8:	f7ff fc5f 	bl	8003c7a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043bc:	f7fe fba6 	bl	8002b0c <HAL_GetTick>
 80043c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80043c4:	f7fe fba2 	bl	8002b0c <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e1ef      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80043d6:	f7ff fc72 	bl	8003cbe <LL_RCC_LSI2_IsReady>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0f1      	beq.n	80043c4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff fc7c 	bl	8003ce2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80043ea:	f7ff fc23 	bl	8003c34 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ee:	f7fe fb8d 	bl	8002b0c <HAL_GetTick>
 80043f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80043f4:	e008      	b.n	8004408 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80043f6:	f7fe fb89 	bl	8002b0c <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e1d6      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004408:	f7ff fc25 	bl	8003c56 <LL_RCC_LSI1_IsReady>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f1      	bne.n	80043f6 <HAL_RCC_OscConfig+0x31a>
 8004412:	e051      	b.n	80044b8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004414:	f7ff fbfd 	bl	8003c12 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004418:	f7fe fb78 	bl	8002b0c <HAL_GetTick>
 800441c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800441e:	e00c      	b.n	800443a <HAL_RCC_OscConfig+0x35e>
 8004420:	20000020 	.word	0x20000020
 8004424:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004428:	f7fe fb70 	bl	8002b0c <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e1bd      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800443a:	f7ff fc0c 	bl	8003c56 <LL_RCC_LSI1_IsReady>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0f1      	beq.n	8004428 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004444:	f7ff fc2a 	bl	8003c9c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800444a:	f7fe fb5f 	bl	8002b0c <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b03      	cmp	r3, #3
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e1ac      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800445c:	f7ff fc2f 	bl	8003cbe <LL_RCC_LSI2_IsReady>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f1      	bne.n	800444a <HAL_RCC_OscConfig+0x36e>
 8004466:	e027      	b.n	80044b8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004468:	f7ff fc18 	bl	8003c9c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446c:	f7fe fb4e 	bl	8002b0c <HAL_GetTick>
 8004470:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004474:	f7fe fb4a 	bl	8002b0c <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b03      	cmp	r3, #3
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e197      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004486:	f7ff fc1a 	bl	8003cbe <LL_RCC_LSI2_IsReady>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1f1      	bne.n	8004474 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004490:	f7ff fbd0 	bl	8003c34 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004494:	f7fe fb3a 	bl	8002b0c <HAL_GetTick>
 8004498:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800449c:	f7fe fb36 	bl	8002b0c <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e183      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80044ae:	f7ff fbd2 	bl	8003c56 <LL_RCC_LSI1_IsReady>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1f1      	bne.n	800449c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d05b      	beq.n	800457c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044c4:	4ba7      	ldr	r3, [pc, #668]	@ (8004764 <HAL_RCC_OscConfig+0x688>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d114      	bne.n	80044fa <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80044d0:	f7ff fa70 	bl	80039b4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044d4:	f7fe fb1a 	bl	8002b0c <HAL_GetTick>
 80044d8:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044dc:	f7fe fb16 	bl	8002b0c <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e163      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044ee:	4b9d      	ldr	r3, [pc, #628]	@ (8004764 <HAL_RCC_OscConfig+0x688>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d102      	bne.n	8004508 <HAL_RCC_OscConfig+0x42c>
 8004502:	f7ff fb30 	bl	8003b66 <LL_RCC_LSE_Enable>
 8004506:	e00c      	b.n	8004522 <HAL_RCC_OscConfig+0x446>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b05      	cmp	r3, #5
 800450e:	d104      	bne.n	800451a <HAL_RCC_OscConfig+0x43e>
 8004510:	f7ff fb4b 	bl	8003baa <LL_RCC_LSE_EnableBypass>
 8004514:	f7ff fb27 	bl	8003b66 <LL_RCC_LSE_Enable>
 8004518:	e003      	b.n	8004522 <HAL_RCC_OscConfig+0x446>
 800451a:	f7ff fb35 	bl	8003b88 <LL_RCC_LSE_Disable>
 800451e:	f7ff fb55 	bl	8003bcc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d014      	beq.n	8004554 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452a:	f7fe faef 	bl	8002b0c <HAL_GetTick>
 800452e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004530:	e00a      	b.n	8004548 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004532:	f7fe faeb 	bl	8002b0c <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004540:	4293      	cmp	r3, r2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e136      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004548:	f7ff fb51 	bl	8003bee <LL_RCC_LSE_IsReady>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0ef      	beq.n	8004532 <HAL_RCC_OscConfig+0x456>
 8004552:	e013      	b.n	800457c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004554:	f7fe fada 	bl	8002b0c <HAL_GetTick>
 8004558:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800455a:	e00a      	b.n	8004572 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800455c:	f7fe fad6 	bl	8002b0c <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800456a:	4293      	cmp	r3, r2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e121      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004572:	f7ff fb3c 	bl	8003bee <LL_RCC_LSE_IsReady>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1ef      	bne.n	800455c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004584:	2b00      	cmp	r3, #0
 8004586:	d02c      	beq.n	80045e2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458c:	2b00      	cmp	r3, #0
 800458e:	d014      	beq.n	80045ba <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004590:	f7ff fab5 	bl	8003afe <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004594:	f7fe faba 	bl	8002b0c <HAL_GetTick>
 8004598:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800459c:	f7fe fab6 	bl	8002b0c <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e103      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80045ae:	f7ff fac8 	bl	8003b42 <LL_RCC_HSI48_IsReady>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0f1      	beq.n	800459c <HAL_RCC_OscConfig+0x4c0>
 80045b8:	e013      	b.n	80045e2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045ba:	f7ff fab1 	bl	8003b20 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045be:	f7fe faa5 	bl	8002b0c <HAL_GetTick>
 80045c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045c6:	f7fe faa1 	bl	8002b0c <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e0ee      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80045d8:	f7ff fab3 	bl	8003b42 <LL_RCC_HSI48_IsReady>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f1      	bne.n	80045c6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 80e4 	beq.w	80047b4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045ec:	f7ff fc11 	bl	8003e12 <LL_RCC_GetSysClkSource>
 80045f0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80045f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fe:	2b02      	cmp	r3, #2
 8004600:	f040 80b4 	bne.w	800476c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f003 0203 	and.w	r2, r3, #3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460e:	429a      	cmp	r2, r3
 8004610:	d123      	bne.n	800465a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800461c:	429a      	cmp	r2, r3
 800461e:	d11c      	bne.n	800465a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	0a1b      	lsrs	r3, r3, #8
 8004624:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800462c:	429a      	cmp	r2, r3
 800462e:	d114      	bne.n	800465a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800463a:	429a      	cmp	r2, r3
 800463c:	d10d      	bne.n	800465a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004648:	429a      	cmp	r2, r3
 800464a:	d106      	bne.n	800465a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004656:	429a      	cmp	r2, r3
 8004658:	d05d      	beq.n	8004716 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	2b0c      	cmp	r3, #12
 800465e:	d058      	beq.n	8004712 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004660:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e0a1      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004672:	f7ff fc84 	bl	8003f7e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004676:	f7fe fa49 	bl	8002b0c <HAL_GetTick>
 800467a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467e:	f7fe fa45 	bl	8002b0c <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e092      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004690:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1ef      	bne.n	800467e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800469e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	4b30      	ldr	r3, [pc, #192]	@ (8004768 <HAL_RCC_OscConfig+0x68c>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80046b0:	4311      	orrs	r1, r2
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80046b6:	0212      	lsls	r2, r2, #8
 80046b8:	4311      	orrs	r1, r2
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80046be:	4311      	orrs	r1, r2
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80046c4:	4311      	orrs	r1, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80046ca:	430a      	orrs	r2, r1
 80046cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80046d4:	f7ff fc44 	bl	8003f60 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046e8:	f7fe fa10 	bl	8002b0c <HAL_GetTick>
 80046ec:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f0:	f7fe fa0c 	bl	8002b0c <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e059      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004702:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0ef      	beq.n	80046f0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004710:	e050      	b.n	80047b4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e04f      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004716:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d147      	bne.n	80047b4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004724:	f7ff fc1c 	bl	8003f60 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004728:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004736:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004738:	f7fe f9e8 	bl	8002b0c <HAL_GetTick>
 800473c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004740:	f7fe f9e4 	bl	8002b0c <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e031      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004752:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0ef      	beq.n	8004740 <HAL_RCC_OscConfig+0x664>
 8004760:	e028      	b.n	80047b4 <HAL_RCC_OscConfig+0x6d8>
 8004762:	bf00      	nop
 8004764:	58000400 	.word	0x58000400
 8004768:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	2b0c      	cmp	r3, #12
 8004770:	d01e      	beq.n	80047b0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004772:	f7ff fc04 	bl	8003f7e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004776:	f7fe f9c9 	bl	8002b0c <HAL_GetTick>
 800477a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800477c:	e008      	b.n	8004790 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800477e:	f7fe f9c5 	bl	8002b0c <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e012      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004790:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1ef      	bne.n	800477e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800479e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80047a8:	4b05      	ldr	r3, [pc, #20]	@ (80047c0 <HAL_RCC_OscConfig+0x6e4>)
 80047aa:	4013      	ands	r3, r2
 80047ac:	60cb      	str	r3, [r1, #12]
 80047ae:	e001      	b.n	80047b4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e000      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3734      	adds	r7, #52	@ 0x34
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd90      	pop	{r4, r7, pc}
 80047be:	bf00      	nop
 80047c0:	eefefffc 	.word	0xeefefffc

080047c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e12d      	b.n	8004a34 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047d8:	4b98      	ldr	r3, [pc, #608]	@ (8004a3c <HAL_RCC_ClockConfig+0x278>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d91b      	bls.n	800481e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e6:	4b95      	ldr	r3, [pc, #596]	@ (8004a3c <HAL_RCC_ClockConfig+0x278>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f023 0207 	bic.w	r2, r3, #7
 80047ee:	4993      	ldr	r1, [pc, #588]	@ (8004a3c <HAL_RCC_ClockConfig+0x278>)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047f6:	f7fe f989 	bl	8002b0c <HAL_GetTick>
 80047fa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fc:	e008      	b.n	8004810 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80047fe:	f7fe f985 	bl	8002b0c <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e111      	b.n	8004a34 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004810:	4b8a      	ldr	r3, [pc, #552]	@ (8004a3c <HAL_RCC_ClockConfig+0x278>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d1ef      	bne.n	80047fe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d016      	beq.n	8004858 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff fafb 	bl	8003e2a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004834:	f7fe f96a 	bl	8002b0c <HAL_GetTick>
 8004838:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800483a:	e008      	b.n	800484e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800483c:	f7fe f966 	bl	8002b0c <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d901      	bls.n	800484e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e0f2      	b.n	8004a34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800484e:	f7ff fbe8 	bl	8004022 <LL_RCC_IsActiveFlag_HPRE>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0f1      	beq.n	800483c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b00      	cmp	r3, #0
 8004862:	d016      	beq.n	8004892 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff faf2 	bl	8003e52 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800486e:	f7fe f94d 	bl	8002b0c <HAL_GetTick>
 8004872:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004874:	e008      	b.n	8004888 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004876:	f7fe f949 	bl	8002b0c <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e0d5      	b.n	8004a34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004888:	f7ff fbdd 	bl	8004046 <LL_RCC_IsActiveFlag_C2HPRE>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0f1      	beq.n	8004876 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800489a:	2b00      	cmp	r3, #0
 800489c:	d016      	beq.n	80048cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff faeb 	bl	8003e7e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048a8:	f7fe f930 	bl	8002b0c <HAL_GetTick>
 80048ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048b0:	f7fe f92c 	bl	8002b0c <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e0b8      	b.n	8004a34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80048c2:	f7ff fbd3 	bl	800406c <LL_RCC_IsActiveFlag_SHDHPRE>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0f1      	beq.n	80048b0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d016      	beq.n	8004906 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	4618      	mov	r0, r3
 80048de:	f7ff fae5 	bl	8003eac <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048e2:	f7fe f913 	bl	8002b0c <HAL_GetTick>
 80048e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80048e8:	e008      	b.n	80048fc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048ea:	f7fe f90f 	bl	8002b0c <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e09b      	b.n	8004a34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80048fc:	f7ff fbc9 	bl	8004092 <LL_RCC_IsActiveFlag_PPRE1>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0f1      	beq.n	80048ea <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d017      	beq.n	8004942 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff fadb 	bl	8003ed4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800491e:	f7fe f8f5 	bl	8002b0c <HAL_GetTick>
 8004922:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004924:	e008      	b.n	8004938 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004926:	f7fe f8f1 	bl	8002b0c <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e07d      	b.n	8004a34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004938:	f7ff fbbd 	bl	80040b6 <LL_RCC_IsActiveFlag_PPRE2>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0f1      	beq.n	8004926 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d043      	beq.n	80049d6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d106      	bne.n	8004964 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004956:	f7ff f87b 	bl	8003a50 <LL_RCC_HSE_IsReady>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d11e      	bne.n	800499e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e067      	b.n	8004a34 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2b03      	cmp	r3, #3
 800496a:	d106      	bne.n	800497a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800496c:	f7ff fb16 	bl	8003f9c <LL_RCC_PLL_IsReady>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d113      	bne.n	800499e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e05c      	b.n	8004a34 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d106      	bne.n	8004990 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004982:	f7ff f9e3 	bl	8003d4c <LL_RCC_MSI_IsReady>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d108      	bne.n	800499e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e051      	b.n	8004a34 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004990:	f7ff f88e 	bl	8003ab0 <LL_RCC_HSI_IsReady>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e04a      	b.n	8004a34 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff fa21 	bl	8003dea <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a8:	f7fe f8b0 	bl	8002b0c <HAL_GetTick>
 80049ac:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ae:	e00a      	b.n	80049c6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b0:	f7fe f8ac 	bl	8002b0c <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049be:	4293      	cmp	r3, r2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e036      	b.n	8004a34 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c6:	f7ff fa24 	bl	8003e12 <LL_RCC_GetSysClkSource>
 80049ca:	4602      	mov	r2, r0
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d1ec      	bne.n	80049b0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049d6:	4b19      	ldr	r3, [pc, #100]	@ (8004a3c <HAL_RCC_ClockConfig+0x278>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d21b      	bcs.n	8004a1c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e4:	4b15      	ldr	r3, [pc, #84]	@ (8004a3c <HAL_RCC_ClockConfig+0x278>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f023 0207 	bic.w	r2, r3, #7
 80049ec:	4913      	ldr	r1, [pc, #76]	@ (8004a3c <HAL_RCC_ClockConfig+0x278>)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f4:	f7fe f88a 	bl	8002b0c <HAL_GetTick>
 80049f8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80049fc:	f7fe f886 	bl	8002b0c <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e012      	b.n	8004a34 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a3c <HAL_RCC_ClockConfig+0x278>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d1ef      	bne.n	80049fc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004a1c:	f000 f87e 	bl	8004b1c <HAL_RCC_GetHCLKFreq>
 8004a20:	4603      	mov	r3, r0
 8004a22:	4a07      	ldr	r2, [pc, #28]	@ (8004a40 <HAL_RCC_ClockConfig+0x27c>)
 8004a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004a26:	f7fe f87d 	bl	8002b24 <HAL_GetTickPrio>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fe f81f 	bl	8002a70 <HAL_InitTick>
 8004a32:	4603      	mov	r3, r0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	58004000 	.word	0x58004000
 8004a40:	20000020 	.word	0x20000020

08004a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a44:	b590      	push	{r4, r7, lr}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a4a:	f7ff f9e2 	bl	8003e12 <LL_RCC_GetSysClkSource>
 8004a4e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10a      	bne.n	8004a6c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004a56:	f7ff f99e 	bl	8003d96 <LL_RCC_MSI_GetRange>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	091b      	lsrs	r3, r3, #4
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	4a2b      	ldr	r2, [pc, #172]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	e04b      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d102      	bne.n	8004a78 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a72:	4b28      	ldr	r3, [pc, #160]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a74:	60fb      	str	r3, [r7, #12]
 8004a76:	e045      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b08      	cmp	r3, #8
 8004a7c:	d10a      	bne.n	8004a94 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004a7e:	f7fe ffb7 	bl	80039f0 <LL_RCC_HSE_IsEnabledDiv2>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d102      	bne.n	8004a8e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004a88:	4b22      	ldr	r3, [pc, #136]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	e03a      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004a8e:	4b22      	ldr	r3, [pc, #136]	@ (8004b18 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004a90:	60fb      	str	r3, [r7, #12]
 8004a92:	e037      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004a94:	f7ff fab9 	bl	800400a <LL_RCC_PLL_GetMainSource>
 8004a98:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d003      	beq.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x64>
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d003      	beq.n	8004aae <HAL_RCC_GetSysClockFreq+0x6a>
 8004aa6:	e00d      	b.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004aaa:	60bb      	str	r3, [r7, #8]
        break;
 8004aac:	e015      	b.n	8004ada <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004aae:	f7fe ff9f 	bl	80039f0 <LL_RCC_HSE_IsEnabledDiv2>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d102      	bne.n	8004abe <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004ab8:	4b16      	ldr	r3, [pc, #88]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004aba:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004abc:	e00d      	b.n	8004ada <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004abe:	4b16      	ldr	r3, [pc, #88]	@ (8004b18 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ac0:	60bb      	str	r3, [r7, #8]
        break;
 8004ac2:	e00a      	b.n	8004ada <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004ac4:	f7ff f967 	bl	8003d96 <LL_RCC_MSI_GetRange>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	091b      	lsrs	r3, r3, #4
 8004acc:	f003 030f 	and.w	r3, r3, #15
 8004ad0:	4a0f      	ldr	r2, [pc, #60]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ad6:	60bb      	str	r3, [r7, #8]
        break;
 8004ad8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004ada:	f7ff fa71 	bl	8003fc0 <LL_RCC_PLL_GetN>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	fb03 f402 	mul.w	r4, r3, r2
 8004ae6:	f7ff fa84 	bl	8003ff2 <LL_RCC_PLL_GetDivider>
 8004aea:	4603      	mov	r3, r0
 8004aec:	091b      	lsrs	r3, r3, #4
 8004aee:	3301      	adds	r3, #1
 8004af0:	fbb4 f4f3 	udiv	r4, r4, r3
 8004af4:	f7ff fa71 	bl	8003fda <LL_RCC_PLL_GetR>
 8004af8:	4603      	mov	r3, r0
 8004afa:	0f5b      	lsrs	r3, r3, #29
 8004afc:	3301      	adds	r3, #1
 8004afe:	fbb4 f3f3 	udiv	r3, r4, r3
 8004b02:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004b04:	68fb      	ldr	r3, [r7, #12]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd90      	pop	{r4, r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	0800ff50 	.word	0x0800ff50
 8004b14:	00f42400 	.word	0x00f42400
 8004b18:	01e84800 	.word	0x01e84800

08004b1c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b1c:	b598      	push	{r3, r4, r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004b20:	f7ff ff90 	bl	8004a44 <HAL_RCC_GetSysClockFreq>
 8004b24:	4604      	mov	r4, r0
 8004b26:	f7ff f9e9 	bl	8003efc <LL_RCC_GetAHBPrescaler>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	091b      	lsrs	r3, r3, #4
 8004b2e:	f003 030f 	and.w	r3, r3, #15
 8004b32:	4a03      	ldr	r2, [pc, #12]	@ (8004b40 <HAL_RCC_GetHCLKFreq+0x24>)
 8004b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b38:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	bd98      	pop	{r3, r4, r7, pc}
 8004b40:	0800fef0 	.word	0x0800fef0

08004b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b44:	b598      	push	{r3, r4, r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004b48:	f7ff ffe8 	bl	8004b1c <HAL_RCC_GetHCLKFreq>
 8004b4c:	4604      	mov	r4, r0
 8004b4e:	f7ff f9ef 	bl	8003f30 <LL_RCC_GetAPB1Prescaler>
 8004b52:	4603      	mov	r3, r0
 8004b54:	0a1b      	lsrs	r3, r3, #8
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	4a04      	ldr	r2, [pc, #16]	@ (8004b6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b60:	f003 031f 	and.w	r3, r3, #31
 8004b64:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	bd98      	pop	{r3, r4, r7, pc}
 8004b6c:	0800ff30 	.word	0x0800ff30

08004b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b70:	b598      	push	{r3, r4, r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004b74:	f7ff ffd2 	bl	8004b1c <HAL_RCC_GetHCLKFreq>
 8004b78:	4604      	mov	r4, r0
 8004b7a:	f7ff f9e5 	bl	8003f48 <LL_RCC_GetAPB2Prescaler>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	0adb      	lsrs	r3, r3, #11
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	4a04      	ldr	r2, [pc, #16]	@ (8004b98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b8c:	f003 031f 	and.w	r3, r3, #31
 8004b90:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	bd98      	pop	{r3, r4, r7, pc}
 8004b98:	0800ff30 	.word	0x0800ff30

08004b9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004b9c:	b590      	push	{r4, r7, lr}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2bb0      	cmp	r3, #176	@ 0xb0
 8004ba8:	d903      	bls.n	8004bb2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004baa:	4b15      	ldr	r3, [pc, #84]	@ (8004c00 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	e007      	b.n	8004bc2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	091b      	lsrs	r3, r3, #4
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	4a11      	ldr	r2, [pc, #68]	@ (8004c00 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bc0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004bc2:	f7ff f9a7 	bl	8003f14 <LL_RCC_GetAHB4Prescaler>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	091b      	lsrs	r3, r3, #4
 8004bca:	f003 030f 	and.w	r3, r3, #15
 8004bce:	4a0d      	ldr	r2, [pc, #52]	@ (8004c04 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bda:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	4a0a      	ldr	r2, [pc, #40]	@ (8004c08 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004be0:	fba2 2303 	umull	r2, r3, r2, r3
 8004be4:	0c9c      	lsrs	r4, r3, #18
 8004be6:	f7fe fef5 	bl	80039d4 <HAL_PWREx_GetVoltageRange>
 8004bea:	4603      	mov	r3, r0
 8004bec:	4619      	mov	r1, r3
 8004bee:	4620      	mov	r0, r4
 8004bf0:	f000 f80c 	bl	8004c0c <RCC_SetFlashLatency>
 8004bf4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd90      	pop	{r4, r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	0800ff50 	.word	0x0800ff50
 8004c04:	0800fef0 	.word	0x0800fef0
 8004c08:	431bde83 	.word	0x431bde83

08004c0c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004c0c:	b590      	push	{r4, r7, lr}
 8004c0e:	b093      	sub	sp, #76	@ 0x4c
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004c16:	4b37      	ldr	r3, [pc, #220]	@ (8004cf4 <RCC_SetFlashLatency+0xe8>)
 8004c18:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8004c1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004c22:	4a35      	ldr	r2, [pc, #212]	@ (8004cf8 <RCC_SetFlashLatency+0xec>)
 8004c24:	f107 031c 	add.w	r3, r7, #28
 8004c28:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004c2e:	4b33      	ldr	r3, [pc, #204]	@ (8004cfc <RCC_SetFlashLatency+0xf0>)
 8004c30:	f107 040c 	add.w	r4, r7, #12
 8004c34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c44:	d11a      	bne.n	8004c7c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c46:	2300      	movs	r3, #0
 8004c48:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c4a:	e013      	b.n	8004c74 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004c4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	3348      	adds	r3, #72	@ 0x48
 8004c52:	443b      	add	r3, r7
 8004c54:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d807      	bhi.n	8004c6e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004c5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	3348      	adds	r3, #72	@ 0x48
 8004c64:	443b      	add	r3, r7
 8004c66:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004c6a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004c6c:	e020      	b.n	8004cb0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c70:	3301      	adds	r3, #1
 8004c72:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d9e8      	bls.n	8004c4c <RCC_SetFlashLatency+0x40>
 8004c7a:	e019      	b.n	8004cb0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c80:	e013      	b.n	8004caa <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	3348      	adds	r3, #72	@ 0x48
 8004c88:	443b      	add	r3, r7
 8004c8a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d807      	bhi.n	8004ca4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	3348      	adds	r3, #72	@ 0x48
 8004c9a:	443b      	add	r3, r7
 8004c9c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004ca0:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004ca2:	e005      	b.n	8004cb0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d9e8      	bls.n	8004c82 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004cb0:	4b13      	ldr	r3, [pc, #76]	@ (8004d00 <RCC_SetFlashLatency+0xf4>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f023 0207 	bic.w	r2, r3, #7
 8004cb8:	4911      	ldr	r1, [pc, #68]	@ (8004d00 <RCC_SetFlashLatency+0xf4>)
 8004cba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004cc0:	f7fd ff24 	bl	8002b0c <HAL_GetTick>
 8004cc4:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004cc6:	e008      	b.n	8004cda <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004cc8:	f7fd ff20 	bl	8002b0c <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d901      	bls.n	8004cda <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e007      	b.n	8004cea <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004cda:	4b09      	ldr	r3, [pc, #36]	@ (8004d00 <RCC_SetFlashLatency+0xf4>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0307 	and.w	r3, r3, #7
 8004ce2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d1ef      	bne.n	8004cc8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	374c      	adds	r7, #76	@ 0x4c
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd90      	pop	{r4, r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	0800eee8 	.word	0x0800eee8
 8004cf8:	0800eef8 	.word	0x0800eef8
 8004cfc:	0800ef04 	.word	0x0800ef04
 8004d00:	58004000 	.word	0x58004000

08004d04 <LL_RCC_LSE_IsEnabled>:
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <LL_RCC_LSE_IsEnabled+0x18>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e000      	b.n	8004d1e <LL_RCC_LSE_IsEnabled+0x1a>
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <LL_RCC_LSE_IsReady>:
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004d2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d101      	bne.n	8004d40 <LL_RCC_LSE_IsReady+0x18>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <LL_RCC_LSE_IsReady+0x1a>
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <LL_RCC_SetRFWKPClockSource>:
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004d54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d5c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <LL_RCC_SetSMPSClockSource>:
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004d80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d86:	f023 0203 	bic.w	r2, r3, #3
 8004d8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <LL_RCC_SetSMPSPrescaler>:
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dae:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004db2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <LL_RCC_SetUSARTClockSource>:
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004dd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd8:	f023 0203 	bic.w	r2, r3, #3
 8004ddc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <LL_RCC_SetLPUARTClockSource>:
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004dfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e04:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <LL_RCC_SetI2CClockSource>:
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004e28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	091b      	lsrs	r3, r3, #4
 8004e34:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	401a      	ands	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	011b      	lsls	r3, r3, #4
 8004e40:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004e44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <LL_RCC_SetLPTIMClockSource>:
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004e62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e66:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	0c1b      	lsrs	r3, r3, #16
 8004e6e:	041b      	lsls	r3, r3, #16
 8004e70:	43db      	mvns	r3, r3
 8004e72:	401a      	ands	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	041b      	lsls	r3, r3, #16
 8004e78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <LL_RCC_SetSAIClockSource>:
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004e96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e9e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ea2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <LL_RCC_SetRNGClockSource>:
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004ec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eca:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004ece:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <LL_RCC_SetCLK48ClockSource>:
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004eee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004efa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <LL_RCC_SetUSBClockSource>:
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b082      	sub	sp, #8
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff ffe3 	bl	8004ee6 <LL_RCC_SetCLK48ClockSource>
}
 8004f20:	bf00      	nop
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <LL_RCC_SetADCClockSource>:
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004f30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f38:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004f3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <LL_RCC_SetRTCClockSource>:
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004f5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <LL_RCC_GetRTCClockSource>:
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004f84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <LL_RCC_ForceBackupDomainReset>:
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004f9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fa6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004faa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004fb2:	bf00      	nop
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <LL_RCC_ReleaseBackupDomainReset>:
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fc8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004fd4:	bf00      	nop
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <LL_RCC_PLLSAI1_Enable>:
{
 8004fde:	b480      	push	{r7}
 8004fe0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004fe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ff0:	6013      	str	r3, [r2, #0]
}
 8004ff2:	bf00      	nop
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <LL_RCC_PLLSAI1_Disable>:
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005000:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800500a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800500e:	6013      	str	r3, [r2, #0]
}
 8005010:	bf00      	nop
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <LL_RCC_PLLSAI1_IsReady>:
{
 800501a:	b480      	push	{r7}
 800501c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800501e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005028:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800502c:	d101      	bne.n	8005032 <LL_RCC_PLLSAI1_IsReady+0x18>
 800502e:	2301      	movs	r3, #1
 8005030:	e000      	b.n	8005034 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b088      	sub	sp, #32
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005046:	2300      	movs	r3, #0
 8005048:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800504a:	2300      	movs	r3, #0
 800504c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005056:	2b00      	cmp	r3, #0
 8005058:	d034      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800505e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005062:	d021      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005064:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005068:	d81b      	bhi.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800506a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800506e:	d01d      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005070:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005074:	d815      	bhi.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00b      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800507a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800507e:	d110      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005080:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800508a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800508e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005090:	e00d      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3304      	adds	r3, #4
 8005096:	4618      	mov	r0, r3
 8005098:	f000 f947 	bl	800532a <RCCEx_PLLSAI1_ConfigNP>
 800509c:	4603      	mov	r3, r0
 800509e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80050a0:	e005      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	77fb      	strb	r3, [r7, #31]
        break;
 80050a6:	e002      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80050a8:	bf00      	nop
 80050aa:	e000      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80050ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ae:	7ffb      	ldrb	r3, [r7, #31]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d105      	bne.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7ff fee8 	bl	8004e8e <LL_RCC_SetSAIClockSource>
 80050be:	e001      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c0:	7ffb      	ldrb	r3, [r7, #31]
 80050c2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d046      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80050d0:	f7ff ff56 	bl	8004f80 <LL_RCC_GetRTCClockSource>
 80050d4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d03c      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80050e0:	f7fe fc68 	bl	80039b4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d105      	bne.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7ff ff30 	bl	8004f54 <LL_RCC_SetRTCClockSource>
 80050f4:	e02e      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80050f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050fe:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005100:	f7ff ff4b 	bl	8004f9a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005104:	f7ff ff5a 	bl	8004fbc <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005112:	4313      	orrs	r3, r2
 8005114:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005116:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005120:	f7ff fdf0 	bl	8004d04 <LL_RCC_LSE_IsEnabled>
 8005124:	4603      	mov	r3, r0
 8005126:	2b01      	cmp	r3, #1
 8005128:	d114      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800512a:	f7fd fcef 	bl	8002b0c <HAL_GetTick>
 800512e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005130:	e00b      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005132:	f7fd fceb 	bl	8002b0c <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005140:	4293      	cmp	r3, r2
 8005142:	d902      	bls.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	77fb      	strb	r3, [r7, #31]
              break;
 8005148:	e004      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800514a:	f7ff fded 	bl	8004d28 <LL_RCC_LSE_IsReady>
 800514e:	4603      	mov	r3, r0
 8005150:	2b01      	cmp	r3, #1
 8005152:	d1ee      	bne.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005154:	7ffb      	ldrb	r3, [r7, #31]
 8005156:	77bb      	strb	r3, [r7, #30]
 8005158:	e001      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800515a:	7ffb      	ldrb	r3, [r7, #31]
 800515c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d004      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	4618      	mov	r0, r3
 8005170:	f7ff fe2a 	bl	8004dc8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d004      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	4618      	mov	r0, r3
 8005186:	f7ff fe35 	bl	8004df4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0310 	and.w	r3, r3, #16
 8005192:	2b00      	cmp	r3, #0
 8005194:	d004      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff fe5d 	bl	8004e5a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0320 	and.w	r3, r3, #32
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d004      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7ff fe52 	bl	8004e5a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0304 	and.w	r3, r3, #4
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d004      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7ff fe2a 	bl	8004e20 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0308 	and.w	r3, r3, #8
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d004      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051dc:	4618      	mov	r0, r3
 80051de:	f7ff fe1f 	bl	8004e20 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d022      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7ff fe8d 	bl	8004f12 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005200:	d107      	bne.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005202:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800520c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005210:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005216:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800521a:	d10b      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3304      	adds	r3, #4
 8005220:	4618      	mov	r0, r3
 8005222:	f000 f8dd 	bl	80053e0 <RCCEx_PLLSAI1_ConfigNQ>
 8005226:	4603      	mov	r3, r0
 8005228:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800522a:	7ffb      	ldrb	r3, [r7, #31]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005230:	7ffb      	ldrb	r3, [r7, #31]
 8005232:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800523c:	2b00      	cmp	r3, #0
 800523e:	d02b      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005248:	d008      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800524e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005252:	d003      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005258:	2b00      	cmp	r3, #0
 800525a:	d105      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff fe2a 	bl	8004eba <LL_RCC_SetRNGClockSource>
 8005266:	e00a      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	2000      	movs	r0, #0
 8005274:	f7ff fe21 	bl	8004eba <LL_RCC_SetRNGClockSource>
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f7ff fe34 	bl	8004ee6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005282:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005286:	d107      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005292:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005296:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d022      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff fe3d 	bl	8004f28 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052b6:	d107      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80052b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052c6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052d0:	d10b      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	3304      	adds	r3, #4
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 f8dd 	bl	8005496 <RCCEx_PLLSAI1_ConfigNR>
 80052dc:	4603      	mov	r3, r0
 80052de:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80052e0:	7ffb      	ldrb	r3, [r7, #31]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80052e6:	7ffb      	ldrb	r3, [r7, #31]
 80052e8:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d004      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7ff fd26 	bl	8004d4c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d009      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff fd45 	bl	8004da0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff fd2c 	bl	8004d78 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005320:	7fbb      	ldrb	r3, [r7, #30]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3720      	adds	r7, #32
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b084      	sub	sp, #16
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005336:	f7ff fe61 	bl	8004ffc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800533a:	f7fd fbe7 	bl	8002b0c <HAL_GetTick>
 800533e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005340:	e009      	b.n	8005356 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005342:	f7fd fbe3 	bl	8002b0c <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d902      	bls.n	8005356 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	73fb      	strb	r3, [r7, #15]
      break;
 8005354:	e004      	b.n	8005360 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005356:	f7ff fe60 	bl	800501a <LL_RCC_PLLSAI1_IsReady>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1f0      	bne.n	8005342 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005360:	7bfb      	ldrb	r3, [r7, #15]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d137      	bne.n	80053d6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005366:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	021b      	lsls	r3, r3, #8
 8005376:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800537a:	4313      	orrs	r3, r2
 800537c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800537e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005390:	4313      	orrs	r3, r2
 8005392:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005394:	f7ff fe23 	bl	8004fde <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005398:	f7fd fbb8 	bl	8002b0c <HAL_GetTick>
 800539c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800539e:	e009      	b.n	80053b4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053a0:	f7fd fbb4 	bl	8002b0c <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d902      	bls.n	80053b4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	73fb      	strb	r3, [r7, #15]
        break;
 80053b2:	e004      	b.n	80053be <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80053b4:	f7ff fe31 	bl	800501a <LL_RCC_PLLSAI1_IsReady>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d1f0      	bne.n	80053a0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80053be:	7bfb      	ldrb	r3, [r7, #15]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d108      	bne.n	80053d6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80053c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053c8:	691a      	ldr	r2, [r3, #16]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053d2:	4313      	orrs	r3, r2
 80053d4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80053ec:	f7ff fe06 	bl	8004ffc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80053f0:	f7fd fb8c 	bl	8002b0c <HAL_GetTick>
 80053f4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80053f6:	e009      	b.n	800540c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053f8:	f7fd fb88 	bl	8002b0c <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b02      	cmp	r3, #2
 8005404:	d902      	bls.n	800540c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	73fb      	strb	r3, [r7, #15]
      break;
 800540a:	e004      	b.n	8005416 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800540c:	f7ff fe05 	bl	800501a <LL_RCC_PLLSAI1_IsReady>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1f0      	bne.n	80053f8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005416:	7bfb      	ldrb	r3, [r7, #15]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d137      	bne.n	800548c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800541c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	021b      	lsls	r3, r3, #8
 800542c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005430:	4313      	orrs	r3, r2
 8005432:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005434:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005446:	4313      	orrs	r3, r2
 8005448:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800544a:	f7ff fdc8 	bl	8004fde <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800544e:	f7fd fb5d 	bl	8002b0c <HAL_GetTick>
 8005452:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005454:	e009      	b.n	800546a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005456:	f7fd fb59 	bl	8002b0c <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d902      	bls.n	800546a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	73fb      	strb	r3, [r7, #15]
        break;
 8005468:	e004      	b.n	8005474 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800546a:	f7ff fdd6 	bl	800501a <LL_RCC_PLLSAI1_IsReady>
 800546e:	4603      	mov	r3, r0
 8005470:	2b01      	cmp	r3, #1
 8005472:	d1f0      	bne.n	8005456 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005474:	7bfb      	ldrb	r3, [r7, #15]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d108      	bne.n	800548c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800547a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800547e:	691a      	ldr	r2, [r3, #16]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005488:	4313      	orrs	r3, r2
 800548a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800548c:	7bfb      	ldrb	r3, [r7, #15]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b084      	sub	sp, #16
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80054a2:	f7ff fdab 	bl	8004ffc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80054a6:	f7fd fb31 	bl	8002b0c <HAL_GetTick>
 80054aa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80054ac:	e009      	b.n	80054c2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054ae:	f7fd fb2d 	bl	8002b0c <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d902      	bls.n	80054c2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	73fb      	strb	r3, [r7, #15]
      break;
 80054c0:	e004      	b.n	80054cc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80054c2:	f7ff fdaa 	bl	800501a <LL_RCC_PLLSAI1_IsReady>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1f0      	bne.n	80054ae <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d137      	bne.n	8005542 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80054d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	021b      	lsls	r3, r3, #8
 80054e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054e6:	4313      	orrs	r3, r2
 80054e8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80054ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054fc:	4313      	orrs	r3, r2
 80054fe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005500:	f7ff fd6d 	bl	8004fde <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005504:	f7fd fb02 	bl	8002b0c <HAL_GetTick>
 8005508:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800550a:	e009      	b.n	8005520 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800550c:	f7fd fafe 	bl	8002b0c <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d902      	bls.n	8005520 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	73fb      	strb	r3, [r7, #15]
        break;
 800551e:	e004      	b.n	800552a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005520:	f7ff fd7b 	bl	800501a <LL_RCC_PLLSAI1_IsReady>
 8005524:	4603      	mov	r3, r0
 8005526:	2b01      	cmp	r3, #1
 8005528:	d1f0      	bne.n	800550c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d108      	bne.n	8005542 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005530:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800553e:	4313      	orrs	r3, r2
 8005540:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005542:	7bfb      	ldrb	r3, [r7, #15]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e09f      	b.n	800569e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d106      	bne.n	8005578 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fd f864 	bl	8002640 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005580:	4b49      	ldr	r3, [pc, #292]	@ (80056a8 <HAL_RTC_Init+0x15c>)
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f003 0310 	and.w	r3, r3, #16
 8005588:	2b10      	cmp	r3, #16
 800558a:	d07e      	beq.n	800568a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	22ca      	movs	r2, #202	@ 0xca
 8005592:	625a      	str	r2, [r3, #36]	@ 0x24
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2253      	movs	r2, #83	@ 0x53
 800559a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f8ab 	bl	80056f8 <RTC_EnterInitMode>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	22ff      	movs	r2, #255	@ 0xff
 80055ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2204      	movs	r2, #4
 80055b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	73fb      	strb	r3, [r7, #15]
 80055bc:	e067      	b.n	800568e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6812      	ldr	r2, [r2, #0]
 80055c8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80055cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055d0:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6899      	ldr	r1, [r3, #8]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	431a      	orrs	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	68d2      	ldr	r2, [r2, #12]
 80055f8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6919      	ldr	r1, [r3, #16]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	041a      	lsls	r2, r3, #16
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68da      	ldr	r2, [r3, #12]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800561c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0203 	bic.w	r2, r2, #3
 800562c:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	69da      	ldr	r2, [r3, #28]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f003 0320 	and.w	r3, r3, #32
 8005650:	2b00      	cmp	r3, #0
 8005652:	d113      	bne.n	800567c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f829 	bl	80056ac <HAL_RTC_WaitForSynchro>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00d      	beq.n	800567c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	22ff      	movs	r2, #255	@ 0xff
 8005666:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2204      	movs	r2, #4
 800566c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e010      	b.n	800569e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	22ff      	movs	r2, #255	@ 0xff
 8005682:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8005684:	2300      	movs	r3, #0
 8005686:	73fb      	strb	r3, [r7, #15]
 8005688:	e001      	b.n	800568e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800568e:	7bfb      	ldrb	r3, [r7, #15]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d103      	bne.n	800569c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800569c:	7bfb      	ldrb	r3, [r7, #15]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	40002800 	.word	0x40002800

080056ac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68da      	ldr	r2, [r3, #12]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80056c2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80056c4:	f7fd fa22 	bl	8002b0c <HAL_GetTick>
 80056c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80056ca:	e009      	b.n	80056e0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80056cc:	f7fd fa1e 	bl	8002b0c <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80056da:	d901      	bls.n	80056e0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e007      	b.n	80056f0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f003 0320 	and.w	r3, r3, #32
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0ee      	beq.n	80056cc <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800570a:	2b00      	cmp	r3, #0
 800570c:	d119      	bne.n	8005742 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005716:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005718:	f7fd f9f8 	bl	8002b0c <HAL_GetTick>
 800571c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800571e:	e009      	b.n	8005734 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005720:	f7fd f9f4 	bl	8002b0c <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800572e:	d901      	bls.n	8005734 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e007      	b.n	8005744 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0ee      	beq.n	8005720 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d101      	bne.n	8005766 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005762:	2302      	movs	r3, #2
 8005764:	e0a8      	b.n	80058b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2202      	movs	r2, #2
 8005772:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	22ca      	movs	r2, #202	@ 0xca
 800577c:	625a      	str	r2, [r3, #36]	@ 0x24
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2253      	movs	r2, #83	@ 0x53
 8005784:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005790:	2b00      	cmp	r3, #0
 8005792:	d020      	beq.n	80057d6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8005794:	f7fd f9ba 	bl	8002b0c <HAL_GetTick>
 8005798:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800579a:	e015      	b.n	80057c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800579c:	f7fd f9b6 	bl	8002b0c <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80057aa:	d90d      	bls.n	80057c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	22ff      	movs	r2, #255	@ 0xff
 80057b2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2203      	movs	r2, #3
 80057b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e077      	b.n	80058b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f003 0304 	and.w	r3, r3, #4
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1e2      	bne.n	800579c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057e4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80057f6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80057f8:	f7fd f988 	bl	8002b0c <HAL_GetTick>
 80057fc:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80057fe:	e015      	b.n	800582c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005800:	f7fd f984 	bl	8002b0c <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800580e:	d90d      	bls.n	800582c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	22ff      	movs	r2, #255	@ 0xff
 8005816:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2203      	movs	r2, #3
 800581c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e045      	b.n	80058b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f003 0304 	and.w	r3, r3, #4
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0e2      	beq.n	8005800 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 0207 	bic.w	r2, r2, #7
 8005850:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6899      	ldr	r1, [r3, #8]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	430a      	orrs	r2, r1
 8005860:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005862:	4b17      	ldr	r3, [pc, #92]	@ (80058c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005864:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005868:	4a15      	ldr	r2, [pc, #84]	@ (80058c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800586a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800586e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005872:	4b13      	ldr	r3, [pc, #76]	@ (80058c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a12      	ldr	r2, [pc, #72]	@ (80058c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005878:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800587c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800588c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800589c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	22ff      	movs	r2, #255	@ 0xff
 80058a4:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3718      	adds	r7, #24
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	58000800 	.word	0x58000800

080058c4 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d101      	bne.n	80058da <HAL_RTCEx_EnableBypassShadow+0x16>
 80058d6:	2302      	movs	r3, #2
 80058d8:	e024      	b.n	8005924 <HAL_RTCEx_EnableBypassShadow+0x60>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2202      	movs	r2, #2
 80058e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	22ca      	movs	r2, #202	@ 0xca
 80058f0:	625a      	str	r2, [r3, #36]	@ 0x24
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2253      	movs	r2, #83	@ 0x53
 80058f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 0220 	orr.w	r2, r2, #32
 8005908:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	22ff      	movs	r2, #255	@ 0xff
 8005910:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e049      	b.n	80059d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d106      	bne.n	800595c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7fc feaa 	bl	80026b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	3304      	adds	r3, #4
 800596c:	4619      	mov	r1, r3
 800596e:	4610      	mov	r0, r2
 8005970:	f000 fa94 	bl	8005e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
	...

080059e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d001      	beq.n	80059f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e036      	b.n	8005a66 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0201 	orr.w	r2, r2, #1
 8005a0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a17      	ldr	r2, [pc, #92]	@ (8005a74 <HAL_TIM_Base_Start_IT+0x94>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d004      	beq.n	8005a24 <HAL_TIM_Base_Start_IT+0x44>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a22:	d115      	bne.n	8005a50 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689a      	ldr	r2, [r3, #8]
 8005a2a:	4b13      	ldr	r3, [pc, #76]	@ (8005a78 <HAL_TIM_Base_Start_IT+0x98>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2b06      	cmp	r3, #6
 8005a34:	d015      	beq.n	8005a62 <HAL_TIM_Base_Start_IT+0x82>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a3c:	d011      	beq.n	8005a62 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f042 0201 	orr.w	r2, r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a4e:	e008      	b.n	8005a62 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0201 	orr.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	e000      	b.n	8005a64 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	40012c00 	.word	0x40012c00
 8005a78:	00010007 	.word	0x00010007

08005a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d122      	bne.n	8005ad8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d11b      	bne.n	8005ad8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f06f 0202 	mvn.w	r2, #2
 8005aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	f003 0303 	and.w	r3, r3, #3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d003      	beq.n	8005ac6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f9ce 	bl	8005e60 <HAL_TIM_IC_CaptureCallback>
 8005ac4:	e005      	b.n	8005ad2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f9c0 	bl	8005e4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 f9d1 	bl	8005e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f003 0304 	and.w	r3, r3, #4
 8005ae2:	2b04      	cmp	r3, #4
 8005ae4:	d122      	bne.n	8005b2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b04      	cmp	r3, #4
 8005af2:	d11b      	bne.n	8005b2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f06f 0204 	mvn.w	r2, #4
 8005afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2202      	movs	r2, #2
 8005b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d003      	beq.n	8005b1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f9a4 	bl	8005e60 <HAL_TIM_IC_CaptureCallback>
 8005b18:	e005      	b.n	8005b26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f996 	bl	8005e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f9a7 	bl	8005e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	f003 0308 	and.w	r3, r3, #8
 8005b36:	2b08      	cmp	r3, #8
 8005b38:	d122      	bne.n	8005b80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f003 0308 	and.w	r3, r3, #8
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d11b      	bne.n	8005b80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f06f 0208 	mvn.w	r2, #8
 8005b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2204      	movs	r2, #4
 8005b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f97a 	bl	8005e60 <HAL_TIM_IC_CaptureCallback>
 8005b6c:	e005      	b.n	8005b7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f96c 	bl	8005e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f97d 	bl	8005e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f003 0310 	and.w	r3, r3, #16
 8005b8a:	2b10      	cmp	r3, #16
 8005b8c:	d122      	bne.n	8005bd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f003 0310 	and.w	r3, r3, #16
 8005b98:	2b10      	cmp	r3, #16
 8005b9a:	d11b      	bne.n	8005bd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f06f 0210 	mvn.w	r2, #16
 8005ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2208      	movs	r2, #8
 8005baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f950 	bl	8005e60 <HAL_TIM_IC_CaptureCallback>
 8005bc0:	e005      	b.n	8005bce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f942 	bl	8005e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f953 	bl	8005e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d10e      	bne.n	8005c00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d107      	bne.n	8005c00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f06f 0201 	mvn.w	r2, #1
 8005bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7fc f8e6 	bl	8001dcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c0a:	2b80      	cmp	r3, #128	@ 0x80
 8005c0c:	d10e      	bne.n	8005c2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c18:	2b80      	cmp	r3, #128	@ 0x80
 8005c1a:	d107      	bne.n	8005c2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 faa2 	bl	8006170 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c3a:	d10e      	bne.n	8005c5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c46:	2b80      	cmp	r3, #128	@ 0x80
 8005c48:	d107      	bne.n	8005c5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fa95 	bl	8006184 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c64:	2b40      	cmp	r3, #64	@ 0x40
 8005c66:	d10e      	bne.n	8005c86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c72:	2b40      	cmp	r3, #64	@ 0x40
 8005c74:	d107      	bne.n	8005c86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f901 	bl	8005e88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	f003 0320 	and.w	r3, r3, #32
 8005c90:	2b20      	cmp	r3, #32
 8005c92:	d10e      	bne.n	8005cb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	f003 0320 	and.w	r3, r3, #32
 8005c9e:	2b20      	cmp	r3, #32
 8005ca0:	d107      	bne.n	8005cb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f06f 0220 	mvn.w	r2, #32
 8005caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fa55 	bl	800615c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cb2:	bf00      	nop
 8005cb4:	3708      	adds	r7, #8
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b084      	sub	sp, #16
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
 8005cc2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d101      	bne.n	8005cd6 <HAL_TIM_ConfigClockSource+0x1c>
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	e0b6      	b.n	8005e44 <HAL_TIM_ConfigClockSource+0x18a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2202      	movs	r2, #2
 8005ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005cf4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005cf8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d00:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d12:	d03e      	beq.n	8005d92 <HAL_TIM_ConfigClockSource+0xd8>
 8005d14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d18:	f200 8087 	bhi.w	8005e2a <HAL_TIM_ConfigClockSource+0x170>
 8005d1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d20:	f000 8086 	beq.w	8005e30 <HAL_TIM_ConfigClockSource+0x176>
 8005d24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d28:	d87f      	bhi.n	8005e2a <HAL_TIM_ConfigClockSource+0x170>
 8005d2a:	2b70      	cmp	r3, #112	@ 0x70
 8005d2c:	d01a      	beq.n	8005d64 <HAL_TIM_ConfigClockSource+0xaa>
 8005d2e:	2b70      	cmp	r3, #112	@ 0x70
 8005d30:	d87b      	bhi.n	8005e2a <HAL_TIM_ConfigClockSource+0x170>
 8005d32:	2b60      	cmp	r3, #96	@ 0x60
 8005d34:	d050      	beq.n	8005dd8 <HAL_TIM_ConfigClockSource+0x11e>
 8005d36:	2b60      	cmp	r3, #96	@ 0x60
 8005d38:	d877      	bhi.n	8005e2a <HAL_TIM_ConfigClockSource+0x170>
 8005d3a:	2b50      	cmp	r3, #80	@ 0x50
 8005d3c:	d03c      	beq.n	8005db8 <HAL_TIM_ConfigClockSource+0xfe>
 8005d3e:	2b50      	cmp	r3, #80	@ 0x50
 8005d40:	d873      	bhi.n	8005e2a <HAL_TIM_ConfigClockSource+0x170>
 8005d42:	2b40      	cmp	r3, #64	@ 0x40
 8005d44:	d058      	beq.n	8005df8 <HAL_TIM_ConfigClockSource+0x13e>
 8005d46:	2b40      	cmp	r3, #64	@ 0x40
 8005d48:	d86f      	bhi.n	8005e2a <HAL_TIM_ConfigClockSource+0x170>
 8005d4a:	2b30      	cmp	r3, #48	@ 0x30
 8005d4c:	d064      	beq.n	8005e18 <HAL_TIM_ConfigClockSource+0x15e>
 8005d4e:	2b30      	cmp	r3, #48	@ 0x30
 8005d50:	d86b      	bhi.n	8005e2a <HAL_TIM_ConfigClockSource+0x170>
 8005d52:	2b20      	cmp	r3, #32
 8005d54:	d060      	beq.n	8005e18 <HAL_TIM_ConfigClockSource+0x15e>
 8005d56:	2b20      	cmp	r3, #32
 8005d58:	d867      	bhi.n	8005e2a <HAL_TIM_ConfigClockSource+0x170>
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d05c      	beq.n	8005e18 <HAL_TIM_ConfigClockSource+0x15e>
 8005d5e:	2b10      	cmp	r3, #16
 8005d60:	d05a      	beq.n	8005e18 <HAL_TIM_ConfigClockSource+0x15e>
 8005d62:	e062      	b.n	8005e2a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d74:	f000 f972 	bl	800605c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d86:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	609a      	str	r2, [r3, #8]
      break;
 8005d90:	e04f      	b.n	8005e32 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005da2:	f000 f95b 	bl	800605c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005db4:	609a      	str	r2, [r3, #8]
      break;
 8005db6:	e03c      	b.n	8005e32 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	f000 f8cd 	bl	8005f64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2150      	movs	r1, #80	@ 0x50
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 f926 	bl	8006022 <TIM_ITRx_SetConfig>
      break;
 8005dd6:	e02c      	b.n	8005e32 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005de4:	461a      	mov	r2, r3
 8005de6:	f000 f8ec 	bl	8005fc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2160      	movs	r1, #96	@ 0x60
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 f916 	bl	8006022 <TIM_ITRx_SetConfig>
      break;
 8005df6:	e01c      	b.n	8005e32 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e04:	461a      	mov	r2, r3
 8005e06:	f000 f8ad 	bl	8005f64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2140      	movs	r1, #64	@ 0x40
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 f906 	bl	8006022 <TIM_ITRx_SetConfig>
      break;
 8005e16:	e00c      	b.n	8005e32 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4619      	mov	r1, r3
 8005e22:	4610      	mov	r0, r2
 8005e24:	f000 f8fd 	bl	8006022 <TIM_ITRx_SetConfig>
      break;
 8005e28:	e003      	b.n	8005e32 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e2e:	e000      	b.n	8005e32 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005e30:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a2a      	ldr	r2, [pc, #168]	@ (8005f58 <TIM_Base_SetConfig+0xbc>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d003      	beq.n	8005ebc <TIM_Base_SetConfig+0x20>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eba:	d108      	bne.n	8005ece <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a21      	ldr	r2, [pc, #132]	@ (8005f58 <TIM_Base_SetConfig+0xbc>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d00b      	beq.n	8005eee <TIM_Base_SetConfig+0x52>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005edc:	d007      	beq.n	8005eee <TIM_Base_SetConfig+0x52>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a1e      	ldr	r2, [pc, #120]	@ (8005f5c <TIM_Base_SetConfig+0xc0>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d003      	beq.n	8005eee <TIM_Base_SetConfig+0x52>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f60 <TIM_Base_SetConfig+0xc4>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d108      	bne.n	8005f00 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	689a      	ldr	r2, [r3, #8]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a0c      	ldr	r2, [pc, #48]	@ (8005f58 <TIM_Base_SetConfig+0xbc>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d007      	beq.n	8005f3c <TIM_Base_SetConfig+0xa0>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a0b      	ldr	r2, [pc, #44]	@ (8005f5c <TIM_Base_SetConfig+0xc0>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d003      	beq.n	8005f3c <TIM_Base_SetConfig+0xa0>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a0a      	ldr	r2, [pc, #40]	@ (8005f60 <TIM_Base_SetConfig+0xc4>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d103      	bne.n	8005f44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	691a      	ldr	r2, [r3, #16]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	615a      	str	r2, [r3, #20]
}
 8005f4a:	bf00      	nop
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	40012c00 	.word	0x40012c00
 8005f5c:	40014400 	.word	0x40014400
 8005f60:	40014800 	.word	0x40014800

08005f64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	f023 0201 	bic.w	r2, r3, #1
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	011b      	lsls	r3, r3, #4
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f023 030a 	bic.w	r3, r3, #10
 8005fa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	621a      	str	r2, [r3, #32]
}
 8005fb6:	bf00      	nop
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b087      	sub	sp, #28
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	60f8      	str	r0, [r7, #12]
 8005fca:	60b9      	str	r1, [r7, #8]
 8005fcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	f023 0210 	bic.w	r2, r3, #16
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005fec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	031b      	lsls	r3, r3, #12
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005ffe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	011b      	lsls	r3, r3, #4
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	4313      	orrs	r3, r2
 8006008:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	621a      	str	r2, [r3, #32]
}
 8006016:	bf00      	nop
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006022:	b480      	push	{r7}
 8006024:	b085      	sub	sp, #20
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006038:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800603c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4313      	orrs	r3, r2
 8006044:	f043 0307 	orr.w	r3, r3, #7
 8006048:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	609a      	str	r2, [r3, #8]
}
 8006050:	bf00      	nop
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800605c:	b480      	push	{r7}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006076:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	021a      	lsls	r2, r3, #8
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	431a      	orrs	r2, r3
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	4313      	orrs	r3, r2
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	4313      	orrs	r3, r2
 8006088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	609a      	str	r2, [r3, #8]
}
 8006090:	bf00      	nop
 8006092:	371c      	adds	r7, #28
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d101      	bne.n	80060b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060b0:	2302      	movs	r3, #2
 80060b2:	e04a      	b.n	800614a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a1f      	ldr	r2, [pc, #124]	@ (8006158 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d108      	bne.n	80060f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80060e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a12      	ldr	r2, [pc, #72]	@ (8006158 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d004      	beq.n	800611e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800611c:	d10c      	bne.n	8006138 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006124:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	4313      	orrs	r3, r2
 800612e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	40012c00 	.word	0x40012c00

0800615c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <LL_RCC_GetUSARTClockSource>:
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80061a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4013      	ands	r3, r2
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <LL_RCC_GetLPUARTClockSource>:
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80061c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4013      	ands	r3, r2
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e042      	b.n	8006270 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d106      	bne.n	8006202 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7fc f96f 	bl	80024e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2224      	movs	r2, #36	@ 0x24
 8006206:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f022 0201 	bic.w	r2, r2, #1
 8006218:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fcca 	bl	8006bb4 <UART_SetConfig>
 8006220:	4603      	mov	r3, r0
 8006222:	2b01      	cmp	r3, #1
 8006224:	d101      	bne.n	800622a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e022      	b.n	8006270 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fee6 	bl	8007004 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006246:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689a      	ldr	r2, [r3, #8]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006256:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f042 0201 	orr.w	r2, r2, #1
 8006266:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 ff6d 	bl	8007148 <UART_CheckIdleState>
 800626e:	4603      	mov	r3, r0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b08a      	sub	sp, #40	@ 0x28
 800627c:	af02      	add	r7, sp, #8
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	603b      	str	r3, [r7, #0]
 8006284:	4613      	mov	r3, r2
 8006286:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800628e:	2b20      	cmp	r3, #32
 8006290:	d17b      	bne.n	800638a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <HAL_UART_Transmit+0x26>
 8006298:	88fb      	ldrh	r3, [r7, #6]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e074      	b.n	800638c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2221      	movs	r2, #33	@ 0x21
 80062ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062b2:	f7fc fc2b 	bl	8002b0c <HAL_GetTick>
 80062b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	88fa      	ldrh	r2, [r7, #6]
 80062bc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	88fa      	ldrh	r2, [r7, #6]
 80062c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062d0:	d108      	bne.n	80062e4 <HAL_UART_Transmit+0x6c>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d104      	bne.n	80062e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80062da:	2300      	movs	r3, #0
 80062dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	61bb      	str	r3, [r7, #24]
 80062e2:	e003      	b.n	80062ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062e8:	2300      	movs	r3, #0
 80062ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062ec:	e030      	b.n	8006350 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	2200      	movs	r2, #0
 80062f6:	2180      	movs	r1, #128	@ 0x80
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 ffcf 	bl	800729c <UART_WaitOnFlagUntilTimeout>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d005      	beq.n	8006310 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2220      	movs	r2, #32
 8006308:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e03d      	b.n	800638c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10b      	bne.n	800632e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	881b      	ldrh	r3, [r3, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006324:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	3302      	adds	r3, #2
 800632a:	61bb      	str	r3, [r7, #24]
 800632c:	e007      	b.n	800633e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	781a      	ldrb	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	3301      	adds	r3, #1
 800633c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006344:	b29b      	uxth	r3, r3
 8006346:	3b01      	subs	r3, #1
 8006348:	b29a      	uxth	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006356:	b29b      	uxth	r3, r3
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1c8      	bne.n	80062ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	2200      	movs	r2, #0
 8006364:	2140      	movs	r1, #64	@ 0x40
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 ff98 	bl	800729c <UART_WaitOnFlagUntilTimeout>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d005      	beq.n	800637e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2220      	movs	r2, #32
 8006376:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e006      	b.n	800638c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2220      	movs	r2, #32
 8006382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	e000      	b.n	800638c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800638a:	2302      	movs	r3, #2
  }
}
 800638c:	4618      	mov	r0, r3
 800638e:	3720      	adds	r7, #32
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b08a      	sub	sp, #40	@ 0x28
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	4613      	mov	r3, r2
 80063a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063a8:	2b20      	cmp	r3, #32
 80063aa:	d137      	bne.n	800641c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <HAL_UART_Receive_IT+0x24>
 80063b2:	88fb      	ldrh	r3, [r7, #6]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e030      	b.n	800641e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a18      	ldr	r2, [pc, #96]	@ (8006428 <HAL_UART_Receive_IT+0x94>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d01f      	beq.n	800640c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d018      	beq.n	800640c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	e853 3f00 	ldrex	r3, [r3]
 80063e6:	613b      	str	r3, [r7, #16]
   return(result);
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80063ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	461a      	mov	r2, r3
 80063f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f8:	623b      	str	r3, [r7, #32]
 80063fa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fc:	69f9      	ldr	r1, [r7, #28]
 80063fe:	6a3a      	ldr	r2, [r7, #32]
 8006400:	e841 2300 	strex	r3, r2, [r1]
 8006404:	61bb      	str	r3, [r7, #24]
   return(result);
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1e6      	bne.n	80063da <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 800640c:	88fb      	ldrh	r3, [r7, #6]
 800640e:	461a      	mov	r2, r3
 8006410:	68b9      	ldr	r1, [r7, #8]
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f000 ffaa 	bl	800736c <UART_Start_Receive_IT>
 8006418:	4603      	mov	r3, r0
 800641a:	e000      	b.n	800641e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800641c:	2302      	movs	r3, #2
  }
}
 800641e:	4618      	mov	r0, r3
 8006420:	3728      	adds	r7, #40	@ 0x28
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	40008000 	.word	0x40008000

0800642c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b08a      	sub	sp, #40	@ 0x28
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	4613      	mov	r3, r2
 8006438:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006440:	2b20      	cmp	r3, #32
 8006442:	d167      	bne.n	8006514 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <HAL_UART_Transmit_DMA+0x24>
 800644a:	88fb      	ldrh	r3, [r7, #6]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e060      	b.n	8006516 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	88fa      	ldrh	r2, [r7, #6]
 800645e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	88fa      	ldrh	r2, [r7, #6]
 8006466:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2221      	movs	r2, #33	@ 0x21
 8006476:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800647e:	2b00      	cmp	r3, #0
 8006480:	d028      	beq.n	80064d4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006486:	4a26      	ldr	r2, [pc, #152]	@ (8006520 <HAL_UART_Transmit_DMA+0xf4>)
 8006488:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800648e:	4a25      	ldr	r2, [pc, #148]	@ (8006524 <HAL_UART_Transmit_DMA+0xf8>)
 8006490:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006496:	4a24      	ldr	r2, [pc, #144]	@ (8006528 <HAL_UART_Transmit_DMA+0xfc>)
 8006498:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800649e:	2200      	movs	r2, #0
 80064a0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064aa:	4619      	mov	r1, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	3328      	adds	r3, #40	@ 0x28
 80064b2:	461a      	mov	r2, r3
 80064b4:	88fb      	ldrh	r3, [r7, #6]
 80064b6:	f7fc fd8f 	bl	8002fd8 <HAL_DMA_Start_IT>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d009      	beq.n	80064d4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2210      	movs	r2, #16
 80064c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2220      	movs	r2, #32
 80064cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e020      	b.n	8006516 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2240      	movs	r2, #64	@ 0x40
 80064da:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	3308      	adds	r3, #8
 80064e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	e853 3f00 	ldrex	r3, [r3]
 80064ea:	613b      	str	r3, [r7, #16]
   return(result);
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	3308      	adds	r3, #8
 80064fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064fc:	623a      	str	r2, [r7, #32]
 80064fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006500:	69f9      	ldr	r1, [r7, #28]
 8006502:	6a3a      	ldr	r2, [r7, #32]
 8006504:	e841 2300 	strex	r3, r2, [r1]
 8006508:	61bb      	str	r3, [r7, #24]
   return(result);
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1e5      	bne.n	80064dc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006510:	2300      	movs	r3, #0
 8006512:	e000      	b.n	8006516 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006514:	2302      	movs	r3, #2
  }
}
 8006516:	4618      	mov	r0, r3
 8006518:	3728      	adds	r7, #40	@ 0x28
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	080076ff 	.word	0x080076ff
 8006524:	08007799 	.word	0x08007799
 8006528:	080077b5 	.word	0x080077b5

0800652c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b0ba      	sub	sp, #232	@ 0xe8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	69db      	ldr	r3, [r3, #28]
 800653a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006552:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006556:	f640 030f 	movw	r3, #2063	@ 0x80f
 800655a:	4013      	ands	r3, r2
 800655c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006560:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006564:	2b00      	cmp	r3, #0
 8006566:	d11b      	bne.n	80065a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800656c:	f003 0320 	and.w	r3, r3, #32
 8006570:	2b00      	cmp	r3, #0
 8006572:	d015      	beq.n	80065a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006578:	f003 0320 	and.w	r3, r3, #32
 800657c:	2b00      	cmp	r3, #0
 800657e:	d105      	bne.n	800658c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d009      	beq.n	80065a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 82e3 	beq.w	8006b5c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	4798      	blx	r3
      }
      return;
 800659e:	e2dd      	b.n	8006b5c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80065a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 8123 	beq.w	80067f0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80065aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80065ae:	4b8d      	ldr	r3, [pc, #564]	@ (80067e4 <HAL_UART_IRQHandler+0x2b8>)
 80065b0:	4013      	ands	r3, r2
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d106      	bne.n	80065c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80065b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80065ba:	4b8b      	ldr	r3, [pc, #556]	@ (80067e8 <HAL_UART_IRQHandler+0x2bc>)
 80065bc:	4013      	ands	r3, r2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 8116 	beq.w	80067f0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d011      	beq.n	80065f4 <HAL_UART_IRQHandler+0xc8>
 80065d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00b      	beq.n	80065f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2201      	movs	r2, #1
 80065e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065ea:	f043 0201 	orr.w	r2, r3, #1
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065f8:	f003 0302 	and.w	r3, r3, #2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d011      	beq.n	8006624 <HAL_UART_IRQHandler+0xf8>
 8006600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00b      	beq.n	8006624 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2202      	movs	r2, #2
 8006612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800661a:	f043 0204 	orr.w	r2, r3, #4
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b00      	cmp	r3, #0
 800662e:	d011      	beq.n	8006654 <HAL_UART_IRQHandler+0x128>
 8006630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00b      	beq.n	8006654 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2204      	movs	r2, #4
 8006642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800664a:	f043 0202 	orr.w	r2, r3, #2
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006658:	f003 0308 	and.w	r3, r3, #8
 800665c:	2b00      	cmp	r3, #0
 800665e:	d017      	beq.n	8006690 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006664:	f003 0320 	and.w	r3, r3, #32
 8006668:	2b00      	cmp	r3, #0
 800666a:	d105      	bne.n	8006678 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800666c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006670:	4b5c      	ldr	r3, [pc, #368]	@ (80067e4 <HAL_UART_IRQHandler+0x2b8>)
 8006672:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00b      	beq.n	8006690 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2208      	movs	r2, #8
 800667e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006686:	f043 0208 	orr.w	r2, r3, #8
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006694:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006698:	2b00      	cmp	r3, #0
 800669a:	d012      	beq.n	80066c2 <HAL_UART_IRQHandler+0x196>
 800669c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00c      	beq.n	80066c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066b8:	f043 0220 	orr.w	r2, r3, #32
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 8249 	beq.w	8006b60 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066d2:	f003 0320 	and.w	r3, r3, #32
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d013      	beq.n	8006702 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066de:	f003 0320 	and.w	r3, r3, #32
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d105      	bne.n	80066f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80066e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d007      	beq.n	8006702 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006708:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006716:	2b40      	cmp	r3, #64	@ 0x40
 8006718:	d005      	beq.n	8006726 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800671a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800671e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006722:	2b00      	cmp	r3, #0
 8006724:	d054      	beq.n	80067d0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 ff83 	bl	8007632 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006736:	2b40      	cmp	r3, #64	@ 0x40
 8006738:	d146      	bne.n	80067c8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3308      	adds	r3, #8
 8006740:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006744:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006748:	e853 3f00 	ldrex	r3, [r3]
 800674c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006750:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006754:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006758:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	3308      	adds	r3, #8
 8006762:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006766:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800676a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006772:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006776:	e841 2300 	strex	r3, r2, [r1]
 800677a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800677e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1d9      	bne.n	800673a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800678c:	2b00      	cmp	r3, #0
 800678e:	d017      	beq.n	80067c0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006796:	4a15      	ldr	r2, [pc, #84]	@ (80067ec <HAL_UART_IRQHandler+0x2c0>)
 8006798:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7fc fcf3 	bl	800318c <HAL_DMA_Abort_IT>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d019      	beq.n	80067e0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80067ba:	4610      	mov	r0, r2
 80067bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067be:	e00f      	b.n	80067e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f9e1 	bl	8006b88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c6:	e00b      	b.n	80067e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f9dd 	bl	8006b88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ce:	e007      	b.n	80067e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 f9d9 	bl	8006b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80067de:	e1bf      	b.n	8006b60 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067e0:	bf00      	nop
    return;
 80067e2:	e1bd      	b.n	8006b60 <HAL_UART_IRQHandler+0x634>
 80067e4:	10000001 	.word	0x10000001
 80067e8:	04000120 	.word	0x04000120
 80067ec:	08007835 	.word	0x08007835

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	f040 8153 	bne.w	8006aa0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80067fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067fe:	f003 0310 	and.w	r3, r3, #16
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 814c 	beq.w	8006aa0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800680c:	f003 0310 	and.w	r3, r3, #16
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 8145 	beq.w	8006aa0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2210      	movs	r2, #16
 800681c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006828:	2b40      	cmp	r3, #64	@ 0x40
 800682a:	f040 80bb 	bne.w	80069a4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800683c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 818f 	beq.w	8006b64 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800684c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006850:	429a      	cmp	r2, r3
 8006852:	f080 8187 	bcs.w	8006b64 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800685c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0320 	and.w	r3, r3, #32
 800686e:	2b00      	cmp	r3, #0
 8006870:	f040 8087 	bne.w	8006982 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006880:	e853 3f00 	ldrex	r3, [r3]
 8006884:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006888:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800688c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006890:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	461a      	mov	r2, r3
 800689a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800689e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80068a2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80068aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80068ae:	e841 2300 	strex	r3, r2, [r1]
 80068b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80068b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1da      	bne.n	8006874 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3308      	adds	r3, #8
 80068c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068c8:	e853 3f00 	ldrex	r3, [r3]
 80068cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80068ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80068d0:	f023 0301 	bic.w	r3, r3, #1
 80068d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3308      	adds	r3, #8
 80068de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80068e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80068e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80068ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80068ee:	e841 2300 	strex	r3, r2, [r1]
 80068f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80068f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1e1      	bne.n	80068be <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3308      	adds	r3, #8
 8006900:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006902:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006904:	e853 3f00 	ldrex	r3, [r3]
 8006908:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800690a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800690c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006910:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	3308      	adds	r3, #8
 800691a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800691e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006920:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006922:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006924:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800692c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1e3      	bne.n	80068fa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2220      	movs	r2, #32
 8006936:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006946:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006948:	e853 3f00 	ldrex	r3, [r3]
 800694c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800694e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006950:	f023 0310 	bic.w	r3, r3, #16
 8006954:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	461a      	mov	r2, r3
 800695e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006962:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006964:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006966:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006968:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800696a:	e841 2300 	strex	r3, r2, [r1]
 800696e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006970:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1e4      	bne.n	8006940 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800697c:	4618      	mov	r0, r3
 800697e:	f7fc fba6 	bl	80030ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2202      	movs	r2, #2
 8006986:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006994:	b29b      	uxth	r3, r3
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	b29b      	uxth	r3, r3
 800699a:	4619      	mov	r1, r3
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f8fd 	bl	8006b9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069a2:	e0df      	b.n	8006b64 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80069be:	b29b      	uxth	r3, r3
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 80d1 	beq.w	8006b68 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80069c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 80cc 	beq.w	8006b68 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	461a      	mov	r2, r3
 80069ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80069f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80069f4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069fa:	e841 2300 	strex	r3, r2, [r1]
 80069fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1e4      	bne.n	80069d0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3308      	adds	r3, #8
 8006a0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a10:	e853 3f00 	ldrex	r3, [r3]
 8006a14:	623b      	str	r3, [r7, #32]
   return(result);
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a1c:	f023 0301 	bic.w	r3, r3, #1
 8006a20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3308      	adds	r3, #8
 8006a2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006a2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e1      	bne.n	8006a06 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	e853 3f00 	ldrex	r3, [r3]
 8006a62:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f023 0310 	bic.w	r3, r3, #16
 8006a6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	461a      	mov	r2, r3
 8006a74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006a78:	61fb      	str	r3, [r7, #28]
 8006a7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7c:	69b9      	ldr	r1, [r7, #24]
 8006a7e:	69fa      	ldr	r2, [r7, #28]
 8006a80:	e841 2300 	strex	r3, r2, [r1]
 8006a84:	617b      	str	r3, [r7, #20]
   return(result);
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1e4      	bne.n	8006a56 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a96:	4619      	mov	r1, r3
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f87f 	bl	8006b9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a9e:	e063      	b.n	8006b68 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00e      	beq.n	8006aca <HAL_UART_IRQHandler+0x59e>
 8006aac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ab0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d008      	beq.n	8006aca <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006ac0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f001 fc14 	bl	80082f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ac8:	e051      	b.n	8006b6e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d014      	beq.n	8006b00 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006ad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d105      	bne.n	8006aee <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006ae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ae6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d008      	beq.n	8006b00 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d03a      	beq.n	8006b6c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	4798      	blx	r3
    }
    return;
 8006afe:	e035      	b.n	8006b6c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d009      	beq.n	8006b20 <HAL_UART_IRQHandler+0x5f4>
 8006b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d003      	beq.n	8006b20 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 fea1 	bl	8007860 <UART_EndTransmit_IT>
    return;
 8006b1e:	e026      	b.n	8006b6e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d009      	beq.n	8006b40 <HAL_UART_IRQHandler+0x614>
 8006b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b30:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d003      	beq.n	8006b40 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f001 fbed 	bl	8008318 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b3e:	e016      	b.n	8006b6e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d010      	beq.n	8006b6e <HAL_UART_IRQHandler+0x642>
 8006b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	da0c      	bge.n	8006b6e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f001 fbd5 	bl	8008304 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b5a:	e008      	b.n	8006b6e <HAL_UART_IRQHandler+0x642>
      return;
 8006b5c:	bf00      	nop
 8006b5e:	e006      	b.n	8006b6e <HAL_UART_IRQHandler+0x642>
    return;
 8006b60:	bf00      	nop
 8006b62:	e004      	b.n	8006b6e <HAL_UART_IRQHandler+0x642>
      return;
 8006b64:	bf00      	nop
 8006b66:	e002      	b.n	8006b6e <HAL_UART_IRQHandler+0x642>
      return;
 8006b68:	bf00      	nop
 8006b6a:	e000      	b.n	8006b6e <HAL_UART_IRQHandler+0x642>
    return;
 8006b6c:	bf00      	nop
  }
}
 8006b6e:	37e8      	adds	r7, #232	@ 0xe8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bb8:	b08c      	sub	sp, #48	@ 0x30
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	431a      	orrs	r2, r3
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	69db      	ldr	r3, [r3, #28]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	4baf      	ldr	r3, [pc, #700]	@ (8006ea0 <UART_SetConfig+0x2ec>)
 8006be4:	4013      	ands	r3, r2
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	6812      	ldr	r2, [r2, #0]
 8006bea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bec:	430b      	orrs	r3, r1
 8006bee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	68da      	ldr	r2, [r3, #12]
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4aa4      	ldr	r2, [pc, #656]	@ (8006ea4 <UART_SetConfig+0x2f0>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d004      	beq.n	8006c20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006c2a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	6812      	ldr	r2, [r2, #0]
 8006c32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c34:	430b      	orrs	r3, r1
 8006c36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3e:	f023 010f 	bic.w	r1, r3, #15
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	430a      	orrs	r2, r1
 8006c4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a95      	ldr	r2, [pc, #596]	@ (8006ea8 <UART_SetConfig+0x2f4>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d125      	bne.n	8006ca4 <UART_SetConfig+0xf0>
 8006c58:	2003      	movs	r0, #3
 8006c5a:	f7ff fa9d 	bl	8006198 <LL_RCC_GetUSARTClockSource>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b03      	cmp	r3, #3
 8006c62:	d81b      	bhi.n	8006c9c <UART_SetConfig+0xe8>
 8006c64:	a201      	add	r2, pc, #4	@ (adr r2, 8006c6c <UART_SetConfig+0xb8>)
 8006c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6a:	bf00      	nop
 8006c6c:	08006c7d 	.word	0x08006c7d
 8006c70:	08006c8d 	.word	0x08006c8d
 8006c74:	08006c85 	.word	0x08006c85
 8006c78:	08006c95 	.word	0x08006c95
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c82:	e042      	b.n	8006d0a <UART_SetConfig+0x156>
 8006c84:	2302      	movs	r3, #2
 8006c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c8a:	e03e      	b.n	8006d0a <UART_SetConfig+0x156>
 8006c8c:	2304      	movs	r3, #4
 8006c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c92:	e03a      	b.n	8006d0a <UART_SetConfig+0x156>
 8006c94:	2308      	movs	r3, #8
 8006c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c9a:	e036      	b.n	8006d0a <UART_SetConfig+0x156>
 8006c9c:	2310      	movs	r3, #16
 8006c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ca2:	e032      	b.n	8006d0a <UART_SetConfig+0x156>
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a7e      	ldr	r2, [pc, #504]	@ (8006ea4 <UART_SetConfig+0x2f0>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d12a      	bne.n	8006d04 <UART_SetConfig+0x150>
 8006cae:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8006cb2:	f7ff fa81 	bl	80061b8 <LL_RCC_GetLPUARTClockSource>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006cbc:	d01a      	beq.n	8006cf4 <UART_SetConfig+0x140>
 8006cbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006cc2:	d81b      	bhi.n	8006cfc <UART_SetConfig+0x148>
 8006cc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cc8:	d00c      	beq.n	8006ce4 <UART_SetConfig+0x130>
 8006cca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cce:	d815      	bhi.n	8006cfc <UART_SetConfig+0x148>
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <UART_SetConfig+0x128>
 8006cd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cd8:	d008      	beq.n	8006cec <UART_SetConfig+0x138>
 8006cda:	e00f      	b.n	8006cfc <UART_SetConfig+0x148>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ce2:	e012      	b.n	8006d0a <UART_SetConfig+0x156>
 8006ce4:	2302      	movs	r3, #2
 8006ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cea:	e00e      	b.n	8006d0a <UART_SetConfig+0x156>
 8006cec:	2304      	movs	r3, #4
 8006cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cf2:	e00a      	b.n	8006d0a <UART_SetConfig+0x156>
 8006cf4:	2308      	movs	r3, #8
 8006cf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cfa:	e006      	b.n	8006d0a <UART_SetConfig+0x156>
 8006cfc:	2310      	movs	r3, #16
 8006cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d02:	e002      	b.n	8006d0a <UART_SetConfig+0x156>
 8006d04:	2310      	movs	r3, #16
 8006d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a65      	ldr	r2, [pc, #404]	@ (8006ea4 <UART_SetConfig+0x2f0>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	f040 8097 	bne.w	8006e44 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d1a:	2b08      	cmp	r3, #8
 8006d1c:	d823      	bhi.n	8006d66 <UART_SetConfig+0x1b2>
 8006d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d24 <UART_SetConfig+0x170>)
 8006d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d24:	08006d49 	.word	0x08006d49
 8006d28:	08006d67 	.word	0x08006d67
 8006d2c:	08006d51 	.word	0x08006d51
 8006d30:	08006d67 	.word	0x08006d67
 8006d34:	08006d57 	.word	0x08006d57
 8006d38:	08006d67 	.word	0x08006d67
 8006d3c:	08006d67 	.word	0x08006d67
 8006d40:	08006d67 	.word	0x08006d67
 8006d44:	08006d5f 	.word	0x08006d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d48:	f7fd fefc 	bl	8004b44 <HAL_RCC_GetPCLK1Freq>
 8006d4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d4e:	e010      	b.n	8006d72 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d50:	4b56      	ldr	r3, [pc, #344]	@ (8006eac <UART_SetConfig+0x2f8>)
 8006d52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d54:	e00d      	b.n	8006d72 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d56:	f7fd fe75 	bl	8004a44 <HAL_RCC_GetSysClockFreq>
 8006d5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d5c:	e009      	b.n	8006d72 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d64:	e005      	b.n	8006d72 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 812b 	beq.w	8006fd0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7e:	4a4c      	ldr	r2, [pc, #304]	@ (8006eb0 <UART_SetConfig+0x2fc>)
 8006d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d84:	461a      	mov	r2, r3
 8006d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d88:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d8c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	4613      	mov	r3, r2
 8006d94:	005b      	lsls	r3, r3, #1
 8006d96:	4413      	add	r3, r2
 8006d98:	69ba      	ldr	r2, [r7, #24]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d305      	bcc.n	8006daa <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006da4:	69ba      	ldr	r2, [r7, #24]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d903      	bls.n	8006db2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006db0:	e10e      	b.n	8006fd0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db4:	2200      	movs	r2, #0
 8006db6:	60bb      	str	r3, [r7, #8]
 8006db8:	60fa      	str	r2, [r7, #12]
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dbe:	4a3c      	ldr	r2, [pc, #240]	@ (8006eb0 <UART_SetConfig+0x2fc>)
 8006dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	603b      	str	r3, [r7, #0]
 8006dca:	607a      	str	r2, [r7, #4]
 8006dcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006dd4:	f7f9 fa2c 	bl	8000230 <__aeabi_uldivmod>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	460b      	mov	r3, r1
 8006ddc:	4610      	mov	r0, r2
 8006dde:	4619      	mov	r1, r3
 8006de0:	f04f 0200 	mov.w	r2, #0
 8006de4:	f04f 0300 	mov.w	r3, #0
 8006de8:	020b      	lsls	r3, r1, #8
 8006dea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006dee:	0202      	lsls	r2, r0, #8
 8006df0:	6979      	ldr	r1, [r7, #20]
 8006df2:	6849      	ldr	r1, [r1, #4]
 8006df4:	0849      	lsrs	r1, r1, #1
 8006df6:	2000      	movs	r0, #0
 8006df8:	460c      	mov	r4, r1
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	eb12 0804 	adds.w	r8, r2, r4
 8006e00:	eb43 0905 	adc.w	r9, r3, r5
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	469a      	mov	sl, r3
 8006e0c:	4693      	mov	fp, r2
 8006e0e:	4652      	mov	r2, sl
 8006e10:	465b      	mov	r3, fp
 8006e12:	4640      	mov	r0, r8
 8006e14:	4649      	mov	r1, r9
 8006e16:	f7f9 fa0b 	bl	8000230 <__aeabi_uldivmod>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4613      	mov	r3, r2
 8006e20:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e22:	6a3b      	ldr	r3, [r7, #32]
 8006e24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e28:	d308      	bcc.n	8006e3c <UART_SetConfig+0x288>
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e30:	d204      	bcs.n	8006e3c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	6a3a      	ldr	r2, [r7, #32]
 8006e38:	60da      	str	r2, [r3, #12]
 8006e3a:	e0c9      	b.n	8006fd0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e42:	e0c5      	b.n	8006fd0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	69db      	ldr	r3, [r3, #28]
 8006e48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e4c:	d16d      	bne.n	8006f2a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006e4e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e52:	3b01      	subs	r3, #1
 8006e54:	2b07      	cmp	r3, #7
 8006e56:	d82d      	bhi.n	8006eb4 <UART_SetConfig+0x300>
 8006e58:	a201      	add	r2, pc, #4	@ (adr r2, 8006e60 <UART_SetConfig+0x2ac>)
 8006e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5e:	bf00      	nop
 8006e60:	08006e81 	.word	0x08006e81
 8006e64:	08006e89 	.word	0x08006e89
 8006e68:	08006eb5 	.word	0x08006eb5
 8006e6c:	08006e8f 	.word	0x08006e8f
 8006e70:	08006eb5 	.word	0x08006eb5
 8006e74:	08006eb5 	.word	0x08006eb5
 8006e78:	08006eb5 	.word	0x08006eb5
 8006e7c:	08006e97 	.word	0x08006e97
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e80:	f7fd fe76 	bl	8004b70 <HAL_RCC_GetPCLK2Freq>
 8006e84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e86:	e01b      	b.n	8006ec0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e88:	4b08      	ldr	r3, [pc, #32]	@ (8006eac <UART_SetConfig+0x2f8>)
 8006e8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e8c:	e018      	b.n	8006ec0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e8e:	f7fd fdd9 	bl	8004a44 <HAL_RCC_GetSysClockFreq>
 8006e92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e94:	e014      	b.n	8006ec0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e9c:	e010      	b.n	8006ec0 <UART_SetConfig+0x30c>
 8006e9e:	bf00      	nop
 8006ea0:	cfff69f3 	.word	0xcfff69f3
 8006ea4:	40008000 	.word	0x40008000
 8006ea8:	40013800 	.word	0x40013800
 8006eac:	00f42400 	.word	0x00f42400
 8006eb0:	0800ff90 	.word	0x0800ff90
      default:
        pclk = 0U;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ebe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f000 8084 	beq.w	8006fd0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ecc:	4a4b      	ldr	r2, [pc, #300]	@ (8006ffc <UART_SetConfig+0x448>)
 8006ece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006eda:	005a      	lsls	r2, r3, #1
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	085b      	lsrs	r3, r3, #1
 8006ee2:	441a      	add	r2, r3
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eec:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	2b0f      	cmp	r3, #15
 8006ef2:	d916      	bls.n	8006f22 <UART_SetConfig+0x36e>
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006efa:	d212      	bcs.n	8006f22 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006efc:	6a3b      	ldr	r3, [r7, #32]
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	f023 030f 	bic.w	r3, r3, #15
 8006f04:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	085b      	lsrs	r3, r3, #1
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	f003 0307 	and.w	r3, r3, #7
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	8bfb      	ldrh	r3, [r7, #30]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	8bfa      	ldrh	r2, [r7, #30]
 8006f1e:	60da      	str	r2, [r3, #12]
 8006f20:	e056      	b.n	8006fd0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006f28:	e052      	b.n	8006fd0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	2b07      	cmp	r3, #7
 8006f32:	d822      	bhi.n	8006f7a <UART_SetConfig+0x3c6>
 8006f34:	a201      	add	r2, pc, #4	@ (adr r2, 8006f3c <UART_SetConfig+0x388>)
 8006f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3a:	bf00      	nop
 8006f3c:	08006f5d 	.word	0x08006f5d
 8006f40:	08006f65 	.word	0x08006f65
 8006f44:	08006f7b 	.word	0x08006f7b
 8006f48:	08006f6b 	.word	0x08006f6b
 8006f4c:	08006f7b 	.word	0x08006f7b
 8006f50:	08006f7b 	.word	0x08006f7b
 8006f54:	08006f7b 	.word	0x08006f7b
 8006f58:	08006f73 	.word	0x08006f73
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f5c:	f7fd fe08 	bl	8004b70 <HAL_RCC_GetPCLK2Freq>
 8006f60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f62:	e010      	b.n	8006f86 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f64:	4b26      	ldr	r3, [pc, #152]	@ (8007000 <UART_SetConfig+0x44c>)
 8006f66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f68:	e00d      	b.n	8006f86 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f6a:	f7fd fd6b 	bl	8004a44 <HAL_RCC_GetSysClockFreq>
 8006f6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f70:	e009      	b.n	8006f86 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f78:	e005      	b.n	8006f86 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f84:	bf00      	nop
    }

    if (pclk != 0U)
 8006f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d021      	beq.n	8006fd0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f90:	4a1a      	ldr	r2, [pc, #104]	@ (8006ffc <UART_SetConfig+0x448>)
 8006f92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f96:	461a      	mov	r2, r3
 8006f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	085b      	lsrs	r3, r3, #1
 8006fa4:	441a      	add	r2, r3
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	2b0f      	cmp	r3, #15
 8006fb4:	d909      	bls.n	8006fca <UART_SetConfig+0x416>
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fbc:	d205      	bcs.n	8006fca <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	60da      	str	r2, [r3, #12]
 8006fc8:	e002      	b.n	8006fd0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006fec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3730      	adds	r7, #48	@ 0x30
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ffa:	bf00      	nop
 8006ffc:	0800ff90 	.word	0x0800ff90
 8007000:	00f42400 	.word	0x00f42400

08007004 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00a      	beq.n	800702e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00a      	beq.n	8007050 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	430a      	orrs	r2, r1
 800704e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007054:	f003 0304 	and.w	r3, r3, #4
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00a      	beq.n	8007072 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	430a      	orrs	r2, r1
 8007070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007076:	f003 0308 	and.w	r3, r3, #8
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00a      	beq.n	8007094 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	430a      	orrs	r2, r1
 8007092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007098:	f003 0310 	and.w	r3, r3, #16
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00a      	beq.n	80070b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ba:	f003 0320 	and.w	r3, r3, #32
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00a      	beq.n	80070d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	430a      	orrs	r2, r1
 80070d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d01a      	beq.n	800711a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007102:	d10a      	bne.n	800711a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	430a      	orrs	r2, r1
 8007118:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800711e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00a      	beq.n	800713c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	430a      	orrs	r2, r1
 800713a:	605a      	str	r2, [r3, #4]
  }
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b098      	sub	sp, #96	@ 0x60
 800714c:	af02      	add	r7, sp, #8
 800714e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007158:	f7fb fcd8 	bl	8002b0c <HAL_GetTick>
 800715c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0308 	and.w	r3, r3, #8
 8007168:	2b08      	cmp	r3, #8
 800716a:	d12f      	bne.n	80071cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800716c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007174:	2200      	movs	r2, #0
 8007176:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f88e 	bl	800729c <UART_WaitOnFlagUntilTimeout>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d022      	beq.n	80071cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800718e:	e853 3f00 	ldrex	r3, [r3]
 8007192:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007196:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800719a:	653b      	str	r3, [r7, #80]	@ 0x50
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	461a      	mov	r2, r3
 80071a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80071a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80071aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071ac:	e841 2300 	strex	r3, r2, [r1]
 80071b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1e6      	bne.n	8007186 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2220      	movs	r2, #32
 80071bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e063      	b.n	8007294 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0304 	and.w	r3, r3, #4
 80071d6:	2b04      	cmp	r3, #4
 80071d8:	d149      	bne.n	800726e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071e2:	2200      	movs	r2, #0
 80071e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f857 	bl	800729c <UART_WaitOnFlagUntilTimeout>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d03c      	beq.n	800726e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fc:	e853 3f00 	ldrex	r3, [r3]
 8007200:	623b      	str	r3, [r7, #32]
   return(result);
 8007202:	6a3b      	ldr	r3, [r7, #32]
 8007204:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007208:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	461a      	mov	r2, r3
 8007210:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007212:	633b      	str	r3, [r7, #48]	@ 0x30
 8007214:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007216:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007218:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800721a:	e841 2300 	strex	r3, r2, [r1]
 800721e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1e6      	bne.n	80071f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	3308      	adds	r3, #8
 800722c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	e853 3f00 	ldrex	r3, [r3]
 8007234:	60fb      	str	r3, [r7, #12]
   return(result);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f023 0301 	bic.w	r3, r3, #1
 800723c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	3308      	adds	r3, #8
 8007244:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007246:	61fa      	str	r2, [r7, #28]
 8007248:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724a:	69b9      	ldr	r1, [r7, #24]
 800724c:	69fa      	ldr	r2, [r7, #28]
 800724e:	e841 2300 	strex	r3, r2, [r1]
 8007252:	617b      	str	r3, [r7, #20]
   return(result);
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1e5      	bne.n	8007226 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2220      	movs	r2, #32
 800725e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e012      	b.n	8007294 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2220      	movs	r2, #32
 8007272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2220      	movs	r2, #32
 800727a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3758      	adds	r7, #88	@ 0x58
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	603b      	str	r3, [r7, #0]
 80072a8:	4613      	mov	r3, r2
 80072aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072ac:	e049      	b.n	8007342 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072b4:	d045      	beq.n	8007342 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072b6:	f7fb fc29 	bl	8002b0c <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	69ba      	ldr	r2, [r7, #24]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d302      	bcc.n	80072cc <UART_WaitOnFlagUntilTimeout+0x30>
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e048      	b.n	8007362 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0304 	and.w	r3, r3, #4
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d031      	beq.n	8007342 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	69db      	ldr	r3, [r3, #28]
 80072e4:	f003 0308 	and.w	r3, r3, #8
 80072e8:	2b08      	cmp	r3, #8
 80072ea:	d110      	bne.n	800730e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2208      	movs	r2, #8
 80072f2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 f99c 	bl	8007632 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2208      	movs	r2, #8
 80072fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e029      	b.n	8007362 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	69db      	ldr	r3, [r3, #28]
 8007314:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007318:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800731c:	d111      	bne.n	8007342 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007326:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f000 f982 	bl	8007632 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2220      	movs	r2, #32
 8007332:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e00f      	b.n	8007362 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	69da      	ldr	r2, [r3, #28]
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	4013      	ands	r3, r2
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	429a      	cmp	r2, r3
 8007350:	bf0c      	ite	eq
 8007352:	2301      	moveq	r3, #1
 8007354:	2300      	movne	r3, #0
 8007356:	b2db      	uxtb	r3, r3
 8007358:	461a      	mov	r2, r3
 800735a:	79fb      	ldrb	r3, [r7, #7]
 800735c:	429a      	cmp	r2, r3
 800735e:	d0a6      	beq.n	80072ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
	...

0800736c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800736c:	b480      	push	{r7}
 800736e:	b0a3      	sub	sp, #140	@ 0x8c
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	4613      	mov	r3, r2
 8007378:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	88fa      	ldrh	r2, [r7, #6]
 8007384:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	88fa      	ldrh	r2, [r7, #6]
 800738c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800739e:	d10e      	bne.n	80073be <UART_Start_Receive_IT+0x52>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d105      	bne.n	80073b4 <UART_Start_Receive_IT+0x48>
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80073ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80073b2:	e02d      	b.n	8007410 <UART_Start_Receive_IT+0xa4>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	22ff      	movs	r2, #255	@ 0xff
 80073b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80073bc:	e028      	b.n	8007410 <UART_Start_Receive_IT+0xa4>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10d      	bne.n	80073e2 <UART_Start_Receive_IT+0x76>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d104      	bne.n	80073d8 <UART_Start_Receive_IT+0x6c>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	22ff      	movs	r2, #255	@ 0xff
 80073d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80073d6:	e01b      	b.n	8007410 <UART_Start_Receive_IT+0xa4>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	227f      	movs	r2, #127	@ 0x7f
 80073dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80073e0:	e016      	b.n	8007410 <UART_Start_Receive_IT+0xa4>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073ea:	d10d      	bne.n	8007408 <UART_Start_Receive_IT+0x9c>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d104      	bne.n	80073fe <UART_Start_Receive_IT+0x92>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	227f      	movs	r2, #127	@ 0x7f
 80073f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80073fc:	e008      	b.n	8007410 <UART_Start_Receive_IT+0xa4>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	223f      	movs	r2, #63	@ 0x3f
 8007402:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007406:	e003      	b.n	8007410 <UART_Start_Receive_IT+0xa4>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2222      	movs	r2, #34	@ 0x22
 800741c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3308      	adds	r3, #8
 8007426:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007428:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800742a:	e853 3f00 	ldrex	r3, [r3]
 800742e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007430:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007432:	f043 0301 	orr.w	r3, r3, #1
 8007436:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3308      	adds	r3, #8
 8007440:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007444:	673a      	str	r2, [r7, #112]	@ 0x70
 8007446:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007448:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800744a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800744c:	e841 2300 	strex	r3, r2, [r1]
 8007450:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007452:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1e3      	bne.n	8007420 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800745c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007460:	d14f      	bne.n	8007502 <UART_Start_Receive_IT+0x196>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007468:	88fa      	ldrh	r2, [r7, #6]
 800746a:	429a      	cmp	r2, r3
 800746c:	d349      	bcc.n	8007502 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007476:	d107      	bne.n	8007488 <UART_Start_Receive_IT+0x11c>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d103      	bne.n	8007488 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	4a47      	ldr	r2, [pc, #284]	@ (80075a0 <UART_Start_Receive_IT+0x234>)
 8007484:	675a      	str	r2, [r3, #116]	@ 0x74
 8007486:	e002      	b.n	800748e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4a46      	ldr	r2, [pc, #280]	@ (80075a4 <UART_Start_Receive_IT+0x238>)
 800748c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d01a      	beq.n	80074cc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800749e:	e853 3f00 	ldrex	r3, [r3]
 80074a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80074a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	461a      	mov	r2, r3
 80074b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80074b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074ba:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074bc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80074be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80074c0:	e841 2300 	strex	r3, r2, [r1]
 80074c4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80074c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1e4      	bne.n	8007496 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3308      	adds	r3, #8
 80074d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074d6:	e853 3f00 	ldrex	r3, [r3]
 80074da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80074dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	3308      	adds	r3, #8
 80074ea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80074ec:	64ba      	str	r2, [r7, #72]	@ 0x48
 80074ee:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80074f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074f4:	e841 2300 	strex	r3, r2, [r1]
 80074f8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80074fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1e5      	bne.n	80074cc <UART_Start_Receive_IT+0x160>
 8007500:	e046      	b.n	8007590 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800750a:	d107      	bne.n	800751c <UART_Start_Receive_IT+0x1b0>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d103      	bne.n	800751c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	4a24      	ldr	r2, [pc, #144]	@ (80075a8 <UART_Start_Receive_IT+0x23c>)
 8007518:	675a      	str	r2, [r3, #116]	@ 0x74
 800751a:	e002      	b.n	8007522 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	4a23      	ldr	r2, [pc, #140]	@ (80075ac <UART_Start_Receive_IT+0x240>)
 8007520:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d019      	beq.n	800755e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007532:	e853 3f00 	ldrex	r3, [r3]
 8007536:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800753e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	461a      	mov	r2, r3
 8007546:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007548:	637b      	str	r3, [r7, #52]	@ 0x34
 800754a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800754e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007550:	e841 2300 	strex	r3, r2, [r1]
 8007554:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1e6      	bne.n	800752a <UART_Start_Receive_IT+0x1be>
 800755c:	e018      	b.n	8007590 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	e853 3f00 	ldrex	r3, [r3]
 800756a:	613b      	str	r3, [r7, #16]
   return(result);
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	f043 0320 	orr.w	r3, r3, #32
 8007572:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	461a      	mov	r2, r3
 800757a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800757c:	623b      	str	r3, [r7, #32]
 800757e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007580:	69f9      	ldr	r1, [r7, #28]
 8007582:	6a3a      	ldr	r2, [r7, #32]
 8007584:	e841 2300 	strex	r3, r2, [r1]
 8007588:	61bb      	str	r3, [r7, #24]
   return(result);
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1e6      	bne.n	800755e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	378c      	adds	r7, #140	@ 0x8c
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	08007f89 	.word	0x08007f89
 80075a4:	08007c29 	.word	0x08007c29
 80075a8:	08007a71 	.word	0x08007a71
 80075ac:	080078b9 	.word	0x080078b9

080075b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b08f      	sub	sp, #60	@ 0x3c
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075be:	6a3b      	ldr	r3, [r7, #32]
 80075c0:	e853 3f00 	ldrex	r3, [r3]
 80075c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80075cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	461a      	mov	r2, r3
 80075d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075d8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075de:	e841 2300 	strex	r3, r2, [r1]
 80075e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1e6      	bne.n	80075b8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	3308      	adds	r3, #8
 80075f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	e853 3f00 	ldrex	r3, [r3]
 80075f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007600:	633b      	str	r3, [r7, #48]	@ 0x30
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	3308      	adds	r3, #8
 8007608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800760a:	61ba      	str	r2, [r7, #24]
 800760c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760e:	6979      	ldr	r1, [r7, #20]
 8007610:	69ba      	ldr	r2, [r7, #24]
 8007612:	e841 2300 	strex	r3, r2, [r1]
 8007616:	613b      	str	r3, [r7, #16]
   return(result);
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1e5      	bne.n	80075ea <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2220      	movs	r2, #32
 8007622:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007626:	bf00      	nop
 8007628:	373c      	adds	r7, #60	@ 0x3c
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007632:	b480      	push	{r7}
 8007634:	b095      	sub	sp, #84	@ 0x54
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007642:	e853 3f00 	ldrex	r3, [r3]
 8007646:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800764e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	461a      	mov	r2, r3
 8007656:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007658:	643b      	str	r3, [r7, #64]	@ 0x40
 800765a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800765e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007660:	e841 2300 	strex	r3, r2, [r1]
 8007664:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1e6      	bne.n	800763a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3308      	adds	r3, #8
 8007672:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	e853 3f00 	ldrex	r3, [r3]
 800767a:	61fb      	str	r3, [r7, #28]
   return(result);
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007682:	f023 0301 	bic.w	r3, r3, #1
 8007686:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3308      	adds	r3, #8
 800768e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007690:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007692:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007694:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007696:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007698:	e841 2300 	strex	r3, r2, [r1]
 800769c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800769e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1e3      	bne.n	800766c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d118      	bne.n	80076de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	e853 3f00 	ldrex	r3, [r3]
 80076b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	f023 0310 	bic.w	r3, r3, #16
 80076c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	461a      	mov	r2, r3
 80076c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076ca:	61bb      	str	r3, [r7, #24]
 80076cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ce:	6979      	ldr	r1, [r7, #20]
 80076d0:	69ba      	ldr	r2, [r7, #24]
 80076d2:	e841 2300 	strex	r3, r2, [r1]
 80076d6:	613b      	str	r3, [r7, #16]
   return(result);
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1e6      	bne.n	80076ac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2220      	movs	r2, #32
 80076e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80076f2:	bf00      	nop
 80076f4:	3754      	adds	r7, #84	@ 0x54
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b090      	sub	sp, #64	@ 0x40
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800770a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0320 	and.w	r3, r3, #32
 8007716:	2b00      	cmp	r3, #0
 8007718:	d137      	bne.n	800778a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800771a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800771c:	2200      	movs	r2, #0
 800771e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	3308      	adds	r3, #8
 8007728:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772c:	e853 3f00 	ldrex	r3, [r3]
 8007730:	623b      	str	r3, [r7, #32]
   return(result);
 8007732:	6a3b      	ldr	r3, [r7, #32]
 8007734:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007738:	63bb      	str	r3, [r7, #56]	@ 0x38
 800773a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3308      	adds	r3, #8
 8007740:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007742:	633a      	str	r2, [r7, #48]	@ 0x30
 8007744:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007746:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007748:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800774a:	e841 2300 	strex	r3, r2, [r1]
 800774e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1e5      	bne.n	8007722 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	e853 3f00 	ldrex	r3, [r3]
 8007762:	60fb      	str	r3, [r7, #12]
   return(result);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800776a:	637b      	str	r3, [r7, #52]	@ 0x34
 800776c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	461a      	mov	r2, r3
 8007772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007774:	61fb      	str	r3, [r7, #28]
 8007776:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007778:	69b9      	ldr	r1, [r7, #24]
 800777a:	69fa      	ldr	r2, [r7, #28]
 800777c:	e841 2300 	strex	r3, r2, [r1]
 8007780:	617b      	str	r3, [r7, #20]
   return(result);
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1e6      	bne.n	8007756 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007788:	e002      	b.n	8007790 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800778a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800778c:	f7fa fab8 	bl	8001d00 <HAL_UART_TxCpltCallback>
}
 8007790:	bf00      	nop
 8007792:	3740      	adds	r7, #64	@ 0x40
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077a4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f7ff f9e4 	bl	8006b74 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077ac:	bf00      	nop
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b086      	sub	sp, #24
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077c8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077d0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077dc:	2b80      	cmp	r3, #128	@ 0x80
 80077de:	d109      	bne.n	80077f4 <UART_DMAError+0x40>
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	2b21      	cmp	r3, #33	@ 0x21
 80077e4:	d106      	bne.n	80077f4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80077ee:	6978      	ldr	r0, [r7, #20]
 80077f0:	f7ff fede 	bl	80075b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077fe:	2b40      	cmp	r3, #64	@ 0x40
 8007800:	d109      	bne.n	8007816 <UART_DMAError+0x62>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2b22      	cmp	r3, #34	@ 0x22
 8007806:	d106      	bne.n	8007816 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	2200      	movs	r2, #0
 800780c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007810:	6978      	ldr	r0, [r7, #20]
 8007812:	f7ff ff0e 	bl	8007632 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800781c:	f043 0210 	orr.w	r2, r3, #16
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007826:	6978      	ldr	r0, [r7, #20]
 8007828:	f7ff f9ae 	bl	8006b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800782c:	bf00      	nop
 800782e:	3718      	adds	r7, #24
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007840:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f7ff f998 	bl	8006b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007858:	bf00      	nop
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b088      	sub	sp, #32
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	e853 3f00 	ldrex	r3, [r3]
 8007874:	60bb      	str	r3, [r7, #8]
   return(result);
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800787c:	61fb      	str	r3, [r7, #28]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	461a      	mov	r2, r3
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	61bb      	str	r3, [r7, #24]
 8007888:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788a:	6979      	ldr	r1, [r7, #20]
 800788c:	69ba      	ldr	r2, [r7, #24]
 800788e:	e841 2300 	strex	r3, r2, [r1]
 8007892:	613b      	str	r3, [r7, #16]
   return(result);
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1e6      	bne.n	8007868 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2220      	movs	r2, #32
 800789e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f7fa fa29 	bl	8001d00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078ae:	bf00      	nop
 80078b0:	3720      	adds	r7, #32
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
	...

080078b8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b09c      	sub	sp, #112	@ 0x70
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80078c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078d0:	2b22      	cmp	r3, #34	@ 0x22
 80078d2:	f040 80be 	bne.w	8007a52 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80078e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80078e4:	b2d9      	uxtb	r1, r3
 80078e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078f0:	400a      	ands	r2, r1
 80078f2:	b2d2      	uxtb	r2, r2
 80078f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078fa:	1c5a      	adds	r2, r3, #1
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007906:	b29b      	uxth	r3, r3
 8007908:	3b01      	subs	r3, #1
 800790a:	b29a      	uxth	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007918:	b29b      	uxth	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	f040 80a1 	bne.w	8007a62 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007926:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007928:	e853 3f00 	ldrex	r3, [r3]
 800792c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800792e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007930:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007934:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	461a      	mov	r2, r3
 800793c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800793e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007940:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007942:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007944:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007946:	e841 2300 	strex	r3, r2, [r1]
 800794a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800794c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1e6      	bne.n	8007920 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	3308      	adds	r3, #8
 8007958:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800795c:	e853 3f00 	ldrex	r3, [r3]
 8007960:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007964:	f023 0301 	bic.w	r3, r3, #1
 8007968:	667b      	str	r3, [r7, #100]	@ 0x64
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3308      	adds	r3, #8
 8007970:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007972:	647a      	str	r2, [r7, #68]	@ 0x44
 8007974:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007976:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007978:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800797a:	e841 2300 	strex	r3, r2, [r1]
 800797e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1e5      	bne.n	8007952 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2220      	movs	r2, #32
 800798a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a33      	ldr	r2, [pc, #204]	@ (8007a6c <UART_RxISR_8BIT+0x1b4>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d01f      	beq.n	80079e4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d018      	beq.n	80079e4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ba:	e853 3f00 	ldrex	r3, [r3]
 80079be:	623b      	str	r3, [r7, #32]
   return(result);
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80079c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	461a      	mov	r2, r3
 80079ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80079d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079d8:	e841 2300 	strex	r3, r2, [r1]
 80079dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1e6      	bne.n	80079b2 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d12e      	bne.n	8007a4a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	e853 3f00 	ldrex	r3, [r3]
 80079fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f023 0310 	bic.w	r3, r3, #16
 8007a06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a10:	61fb      	str	r3, [r7, #28]
 8007a12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a14:	69b9      	ldr	r1, [r7, #24]
 8007a16:	69fa      	ldr	r2, [r7, #28]
 8007a18:	e841 2300 	strex	r3, r2, [r1]
 8007a1c:	617b      	str	r3, [r7, #20]
   return(result);
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1e6      	bne.n	80079f2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	69db      	ldr	r3, [r3, #28]
 8007a2a:	f003 0310 	and.w	r3, r3, #16
 8007a2e:	2b10      	cmp	r3, #16
 8007a30:	d103      	bne.n	8007a3a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2210      	movs	r2, #16
 8007a38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a40:	4619      	mov	r1, r3
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7ff f8aa 	bl	8006b9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a48:	e00b      	b.n	8007a62 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7fa f93a 	bl	8001cc4 <HAL_UART_RxCpltCallback>
}
 8007a50:	e007      	b.n	8007a62 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	699a      	ldr	r2, [r3, #24]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f042 0208 	orr.w	r2, r2, #8
 8007a60:	619a      	str	r2, [r3, #24]
}
 8007a62:	bf00      	nop
 8007a64:	3770      	adds	r7, #112	@ 0x70
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	40008000 	.word	0x40008000

08007a70 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b09c      	sub	sp, #112	@ 0x70
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007a7e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a88:	2b22      	cmp	r3, #34	@ 0x22
 8007a8a:	f040 80be 	bne.w	8007c0a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a94:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a9c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007a9e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007aa2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007aac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ab2:	1c9a      	adds	r2, r3, #2
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f040 80a1 	bne.w	8007c1a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ade:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ae0:	e853 3f00 	ldrex	r3, [r3]
 8007ae4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007ae6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ae8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007aec:	667b      	str	r3, [r7, #100]	@ 0x64
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	461a      	mov	r2, r3
 8007af4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007af6:	657b      	str	r3, [r7, #84]	@ 0x54
 8007af8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007afc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007afe:	e841 2300 	strex	r3, r2, [r1]
 8007b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007b04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1e6      	bne.n	8007ad8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	3308      	adds	r3, #8
 8007b10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b1c:	f023 0301 	bic.w	r3, r3, #1
 8007b20:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	3308      	adds	r3, #8
 8007b28:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007b2a:	643a      	str	r2, [r7, #64]	@ 0x40
 8007b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e5      	bne.n	8007b0a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2220      	movs	r2, #32
 8007b42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a33      	ldr	r2, [pc, #204]	@ (8007c24 <UART_RxISR_16BIT+0x1b4>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d01f      	beq.n	8007b9c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d018      	beq.n	8007b9c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	e853 3f00 	ldrex	r3, [r3]
 8007b76:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	461a      	mov	r2, r3
 8007b86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b8a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b90:	e841 2300 	strex	r3, r2, [r1]
 8007b94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1e6      	bne.n	8007b6a <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d12e      	bne.n	8007c02 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	e853 3f00 	ldrex	r3, [r3]
 8007bb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	f023 0310 	bic.w	r3, r3, #16
 8007bbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007bc8:	61bb      	str	r3, [r7, #24]
 8007bca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bcc:	6979      	ldr	r1, [r7, #20]
 8007bce:	69ba      	ldr	r2, [r7, #24]
 8007bd0:	e841 2300 	strex	r3, r2, [r1]
 8007bd4:	613b      	str	r3, [r7, #16]
   return(result);
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1e6      	bne.n	8007baa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	69db      	ldr	r3, [r3, #28]
 8007be2:	f003 0310 	and.w	r3, r3, #16
 8007be6:	2b10      	cmp	r3, #16
 8007be8:	d103      	bne.n	8007bf2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2210      	movs	r2, #16
 8007bf0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f7fe ffce 	bl	8006b9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c00:	e00b      	b.n	8007c1a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7fa f85e 	bl	8001cc4 <HAL_UART_RxCpltCallback>
}
 8007c08:	e007      	b.n	8007c1a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	699a      	ldr	r2, [r3, #24]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f042 0208 	orr.w	r2, r2, #8
 8007c18:	619a      	str	r2, [r3, #24]
}
 8007c1a:	bf00      	nop
 8007c1c:	3770      	adds	r7, #112	@ 0x70
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	40008000 	.word	0x40008000

08007c28 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b0ac      	sub	sp, #176	@ 0xb0
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007c36:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	69db      	ldr	r3, [r3, #28]
 8007c40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c5e:	2b22      	cmp	r3, #34	@ 0x22
 8007c60:	f040 8182 	bne.w	8007f68 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007c6a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c6e:	e125      	b.n	8007ebc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c76:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007c7a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007c7e:	b2d9      	uxtb	r1, r3
 8007c80:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007c84:	b2da      	uxtb	r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c8a:	400a      	ands	r2, r1
 8007c8c:	b2d2      	uxtb	r2, r2
 8007c8e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c94:	1c5a      	adds	r2, r3, #1
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cba:	f003 0307 	and.w	r3, r3, #7
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d053      	beq.n	8007d6a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007cc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d011      	beq.n	8007cf2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007cce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00b      	beq.n	8007cf2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ce8:	f043 0201 	orr.w	r2, r3, #1
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cf6:	f003 0302 	and.w	r3, r3, #2
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d011      	beq.n	8007d22 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007cfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00b      	beq.n	8007d22 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d18:	f043 0204 	orr.w	r2, r3, #4
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d26:	f003 0304 	and.w	r3, r3, #4
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d011      	beq.n	8007d52 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007d2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d32:	f003 0301 	and.w	r3, r3, #1
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00b      	beq.n	8007d52 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2204      	movs	r2, #4
 8007d40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d48:	f043 0202 	orr.w	r2, r3, #2
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d006      	beq.n	8007d6a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f7fe ff13 	bl	8006b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f040 80a2 	bne.w	8007ebc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d80:	e853 3f00 	ldrex	r3, [r3]
 8007d84:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007d86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	461a      	mov	r2, r3
 8007d96:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007d9c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007da0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007da2:	e841 2300 	strex	r3, r2, [r1]
 8007da6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007da8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1e4      	bne.n	8007d78 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3308      	adds	r3, #8
 8007db4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007db8:	e853 3f00 	ldrex	r3, [r3]
 8007dbc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007dbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007dc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007dc4:	f023 0301 	bic.w	r3, r3, #1
 8007dc8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3308      	adds	r3, #8
 8007dd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007dd6:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007dd8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dda:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007ddc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007dde:	e841 2300 	strex	r3, r2, [r1]
 8007de2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007de4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1e1      	bne.n	8007dae <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2220      	movs	r2, #32
 8007dee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a5f      	ldr	r2, [pc, #380]	@ (8007f80 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d021      	beq.n	8007e4c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d01a      	beq.n	8007e4c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e1e:	e853 3f00 	ldrex	r3, [r3]
 8007e22:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007e38:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e3a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007e3e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007e40:	e841 2300 	strex	r3, r2, [r1]
 8007e44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007e46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e4      	bne.n	8007e16 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d130      	bne.n	8007eb6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e62:	e853 3f00 	ldrex	r3, [r3]
 8007e66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6a:	f023 0310 	bic.w	r3, r3, #16
 8007e6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	461a      	mov	r2, r3
 8007e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e84:	e841 2300 	strex	r3, r2, [r1]
 8007e88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1e4      	bne.n	8007e5a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	69db      	ldr	r3, [r3, #28]
 8007e96:	f003 0310 	and.w	r3, r3, #16
 8007e9a:	2b10      	cmp	r3, #16
 8007e9c:	d103      	bne.n	8007ea6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2210      	movs	r2, #16
 8007ea4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007eac:	4619      	mov	r1, r3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7fe fe74 	bl	8006b9c <HAL_UARTEx_RxEventCallback>
 8007eb4:	e002      	b.n	8007ebc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7f9 ff04 	bl	8001cc4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ebc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d006      	beq.n	8007ed2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007ec4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ec8:	f003 0320 	and.w	r3, r3, #32
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f47f aecf 	bne.w	8007c70 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ed8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007edc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d049      	beq.n	8007f78 <UART_RxISR_8BIT_FIFOEN+0x350>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007eea:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d242      	bcs.n	8007f78 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	3308      	adds	r3, #8
 8007ef8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efa:	6a3b      	ldr	r3, [r7, #32]
 8007efc:	e853 3f00 	ldrex	r3, [r3]
 8007f00:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	3308      	adds	r3, #8
 8007f12:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007f16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f1e:	e841 2300 	strex	r3, r2, [r1]
 8007f22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1e3      	bne.n	8007ef2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a15      	ldr	r2, [pc, #84]	@ (8007f84 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007f2e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	e853 3f00 	ldrex	r3, [r3]
 8007f3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	f043 0320 	orr.w	r3, r3, #32
 8007f44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007f52:	61bb      	str	r3, [r7, #24]
 8007f54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f56:	6979      	ldr	r1, [r7, #20]
 8007f58:	69ba      	ldr	r2, [r7, #24]
 8007f5a:	e841 2300 	strex	r3, r2, [r1]
 8007f5e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1e4      	bne.n	8007f30 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f66:	e007      	b.n	8007f78 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	699a      	ldr	r2, [r3, #24]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f042 0208 	orr.w	r2, r2, #8
 8007f76:	619a      	str	r2, [r3, #24]
}
 8007f78:	bf00      	nop
 8007f7a:	37b0      	adds	r7, #176	@ 0xb0
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	40008000 	.word	0x40008000
 8007f84:	080078b9 	.word	0x080078b9

08007f88 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b0ae      	sub	sp, #184	@ 0xb8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007f96:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	69db      	ldr	r3, [r3, #28]
 8007fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fbe:	2b22      	cmp	r3, #34	@ 0x22
 8007fc0:	f040 8186 	bne.w	80082d0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007fca:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007fce:	e129      	b.n	8008224 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007fe2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007fe6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007fea:	4013      	ands	r3, r2
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ff2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ff8:	1c9a      	adds	r2, r3, #2
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008004:	b29b      	uxth	r3, r3
 8008006:	3b01      	subs	r3, #1
 8008008:	b29a      	uxth	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	69db      	ldr	r3, [r3, #28]
 8008016:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800801a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800801e:	f003 0307 	and.w	r3, r3, #7
 8008022:	2b00      	cmp	r3, #0
 8008024:	d053      	beq.n	80080ce <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008026:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800802a:	f003 0301 	and.w	r3, r3, #1
 800802e:	2b00      	cmp	r3, #0
 8008030:	d011      	beq.n	8008056 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00b      	beq.n	8008056 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2201      	movs	r2, #1
 8008044:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800804c:	f043 0201 	orr.w	r2, r3, #1
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008056:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800805a:	f003 0302 	and.w	r3, r3, #2
 800805e:	2b00      	cmp	r3, #0
 8008060:	d011      	beq.n	8008086 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008062:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00b      	beq.n	8008086 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2202      	movs	r2, #2
 8008074:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800807c:	f043 0204 	orr.w	r2, r3, #4
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008086:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800808a:	f003 0304 	and.w	r3, r3, #4
 800808e:	2b00      	cmp	r3, #0
 8008090:	d011      	beq.n	80080b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008092:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00b      	beq.n	80080b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2204      	movs	r2, #4
 80080a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080ac:	f043 0202 	orr.w	r2, r3, #2
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d006      	beq.n	80080ce <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f7fe fd61 	bl	8006b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f040 80a4 	bne.w	8008224 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80080e4:	e853 3f00 	ldrex	r3, [r3]
 80080e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80080ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80080ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	461a      	mov	r2, r3
 80080fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80080fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008102:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008104:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008106:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800810a:	e841 2300 	strex	r3, r2, [r1]
 800810e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008110:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1e2      	bne.n	80080dc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3308      	adds	r3, #8
 800811c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008120:	e853 3f00 	ldrex	r3, [r3]
 8008124:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008126:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008128:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800812c:	f023 0301 	bic.w	r3, r3, #1
 8008130:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	3308      	adds	r3, #8
 800813a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800813e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008140:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008142:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008144:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008146:	e841 2300 	strex	r3, r2, [r1]
 800814a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800814c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1e1      	bne.n	8008116 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2220      	movs	r2, #32
 8008156:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a5f      	ldr	r2, [pc, #380]	@ (80082e8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d021      	beq.n	80081b4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800817a:	2b00      	cmp	r3, #0
 800817c:	d01a      	beq.n	80081b4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008184:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008186:	e853 3f00 	ldrex	r3, [r3]
 800818a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800818c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800818e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008192:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	461a      	mov	r2, r3
 800819c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80081a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80081a2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80081a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80081a8:	e841 2300 	strex	r3, r2, [r1]
 80081ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80081ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1e4      	bne.n	800817e <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d130      	bne.n	800821e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ca:	e853 3f00 	ldrex	r3, [r3]
 80081ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081d2:	f023 0310 	bic.w	r3, r3, #16
 80081d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	461a      	mov	r2, r3
 80081e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80081e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80081e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80081ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081ec:	e841 2300 	strex	r3, r2, [r1]
 80081f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80081f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1e4      	bne.n	80081c2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	f003 0310 	and.w	r3, r3, #16
 8008202:	2b10      	cmp	r3, #16
 8008204:	d103      	bne.n	800820e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2210      	movs	r2, #16
 800820c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008214:	4619      	mov	r1, r3
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7fe fcc0 	bl	8006b9c <HAL_UARTEx_RxEventCallback>
 800821c:	e002      	b.n	8008224 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f7f9 fd50 	bl	8001cc4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008224:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008228:	2b00      	cmp	r3, #0
 800822a:	d006      	beq.n	800823a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800822c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008230:	f003 0320 	and.w	r3, r3, #32
 8008234:	2b00      	cmp	r3, #0
 8008236:	f47f aecb 	bne.w	8007fd0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008240:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008244:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008248:	2b00      	cmp	r3, #0
 800824a:	d049      	beq.n	80082e0 <UART_RxISR_16BIT_FIFOEN+0x358>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008252:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008256:	429a      	cmp	r2, r3
 8008258:	d242      	bcs.n	80082e0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3308      	adds	r3, #8
 8008260:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008264:	e853 3f00 	ldrex	r3, [r3]
 8008268:	623b      	str	r3, [r7, #32]
   return(result);
 800826a:	6a3b      	ldr	r3, [r7, #32]
 800826c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008270:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	3308      	adds	r3, #8
 800827a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800827e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008280:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008282:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008286:	e841 2300 	strex	r3, r2, [r1]
 800828a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800828c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1e3      	bne.n	800825a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a15      	ldr	r2, [pc, #84]	@ (80082ec <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008296:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	e853 3f00 	ldrex	r3, [r3]
 80082a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f043 0320 	orr.w	r3, r3, #32
 80082ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	461a      	mov	r2, r3
 80082b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082ba:	61fb      	str	r3, [r7, #28]
 80082bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082be:	69b9      	ldr	r1, [r7, #24]
 80082c0:	69fa      	ldr	r2, [r7, #28]
 80082c2:	e841 2300 	strex	r3, r2, [r1]
 80082c6:	617b      	str	r3, [r7, #20]
   return(result);
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d1e4      	bne.n	8008298 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082ce:	e007      	b.n	80082e0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	699a      	ldr	r2, [r3, #24]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f042 0208 	orr.w	r2, r2, #8
 80082de:	619a      	str	r2, [r3, #24]
}
 80082e0:	bf00      	nop
 80082e2:	37b8      	adds	r7, #184	@ 0xb8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	40008000 	.word	0x40008000
 80082ec:	08007a71 	.word	0x08007a71

080082f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80082f8:	bf00      	nop
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800833a:	2b01      	cmp	r3, #1
 800833c:	d101      	bne.n	8008342 <HAL_UARTEx_DisableFifoMode+0x16>
 800833e:	2302      	movs	r3, #2
 8008340:	e027      	b.n	8008392 <HAL_UARTEx_DisableFifoMode+0x66>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2224      	movs	r2, #36	@ 0x24
 800834e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f022 0201 	bic.w	r2, r2, #1
 8008368:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008370:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2220      	movs	r2, #32
 8008384:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3714      	adds	r7, #20
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b084      	sub	sp, #16
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d101      	bne.n	80083b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80083b2:	2302      	movs	r3, #2
 80083b4:	e02d      	b.n	8008412 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2224      	movs	r2, #36	@ 0x24
 80083c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 0201 	bic.w	r2, r2, #1
 80083dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	683a      	ldr	r2, [r7, #0]
 80083ee:	430a      	orrs	r2, r1
 80083f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f850 	bl	8008498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2220      	movs	r2, #32
 8008404:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800841a:	b580      	push	{r7, lr}
 800841c:	b084      	sub	sp, #16
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800842a:	2b01      	cmp	r3, #1
 800842c:	d101      	bne.n	8008432 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800842e:	2302      	movs	r3, #2
 8008430:	e02d      	b.n	800848e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2224      	movs	r2, #36	@ 0x24
 800843e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f022 0201 	bic.w	r2, r2, #1
 8008458:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	683a      	ldr	r2, [r7, #0]
 800846a:	430a      	orrs	r2, r1
 800846c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f812 	bl	8008498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2220      	movs	r2, #32
 8008480:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
	...

08008498 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d108      	bne.n	80084ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80084b8:	e031      	b.n	800851e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80084ba:	2308      	movs	r3, #8
 80084bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80084be:	2308      	movs	r3, #8
 80084c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	0e5b      	lsrs	r3, r3, #25
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	f003 0307 	and.w	r3, r3, #7
 80084d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	0f5b      	lsrs	r3, r3, #29
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	f003 0307 	and.w	r3, r3, #7
 80084e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084e2:	7bbb      	ldrb	r3, [r7, #14]
 80084e4:	7b3a      	ldrb	r2, [r7, #12]
 80084e6:	4911      	ldr	r1, [pc, #68]	@ (800852c <UARTEx_SetNbDataToProcess+0x94>)
 80084e8:	5c8a      	ldrb	r2, [r1, r2]
 80084ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80084ee:	7b3a      	ldrb	r2, [r7, #12]
 80084f0:	490f      	ldr	r1, [pc, #60]	@ (8008530 <UARTEx_SetNbDataToProcess+0x98>)
 80084f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008500:	7bfb      	ldrb	r3, [r7, #15]
 8008502:	7b7a      	ldrb	r2, [r7, #13]
 8008504:	4909      	ldr	r1, [pc, #36]	@ (800852c <UARTEx_SetNbDataToProcess+0x94>)
 8008506:	5c8a      	ldrb	r2, [r1, r2]
 8008508:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800850c:	7b7a      	ldrb	r2, [r7, #13]
 800850e:	4908      	ldr	r1, [pc, #32]	@ (8008530 <UARTEx_SetNbDataToProcess+0x98>)
 8008510:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008512:	fb93 f3f2 	sdiv	r3, r3, r2
 8008516:	b29a      	uxth	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800851e:	bf00      	nop
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	0800ffa8 	.word	0x0800ffa8
 8008530:	0800ffb0 	.word	0x0800ffb0

08008534 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b0cc      	sub	sp, #304	@ 0x130
 8008538:	af00      	add	r7, sp, #0
 800853a:	4602      	mov	r2, r0
 800853c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008540:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008544:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8008546:	f107 0310 	add.w	r3, r7, #16
 800854a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800854e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008552:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008556:	2200      	movs	r2, #0
 8008558:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800855a:	2300      	movs	r3, #0
 800855c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8008560:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008564:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008568:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800856c:	7812      	ldrb	r2, [r2, #0]
 800856e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008570:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008574:	3301      	adds	r3, #1
 8008576:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800857a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800857e:	2218      	movs	r2, #24
 8008580:	2100      	movs	r1, #0
 8008582:	4618      	mov	r0, r3
 8008584:	f001 fb44 	bl	8009c10 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008588:	233f      	movs	r3, #63	@ 0x3f
 800858a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800858e:	2385      	movs	r3, #133	@ 0x85
 8008590:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008594:	f107 0310 	add.w	r3, r7, #16
 8008598:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800859c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80085a0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80085a4:	f107 030f 	add.w	r3, r7, #15
 80085a8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80085ac:	2301      	movs	r3, #1
 80085ae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80085b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80085b6:	2100      	movs	r1, #0
 80085b8:	4618      	mov	r0, r3
 80085ba:	f001 fdd5 	bl	800a168 <hci_send_req>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	da01      	bge.n	80085c8 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80085c4:	23ff      	movs	r3, #255	@ 0xff
 80085c6:	e004      	b.n	80085d2 <aci_gap_set_io_capability+0x9e>
  return status;
 80085c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80085cc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80085d0:	781b      	ldrb	r3, [r3, #0]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80085dc:	b5b0      	push	{r4, r5, r7, lr}
 80085de:	b0cc      	sub	sp, #304	@ 0x130
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	4605      	mov	r5, r0
 80085e4:	460c      	mov	r4, r1
 80085e6:	4610      	mov	r0, r2
 80085e8:	4619      	mov	r1, r3
 80085ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80085ee:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80085f2:	462a      	mov	r2, r5
 80085f4:	701a      	strb	r2, [r3, #0]
 80085f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80085fa:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80085fe:	4622      	mov	r2, r4
 8008600:	701a      	strb	r2, [r3, #0]
 8008602:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008606:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800860a:	4602      	mov	r2, r0
 800860c:	701a      	strb	r2, [r3, #0]
 800860e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008612:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008616:	460a      	mov	r2, r1
 8008618:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800861a:	f107 0310 	add.w	r3, r7, #16
 800861e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008622:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008626:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800862a:	2200      	movs	r2, #0
 800862c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800862e:	2300      	movs	r3, #0
 8008630:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8008634:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008638:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800863c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008640:	7812      	ldrb	r2, [r2, #0]
 8008642:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008644:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008648:	3301      	adds	r3, #1
 800864a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800864e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008652:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008656:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800865a:	7812      	ldrb	r2, [r2, #0]
 800865c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800865e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008662:	3301      	adds	r3, #1
 8008664:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8008668:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800866c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008670:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8008674:	7812      	ldrb	r2, [r2, #0]
 8008676:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008678:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800867c:	3301      	adds	r3, #1
 800867e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8008682:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008686:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800868a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800868e:	7812      	ldrb	r2, [r2, #0]
 8008690:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008692:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008696:	3301      	adds	r3, #1
 8008698:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800869c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80086a0:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 80086a4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80086a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80086aa:	3301      	adds	r3, #1
 80086ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80086b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80086b4:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 80086b8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80086ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80086be:	3301      	adds	r3, #1
 80086c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80086c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80086c8:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80086cc:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80086ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80086d2:	3301      	adds	r3, #1
 80086d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80086d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80086dc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80086e0:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80086e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80086e8:	3304      	adds	r3, #4
 80086ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80086ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80086f2:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 80086f6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80086f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80086fc:	3301      	adds	r3, #1
 80086fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008702:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008706:	2218      	movs	r2, #24
 8008708:	2100      	movs	r1, #0
 800870a:	4618      	mov	r0, r3
 800870c:	f001 fa80 	bl	8009c10 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008710:	233f      	movs	r3, #63	@ 0x3f
 8008712:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8008716:	2386      	movs	r3, #134	@ 0x86
 8008718:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800871c:	f107 0310 	add.w	r3, r7, #16
 8008720:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008724:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008728:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800872c:	f107 030f 	add.w	r3, r7, #15
 8008730:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008734:	2301      	movs	r3, #1
 8008736:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800873a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800873e:	2100      	movs	r1, #0
 8008740:	4618      	mov	r0, r3
 8008742:	f001 fd11 	bl	800a168 <hci_send_req>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	da01      	bge.n	8008750 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800874c:	23ff      	movs	r3, #255	@ 0xff
 800874e:	e004      	b.n	800875a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8008750:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008754:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008758:	781b      	ldrb	r3, [r3, #0]
}
 800875a:	4618      	mov	r0, r3
 800875c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008760:	46bd      	mov	sp, r7
 8008762:	bdb0      	pop	{r4, r5, r7, pc}

08008764 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8008764:	b590      	push	{r4, r7, lr}
 8008766:	b0cd      	sub	sp, #308	@ 0x134
 8008768:	af00      	add	r7, sp, #0
 800876a:	4604      	mov	r4, r0
 800876c:	4608      	mov	r0, r1
 800876e:	4611      	mov	r1, r2
 8008770:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008774:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8008778:	6013      	str	r3, [r2, #0]
 800877a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800877e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008782:	4622      	mov	r2, r4
 8008784:	701a      	strb	r2, [r3, #0]
 8008786:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800878a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800878e:	4602      	mov	r2, r0
 8008790:	701a      	strb	r2, [r3, #0]
 8008792:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008796:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800879a:	460a      	mov	r2, r1
 800879c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800879e:	f107 0310 	add.w	r3, r7, #16
 80087a2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80087a6:	f107 0308 	add.w	r3, r7, #8
 80087aa:	2207      	movs	r2, #7
 80087ac:	2100      	movs	r1, #0
 80087ae:	4618      	mov	r0, r3
 80087b0:	f001 fa2e 	bl	8009c10 <Osal_MemSet>
  int index_input = 0;
 80087b4:	2300      	movs	r3, #0
 80087b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 80087ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80087be:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80087c2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80087c6:	7812      	ldrb	r2, [r2, #0]
 80087c8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80087ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80087ce:	3301      	adds	r3, #1
 80087d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 80087d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80087d8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80087dc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80087e0:	7812      	ldrb	r2, [r2, #0]
 80087e2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80087e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80087e8:	3301      	adds	r3, #1
 80087ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 80087ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80087f2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80087f6:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80087fa:	7812      	ldrb	r2, [r2, #0]
 80087fc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80087fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008802:	3301      	adds	r3, #1
 8008804:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008808:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800880c:	2218      	movs	r2, #24
 800880e:	2100      	movs	r1, #0
 8008810:	4618      	mov	r0, r3
 8008812:	f001 f9fd 	bl	8009c10 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008816:	233f      	movs	r3, #63	@ 0x3f
 8008818:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800881c:	238a      	movs	r3, #138	@ 0x8a
 800881e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008822:	f107 0310 	add.w	r3, r7, #16
 8008826:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800882a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800882e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8008832:	f107 0308 	add.w	r3, r7, #8
 8008836:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800883a:	2307      	movs	r3, #7
 800883c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008840:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008844:	2100      	movs	r1, #0
 8008846:	4618      	mov	r0, r3
 8008848:	f001 fc8e 	bl	800a168 <hci_send_req>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	da01      	bge.n	8008856 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8008852:	23ff      	movs	r3, #255	@ 0xff
 8008854:	e02e      	b.n	80088b4 <aci_gap_init+0x150>
  if ( resp.Status )
 8008856:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800885a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d005      	beq.n	8008870 <aci_gap_init+0x10c>
    return resp.Status;
 8008864:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008868:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	e021      	b.n	80088b4 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8008870:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008874:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008878:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800887c:	b29a      	uxth	r2, r3
 800887e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008882:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800888a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800888e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008892:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008896:	b29a      	uxth	r2, r3
 8008898:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800889c:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800889e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80088a2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80088a6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80088b0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd90      	pop	{r4, r7, pc}

080088be <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b088      	sub	sp, #32
 80088c2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80088c4:	2300      	movs	r3, #0
 80088c6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80088c8:	f107 0308 	add.w	r3, r7, #8
 80088cc:	2218      	movs	r2, #24
 80088ce:	2100      	movs	r1, #0
 80088d0:	4618      	mov	r0, r3
 80088d2:	f001 f99d 	bl	8009c10 <Osal_MemSet>
  rq.ogf = 0x3f;
 80088d6:	233f      	movs	r3, #63	@ 0x3f
 80088d8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80088da:	2392      	movs	r3, #146	@ 0x92
 80088dc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80088de:	1dfb      	adds	r3, r7, #7
 80088e0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80088e2:	2301      	movs	r3, #1
 80088e4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80088e6:	f107 0308 	add.w	r3, r7, #8
 80088ea:	2100      	movs	r1, #0
 80088ec:	4618      	mov	r0, r3
 80088ee:	f001 fc3b 	bl	800a168 <hci_send_req>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	da01      	bge.n	80088fc <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 80088f8:	23ff      	movs	r3, #255	@ 0xff
 80088fa:	e000      	b.n	80088fe <aci_gap_configure_whitelist+0x40>
  return status;
 80088fc:	79fb      	ldrb	r3, [r7, #7]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3720      	adds	r7, #32
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <aci_gap_start_general_discovery_proc>:

tBleStatus aci_gap_start_general_discovery_proc( uint16_t LE_Scan_Interval,
                                                 uint16_t LE_Scan_Window,
                                                 uint8_t Own_Address_Type,
                                                 uint8_t Filter_Duplicates )
{
 8008906:	b5b0      	push	{r4, r5, r7, lr}
 8008908:	b0cc      	sub	sp, #304	@ 0x130
 800890a:	af00      	add	r7, sp, #0
 800890c:	4605      	mov	r5, r0
 800890e:	460c      	mov	r4, r1
 8008910:	4610      	mov	r0, r2
 8008912:	4619      	mov	r1, r3
 8008914:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008918:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800891c:	462a      	mov	r2, r5
 800891e:	801a      	strh	r2, [r3, #0]
 8008920:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008924:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008928:	4622      	mov	r2, r4
 800892a:	801a      	strh	r2, [r3, #0]
 800892c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008930:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8008934:	4602      	mov	r2, r0
 8008936:	701a      	strb	r2, [r3, #0]
 8008938:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800893c:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8008940:	460a      	mov	r2, r1
 8008942:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 8008944:	f107 0310 	add.w	r3, r7, #16
 8008948:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800894c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008950:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008954:	2200      	movs	r2, #0
 8008956:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008958:	2300      	movs	r3, #0
 800895a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 800895e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008962:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008966:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800896a:	8812      	ldrh	r2, [r2, #0]
 800896c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800896e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008972:	3302      	adds	r3, #2
 8008974:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->LE_Scan_Window = LE_Scan_Window;
 8008978:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800897c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008980:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8008984:	8812      	ldrh	r2, [r2, #0]
 8008986:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008988:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800898c:	3302      	adds	r3, #2
 800898e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8008992:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008996:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800899a:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800899e:	7812      	ldrb	r2, [r2, #0]
 80089a0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80089a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80089a6:	3301      	adds	r3, #1
 80089a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Filter_Duplicates = Filter_Duplicates;
 80089ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80089b0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80089b4:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80089b8:	7812      	ldrb	r2, [r2, #0]
 80089ba:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80089bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80089c0:	3301      	adds	r3, #1
 80089c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80089c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80089ca:	2218      	movs	r2, #24
 80089cc:	2100      	movs	r1, #0
 80089ce:	4618      	mov	r0, r3
 80089d0:	f001 f91e 	bl	8009c10 <Osal_MemSet>
  rq.ogf = 0x3f;
 80089d4:	233f      	movs	r3, #63	@ 0x3f
 80089d6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x097;
 80089da:	2397      	movs	r3, #151	@ 0x97
 80089dc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 80089e0:	230f      	movs	r3, #15
 80089e2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 80089e6:	f107 0310 	add.w	r3, r7, #16
 80089ea:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80089ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80089f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80089f6:	f107 030f 	add.w	r3, r7, #15
 80089fa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80089fe:	2301      	movs	r3, #1
 8008a00:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008a04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008a08:	2100      	movs	r1, #0
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f001 fbac 	bl	800a168 <hci_send_req>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	da01      	bge.n	8008a1a <aci_gap_start_general_discovery_proc+0x114>
    return BLE_STATUS_TIMEOUT;
 8008a16:	23ff      	movs	r3, #255	@ 0xff
 8008a18:	e004      	b.n	8008a24 <aci_gap_start_general_discovery_proc+0x11e>
  return status;
 8008a1a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008a1e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008a22:	781b      	ldrb	r3, [r3, #0]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bdb0      	pop	{r4, r5, r7, pc}

08008a2e <aci_gap_create_connection>:
                                      uint16_t Conn_Interval_Max,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint16_t Minimum_CE_Length,
                                      uint16_t Maximum_CE_Length )
{
 8008a2e:	b590      	push	{r4, r7, lr}
 8008a30:	b0cf      	sub	sp, #316	@ 0x13c
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	4604      	mov	r4, r0
 8008a36:	4608      	mov	r0, r1
 8008a38:	4611      	mov	r1, r2
 8008a3a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008a3e:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8008a42:	6013      	str	r3, [r2, #0]
 8008a44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a48:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008a4c:	4622      	mov	r2, r4
 8008a4e:	801a      	strh	r2, [r3, #0]
 8008a50:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a54:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a58:	4602      	mov	r2, r0
 8008a5a:	801a      	strh	r2, [r3, #0]
 8008a5c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a60:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8008a64:	460a      	mov	r2, r1
 8008a66:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 8008a68:	f107 0318 	add.w	r3, r7, #24
 8008a6c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  tBleStatus status = 0;
 8008a70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a74:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008a78:	2200      	movs	r2, #0
 8008a7a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 8008a82:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008a86:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008a8a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008a8e:	8812      	ldrh	r2, [r2, #0]
 8008a90:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008a92:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008a96:	3302      	adds	r3, #2
 8008a98:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->LE_Scan_Window = LE_Scan_Window;
 8008a9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008aa0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008aa4:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8008aa8:	8812      	ldrh	r2, [r2, #0]
 8008aaa:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008aac:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008ab0:	3302      	adds	r3, #2
 8008ab2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Peer_Address_Type = Peer_Address_Type;
 8008ab6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008aba:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008abe:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8008ac2:	7812      	ldrb	r2, [r2, #0]
 8008ac4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008ac6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008aca:	3301      	adds	r3, #1
 8008acc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  Osal_MemCpy( (void*)&cp0->Peer_Address, (const void*)Peer_Address, 6 );
 8008ad0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008ad4:	1d58      	adds	r0, r3, #5
 8008ad6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ada:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008ade:	2206      	movs	r2, #6
 8008ae0:	6819      	ldr	r1, [r3, #0]
 8008ae2:	f001 f885 	bl	8009bf0 <Osal_MemCpy>
  index_input += 6;
 8008ae6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008aea:	3306      	adds	r3, #6
 8008aec:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Own_Address_Type = Own_Address_Type;
 8008af0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008af4:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8008af8:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008afa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008afe:	3301      	adds	r3, #1
 8008b00:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8008b04:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008b08:	f8b7 214c 	ldrh.w	r2, [r7, #332]	@ 0x14c
 8008b0c:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 8008b0e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008b12:	3302      	adds	r3, #2
 8008b14:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8008b18:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008b1c:	f8b7 2150 	ldrh.w	r2, [r7, #336]	@ 0x150
 8008b20:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 8008b22:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008b26:	3302      	adds	r3, #2
 8008b28:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Conn_Latency = Conn_Latency;
 8008b2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008b30:	f8b7 2154 	ldrh.w	r2, [r7, #340]	@ 0x154
 8008b34:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 8008b36:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008b3a:	3302      	adds	r3, #2
 8008b3c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Supervision_Timeout = Supervision_Timeout;
 8008b40:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008b44:	f8b7 2158 	ldrh.w	r2, [r7, #344]	@ 0x158
 8008b48:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 8008b4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008b4e:	3302      	adds	r3, #2
 8008b50:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 8008b54:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008b58:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8008b5c:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 8008b5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008b62:	3302      	adds	r3, #2
 8008b64:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 8008b68:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008b6c:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8008b70:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 8008b72:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008b76:	3302      	adds	r3, #2
 8008b78:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b7c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008b80:	2218      	movs	r2, #24
 8008b82:	2100      	movs	r1, #0
 8008b84:	4618      	mov	r0, r3
 8008b86:	f001 f843 	bl	8009c10 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b8a:	233f      	movs	r3, #63	@ 0x3f
 8008b8c:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x09c;
 8008b90:	239c      	movs	r3, #156	@ 0x9c
 8008b92:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.event = 0x0F;
 8008b96:	230f      	movs	r3, #15
 8008b98:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.cparam = cmd_buffer;
 8008b9c:	f107 0318 	add.w	r3, r7, #24
 8008ba0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8008ba4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008ba8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &status;
 8008bac:	f107 0317 	add.w	r3, r7, #23
 8008bb0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = 1;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008bba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f001 fad1 	bl	800a168 <hci_send_req>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	da01      	bge.n	8008bd0 <aci_gap_create_connection+0x1a2>
    return BLE_STATUS_TIMEOUT;
 8008bcc:	23ff      	movs	r3, #255	@ 0xff
 8008bce:	e004      	b.n	8008bda <aci_gap_create_connection+0x1ac>
  return status;
 8008bd0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008bd4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008bd8:	781b      	ldrb	r3, [r3, #0]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd90      	pop	{r4, r7, pc}

08008be4 <aci_gap_terminate_gap_proc>:

tBleStatus aci_gap_terminate_gap_proc( uint8_t Procedure_Code )
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b0cc      	sub	sp, #304	@ 0x130
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	4602      	mov	r2, r0
 8008bec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008bf0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008bf4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_terminate_gap_proc_cp0 *cp0 = (aci_gap_terminate_gap_proc_cp0*)(cmd_buffer);
 8008bf6:	f107 0310 	add.w	r3, r7, #16
 8008bfa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008bfe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008c02:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008c06:	2200      	movs	r2, #0
 8008c08:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Procedure_Code = Procedure_Code;
 8008c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008c14:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008c18:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008c1c:	7812      	ldrb	r2, [r2, #0]
 8008c1e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008c20:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008c24:	3301      	adds	r3, #1
 8008c26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008c2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c2e:	2218      	movs	r2, #24
 8008c30:	2100      	movs	r1, #0
 8008c32:	4618      	mov	r0, r3
 8008c34:	f000 ffec 	bl	8009c10 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c38:	233f      	movs	r3, #63	@ 0x3f
 8008c3a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x09d;
 8008c3e:	239d      	movs	r3, #157	@ 0x9d
 8008c40:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008c44:	f107 0310 	add.w	r3, r7, #16
 8008c48:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008c4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008c50:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008c54:	f107 030f 	add.w	r3, r7, #15
 8008c58:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008c62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c66:	2100      	movs	r1, #0
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f001 fa7d 	bl	800a168 <hci_send_req>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	da01      	bge.n	8008c78 <aci_gap_terminate_gap_proc+0x94>
    return BLE_STATUS_TIMEOUT;
 8008c74:	23ff      	movs	r3, #255	@ 0xff
 8008c76:	e004      	b.n	8008c82 <aci_gap_terminate_gap_proc+0x9e>
  return status;
 8008c78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008c7c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008c80:	781b      	ldrb	r3, [r3, #0]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <aci_gap_send_pairing_req>:
  return status;
}

tBleStatus aci_gap_send_pairing_req( uint16_t Connection_Handle,
                                     uint8_t Force_Rebond )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b0cc      	sub	sp, #304	@ 0x130
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	4602      	mov	r2, r0
 8008c94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008c98:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008c9c:	801a      	strh	r2, [r3, #0]
 8008c9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ca2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8008ca6:	460a      	mov	r2, r1
 8008ca8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_send_pairing_req_cp0 *cp0 = (aci_gap_send_pairing_req_cp0*)(cmd_buffer);
 8008caa:	f107 0310 	add.w	r3, r7, #16
 8008cae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008cb2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008cb6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008cba:	2200      	movs	r2, #0
 8008cbc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008cc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008cc8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008ccc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008cd0:	8812      	ldrh	r2, [r2, #0]
 8008cd2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008cd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008cd8:	3302      	adds	r3, #2
 8008cda:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Force_Rebond = Force_Rebond;
 8008cde:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008ce2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008ce6:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8008cea:	7812      	ldrb	r2, [r2, #0]
 8008cec:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008cee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008cf8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008cfc:	2218      	movs	r2, #24
 8008cfe:	2100      	movs	r1, #0
 8008d00:	4618      	mov	r0, r3
 8008d02:	f000 ff85 	bl	8009c10 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008d06:	233f      	movs	r3, #63	@ 0x3f
 8008d08:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x09f;
 8008d0c:	239f      	movs	r3, #159	@ 0x9f
 8008d0e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 8008d12:	230f      	movs	r3, #15
 8008d14:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 8008d18:	f107 0310 	add.w	r3, r7, #16
 8008d1c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008d20:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008d24:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008d28:	f107 030f 	add.w	r3, r7, #15
 8008d2c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008d30:	2301      	movs	r3, #1
 8008d32:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008d36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f001 fa13 	bl	800a168 <hci_send_req>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	da01      	bge.n	8008d4c <aci_gap_send_pairing_req+0xc0>
    return BLE_STATUS_TIMEOUT;
 8008d48:	23ff      	movs	r3, #255	@ 0xff
 8008d4a:	e004      	b.n	8008d56 <aci_gap_send_pairing_req+0xca>
  return status;
 8008d4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d50:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008d54:	781b      	ldrb	r3, [r3, #0]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <aci_gap_get_oob_data>:
tBleStatus aci_gap_get_oob_data( uint8_t OOB_Data_Type,
                                 uint8_t* Address_Type,
                                 uint8_t* Address,
                                 uint8_t* OOB_Data_Len,
                                 uint8_t* OOB_Data )
{
 8008d60:	b590      	push	{r4, r7, lr}
 8008d62:	b0d5      	sub	sp, #340	@ 0x154
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	4604      	mov	r4, r0
 8008d68:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 8008d6c:	f5a0 70a4 	sub.w	r0, r0, #328	@ 0x148
 8008d70:	6001      	str	r1, [r0, #0]
 8008d72:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8008d76:	f5a1 71a6 	sub.w	r1, r1, #332	@ 0x14c
 8008d7a:	600a      	str	r2, [r1, #0]
 8008d7c:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8008d80:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 8008d84:	6013      	str	r3, [r2, #0]
 8008d86:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008d8a:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 8008d8e:	4622      	mov	r2, r4
 8008d90:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_get_oob_data_cp0 *cp0 = (aci_gap_get_oob_data_cp0*)(cmd_buffer);
 8008d92:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008d96:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
  aci_gap_get_oob_data_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008d9a:	f107 0314 	add.w	r3, r7, #20
 8008d9e:	221a      	movs	r2, #26
 8008da0:	2100      	movs	r1, #0
 8008da2:	4618      	mov	r0, r3
 8008da4:	f000 ff34 	bl	8009c10 <Osal_MemSet>
  int index_input = 0;
 8008da8:	2300      	movs	r3, #0
 8008daa:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
  cp0->OOB_Data_Type = OOB_Data_Type;
 8008dae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008db2:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8008db6:	f2a2 1241 	subw	r2, r2, #321	@ 0x141
 8008dba:	7812      	ldrb	r2, [r2, #0]
 8008dbc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008dbe:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008dc8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008dcc:	2218      	movs	r2, #24
 8008dce:	2100      	movs	r1, #0
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f000 ff1d 	bl	8009c10 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008dd6:	233f      	movs	r3, #63	@ 0x3f
 8008dd8:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
  rq.ocf = 0x0a7;
 8008ddc:	23a7      	movs	r3, #167	@ 0xa7
 8008dde:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
  rq.cparam = cmd_buffer;
 8008de2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008de6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  rq.clen = index_input;
 8008dea:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8008dee:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  rq.rparam = &resp;
 8008df2:	f107 0314 	add.w	r3, r7, #20
 8008df6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  rq.rlen = sizeof(resp);
 8008dfa:	231a      	movs	r3, #26
 8008dfc:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008e00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008e04:	2100      	movs	r1, #0
 8008e06:	4618      	mov	r0, r3
 8008e08:	f001 f9ae 	bl	800a168 <hci_send_req>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	da01      	bge.n	8008e16 <aci_gap_get_oob_data+0xb6>
    return BLE_STATUS_TIMEOUT;
 8008e12:	23ff      	movs	r3, #255	@ 0xff
 8008e14:	e037      	b.n	8008e86 <aci_gap_get_oob_data+0x126>
  if ( resp.Status )
 8008e16:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008e1a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d005      	beq.n	8008e30 <aci_gap_get_oob_data+0xd0>
    return resp.Status;
 8008e24:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008e28:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	e02a      	b.n	8008e86 <aci_gap_get_oob_data+0x126>
  *Address_Type = resp.Address_Type;
 8008e30:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008e34:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8008e38:	785a      	ldrb	r2, [r3, #1]
 8008e3a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008e3e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	701a      	strb	r2, [r3, #0]
  Osal_MemCpy( (void*)Address, (const void*)resp.Address, 6 );
 8008e46:	f107 0314 	add.w	r3, r7, #20
 8008e4a:	1c99      	adds	r1, r3, #2
 8008e4c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008e50:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8008e54:	2206      	movs	r2, #6
 8008e56:	6818      	ldr	r0, [r3, #0]
 8008e58:	f000 feca 	bl	8009bf0 <Osal_MemCpy>
  *OOB_Data_Len = resp.OOB_Data_Len;
 8008e5c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008e60:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8008e64:	7a5a      	ldrb	r2, [r3, #9]
 8008e66:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008e6a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	701a      	strb	r2, [r3, #0]
  Osal_MemCpy( (void*)OOB_Data, (const void*)resp.OOB_Data, 16 );
 8008e72:	f107 0314 	add.w	r3, r7, #20
 8008e76:	330a      	adds	r3, #10
 8008e78:	2210      	movs	r2, #16
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	f8d7 0160 	ldr.w	r0, [r7, #352]	@ 0x160
 8008e80:	f000 feb6 	bl	8009bf0 <Osal_MemCpy>
  return BLE_STATUS_SUCCESS;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd90      	pop	{r4, r7, pc}

08008e90 <aci_gap_set_oob_data>:
                                 uint8_t Address_Type,
                                 const uint8_t* Address,
                                 uint8_t OOB_Data_Type,
                                 uint8_t OOB_Data_Len,
                                 const uint8_t* OOB_Data )
{
 8008e90:	b590      	push	{r4, r7, lr}
 8008e92:	b0cd      	sub	sp, #308	@ 0x134
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	4604      	mov	r4, r0
 8008e98:	4608      	mov	r0, r1
 8008e9a:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8008e9e:	f5a1 7198 	sub.w	r1, r1, #304	@ 0x130
 8008ea2:	600a      	str	r2, [r1, #0]
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008eaa:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008eae:	4622      	mov	r2, r4
 8008eb0:	701a      	strb	r2, [r3, #0]
 8008eb2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008eb6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008eba:	4602      	mov	r2, r0
 8008ebc:	701a      	strb	r2, [r3, #0]
 8008ebe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ec2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8008ec6:	460a      	mov	r2, r1
 8008ec8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_oob_data_cp0 *cp0 = (aci_gap_set_oob_data_cp0*)(cmd_buffer);
 8008eca:	f107 0310 	add.w	r3, r7, #16
 8008ece:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008ed2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ed6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008eda:	2200      	movs	r2, #0
 8008edc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Device_Type = Device_Type;
 8008ee4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008ee8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008eec:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008ef0:	7812      	ldrb	r2, [r2, #0]
 8008ef2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008ef4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008ef8:	3301      	adds	r3, #1
 8008efa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Address_Type = Address_Type;
 8008efe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008f02:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008f06:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008f0a:	7812      	ldrb	r2, [r2, #0]
 8008f0c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008f0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008f12:	3301      	adds	r3, #1
 8008f14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Address, (const void*)Address, 6 );
 8008f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008f1c:	1c98      	adds	r0, r3, #2
 8008f1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008f22:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008f26:	2206      	movs	r2, #6
 8008f28:	6819      	ldr	r1, [r3, #0]
 8008f2a:	f000 fe61 	bl	8009bf0 <Osal_MemCpy>
  index_input += 6;
 8008f2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008f32:	3306      	adds	r3, #6
 8008f34:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->OOB_Data_Type = OOB_Data_Type;
 8008f38:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008f3c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008f40:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8008f44:	7812      	ldrb	r2, [r2, #0]
 8008f46:	721a      	strb	r2, [r3, #8]
  index_input += 1;
 8008f48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->OOB_Data_Len = OOB_Data_Len;
 8008f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008f56:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8008f5a:	725a      	strb	r2, [r3, #9]
  index_input += 1;
 8008f5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008f60:	3301      	adds	r3, #1
 8008f62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->OOB_Data, (const void*)OOB_Data, 16 );
 8008f66:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008f6a:	330a      	adds	r3, #10
 8008f6c:	2210      	movs	r2, #16
 8008f6e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 fe3c 	bl	8009bf0 <Osal_MemCpy>
  index_input += 16;
 8008f78:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008f7c:	3310      	adds	r3, #16
 8008f7e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008f82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f86:	2218      	movs	r2, #24
 8008f88:	2100      	movs	r1, #0
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 fe40 	bl	8009c10 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008f90:	233f      	movs	r3, #63	@ 0x3f
 8008f92:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a8;
 8008f96:	23a8      	movs	r3, #168	@ 0xa8
 8008f98:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008f9c:	f107 0310 	add.w	r3, r7, #16
 8008fa0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008fa4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008fa8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008fac:	f107 030f 	add.w	r3, r7, #15
 8008fb0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008fba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f001 f8d1 	bl	800a168 <hci_send_req>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	da01      	bge.n	8008fd0 <aci_gap_set_oob_data+0x140>
    return BLE_STATUS_TIMEOUT;
 8008fcc:	23ff      	movs	r3, #255	@ 0xff
 8008fce:	e004      	b.n	8008fda <aci_gap_set_oob_data+0x14a>
  return status;
 8008fd0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008fd4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008fd8:	781b      	ldrb	r3, [r3, #0]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd90      	pop	{r4, r7, pc}

08008fe4 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b088      	sub	sp, #32
 8008fe8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008fea:	2300      	movs	r3, #0
 8008fec:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008fee:	f107 0308 	add.w	r3, r7, #8
 8008ff2:	2218      	movs	r2, #24
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 fe0a 	bl	8009c10 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008ffc:	233f      	movs	r3, #63	@ 0x3f
 8008ffe:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009000:	f240 1301 	movw	r3, #257	@ 0x101
 8009004:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009006:	1dfb      	adds	r3, r7, #7
 8009008:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800900a:	2301      	movs	r3, #1
 800900c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800900e:	f107 0308 	add.w	r3, r7, #8
 8009012:	2100      	movs	r1, #0
 8009014:	4618      	mov	r0, r3
 8009016:	f001 f8a7 	bl	800a168 <hci_send_req>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	da01      	bge.n	8009024 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8009020:	23ff      	movs	r3, #255	@ 0xff
 8009022:	e000      	b.n	8009026 <aci_gatt_init+0x42>
  return status;
 8009024:	79fb      	ldrb	r3, [r7, #7]
}
 8009026:	4618      	mov	r0, r3
 8009028:	3720      	adds	r7, #32
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800902e:	b5b0      	push	{r4, r5, r7, lr}
 8009030:	b0cc      	sub	sp, #304	@ 0x130
 8009032:	af00      	add	r7, sp, #0
 8009034:	4605      	mov	r5, r0
 8009036:	460c      	mov	r4, r1
 8009038:	4610      	mov	r0, r2
 800903a:	4619      	mov	r1, r3
 800903c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009040:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009044:	462a      	mov	r2, r5
 8009046:	801a      	strh	r2, [r3, #0]
 8009048:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800904c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009050:	4622      	mov	r2, r4
 8009052:	801a      	strh	r2, [r3, #0]
 8009054:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009058:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800905c:	4602      	mov	r2, r0
 800905e:	701a      	strb	r2, [r3, #0]
 8009060:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009064:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8009068:	460a      	mov	r2, r1
 800906a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800906c:	f107 0310 	add.w	r3, r7, #16
 8009070:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009074:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009078:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800907c:	2200      	movs	r2, #0
 800907e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009080:	2300      	movs	r3, #0
 8009082:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8009086:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800908a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800908e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009092:	8812      	ldrh	r2, [r2, #0]
 8009094:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009096:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800909a:	3302      	adds	r3, #2
 800909c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 80090a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80090a4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80090a8:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80090ac:	8812      	ldrh	r2, [r2, #0]
 80090ae:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80090b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80090b4:	3302      	adds	r3, #2
 80090b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 80090ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80090be:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80090c2:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 80090c6:	7812      	ldrb	r2, [r2, #0]
 80090c8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80090ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80090ce:	3301      	adds	r3, #1
 80090d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80090d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80090d8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80090dc:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80090e0:	7812      	ldrb	r2, [r2, #0]
 80090e2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80090e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80090e8:	3301      	adds	r3, #1
 80090ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80090ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80090f2:	1d98      	adds	r0, r3, #6
 80090f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80090f8:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	461a      	mov	r2, r3
 8009100:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8009104:	f000 fd74 	bl	8009bf0 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8009108:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800910c:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009116:	4413      	add	r3, r2
 8009118:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800911c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009120:	2218      	movs	r2, #24
 8009122:	2100      	movs	r1, #0
 8009124:	4618      	mov	r0, r3
 8009126:	f000 fd73 	bl	8009c10 <Osal_MemSet>
  rq.ogf = 0x3f;
 800912a:	233f      	movs	r3, #63	@ 0x3f
 800912c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8009130:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8009134:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009138:	f107 0310 	add.w	r3, r7, #16
 800913c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009140:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009144:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009148:	f107 030f 	add.w	r3, r7, #15
 800914c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009150:	2301      	movs	r3, #1
 8009152:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009156:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800915a:	2100      	movs	r1, #0
 800915c:	4618      	mov	r0, r3
 800915e:	f001 f803 	bl	800a168 <hci_send_req>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	da01      	bge.n	800916c <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8009168:	23ff      	movs	r3, #255	@ 0xff
 800916a:	e004      	b.n	8009176 <aci_gatt_update_char_value+0x148>
  return status;
 800916c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009170:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009174:	781b      	ldrb	r3, [r3, #0]
}
 8009176:	4618      	mov	r0, r3
 8009178:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800917c:	46bd      	mov	sp, r7
 800917e:	bdb0      	pop	{r4, r5, r7, pc}

08009180 <aci_gatt_disc_all_primary_services>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_disc_all_primary_services( uint16_t Connection_Handle )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b0cc      	sub	sp, #304	@ 0x130
 8009184:	af00      	add	r7, sp, #0
 8009186:	4602      	mov	r2, r0
 8009188:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800918c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009190:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
 8009192:	f107 0310 	add.w	r3, r7, #16
 8009196:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800919a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800919e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80091a2:	2200      	movs	r2, #0
 80091a4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80091a6:	2300      	movs	r3, #0
 80091a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80091ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80091b0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80091b4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80091b8:	8812      	ldrh	r2, [r2, #0]
 80091ba:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80091bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80091c0:	3302      	adds	r3, #2
 80091c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80091c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091ca:	2218      	movs	r2, #24
 80091cc:	2100      	movs	r1, #0
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 fd1e 	bl	8009c10 <Osal_MemSet>
  rq.ogf = 0x3f;
 80091d4:	233f      	movs	r3, #63	@ 0x3f
 80091d6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x112;
 80091da:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80091de:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 80091e2:	230f      	movs	r3, #15
 80091e4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 80091e8:	f107 0310 	add.w	r3, r7, #16
 80091ec:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80091f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80091f4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80091f8:	f107 030f 	add.w	r3, r7, #15
 80091fc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009200:	2301      	movs	r3, #1
 8009202:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009206:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800920a:	2100      	movs	r1, #0
 800920c:	4618      	mov	r0, r3
 800920e:	f000 ffab 	bl	800a168 <hci_send_req>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	da01      	bge.n	800921c <aci_gatt_disc_all_primary_services+0x9c>
    return BLE_STATUS_TIMEOUT;
 8009218:	23ff      	movs	r3, #255	@ 0xff
 800921a:	e004      	b.n	8009226 <aci_gatt_disc_all_primary_services+0xa6>
  return status;
 800921c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009220:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009224:	781b      	ldrb	r3, [r3, #0]
}
 8009226:	4618      	mov	r0, r3
 8009228:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <aci_gatt_disc_all_char_of_service>:
}

tBleStatus aci_gatt_disc_all_char_of_service( uint16_t Connection_Handle,
                                              uint16_t Start_Handle,
                                              uint16_t End_Handle )
{
 8009230:	b590      	push	{r4, r7, lr}
 8009232:	b0cd      	sub	sp, #308	@ 0x134
 8009234:	af00      	add	r7, sp, #0
 8009236:	4604      	mov	r4, r0
 8009238:	4608      	mov	r0, r1
 800923a:	4611      	mov	r1, r2
 800923c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009240:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009244:	4622      	mov	r2, r4
 8009246:	801a      	strh	r2, [r3, #0]
 8009248:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800924c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009250:	4602      	mov	r2, r0
 8009252:	801a      	strh	r2, [r3, #0]
 8009254:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009258:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800925c:	460a      	mov	r2, r1
 800925e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_of_service_cp0 *cp0 = (aci_gatt_disc_all_char_of_service_cp0*)(cmd_buffer);
 8009260:	f107 0310 	add.w	r3, r7, #16
 8009264:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009268:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800926c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009270:	2200      	movs	r2, #0
 8009272:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009274:	2300      	movs	r3, #0
 8009276:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800927a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800927e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009282:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009286:	8812      	ldrh	r2, [r2, #0]
 8009288:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800928a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800928e:	3302      	adds	r3, #2
 8009290:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Start_Handle = Start_Handle;
 8009294:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009298:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800929c:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80092a0:	8812      	ldrh	r2, [r2, #0]
 80092a2:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80092a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80092a8:	3302      	adds	r3, #2
 80092aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->End_Handle = End_Handle;
 80092ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80092b2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80092b6:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80092ba:	8812      	ldrh	r2, [r2, #0]
 80092bc:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80092be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80092c2:	3302      	adds	r3, #2
 80092c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80092c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092cc:	2218      	movs	r2, #24
 80092ce:	2100      	movs	r1, #0
 80092d0:	4618      	mov	r0, r3
 80092d2:	f000 fc9d 	bl	8009c10 <Osal_MemSet>
  rq.ogf = 0x3f;
 80092d6:	233f      	movs	r3, #63	@ 0x3f
 80092d8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x115;
 80092dc:	f240 1315 	movw	r3, #277	@ 0x115
 80092e0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 80092e4:	230f      	movs	r3, #15
 80092e6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 80092ea:	f107 0310 	add.w	r3, r7, #16
 80092ee:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80092f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80092f6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80092fa:	f107 030f 	add.w	r3, r7, #15
 80092fe:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009302:	2301      	movs	r3, #1
 8009304:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009308:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800930c:	2100      	movs	r1, #0
 800930e:	4618      	mov	r0, r3
 8009310:	f000 ff2a 	bl	800a168 <hci_send_req>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	da01      	bge.n	800931e <aci_gatt_disc_all_char_of_service+0xee>
    return BLE_STATUS_TIMEOUT;
 800931a:	23ff      	movs	r3, #255	@ 0xff
 800931c:	e004      	b.n	8009328 <aci_gatt_disc_all_char_of_service+0xf8>
  return status;
 800931e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009322:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009326:	781b      	ldrb	r3, [r3, #0]
}
 8009328:	4618      	mov	r0, r3
 800932a:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800932e:	46bd      	mov	sp, r7
 8009330:	bd90      	pop	{r4, r7, pc}

08009332 <aci_gatt_disc_all_char_desc>:
}

tBleStatus aci_gatt_disc_all_char_desc( uint16_t Connection_Handle,
                                        uint16_t Char_Handle,
                                        uint16_t End_Handle )
{
 8009332:	b590      	push	{r4, r7, lr}
 8009334:	b0cd      	sub	sp, #308	@ 0x134
 8009336:	af00      	add	r7, sp, #0
 8009338:	4604      	mov	r4, r0
 800933a:	4608      	mov	r0, r1
 800933c:	4611      	mov	r1, r2
 800933e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009342:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009346:	4622      	mov	r2, r4
 8009348:	801a      	strh	r2, [r3, #0]
 800934a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800934e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009352:	4602      	mov	r2, r0
 8009354:	801a      	strh	r2, [r3, #0]
 8009356:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800935a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800935e:	460a      	mov	r2, r1
 8009360:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_desc_cp0 *cp0 = (aci_gatt_disc_all_char_desc_cp0*)(cmd_buffer);
 8009362:	f107 0310 	add.w	r3, r7, #16
 8009366:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800936a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800936e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009372:	2200      	movs	r2, #0
 8009374:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009376:	2300      	movs	r3, #0
 8009378:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800937c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009380:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009384:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009388:	8812      	ldrh	r2, [r2, #0]
 800938a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800938c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009390:	3302      	adds	r3, #2
 8009392:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8009396:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800939a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800939e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80093a2:	8812      	ldrh	r2, [r2, #0]
 80093a4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80093a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80093aa:	3302      	adds	r3, #2
 80093ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->End_Handle = End_Handle;
 80093b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80093b4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80093b8:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80093bc:	8812      	ldrh	r2, [r2, #0]
 80093be:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80093c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80093c4:	3302      	adds	r3, #2
 80093c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80093ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093ce:	2218      	movs	r2, #24
 80093d0:	2100      	movs	r1, #0
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 fc1c 	bl	8009c10 <Osal_MemSet>
  rq.ogf = 0x3f;
 80093d8:	233f      	movs	r3, #63	@ 0x3f
 80093da:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x117;
 80093de:	f240 1317 	movw	r3, #279	@ 0x117
 80093e2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 80093e6:	230f      	movs	r3, #15
 80093e8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 80093ec:	f107 0310 	add.w	r3, r7, #16
 80093f0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80093f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80093f8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80093fc:	f107 030f 	add.w	r3, r7, #15
 8009400:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009404:	2301      	movs	r3, #1
 8009406:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800940a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800940e:	2100      	movs	r1, #0
 8009410:	4618      	mov	r0, r3
 8009412:	f000 fea9 	bl	800a168 <hci_send_req>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	da01      	bge.n	8009420 <aci_gatt_disc_all_char_desc+0xee>
    return BLE_STATUS_TIMEOUT;
 800941c:	23ff      	movs	r3, #255	@ 0xff
 800941e:	e004      	b.n	800942a <aci_gatt_disc_all_char_desc+0xf8>
  return status;
 8009420:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009424:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009428:	781b      	ldrb	r3, [r3, #0]
}
 800942a:	4618      	mov	r0, r3
 800942c:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8009430:	46bd      	mov	sp, r7
 8009432:	bd90      	pop	{r4, r7, pc}

08009434 <aci_gatt_write_char_desc>:

tBleStatus aci_gatt_write_char_desc( uint16_t Connection_Handle,
                                     uint16_t Attr_Handle,
                                     uint8_t Attribute_Val_Length,
                                     const uint8_t* Attribute_Val )
{
 8009434:	b590      	push	{r4, r7, lr}
 8009436:	b0cf      	sub	sp, #316	@ 0x13c
 8009438:	af00      	add	r7, sp, #0
 800943a:	4604      	mov	r4, r0
 800943c:	4608      	mov	r0, r1
 800943e:	4611      	mov	r1, r2
 8009440:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009444:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8009448:	6013      	str	r3, [r2, #0]
 800944a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800944e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009452:	4622      	mov	r2, r4
 8009454:	801a      	strh	r2, [r3, #0]
 8009456:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800945a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800945e:	4602      	mov	r2, r0
 8009460:	801a      	strh	r2, [r3, #0]
 8009462:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009466:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800946a:	460a      	mov	r2, r1
 800946c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 800946e:	f107 0318 	add.w	r3, r7, #24
 8009472:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  tBleStatus status = 0;
 8009476:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800947a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800947e:	2200      	movs	r2, #0
 8009480:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009482:	2300      	movs	r3, #0
 8009484:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Connection_Handle = Connection_Handle;
 8009488:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800948c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009490:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009494:	8812      	ldrh	r2, [r2, #0]
 8009496:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009498:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800949c:	3302      	adds	r3, #2
 800949e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Attr_Handle = Attr_Handle;
 80094a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094a6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80094aa:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80094ae:	8812      	ldrh	r2, [r2, #0]
 80094b0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80094b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80094b6:	3302      	adds	r3, #2
 80094b8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 80094bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094c0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80094c4:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 80094c8:	7812      	ldrb	r2, [r2, #0]
 80094ca:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80094cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80094d0:	3301      	adds	r3, #1
 80094d2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 80094d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094da:	1d58      	adds	r0, r3, #5
 80094dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80094e0:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80094e4:	781a      	ldrb	r2, [r3, #0]
 80094e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80094ea:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80094ee:	6819      	ldr	r1, [r3, #0]
 80094f0:	f000 fb7e 	bl	8009bf0 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 80094f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80094f8:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8009502:	4413      	add	r3, r2
 8009504:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009508:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800950c:	2218      	movs	r2, #24
 800950e:	2100      	movs	r1, #0
 8009510:	4618      	mov	r0, r3
 8009512:	f000 fb7d 	bl	8009c10 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009516:	233f      	movs	r3, #63	@ 0x3f
 8009518:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x121;
 800951c:	f240 1321 	movw	r3, #289	@ 0x121
 8009520:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.event = 0x0F;
 8009524:	230f      	movs	r3, #15
 8009526:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.cparam = cmd_buffer;
 800952a:	f107 0318 	add.w	r3, r7, #24
 800952e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8009532:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009536:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &status;
 800953a:	f107 0317 	add.w	r3, r7, #23
 800953e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = 1;
 8009542:	2301      	movs	r3, #1
 8009544:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009548:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800954c:	2100      	movs	r1, #0
 800954e:	4618      	mov	r0, r3
 8009550:	f000 fe0a 	bl	800a168 <hci_send_req>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	da01      	bge.n	800955e <aci_gatt_write_char_desc+0x12a>
    return BLE_STATUS_TIMEOUT;
 800955a:	23ff      	movs	r3, #255	@ 0xff
 800955c:	e004      	b.n	8009568 <aci_gatt_write_char_desc+0x134>
  return status;
 800955e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009562:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009566:	781b      	ldrb	r3, [r3, #0]
}
 8009568:	4618      	mov	r0, r3
 800956a:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800956e:	46bd      	mov	sp, r7
 8009570:	bd90      	pop	{r4, r7, pc}

08009572 <aci_gatt_write_without_resp>:

tBleStatus aci_gatt_write_without_resp( uint16_t Connection_Handle,
                                        uint16_t Attr_Handle,
                                        uint8_t Attribute_Val_Length,
                                        const uint8_t* Attribute_Val )
{
 8009572:	b590      	push	{r4, r7, lr}
 8009574:	b0cf      	sub	sp, #316	@ 0x13c
 8009576:	af00      	add	r7, sp, #0
 8009578:	4604      	mov	r4, r0
 800957a:	4608      	mov	r0, r1
 800957c:	4611      	mov	r1, r2
 800957e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009582:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8009586:	6013      	str	r3, [r2, #0]
 8009588:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800958c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009590:	4622      	mov	r2, r4
 8009592:	801a      	strh	r2, [r3, #0]
 8009594:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009598:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800959c:	4602      	mov	r2, r0
 800959e:	801a      	strh	r2, [r3, #0]
 80095a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80095a4:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80095a8:	460a      	mov	r2, r1
 80095aa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_without_resp_cp0 *cp0 = (aci_gatt_write_without_resp_cp0*)(cmd_buffer);
 80095ac:	f107 0318 	add.w	r3, r7, #24
 80095b0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  tBleStatus status = 0;
 80095b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80095b8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80095bc:	2200      	movs	r2, #0
 80095be:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80095c0:	2300      	movs	r3, #0
 80095c2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Connection_Handle = Connection_Handle;
 80095c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80095ca:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80095ce:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80095d2:	8812      	ldrh	r2, [r2, #0]
 80095d4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80095d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80095da:	3302      	adds	r3, #2
 80095dc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Attr_Handle = Attr_Handle;
 80095e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80095e4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80095e8:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80095ec:	8812      	ldrh	r2, [r2, #0]
 80095ee:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80095f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80095f4:	3302      	adds	r3, #2
 80095f6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 80095fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80095fe:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009602:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8009606:	7812      	ldrb	r2, [r2, #0]
 8009608:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800960a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800960e:	3301      	adds	r3, #1
 8009610:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 8009614:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009618:	1d58      	adds	r0, r3, #5
 800961a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800961e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8009622:	781a      	ldrb	r2, [r3, #0]
 8009624:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009628:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800962c:	6819      	ldr	r1, [r3, #0]
 800962e:	f000 fadf 	bl	8009bf0 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 8009632:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009636:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8009640:	4413      	add	r3, r2
 8009642:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009646:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800964a:	2218      	movs	r2, #24
 800964c:	2100      	movs	r1, #0
 800964e:	4618      	mov	r0, r3
 8009650:	f000 fade 	bl	8009c10 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009654:	233f      	movs	r3, #63	@ 0x3f
 8009656:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x123;
 800965a:	f240 1323 	movw	r3, #291	@ 0x123
 800965e:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8009662:	f107 0318 	add.w	r3, r7, #24
 8009666:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800966a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800966e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &status;
 8009672:	f107 0317 	add.w	r3, r7, #23
 8009676:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = 1;
 800967a:	2301      	movs	r3, #1
 800967c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009680:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009684:	2100      	movs	r1, #0
 8009686:	4618      	mov	r0, r3
 8009688:	f000 fd6e 	bl	800a168 <hci_send_req>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	da01      	bge.n	8009696 <aci_gatt_write_without_resp+0x124>
    return BLE_STATUS_TIMEOUT;
 8009692:	23ff      	movs	r3, #255	@ 0xff
 8009694:	e004      	b.n	80096a0 <aci_gatt_write_without_resp+0x12e>
  return status;
 8009696:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800969a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800969e:	781b      	ldrb	r3, [r3, #0]
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd90      	pop	{r4, r7, pc}

080096aa <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b0cc      	sub	sp, #304	@ 0x130
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096b4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80096b8:	601a      	str	r2, [r3, #0]
 80096ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096be:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80096c2:	4602      	mov	r2, r0
 80096c4:	701a      	strb	r2, [r3, #0]
 80096c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096ca:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80096ce:	460a      	mov	r2, r1
 80096d0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80096d2:	f107 0310 	add.w	r3, r7, #16
 80096d6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80096da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096de:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80096e2:	2200      	movs	r2, #0
 80096e4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80096e6:	2300      	movs	r3, #0
 80096e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 80096ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80096f0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80096f4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80096f8:	7812      	ldrb	r2, [r2, #0]
 80096fa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80096fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009700:	3301      	adds	r3, #1
 8009702:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8009706:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800970a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800970e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009712:	7812      	ldrb	r2, [r2, #0]
 8009714:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009716:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800971a:	3301      	adds	r3, #1
 800971c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8009720:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009724:	1c98      	adds	r0, r3, #2
 8009726:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800972a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800972e:	781a      	ldrb	r2, [r3, #0]
 8009730:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009734:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009738:	6819      	ldr	r1, [r3, #0]
 800973a:	f000 fa59 	bl	8009bf0 <Osal_MemCpy>
  index_input += Length;
 800973e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009742:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800974c:	4413      	add	r3, r2
 800974e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009752:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009756:	2218      	movs	r2, #24
 8009758:	2100      	movs	r1, #0
 800975a:	4618      	mov	r0, r3
 800975c:	f000 fa58 	bl	8009c10 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009760:	233f      	movs	r3, #63	@ 0x3f
 8009762:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8009766:	230c      	movs	r3, #12
 8009768:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800976c:	f107 0310 	add.w	r3, r7, #16
 8009770:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009774:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009778:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800977c:	f107 030f 	add.w	r3, r7, #15
 8009780:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009784:	2301      	movs	r3, #1
 8009786:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800978a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800978e:	2100      	movs	r1, #0
 8009790:	4618      	mov	r0, r3
 8009792:	f000 fce9 	bl	800a168 <hci_send_req>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	da01      	bge.n	80097a0 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800979c:	23ff      	movs	r3, #255	@ 0xff
 800979e:	e004      	b.n	80097aa <aci_hal_write_config_data+0x100>
  return status;
 80097a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80097a4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80097a8:	781b      	ldrb	r3, [r3, #0]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b0cc      	sub	sp, #304	@ 0x130
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	4602      	mov	r2, r0
 80097bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80097c0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80097c4:	701a      	strb	r2, [r3, #0]
 80097c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80097ca:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80097ce:	460a      	mov	r2, r1
 80097d0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80097d2:	f107 0310 	add.w	r3, r7, #16
 80097d6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80097da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80097de:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80097e2:	2200      	movs	r2, #0
 80097e4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80097e6:	2300      	movs	r3, #0
 80097e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 80097ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80097f0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80097f4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80097f8:	7812      	ldrb	r2, [r2, #0]
 80097fa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80097fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009800:	3301      	adds	r3, #1
 8009802:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8009806:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800980a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800980e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009812:	7812      	ldrb	r2, [r2, #0]
 8009814:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009816:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800981a:	3301      	adds	r3, #1
 800981c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009820:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009824:	2218      	movs	r2, #24
 8009826:	2100      	movs	r1, #0
 8009828:	4618      	mov	r0, r3
 800982a:	f000 f9f1 	bl	8009c10 <Osal_MemSet>
  rq.ogf = 0x3f;
 800982e:	233f      	movs	r3, #63	@ 0x3f
 8009830:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8009834:	230f      	movs	r3, #15
 8009836:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800983a:	f107 0310 	add.w	r3, r7, #16
 800983e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009842:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009846:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800984a:	f107 030f 	add.w	r3, r7, #15
 800984e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009852:	2301      	movs	r3, #1
 8009854:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009858:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800985c:	2100      	movs	r1, #0
 800985e:	4618      	mov	r0, r3
 8009860:	f000 fc82 	bl	800a168 <hci_send_req>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	da01      	bge.n	800986e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800986a:	23ff      	movs	r3, #255	@ 0xff
 800986c:	e004      	b.n	8009878 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800986e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009872:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009876:	781b      	ldrb	r3, [r3, #0]
}
 8009878:	4618      	mov	r0, r3
 800987a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b0cc      	sub	sp, #304	@ 0x130
 8009886:	af00      	add	r7, sp, #0
 8009888:	4602      	mov	r2, r0
 800988a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800988e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009892:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8009894:	f107 0310 	add.w	r3, r7, #16
 8009898:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800989c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80098a0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80098a4:	2200      	movs	r2, #0
 80098a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80098a8:	2300      	movs	r3, #0
 80098aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80098ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80098b2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80098b6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80098ba:	8812      	ldrh	r2, [r2, #0]
 80098bc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80098be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80098c2:	3302      	adds	r3, #2
 80098c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80098c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098cc:	2218      	movs	r2, #24
 80098ce:	2100      	movs	r1, #0
 80098d0:	4618      	mov	r0, r3
 80098d2:	f000 f99d 	bl	8009c10 <Osal_MemSet>
  rq.ogf = 0x3f;
 80098d6:	233f      	movs	r3, #63	@ 0x3f
 80098d8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 80098dc:	2318      	movs	r3, #24
 80098de:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80098e2:	f107 0310 	add.w	r3, r7, #16
 80098e6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80098ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80098ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80098f2:	f107 030f 	add.w	r3, r7, #15
 80098f6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80098fa:	2301      	movs	r3, #1
 80098fc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009900:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009904:	2100      	movs	r1, #0
 8009906:	4618      	mov	r0, r3
 8009908:	f000 fc2e 	bl	800a168 <hci_send_req>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	da01      	bge.n	8009916 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8009912:	23ff      	movs	r3, #255	@ 0xff
 8009914:	e004      	b.n	8009920 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8009916:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800991a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800991e:	781b      	ldrb	r3, [r3, #0]
}
 8009920:	4618      	mov	r0, r3
 8009922:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b088      	sub	sp, #32
 800992e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009930:	2300      	movs	r3, #0
 8009932:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009934:	f107 0308 	add.w	r3, r7, #8
 8009938:	2218      	movs	r2, #24
 800993a:	2100      	movs	r1, #0
 800993c:	4618      	mov	r0, r3
 800993e:	f000 f967 	bl	8009c10 <Osal_MemSet>
  rq.ogf = 0x03;
 8009942:	2303      	movs	r3, #3
 8009944:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8009946:	2303      	movs	r3, #3
 8009948:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800994a:	1dfb      	adds	r3, r7, #7
 800994c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800994e:	2301      	movs	r3, #1
 8009950:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009952:	f107 0308 	add.w	r3, r7, #8
 8009956:	2100      	movs	r1, #0
 8009958:	4618      	mov	r0, r3
 800995a:	f000 fc05 	bl	800a168 <hci_send_req>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	da01      	bge.n	8009968 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009964:	23ff      	movs	r3, #255	@ 0xff
 8009966:	e000      	b.n	800996a <hci_reset+0x40>
  return status;
 8009968:	79fb      	ldrb	r3, [r7, #7]
}
 800996a:	4618      	mov	r0, r3
 800996c:	3720      	adds	r7, #32
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <hci_le_set_event_mask>:
  *RSSI = resp.RSSI;
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_le_set_event_mask( const uint8_t* LE_Event_Mask )
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b0cc      	sub	sp, #304	@ 0x130
 8009976:	af00      	add	r7, sp, #0
 8009978:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800997c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009980:	6018      	str	r0, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_event_mask_cp0 *cp0 = (hci_le_set_event_mask_cp0*)(cmd_buffer);
 8009982:	f107 0310 	add.w	r3, r7, #16
 8009986:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800998a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800998e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009992:	2200      	movs	r2, #0
 8009994:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009996:	2300      	movs	r3, #0
 8009998:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->LE_Event_Mask, (const void*)LE_Event_Mask, 8 );
 800999c:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 80099a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80099a8:	2208      	movs	r2, #8
 80099aa:	6819      	ldr	r1, [r3, #0]
 80099ac:	f000 f920 	bl	8009bf0 <Osal_MemCpy>
  index_input += 8;
 80099b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80099b4:	3308      	adds	r3, #8
 80099b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80099ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099be:	2218      	movs	r2, #24
 80099c0:	2100      	movs	r1, #0
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 f924 	bl	8009c10 <Osal_MemSet>
  rq.ogf = 0x08;
 80099c8:	2308      	movs	r3, #8
 80099ca:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x001;
 80099ce:	2301      	movs	r3, #1
 80099d0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80099d4:	f107 0310 	add.w	r3, r7, #16
 80099d8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80099dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80099e0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80099e4:	f107 030f 	add.w	r3, r7, #15
 80099e8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80099ec:	2301      	movs	r3, #1
 80099ee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80099f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099f6:	2100      	movs	r1, #0
 80099f8:	4618      	mov	r0, r3
 80099fa:	f000 fbb5 	bl	800a168 <hci_send_req>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	da01      	bge.n	8009a08 <hci_le_set_event_mask+0x96>
    return BLE_STATUS_TIMEOUT;
 8009a04:	23ff      	movs	r3, #255	@ 0xff
 8009a06:	e004      	b.n	8009a12 <hci_le_set_event_mask+0xa0>
  return status;
 8009a08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a0c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009a10:	781b      	ldrb	r3, [r3, #0]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <hci_le_read_local_p256_public_key>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_le_read_local_p256_public_key( void )
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b088      	sub	sp, #32
 8009a20:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009a22:	2300      	movs	r3, #0
 8009a24:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009a26:	f107 0308 	add.w	r3, r7, #8
 8009a2a:	2218      	movs	r2, #24
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f000 f8ee 	bl	8009c10 <Osal_MemSet>
  rq.ogf = 0x08;
 8009a34:	2308      	movs	r3, #8
 8009a36:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x025;
 8009a38:	2325      	movs	r3, #37	@ 0x25
 8009a3a:	817b      	strh	r3, [r7, #10]
  rq.event = 0x0F;
 8009a3c:	230f      	movs	r3, #15
 8009a3e:	60fb      	str	r3, [r7, #12]
  rq.rparam = &status;
 8009a40:	1dfb      	adds	r3, r7, #7
 8009a42:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009a44:	2301      	movs	r3, #1
 8009a46:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009a48:	f107 0308 	add.w	r3, r7, #8
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f000 fb8a 	bl	800a168 <hci_send_req>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	da01      	bge.n	8009a5e <hci_le_read_local_p256_public_key+0x42>
    return BLE_STATUS_TIMEOUT;
 8009a5a:	23ff      	movs	r3, #255	@ 0xff
 8009a5c:	e000      	b.n	8009a60 <hci_le_read_local_p256_public_key+0x44>
  return status;
 8009a5e:	79fb      	ldrb	r3, [r7, #7]
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3720      	adds	r7, #32
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <aci_l2cap_connection_parameter_update_resp>:
                                                       uint16_t Timeout_Multiplier,
                                                       uint16_t Minimum_CE_Length,
                                                       uint16_t Maximum_CE_Length,
                                                       uint8_t Identifier,
                                                       uint8_t Accept )
{
 8009a68:	b5b0      	push	{r4, r5, r7, lr}
 8009a6a:	b0cc      	sub	sp, #304	@ 0x130
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	4605      	mov	r5, r0
 8009a70:	460c      	mov	r4, r1
 8009a72:	4610      	mov	r0, r2
 8009a74:	4619      	mov	r1, r3
 8009a76:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a7a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009a7e:	462a      	mov	r2, r5
 8009a80:	801a      	strh	r2, [r3, #0]
 8009a82:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a86:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009a8a:	4622      	mov	r2, r4
 8009a8c:	801a      	strh	r2, [r3, #0]
 8009a8e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a92:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8009a96:	4602      	mov	r2, r0
 8009a98:	801a      	strh	r2, [r3, #0]
 8009a9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a9e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009aa2:	460a      	mov	r2, r1
 8009aa4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_resp_cp0 *cp0 = (aci_l2cap_connection_parameter_update_resp_cp0*)(cmd_buffer);
 8009aa6:	f107 0310 	add.w	r3, r7, #16
 8009aaa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009aae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ab2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009aba:	2300      	movs	r3, #0
 8009abc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009ac4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009ac8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009acc:	8812      	ldrh	r2, [r2, #0]
 8009ace:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009ad0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009ad4:	3302      	adds	r3, #2
 8009ad6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8009ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009ade:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009ae2:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8009ae6:	8812      	ldrh	r2, [r2, #0]
 8009ae8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009aea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009aee:	3302      	adds	r3, #2
 8009af0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8009af4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009af8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009afc:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8009b00:	8812      	ldrh	r2, [r2, #0]
 8009b02:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8009b04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b08:	3302      	adds	r3, #2
 8009b0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Slave_latency = Slave_latency;
 8009b0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009b12:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009b16:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8009b1a:	8812      	ldrh	r2, [r2, #0]
 8009b1c:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 8009b1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b22:	3302      	adds	r3, #2
 8009b24:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 8009b28:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009b2c:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 8009b30:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8009b32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b36:	3302      	adds	r3, #2
 8009b38:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 8009b3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009b40:	f8b7 2144 	ldrh.w	r2, [r7, #324]	@ 0x144
 8009b44:	815a      	strh	r2, [r3, #10]
  index_input += 2;
 8009b46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b4a:	3302      	adds	r3, #2
 8009b4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 8009b50:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009b54:	f8b7 2148 	ldrh.w	r2, [r7, #328]	@ 0x148
 8009b58:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 8009b5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b5e:	3302      	adds	r3, #2
 8009b60:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identifier = Identifier;
 8009b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009b68:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8009b6c:	739a      	strb	r2, [r3, #14]
  index_input += 1;
 8009b6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b72:	3301      	adds	r3, #1
 8009b74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Accept = Accept;
 8009b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009b7c:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8009b80:	73da      	strb	r2, [r3, #15]
  index_input += 1;
 8009b82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b86:	3301      	adds	r3, #1
 8009b88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009b8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b90:	2218      	movs	r2, #24
 8009b92:	2100      	movs	r1, #0
 8009b94:	4618      	mov	r0, r3
 8009b96:	f000 f83b 	bl	8009c10 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009b9a:	233f      	movs	r3, #63	@ 0x3f
 8009b9c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x182;
 8009ba0:	f44f 73c1 	mov.w	r3, #386	@ 0x182
 8009ba4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009ba8:	f107 0310 	add.w	r3, r7, #16
 8009bac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009bb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009bb4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009bb8:	f107 030f 	add.w	r3, r7, #15
 8009bbc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009bc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bca:	2100      	movs	r1, #0
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f000 facb 	bl	800a168 <hci_send_req>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	da01      	bge.n	8009bdc <aci_l2cap_connection_parameter_update_resp+0x174>
    return BLE_STATUS_TIMEOUT;
 8009bd8:	23ff      	movs	r3, #255	@ 0xff
 8009bda:	e004      	b.n	8009be6 <aci_l2cap_connection_parameter_update_resp+0x17e>
  return status;
 8009bdc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009be0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009be4:	781b      	ldrb	r3, [r3, #0]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bdb0      	pop	{r4, r5, r7, pc}

08009bf0 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	68b9      	ldr	r1, [r7, #8]
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f003 ffa8 	bl	800db56 <memcpy>
 8009c06:	4603      	mov	r3, r0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3710      	adds	r7, #16
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	68b9      	ldr	r1, [r7, #8]
 8009c20:	68f8      	ldr	r0, [r7, #12]
 8009c22:	f003 ff63 	bl	800daec <memset>
 8009c26:	4603      	mov	r3, r0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8009c30:	b480      	push	{r7}
 8009c32:	af00      	add	r7, sp, #0
  return;
 8009c34:	bf00      	nop
}
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr

08009c3e <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8009c3e:	b480      	push	{r7}
 8009c40:	af00      	add	r7, sp, #0
  return;
 8009c42:	bf00      	nop
}
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	af00      	add	r7, sp, #0
  return;
 8009c50:	bf00      	nop
}
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8009c5a:	b480      	push	{r7}
 8009c5c:	af00      	add	r7, sp, #0
  return;
 8009c5e:	bf00      	nop
}
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8009c68:	b480      	push	{r7}
 8009c6a:	af00      	add	r7, sp, #0
  return;
 8009c6c:	bf00      	nop
}
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr

08009c76 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8009c76:	b480      	push	{r7}
 8009c78:	af00      	add	r7, sp, #0
  return;
 8009c7a:	bf00      	nop
}
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8009c84:	b480      	push	{r7}
 8009c86:	af00      	add	r7, sp, #0
  return;
 8009c88:	bf00      	nop
}
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr

08009c92 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8009c92:	b480      	push	{r7}
 8009c94:	af00      	add	r7, sp, #0
  return;
 8009c96:	bf00      	nop
}
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	af00      	add	r7, sp, #0
  return;
 8009ca4:	bf00      	nop
}
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr

08009cae <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8009cae:	b480      	push	{r7}
 8009cb0:	af00      	add	r7, sp, #0
  return;
 8009cb2:	bf00      	nop
}
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	af00      	add	r7, sp, #0
  return;
 8009cc0:	bf00      	nop
}
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr

08009cca <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8009cca:	b480      	push	{r7}
 8009ccc:	af00      	add	r7, sp, #0
  return;
 8009cce:	bf00      	nop
}
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8009cd8:	b480      	push	{r7}
 8009cda:	af00      	add	r7, sp, #0
  return;
 8009cdc:	bf00      	nop
}
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr

08009ce6 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8009ce6:	b480      	push	{r7}
 8009ce8:	af00      	add	r7, sp, #0
  return;
 8009cea:	bf00      	nop
}
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	af00      	add	r7, sp, #0
  return;
 8009cf8:	bf00      	nop
}
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr

08009d02 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8009d02:	b480      	push	{r7}
 8009d04:	af00      	add	r7, sp, #0
  return;
 8009d06:	bf00      	nop
}
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8009d10:	b480      	push	{r7}
 8009d12:	af00      	add	r7, sp, #0
  return;
 8009d14:	bf00      	nop
}
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr

08009d1e <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 8009d1e:	b480      	push	{r7}
 8009d20:	af00      	add	r7, sp, #0
  return;
 8009d22:	bf00      	nop
}
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8009d30:	4b04      	ldr	r3, [pc, #16]	@ (8009d44 <SVCCTL_Init+0x18>)
 8009d32:	2200      	movs	r2, #0
 8009d34:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8009d36:	4b04      	ldr	r3, [pc, #16]	@ (8009d48 <SVCCTL_Init+0x1c>)
 8009d38:	2200      	movs	r2, #0
 8009d3a:	711a      	strb	r2, [r3, #4]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8009d3c:	f000 f806 	bl	8009d4c <SVCCTL_SvcInit>

  return;
 8009d40:	bf00      	nop
}
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	20000090 	.word	0x20000090
 8009d48:	200000b0 	.word	0x200000b0

08009d4c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	af00      	add	r7, sp, #0
  BAS_Init();
 8009d50:	f7ff ff6e 	bl	8009c30 <BAS_Init>

  BLS_Init();
 8009d54:	f7ff ff73 	bl	8009c3e <BLS_Init>

  CRS_STM_Init();
 8009d58:	f7ff ff78 	bl	8009c4c <CRS_STM_Init>

  DIS_Init();
 8009d5c:	f7ff ff7d 	bl	8009c5a <DIS_Init>

  EDS_STM_Init();
 8009d60:	f7ff ff82 	bl	8009c68 <EDS_STM_Init>

  HIDS_Init();
 8009d64:	f7ff ff87 	bl	8009c76 <HIDS_Init>

  HRS_Init();
 8009d68:	f7ff ff8c 	bl	8009c84 <HRS_Init>

  HTS_Init();
 8009d6c:	f7ff ff91 	bl	8009c92 <HTS_Init>

  IAS_Init();
 8009d70:	f7ff ff96 	bl	8009ca0 <IAS_Init>

  LLS_Init();
 8009d74:	f7ff ff9b 	bl	8009cae <LLS_Init>

  TPS_Init();
 8009d78:	f7ff ffa0 	bl	8009cbc <TPS_Init>

  MOTENV_STM_Init();
 8009d7c:	f7ff ffa5 	bl	8009cca <MOTENV_STM_Init>

  P2PS_STM_Init();
 8009d80:	f7ff ffaa 	bl	8009cd8 <P2PS_STM_Init>

  ZDD_STM_Init();
 8009d84:	f7ff ffaf 	bl	8009ce6 <ZDD_STM_Init>

  OTAS_STM_Init();
 8009d88:	f7ff ffb4 	bl	8009cf4 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8009d8c:	f7ff ffc0 	bl	8009d10 <BVOPUS_STM_Init>

  MESH_Init();
 8009d90:	f7ff ffb7 	bl	8009d02 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8009d94:	f7ff ffc3 	bl	8009d1e <SVCCTL_InitCustomSvc>
  
  return;
 8009d98:	bf00      	nop
}
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <SVCCTL_RegisterCltHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterCltHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Client_Event_Handler )
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
  SVCCTL_CltHandler.SVCCTL_CltHandlerTable[SVCCTL_CltHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Client_Event_Handler;
 8009da4:	4b09      	ldr	r3, [pc, #36]	@ (8009dcc <SVCCTL_RegisterCltHandler+0x30>)
 8009da6:	791b      	ldrb	r3, [r3, #4]
 8009da8:	4619      	mov	r1, r3
 8009daa:	4a08      	ldr	r2, [pc, #32]	@ (8009dcc <SVCCTL_RegisterCltHandler+0x30>)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_CltHandler.NbreOfRegisteredHandler++;
 8009db2:	4b06      	ldr	r3, [pc, #24]	@ (8009dcc <SVCCTL_RegisterCltHandler+0x30>)
 8009db4:	791b      	ldrb	r3, [r3, #4]
 8009db6:	3301      	adds	r3, #1
 8009db8:	b2da      	uxtb	r2, r3
 8009dba:	4b04      	ldr	r3, [pc, #16]	@ (8009dcc <SVCCTL_RegisterCltHandler+0x30>)
 8009dbc:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Client_Event_Handler);
#endif

  return;
 8009dbe:	bf00      	nop
}
 8009dc0:	370c      	adds	r7, #12
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr
 8009dca:	bf00      	nop
 8009dcc:	200000b0 	.word	0x200000b0

08009dd0 <SVCCTL_UserEvtRx>:

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b086      	sub	sp, #24
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	3301      	adds	r3, #1
 8009ddc:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8009dde:	2300      	movs	r3, #0
 8009de0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	2bff      	cmp	r3, #255	@ 0xff
 8009de8:	d13f      	bne.n	8009e6a <SVCCTL_UserEvtRx+0x9a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	3302      	adds	r3, #2
 8009dee:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	881b      	ldrh	r3, [r3, #0]
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009dfa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009dfe:	d132      	bne.n	8009e66 <SVCCTL_UserEvtRx+0x96>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009e00:	2300      	movs	r3, #0
 8009e02:	757b      	strb	r3, [r7, #21]
 8009e04:	e00d      	b.n	8009e22 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8009e06:	7d7b      	ldrb	r3, [r7, #21]
 8009e08:	4a27      	ldr	r2, [pc, #156]	@ (8009ea8 <SVCCTL_UserEvtRx+0xd8>)
 8009e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	4798      	blx	r3
 8009e12:	4603      	mov	r3, r0
 8009e14:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8009e16:	7dfb      	ldrb	r3, [r7, #23]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d108      	bne.n	8009e2e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009e1c:	7d7b      	ldrb	r3, [r7, #21]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	757b      	strb	r3, [r7, #21]
 8009e22:	4b21      	ldr	r3, [pc, #132]	@ (8009ea8 <SVCCTL_UserEvtRx+0xd8>)
 8009e24:	7f1b      	ldrb	r3, [r3, #28]
 8009e26:	7d7a      	ldrb	r2, [r7, #21]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d3ec      	bcc.n	8009e06 <SVCCTL_UserEvtRx+0x36>
 8009e2c:	e000      	b.n	8009e30 <SVCCTL_UserEvtRx+0x60>
            {
              /**
               *  The event has been managed. The Event processing should be stopped
               */
              break;
 8009e2e:	bf00      	nop
            }
          }
#endif
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
          /* For Client event handler */
          event_notification_status = SVCCTL_EvtNotAck;
 8009e30:	2300      	movs	r3, #0
 8009e32:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 8009e34:	2300      	movs	r3, #0
 8009e36:	757b      	strb	r3, [r7, #21]
 8009e38:	e00d      	b.n	8009e56 <SVCCTL_UserEvtRx+0x86>
          {
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 8009e3a:	7d7b      	ldrb	r3, [r7, #21]
 8009e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8009eac <SVCCTL_UserEvtRx+0xdc>)
 8009e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	4798      	blx	r3
 8009e46:	4603      	mov	r3, r0
 8009e48:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Client, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Client
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8009e4a:	7dfb      	ldrb	r3, [r7, #23]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d108      	bne.n	8009e62 <SVCCTL_UserEvtRx+0x92>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 8009e50:	7d7b      	ldrb	r3, [r7, #21]
 8009e52:	3301      	adds	r3, #1
 8009e54:	757b      	strb	r3, [r7, #21]
 8009e56:	4b15      	ldr	r3, [pc, #84]	@ (8009eac <SVCCTL_UserEvtRx+0xdc>)
 8009e58:	791b      	ldrb	r3, [r3, #4]
 8009e5a:	7d7a      	ldrb	r2, [r7, #21]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d3ec      	bcc.n	8009e3a <SVCCTL_UserEvtRx+0x6a>
               */
              break;
            }
          }
#endif
          break;
 8009e60:	e002      	b.n	8009e68 <SVCCTL_UserEvtRx+0x98>
              break;
 8009e62:	bf00      	nop
          break;
 8009e64:	e000      	b.n	8009e68 <SVCCTL_UserEvtRx+0x98>

        default:
          break;
 8009e66:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8009e68:	e000      	b.n	8009e6c <SVCCTL_UserEvtRx+0x9c>

    default:
      break;
 8009e6a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8009e6c:	7dfb      	ldrb	r3, [r7, #23]
 8009e6e:	2b02      	cmp	r3, #2
 8009e70:	d00f      	beq.n	8009e92 <SVCCTL_UserEvtRx+0xc2>
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	dc10      	bgt.n	8009e98 <SVCCTL_UserEvtRx+0xc8>
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d002      	beq.n	8009e80 <SVCCTL_UserEvtRx+0xb0>
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d006      	beq.n	8009e8c <SVCCTL_UserEvtRx+0xbc>
 8009e7e:	e00b      	b.n	8009e98 <SVCCTL_UserEvtRx+0xc8>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f001 fd33 	bl	800b8ec <SVCCTL_App_Notification>
 8009e86:	4603      	mov	r3, r0
 8009e88:	75bb      	strb	r3, [r7, #22]
      break;
 8009e8a:	e008      	b.n	8009e9e <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	75bb      	strb	r3, [r7, #22]
      break;
 8009e90:	e005      	b.n	8009e9e <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8009e92:	2300      	movs	r3, #0
 8009e94:	75bb      	strb	r3, [r7, #22]
      break;
 8009e96:	e002      	b.n	8009e9e <SVCCTL_UserEvtRx+0xce>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	75bb      	strb	r3, [r7, #22]
      break;
 8009e9c:	bf00      	nop
  }

  return (return_status);
 8009e9e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3718      	adds	r7, #24
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	20000090 	.word	0x20000090
 8009eac:	200000b0 	.word	0x200000b0

08009eb0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b088      	sub	sp, #32
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009eb8:	f107 030c 	add.w	r3, r7, #12
 8009ebc:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	212e      	movs	r1, #46	@ 0x2e
 8009ec8:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8009ecc:	f000 fae2 	bl	800a494 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009ed0:	69fb      	ldr	r3, [r7, #28]
 8009ed2:	330b      	adds	r3, #11
 8009ed4:	78db      	ldrb	r3, [r3, #3]
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3720      	adds	r7, #32
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b088      	sub	sp, #32
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009ee6:	f107 030c 	add.w	r3, r7, #12
 8009eea:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	210f      	movs	r1, #15
 8009ef6:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8009efa:	f000 facb 	bl	800a494 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009efe:	69fb      	ldr	r3, [r7, #28]
 8009f00:	330b      	adds	r3, #11
 8009f02:	78db      	ldrb	r3, [r3, #3]
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3720      	adds	r7, #32
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b088      	sub	sp, #32
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009f14:	f107 030c 	add.w	r3, r7, #12
 8009f18:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	2110      	movs	r1, #16
 8009f20:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8009f24:	f000 fab6 	bl	800a494 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	330b      	adds	r3, #11
 8009f2c:	78db      	ldrb	r3, [r3, #3]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3720      	adds	r7, #32
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
	...

08009f38 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b08b      	sub	sp, #44	@ 0x2c
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009f40:	2300      	movs	r3, #0
 8009f42:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009f44:	2300      	movs	r3, #0
 8009f46:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009f50:	2300      	movs	r3, #0
 8009f52:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8009f54:	2300      	movs	r3, #0
 8009f56:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009f60:	4b4a      	ldr	r3, [pc, #296]	@ (800a08c <SHCI_GetWirelessFwInfo+0x154>)
 8009f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f64:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009f68:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8009f72:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4a44      	ldr	r2, [pc, #272]	@ (800a090 <SHCI_GetWirelessFwInfo+0x158>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d10f      	bne.n	8009fa4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	695b      	ldr	r3, [r3, #20]
 8009f88:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	699b      	ldr	r3, [r3, #24]
 8009f8e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	69db      	ldr	r3, [r3, #28]
 8009f94:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	617b      	str	r3, [r7, #20]
 8009fa2:	e01a      	b.n	8009fda <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8009fac:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8009fb0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	691b      	ldr	r3, [r3, #16]
 8009fb8:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	695b      	ldr	r3, [r3, #20]
 8009fc0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	699b      	ldr	r3, [r3, #24]
 8009fc8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fdc:	0e1b      	lsrs	r3, r3, #24
 8009fde:	b2da      	uxtb	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe6:	0c1b      	lsrs	r3, r3, #16
 8009fe8:	b2da      	uxtb	r2, r3
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff0:	0a1b      	lsrs	r3, r3, #8
 8009ff2:	b2da      	uxtb	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8009ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ffa:	091b      	lsrs	r3, r3, #4
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	f003 030f 	and.w	r3, r3, #15
 800a002:	b2da      	uxtb	r2, r3
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800a008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	f003 030f 	and.w	r3, r3, #15
 800a010:	b2da      	uxtb	r2, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a016:	6a3b      	ldr	r3, [r7, #32]
 800a018:	0e1b      	lsrs	r3, r3, #24
 800a01a:	b2da      	uxtb	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a020:	6a3b      	ldr	r3, [r7, #32]
 800a022:	0c1b      	lsrs	r3, r3, #16
 800a024:	b2da      	uxtb	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800a02a:	6a3b      	ldr	r3, [r7, #32]
 800a02c:	0a1b      	lsrs	r3, r3, #8
 800a02e:	b2da      	uxtb	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a034:	6a3b      	ldr	r3, [r7, #32]
 800a036:	b2da      	uxtb	r2, r3
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	b2da      	uxtb	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	0e1b      	lsrs	r3, r3, #24
 800a048:	b2da      	uxtb	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	0c1b      	lsrs	r3, r3, #16
 800a052:	b2da      	uxtb	r2, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	0a1b      	lsrs	r3, r3, #8
 800a05c:	b2da      	uxtb	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	0e1b      	lsrs	r3, r3, #24
 800a066:	b2da      	uxtb	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	0c1b      	lsrs	r3, r3, #16
 800a070:	b2da      	uxtb	r2, r3
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	b2da      	uxtb	r2, r3
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800a07e:	2300      	movs	r3, #0
}
 800a080:	4618      	mov	r0, r3
 800a082:	372c      	adds	r7, #44	@ 0x2c
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr
 800a08c:	58004000 	.word	0x58004000
 800a090:	a94656b9 	.word	0xa94656b9

0800a094 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	4a08      	ldr	r2, [pc, #32]	@ (800a0c4 <hci_init+0x30>)
 800a0a4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800a0a6:	4a08      	ldr	r2, [pc, #32]	@ (800a0c8 <hci_init+0x34>)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800a0ac:	4806      	ldr	r0, [pc, #24]	@ (800a0c8 <hci_init+0x34>)
 800a0ae:	f000 f973 	bl	800a398 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f000 f8d4 	bl	800a264 <TlInit>

  return;
 800a0bc:	bf00      	nop
}
 800a0be:	3708      	adds	r7, #8
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	20000414 	.word	0x20000414
 800a0c8:	200003ec 	.word	0x200003ec

0800a0cc <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a0d2:	4822      	ldr	r0, [pc, #136]	@ (800a15c <hci_user_evt_proc+0x90>)
 800a0d4:	f000 fdde 	bl	800ac94 <LST_is_empty>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d12b      	bne.n	800a136 <hci_user_evt_proc+0x6a>
 800a0de:	4b20      	ldr	r3, [pc, #128]	@ (800a160 <hci_user_evt_proc+0x94>)
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d027      	beq.n	800a136 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a0e6:	f107 030c 	add.w	r3, r7, #12
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	481b      	ldr	r0, [pc, #108]	@ (800a15c <hci_user_evt_proc+0x90>)
 800a0ee:	f000 fe60 	bl	800adb2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800a0f2:	4b1c      	ldr	r3, [pc, #112]	@ (800a164 <hci_user_evt_proc+0x98>)
 800a0f4:	69db      	ldr	r3, [r3, #28]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d00c      	beq.n	800a114 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800a0fe:	2301      	movs	r3, #1
 800a100:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a102:	4b18      	ldr	r3, [pc, #96]	@ (800a164 <hci_user_evt_proc+0x98>)
 800a104:	69db      	ldr	r3, [r3, #28]
 800a106:	1d3a      	adds	r2, r7, #4
 800a108:	4610      	mov	r0, r2
 800a10a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800a10c:	793a      	ldrb	r2, [r7, #4]
 800a10e:	4b14      	ldr	r3, [pc, #80]	@ (800a160 <hci_user_evt_proc+0x94>)
 800a110:	701a      	strb	r2, [r3, #0]
 800a112:	e002      	b.n	800a11a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a114:	4b12      	ldr	r3, [pc, #72]	@ (800a160 <hci_user_evt_proc+0x94>)
 800a116:	2201      	movs	r2, #1
 800a118:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800a11a:	4b11      	ldr	r3, [pc, #68]	@ (800a160 <hci_user_evt_proc+0x94>)
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d004      	beq.n	800a12c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	4618      	mov	r0, r3
 800a126:	f000 fc03 	bl	800a930 <TL_MM_EvtDone>
 800a12a:	e004      	b.n	800a136 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	4619      	mov	r1, r3
 800a130:	480a      	ldr	r0, [pc, #40]	@ (800a15c <hci_user_evt_proc+0x90>)
 800a132:	f000 fdd1 	bl	800acd8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a136:	4809      	ldr	r0, [pc, #36]	@ (800a15c <hci_user_evt_proc+0x90>)
 800a138:	f000 fdac 	bl	800ac94 <LST_is_empty>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d107      	bne.n	800a152 <hci_user_evt_proc+0x86>
 800a142:	4b07      	ldr	r3, [pc, #28]	@ (800a160 <hci_user_evt_proc+0x94>)
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d003      	beq.n	800a152 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800a14a:	4804      	ldr	r0, [pc, #16]	@ (800a15c <hci_user_evt_proc+0x90>)
 800a14c:	f002 f886 	bl	800c25c <hci_notify_asynch_evt>
  }


  return;
 800a150:	bf00      	nop
 800a152:	bf00      	nop
}
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	200000bc 	.word	0x200000bc
 800a160:	200000c8 	.word	0x200000c8
 800a164:	200003ec 	.word	0x200003ec

0800a168 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b088      	sub	sp, #32
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	460b      	mov	r3, r1
 800a172:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800a174:	2000      	movs	r0, #0
 800a176:	f000 f8cb 	bl	800a310 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800a17a:	2300      	movs	r3, #0
 800a17c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	885b      	ldrh	r3, [r3, #2]
 800a182:	b21b      	sxth	r3, r3
 800a184:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a188:	b21a      	sxth	r2, r3
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	881b      	ldrh	r3, [r3, #0]
 800a18e:	029b      	lsls	r3, r3, #10
 800a190:	b21b      	sxth	r3, r3
 800a192:	4313      	orrs	r3, r2
 800a194:	b21b      	sxth	r3, r3
 800a196:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	b2d9      	uxtb	r1, r3
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	689a      	ldr	r2, [r3, #8]
 800a1a2:	8bbb      	ldrh	r3, [r7, #28]
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f000 f88d 	bl	800a2c4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800a1aa:	e04e      	b.n	800a24a <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800a1ac:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800a1b0:	f002 f86b 	bl	800c28a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a1b4:	e043      	b.n	800a23e <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800a1b6:	f107 030c 	add.w	r3, r7, #12
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	4828      	ldr	r0, [pc, #160]	@ (800a260 <hci_send_req+0xf8>)
 800a1be:	f000 fdf8 	bl	800adb2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	7a5b      	ldrb	r3, [r3, #9]
 800a1c6:	2b0f      	cmp	r3, #15
 800a1c8:	d114      	bne.n	800a1f4 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	330b      	adds	r3, #11
 800a1ce:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	885b      	ldrh	r3, [r3, #2]
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	8bba      	ldrh	r2, [r7, #28]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d104      	bne.n	800a1e6 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	693a      	ldr	r2, [r7, #16]
 800a1e2:	7812      	ldrb	r2, [r2, #0]
 800a1e4:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	785b      	ldrb	r3, [r3, #1]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d027      	beq.n	800a23e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	77fb      	strb	r3, [r7, #31]
 800a1f2:	e024      	b.n	800a23e <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	330b      	adds	r3, #11
 800a1f8:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a200:	b29b      	uxth	r3, r3
 800a202:	8bba      	ldrh	r2, [r7, #28]
 800a204:	429a      	cmp	r2, r3
 800a206:	d114      	bne.n	800a232 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	7a9b      	ldrb	r3, [r3, #10]
 800a20c:	3b03      	subs	r3, #3
 800a20e:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	695a      	ldr	r2, [r3, #20]
 800a214:	7dfb      	ldrb	r3, [r7, #23]
 800a216:	429a      	cmp	r2, r3
 800a218:	bfa8      	it	ge
 800a21a:	461a      	movge	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6918      	ldr	r0, [r3, #16]
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	1cd9      	adds	r1, r3, #3
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	695b      	ldr	r3, [r3, #20]
 800a22c:	461a      	mov	r2, r3
 800a22e:	f003 fc92 	bl	800db56 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d001      	beq.n	800a23e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a23a:	2301      	movs	r3, #1
 800a23c:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a23e:	4808      	ldr	r0, [pc, #32]	@ (800a260 <hci_send_req+0xf8>)
 800a240:	f000 fd28 	bl	800ac94 <LST_is_empty>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d0b5      	beq.n	800a1b6 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800a24a:	7ffb      	ldrb	r3, [r7, #31]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d0ad      	beq.n	800a1ac <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800a250:	2001      	movs	r0, #1
 800a252:	f000 f85d 	bl	800a310 <NotifyCmdStatus>

  return 0;
 800a256:	2300      	movs	r3, #0
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3720      	adds	r7, #32
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	2000040c 	.word	0x2000040c

0800a264 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b086      	sub	sp, #24
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800a26c:	480f      	ldr	r0, [pc, #60]	@ (800a2ac <TlInit+0x48>)
 800a26e:	f000 fd01 	bl	800ac74 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800a272:	4a0f      	ldr	r2, [pc, #60]	@ (800a2b0 <TlInit+0x4c>)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800a278:	480e      	ldr	r0, [pc, #56]	@ (800a2b4 <TlInit+0x50>)
 800a27a:	f000 fcfb 	bl	800ac74 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a27e:	4b0e      	ldr	r3, [pc, #56]	@ (800a2b8 <TlInit+0x54>)
 800a280:	2201      	movs	r2, #1
 800a282:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800a284:	4b0d      	ldr	r3, [pc, #52]	@ (800a2bc <TlInit+0x58>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d00a      	beq.n	800a2a2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800a290:	4b0b      	ldr	r3, [pc, #44]	@ (800a2c0 <TlInit+0x5c>)
 800a292:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800a294:	4b09      	ldr	r3, [pc, #36]	@ (800a2bc <TlInit+0x58>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f107 0208 	add.w	r2, r7, #8
 800a29c:	4610      	mov	r0, r2
 800a29e:	4798      	blx	r3
  }

  return;
 800a2a0:	bf00      	nop
 800a2a2:	bf00      	nop
}
 800a2a4:	3718      	adds	r7, #24
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	2000040c 	.word	0x2000040c
 800a2b0:	200000c4 	.word	0x200000c4
 800a2b4:	200000bc 	.word	0x200000bc
 800a2b8:	200000c8 	.word	0x200000c8
 800a2bc:	200003ec 	.word	0x200003ec
 800a2c0:	0800a351 	.word	0x0800a351

0800a2c4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	603a      	str	r2, [r7, #0]
 800a2ce:	80fb      	strh	r3, [r7, #6]
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800a2d4:	4b0c      	ldr	r3, [pc, #48]	@ (800a308 <SendCmd+0x44>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	88fa      	ldrh	r2, [r7, #6]
 800a2da:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800a2de:	4b0a      	ldr	r3, [pc, #40]	@ (800a308 <SendCmd+0x44>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	797a      	ldrb	r2, [r7, #5]
 800a2e4:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800a2e6:	4b08      	ldr	r3, [pc, #32]	@ (800a308 <SendCmd+0x44>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	330c      	adds	r3, #12
 800a2ec:	797a      	ldrb	r2, [r7, #5]
 800a2ee:	6839      	ldr	r1, [r7, #0]
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f003 fc30 	bl	800db56 <memcpy>

  hciContext.io.Send(0,0);
 800a2f6:	4b05      	ldr	r3, [pc, #20]	@ (800a30c <SendCmd+0x48>)
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	2000      	movs	r0, #0
 800a2fe:	4798      	blx	r3

  return;
 800a300:	bf00      	nop
}
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	200000c4 	.word	0x200000c4
 800a30c:	200003ec 	.word	0x200003ec

0800a310 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	4603      	mov	r3, r0
 800a318:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800a31a:	79fb      	ldrb	r3, [r7, #7]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d108      	bne.n	800a332 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800a320:	4b0a      	ldr	r3, [pc, #40]	@ (800a34c <NotifyCmdStatus+0x3c>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d00d      	beq.n	800a344 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800a328:	4b08      	ldr	r3, [pc, #32]	@ (800a34c <NotifyCmdStatus+0x3c>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2000      	movs	r0, #0
 800a32e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800a330:	e008      	b.n	800a344 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800a332:	4b06      	ldr	r3, [pc, #24]	@ (800a34c <NotifyCmdStatus+0x3c>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d004      	beq.n	800a344 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800a33a:	4b04      	ldr	r3, [pc, #16]	@ (800a34c <NotifyCmdStatus+0x3c>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2001      	movs	r0, #1
 800a340:	4798      	blx	r3
  return;
 800a342:	bf00      	nop
 800a344:	bf00      	nop
}
 800a346:	3708      	adds	r7, #8
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	20000414 	.word	0x20000414

0800a350 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	7a5b      	ldrb	r3, [r3, #9]
 800a35c:	2b0f      	cmp	r3, #15
 800a35e:	d003      	beq.n	800a368 <TlEvtReceived+0x18>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	7a5b      	ldrb	r3, [r3, #9]
 800a364:	2b0e      	cmp	r3, #14
 800a366:	d107      	bne.n	800a378 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800a368:	6879      	ldr	r1, [r7, #4]
 800a36a:	4809      	ldr	r0, [pc, #36]	@ (800a390 <TlEvtReceived+0x40>)
 800a36c:	f000 fcda 	bl	800ad24 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800a370:	2000      	movs	r0, #0
 800a372:	f001 ff7f 	bl	800c274 <hci_cmd_resp_release>
 800a376:	e006      	b.n	800a386 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800a378:	6879      	ldr	r1, [r7, #4]
 800a37a:	4806      	ldr	r0, [pc, #24]	@ (800a394 <TlEvtReceived+0x44>)
 800a37c:	f000 fcd2 	bl	800ad24 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a380:	4804      	ldr	r0, [pc, #16]	@ (800a394 <TlEvtReceived+0x44>)
 800a382:	f001 ff6b 	bl	800c25c <hci_notify_asynch_evt>
  }

  return;
 800a386:	bf00      	nop
}
 800a388:	3708      	adds	r7, #8
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	2000040c 	.word	0x2000040c
 800a394:	200000bc 	.word	0x200000bc

0800a398 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a05      	ldr	r2, [pc, #20]	@ (800a3b8 <hci_register_io_bus+0x20>)
 800a3a4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	4a04      	ldr	r2, [pc, #16]	@ (800a3bc <hci_register_io_bus+0x24>)
 800a3aa:	611a      	str	r2, [r3, #16]

  return;
 800a3ac:	bf00      	nop
}
 800a3ae:	370c      	adds	r7, #12
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr
 800a3b8:	0800a6a9 	.word	0x0800a6a9
 800a3bc:	0800a711 	.word	0x0800a711

0800a3c0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	4a08      	ldr	r2, [pc, #32]	@ (800a3f0 <shci_init+0x30>)
 800a3d0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800a3d2:	4a08      	ldr	r2, [pc, #32]	@ (800a3f4 <shci_init+0x34>)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800a3d8:	4806      	ldr	r0, [pc, #24]	@ (800a3f4 <shci_init+0x34>)
 800a3da:	f000 f911 	bl	800a600 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f000 f894 	bl	800a510 <TlInit>

  return;
 800a3e8:	bf00      	nop
}
 800a3ea:	3708      	adds	r7, #8
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	20000438 	.word	0x20000438
 800a3f4:	20000418 	.word	0x20000418

0800a3f8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a3fe:	4822      	ldr	r0, [pc, #136]	@ (800a488 <shci_user_evt_proc+0x90>)
 800a400:	f000 fc48 	bl	800ac94 <LST_is_empty>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d12b      	bne.n	800a462 <shci_user_evt_proc+0x6a>
 800a40a:	4b20      	ldr	r3, [pc, #128]	@ (800a48c <shci_user_evt_proc+0x94>)
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d027      	beq.n	800a462 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a412:	f107 030c 	add.w	r3, r7, #12
 800a416:	4619      	mov	r1, r3
 800a418:	481b      	ldr	r0, [pc, #108]	@ (800a488 <shci_user_evt_proc+0x90>)
 800a41a:	f000 fcca 	bl	800adb2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800a41e:	4b1c      	ldr	r3, [pc, #112]	@ (800a490 <shci_user_evt_proc+0x98>)
 800a420:	69db      	ldr	r3, [r3, #28]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d00c      	beq.n	800a440 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800a42a:	2301      	movs	r3, #1
 800a42c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a42e:	4b18      	ldr	r3, [pc, #96]	@ (800a490 <shci_user_evt_proc+0x98>)
 800a430:	69db      	ldr	r3, [r3, #28]
 800a432:	1d3a      	adds	r2, r7, #4
 800a434:	4610      	mov	r0, r2
 800a436:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800a438:	793a      	ldrb	r2, [r7, #4]
 800a43a:	4b14      	ldr	r3, [pc, #80]	@ (800a48c <shci_user_evt_proc+0x94>)
 800a43c:	701a      	strb	r2, [r3, #0]
 800a43e:	e002      	b.n	800a446 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a440:	4b12      	ldr	r3, [pc, #72]	@ (800a48c <shci_user_evt_proc+0x94>)
 800a442:	2201      	movs	r2, #1
 800a444:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800a446:	4b11      	ldr	r3, [pc, #68]	@ (800a48c <shci_user_evt_proc+0x94>)
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d004      	beq.n	800a458 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	4618      	mov	r0, r3
 800a452:	f000 fa6d 	bl	800a930 <TL_MM_EvtDone>
 800a456:	e004      	b.n	800a462 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	4619      	mov	r1, r3
 800a45c:	480a      	ldr	r0, [pc, #40]	@ (800a488 <shci_user_evt_proc+0x90>)
 800a45e:	f000 fc3b 	bl	800acd8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a462:	4809      	ldr	r0, [pc, #36]	@ (800a488 <shci_user_evt_proc+0x90>)
 800a464:	f000 fc16 	bl	800ac94 <LST_is_empty>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d107      	bne.n	800a47e <shci_user_evt_proc+0x86>
 800a46e:	4b07      	ldr	r3, [pc, #28]	@ (800a48c <shci_user_evt_proc+0x94>)
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d003      	beq.n	800a47e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800a476:	4804      	ldr	r0, [pc, #16]	@ (800a488 <shci_user_evt_proc+0x90>)
 800a478:	f7f6 fd16 	bl	8000ea8 <shci_notify_asynch_evt>
  }


  return;
 800a47c:	bf00      	nop
 800a47e:	bf00      	nop
}
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	200000cc 	.word	0x200000cc
 800a48c:	200000dc 	.word	0x200000dc
 800a490:	20000418 	.word	0x20000418

0800a494 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60ba      	str	r2, [r7, #8]
 800a49c:	607b      	str	r3, [r7, #4]
 800a49e:	4603      	mov	r3, r0
 800a4a0:	81fb      	strh	r3, [r7, #14]
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800a4a6:	2000      	movs	r0, #0
 800a4a8:	f000 f864 	bl	800a574 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800a4ac:	4b16      	ldr	r3, [pc, #88]	@ (800a508 <shci_send+0x74>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	89fa      	ldrh	r2, [r7, #14]
 800a4b2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800a4b6:	4b14      	ldr	r3, [pc, #80]	@ (800a508 <shci_send+0x74>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	7b7a      	ldrb	r2, [r7, #13]
 800a4bc:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800a4be:	4b12      	ldr	r3, [pc, #72]	@ (800a508 <shci_send+0x74>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	330c      	adds	r3, #12
 800a4c4:	7b7a      	ldrb	r2, [r7, #13]
 800a4c6:	68b9      	ldr	r1, [r7, #8]
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f003 fb44 	bl	800db56 <memcpy>

  shciContext.io.Send(0,0);
 800a4ce:	4b0f      	ldr	r3, [pc, #60]	@ (800a50c <shci_send+0x78>)
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	2000      	movs	r0, #0
 800a4d6:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800a4d8:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800a4dc:	f7f6 fcfc 	bl	8000ed8 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f103 0008 	add.w	r0, r3, #8
 800a4e6:	4b08      	ldr	r3, [pc, #32]	@ (800a508 <shci_send+0x74>)
 800a4e8:	6819      	ldr	r1, [r3, #0]
 800a4ea:	4b07      	ldr	r3, [pc, #28]	@ (800a508 <shci_send+0x74>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	789b      	ldrb	r3, [r3, #2]
 800a4f0:	3303      	adds	r3, #3
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	f003 fb2f 	bl	800db56 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a4f8:	2001      	movs	r0, #1
 800a4fa:	f000 f83b 	bl	800a574 <Cmd_SetStatus>

  return;
 800a4fe:	bf00      	nop
}
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	200000d8 	.word	0x200000d8
 800a50c:	20000418 	.word	0x20000418

0800a510 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b086      	sub	sp, #24
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800a518:	4a10      	ldr	r2, [pc, #64]	@ (800a55c <TlInit+0x4c>)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800a51e:	4810      	ldr	r0, [pc, #64]	@ (800a560 <TlInit+0x50>)
 800a520:	f000 fba8 	bl	800ac74 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a524:	2001      	movs	r0, #1
 800a526:	f000 f825 	bl	800a574 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a52a:	4b0e      	ldr	r3, [pc, #56]	@ (800a564 <TlInit+0x54>)
 800a52c:	2201      	movs	r2, #1
 800a52e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a530:	4b0d      	ldr	r3, [pc, #52]	@ (800a568 <TlInit+0x58>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00c      	beq.n	800a552 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a53c:	4b0b      	ldr	r3, [pc, #44]	@ (800a56c <TlInit+0x5c>)
 800a53e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a540:	4b0b      	ldr	r3, [pc, #44]	@ (800a570 <TlInit+0x60>)
 800a542:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a544:	4b08      	ldr	r3, [pc, #32]	@ (800a568 <TlInit+0x58>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f107 020c 	add.w	r2, r7, #12
 800a54c:	4610      	mov	r0, r2
 800a54e:	4798      	blx	r3
  }

  return;
 800a550:	bf00      	nop
 800a552:	bf00      	nop
}
 800a554:	3718      	adds	r7, #24
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	200000d8 	.word	0x200000d8
 800a560:	200000cc 	.word	0x200000cc
 800a564:	200000dc 	.word	0x200000dc
 800a568:	20000418 	.word	0x20000418
 800a56c:	0800a5c5 	.word	0x0800a5c5
 800a570:	0800a5dd 	.word	0x0800a5dd

0800a574 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	4603      	mov	r3, r0
 800a57c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a57e:	79fb      	ldrb	r3, [r7, #7]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d10b      	bne.n	800a59c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a584:	4b0d      	ldr	r3, [pc, #52]	@ (800a5bc <Cmd_SetStatus+0x48>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d003      	beq.n	800a594 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a58c:	4b0b      	ldr	r3, [pc, #44]	@ (800a5bc <Cmd_SetStatus+0x48>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2000      	movs	r0, #0
 800a592:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a594:	4b0a      	ldr	r3, [pc, #40]	@ (800a5c0 <Cmd_SetStatus+0x4c>)
 800a596:	2200      	movs	r2, #0
 800a598:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a59a:	e00b      	b.n	800a5b4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a59c:	4b08      	ldr	r3, [pc, #32]	@ (800a5c0 <Cmd_SetStatus+0x4c>)
 800a59e:	2201      	movs	r2, #1
 800a5a0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a5a2:	4b06      	ldr	r3, [pc, #24]	@ (800a5bc <Cmd_SetStatus+0x48>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d004      	beq.n	800a5b4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a5aa:	4b04      	ldr	r3, [pc, #16]	@ (800a5bc <Cmd_SetStatus+0x48>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	2001      	movs	r0, #1
 800a5b0:	4798      	blx	r3
  return;
 800a5b2:	bf00      	nop
 800a5b4:	bf00      	nop
}
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	20000438 	.word	0x20000438
 800a5c0:	200000d4 	.word	0x200000d4

0800a5c4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a5cc:	2000      	movs	r0, #0
 800a5ce:	f7f6 fc78 	bl	8000ec2 <shci_cmd_resp_release>

  return;
 800a5d2:	bf00      	nop
}
 800a5d4:	3708      	adds	r7, #8
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
	...

0800a5dc <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a5e4:	6879      	ldr	r1, [r7, #4]
 800a5e6:	4805      	ldr	r0, [pc, #20]	@ (800a5fc <TlUserEvtReceived+0x20>)
 800a5e8:	f000 fb9c 	bl	800ad24 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a5ec:	4803      	ldr	r0, [pc, #12]	@ (800a5fc <TlUserEvtReceived+0x20>)
 800a5ee:	f7f6 fc5b 	bl	8000ea8 <shci_notify_asynch_evt>

  return;
 800a5f2:	bf00      	nop
}
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	200000cc 	.word	0x200000cc

0800a600 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4a05      	ldr	r2, [pc, #20]	@ (800a620 <shci_register_io_bus+0x20>)
 800a60c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	4a04      	ldr	r2, [pc, #16]	@ (800a624 <shci_register_io_bus+0x24>)
 800a612:	611a      	str	r2, [r3, #16]

  return;
 800a614:	bf00      	nop
}
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr
 800a620:	0800a7bd 	.word	0x0800a7bd
 800a624:	0800a811 	.word	0x0800a811

0800a628 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a62c:	f002 fdb6 	bl	800d19c <HW_IPCC_Enable>

  return;
 800a630:	bf00      	nop
}
 800a632:	bd80      	pop	{r7, pc}

0800a634 <TL_Init>:


void TL_Init( void )
{
 800a634:	b580      	push	{r7, lr}
 800a636:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a638:	4b10      	ldr	r3, [pc, #64]	@ (800a67c <TL_Init+0x48>)
 800a63a:	4a11      	ldr	r2, [pc, #68]	@ (800a680 <TL_Init+0x4c>)
 800a63c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a63e:	4b0f      	ldr	r3, [pc, #60]	@ (800a67c <TL_Init+0x48>)
 800a640:	4a10      	ldr	r2, [pc, #64]	@ (800a684 <TL_Init+0x50>)
 800a642:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a644:	4b0d      	ldr	r3, [pc, #52]	@ (800a67c <TL_Init+0x48>)
 800a646:	4a10      	ldr	r2, [pc, #64]	@ (800a688 <TL_Init+0x54>)
 800a648:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800a64a:	4b0c      	ldr	r3, [pc, #48]	@ (800a67c <TL_Init+0x48>)
 800a64c:	4a0f      	ldr	r2, [pc, #60]	@ (800a68c <TL_Init+0x58>)
 800a64e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800a650:	4b0a      	ldr	r3, [pc, #40]	@ (800a67c <TL_Init+0x48>)
 800a652:	4a0f      	ldr	r2, [pc, #60]	@ (800a690 <TL_Init+0x5c>)
 800a654:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a656:	4b09      	ldr	r3, [pc, #36]	@ (800a67c <TL_Init+0x48>)
 800a658:	4a0e      	ldr	r2, [pc, #56]	@ (800a694 <TL_Init+0x60>)
 800a65a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a65c:	4b07      	ldr	r3, [pc, #28]	@ (800a67c <TL_Init+0x48>)
 800a65e:	4a0e      	ldr	r2, [pc, #56]	@ (800a698 <TL_Init+0x64>)
 800a660:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a662:	4b06      	ldr	r3, [pc, #24]	@ (800a67c <TL_Init+0x48>)
 800a664:	4a0d      	ldr	r2, [pc, #52]	@ (800a69c <TL_Init+0x68>)
 800a666:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a668:	4b04      	ldr	r3, [pc, #16]	@ (800a67c <TL_Init+0x48>)
 800a66a:	4a0d      	ldr	r2, [pc, #52]	@ (800a6a0 <TL_Init+0x6c>)
 800a66c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a66e:	4b03      	ldr	r3, [pc, #12]	@ (800a67c <TL_Init+0x48>)
 800a670:	4a0c      	ldr	r2, [pc, #48]	@ (800a6a4 <TL_Init+0x70>)
 800a672:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a674:	f002 fda6 	bl	800d1c4 <HW_IPCC_Init>

  return;
 800a678:	bf00      	nop
}
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	20030000 	.word	0x20030000
 800a680:	20030028 	.word	0x20030028
 800a684:	20030048 	.word	0x20030048
 800a688:	20030058 	.word	0x20030058
 800a68c:	20030068 	.word	0x20030068
 800a690:	20030070 	.word	0x20030070
 800a694:	20030078 	.word	0x20030078
 800a698:	20030080 	.word	0x20030080
 800a69c:	2003009c 	.word	0x2003009c
 800a6a0:	200300a0 	.word	0x200300a0
 800a6a4:	200300ac 	.word	0x200300ac

0800a6a8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800a6b4:	4811      	ldr	r0, [pc, #68]	@ (800a6fc <TL_BLE_Init+0x54>)
 800a6b6:	f000 fadd 	bl	800ac74 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800a6ba:	4b11      	ldr	r3, [pc, #68]	@ (800a700 <TL_BLE_Init+0x58>)
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	689a      	ldr	r2, [r3, #8]
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	68da      	ldr	r2, [r3, #12]
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	4a0c      	ldr	r2, [pc, #48]	@ (800a704 <TL_BLE_Init+0x5c>)
 800a6d4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	4a08      	ldr	r2, [pc, #32]	@ (800a6fc <TL_BLE_Init+0x54>)
 800a6da:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800a6dc:	f002 fd88 	bl	800d1f0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a08      	ldr	r2, [pc, #32]	@ (800a708 <TL_BLE_Init+0x60>)
 800a6e6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	4a07      	ldr	r2, [pc, #28]	@ (800a70c <TL_BLE_Init+0x64>)
 800a6ee:	6013      	str	r3, [r2, #0]

  return 0;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3710      	adds	r7, #16
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	200300c8 	.word	0x200300c8
 800a700:	20030000 	.word	0x20030000
 800a704:	20030a58 	.word	0x20030a58
 800a708:	20000444 	.word	0x20000444
 800a70c:	20000448 	.word	0x20000448

0800a710 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	460b      	mov	r3, r1
 800a71a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800a71c:	4b09      	ldr	r3, [pc, #36]	@ (800a744 <TL_BLE_SendCmd+0x34>)
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	2201      	movs	r2, #1
 800a724:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800a726:	4b07      	ldr	r3, [pc, #28]	@ (800a744 <TL_BLE_SendCmd+0x34>)
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4619      	mov	r1, r3
 800a72e:	2001      	movs	r0, #1
 800a730:	f000 f96c 	bl	800aa0c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800a734:	f002 fd66 	bl	800d204 <HW_IPCC_BLE_SendCmd>

  return 0;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3708      	adds	r7, #8
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	20030000 	.word	0x20030000

0800a748 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a74e:	e01c      	b.n	800a78a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a750:	1d3b      	adds	r3, r7, #4
 800a752:	4619      	mov	r1, r3
 800a754:	4812      	ldr	r0, [pc, #72]	@ (800a7a0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a756:	f000 fb2c 	bl	800adb2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	7a5b      	ldrb	r3, [r3, #9]
 800a75e:	2b0f      	cmp	r3, #15
 800a760:	d003      	beq.n	800a76a <HW_IPCC_BLE_RxEvtNot+0x22>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	7a5b      	ldrb	r3, [r3, #9]
 800a766:	2b0e      	cmp	r3, #14
 800a768:	d105      	bne.n	800a776 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4619      	mov	r1, r3
 800a76e:	2002      	movs	r0, #2
 800a770:	f000 f94c 	bl	800aa0c <OutputDbgTrace>
 800a774:	e004      	b.n	800a780 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	4619      	mov	r1, r3
 800a77a:	2003      	movs	r0, #3
 800a77c:	f000 f946 	bl	800aa0c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a780:	4b08      	ldr	r3, [pc, #32]	@ (800a7a4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	4610      	mov	r0, r2
 800a788:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a78a:	4805      	ldr	r0, [pc, #20]	@ (800a7a0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a78c:	f000 fa82 	bl	800ac94 <LST_is_empty>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d0dc      	beq.n	800a750 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a796:	bf00      	nop
}
 800a798:	3708      	adds	r7, #8
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	200300c8 	.word	0x200300c8
 800a7a4:	20000444 	.word	0x20000444

0800a7a8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800a7ac:	4b02      	ldr	r3, [pc, #8]	@ (800a7b8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4798      	blx	r3

  return;
 800a7b2:	bf00      	nop
}
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	20000448 	.word	0x20000448

0800a7bc <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800a7c8:	480d      	ldr	r0, [pc, #52]	@ (800a800 <TL_SYS_Init+0x44>)
 800a7ca:	f000 fa53 	bl	800ac74 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800a7ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a804 <TL_SYS_Init+0x48>)
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	689a      	ldr	r2, [r3, #8]
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	4a08      	ldr	r2, [pc, #32]	@ (800a800 <TL_SYS_Init+0x44>)
 800a7e0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800a7e2:	f002 fd31 	bl	800d248 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a07      	ldr	r2, [pc, #28]	@ (800a808 <TL_SYS_Init+0x4c>)
 800a7ec:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	4a06      	ldr	r2, [pc, #24]	@ (800a80c <TL_SYS_Init+0x50>)
 800a7f4:	6013      	str	r3, [r2, #0]

  return 0;
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3710      	adds	r7, #16
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	200300d0 	.word	0x200300d0
 800a804:	20030000 	.word	0x20030000
 800a808:	2000044c 	.word	0x2000044c
 800a80c:	20000450 	.word	0x20000450

0800a810 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	460b      	mov	r3, r1
 800a81a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800a81c:	4b09      	ldr	r3, [pc, #36]	@ (800a844 <TL_SYS_SendCmd+0x34>)
 800a81e:	68db      	ldr	r3, [r3, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	2210      	movs	r2, #16
 800a824:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800a826:	4b07      	ldr	r3, [pc, #28]	@ (800a844 <TL_SYS_SendCmd+0x34>)
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4619      	mov	r1, r3
 800a82e:	2004      	movs	r0, #4
 800a830:	f000 f8ec 	bl	800aa0c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800a834:	f002 fd12 	bl	800d25c <HW_IPCC_SYS_SendCmd>

  return 0;
 800a838:	2300      	movs	r3, #0
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3708      	adds	r7, #8
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	20030000 	.word	0x20030000

0800a848 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a84c:	4b07      	ldr	r3, [pc, #28]	@ (800a86c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4619      	mov	r1, r3
 800a854:	2005      	movs	r0, #5
 800a856:	f000 f8d9 	bl	800aa0c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a85a:	4b05      	ldr	r3, [pc, #20]	@ (800a870 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a03      	ldr	r2, [pc, #12]	@ (800a86c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a860:	68d2      	ldr	r2, [r2, #12]
 800a862:	6812      	ldr	r2, [r2, #0]
 800a864:	4610      	mov	r0, r2
 800a866:	4798      	blx	r3

  return;
 800a868:	bf00      	nop
}
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	20030000 	.word	0x20030000
 800a870:	2000044c 	.word	0x2000044c

0800a874 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a87a:	e00e      	b.n	800a89a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800a87c:	1d3b      	adds	r3, r7, #4
 800a87e:	4619      	mov	r1, r3
 800a880:	480b      	ldr	r0, [pc, #44]	@ (800a8b0 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a882:	f000 fa96 	bl	800adb2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	4619      	mov	r1, r3
 800a88a:	2006      	movs	r0, #6
 800a88c:	f000 f8be 	bl	800aa0c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800a890:	4b08      	ldr	r3, [pc, #32]	@ (800a8b4 <HW_IPCC_SYS_EvtNot+0x40>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	4610      	mov	r0, r2
 800a898:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a89a:	4805      	ldr	r0, [pc, #20]	@ (800a8b0 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a89c:	f000 f9fa 	bl	800ac94 <LST_is_empty>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d0ea      	beq.n	800a87c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800a8a6:	bf00      	nop
}
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	200300d0 	.word	0x200300d0
 800a8b4:	20000450 	.word	0x20000450

0800a8b8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800a8c0:	4817      	ldr	r0, [pc, #92]	@ (800a920 <TL_MM_Init+0x68>)
 800a8c2:	f000 f9d7 	bl	800ac74 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800a8c6:	4817      	ldr	r0, [pc, #92]	@ (800a924 <TL_MM_Init+0x6c>)
 800a8c8:	f000 f9d4 	bl	800ac74 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800a8cc:	4b16      	ldr	r3, [pc, #88]	@ (800a928 <TL_MM_Init+0x70>)
 800a8ce:	691b      	ldr	r3, [r3, #16]
 800a8d0:	4a16      	ldr	r2, [pc, #88]	@ (800a92c <TL_MM_Init+0x74>)
 800a8d2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800a8d4:	4b15      	ldr	r3, [pc, #84]	@ (800a92c <TL_MM_Init+0x74>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	6892      	ldr	r2, [r2, #8]
 800a8dc:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800a8de:	4b13      	ldr	r3, [pc, #76]	@ (800a92c <TL_MM_Init+0x74>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	68d2      	ldr	r2, [r2, #12]
 800a8e6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800a8e8:	4b10      	ldr	r3, [pc, #64]	@ (800a92c <TL_MM_Init+0x74>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a0c      	ldr	r2, [pc, #48]	@ (800a920 <TL_MM_Init+0x68>)
 800a8ee:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800a8f0:	4b0e      	ldr	r3, [pc, #56]	@ (800a92c <TL_MM_Init+0x74>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	6812      	ldr	r2, [r2, #0]
 800a8f8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800a8fa:	4b0c      	ldr	r3, [pc, #48]	@ (800a92c <TL_MM_Init+0x74>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	6852      	ldr	r2, [r2, #4]
 800a902:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800a904:	4b09      	ldr	r3, [pc, #36]	@ (800a92c <TL_MM_Init+0x74>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	6912      	ldr	r2, [r2, #16]
 800a90c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800a90e:	4b07      	ldr	r3, [pc, #28]	@ (800a92c <TL_MM_Init+0x74>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	6952      	ldr	r2, [r2, #20]
 800a916:	619a      	str	r2, [r3, #24]

  return;
 800a918:	bf00      	nop
}
 800a91a:	3708      	adds	r7, #8
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	200300b8 	.word	0x200300b8
 800a924:	2000043c 	.word	0x2000043c
 800a928:	20030000 	.word	0x20030000
 800a92c:	20000454 	.word	0x20000454

0800a930 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800a938:	6879      	ldr	r1, [r7, #4]
 800a93a:	4807      	ldr	r0, [pc, #28]	@ (800a958 <TL_MM_EvtDone+0x28>)
 800a93c:	f000 f9f2 	bl	800ad24 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800a940:	6879      	ldr	r1, [r7, #4]
 800a942:	2000      	movs	r0, #0
 800a944:	f000 f862 	bl	800aa0c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800a948:	4804      	ldr	r0, [pc, #16]	@ (800a95c <TL_MM_EvtDone+0x2c>)
 800a94a:	f002 fcad 	bl	800d2a8 <HW_IPCC_MM_SendFreeBuf>

  return;
 800a94e:	bf00      	nop
}
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	2000043c 	.word	0x2000043c
 800a95c:	0800a961 	.word	0x0800a961

0800a960 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a966:	e00c      	b.n	800a982 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800a968:	1d3b      	adds	r3, r7, #4
 800a96a:	4619      	mov	r1, r3
 800a96c:	480a      	ldr	r0, [pc, #40]	@ (800a998 <SendFreeBuf+0x38>)
 800a96e:	f000 fa20 	bl	800adb2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800a972:	4b0a      	ldr	r3, [pc, #40]	@ (800a99c <SendFreeBuf+0x3c>)
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	691b      	ldr	r3, [r3, #16]
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	4611      	mov	r1, r2
 800a97c:	4618      	mov	r0, r3
 800a97e:	f000 f9d1 	bl	800ad24 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a982:	4805      	ldr	r0, [pc, #20]	@ (800a998 <SendFreeBuf+0x38>)
 800a984:	f000 f986 	bl	800ac94 <LST_is_empty>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d0ec      	beq.n	800a968 <SendFreeBuf+0x8>
  }

  return;
 800a98e:	bf00      	nop
}
 800a990:	3708      	adds	r7, #8
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	2000043c 	.word	0x2000043c
 800a99c:	20030000 	.word	0x20030000

0800a9a0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800a9a4:	4805      	ldr	r0, [pc, #20]	@ (800a9bc <TL_TRACES_Init+0x1c>)
 800a9a6:	f000 f965 	bl	800ac74 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800a9aa:	4b05      	ldr	r3, [pc, #20]	@ (800a9c0 <TL_TRACES_Init+0x20>)
 800a9ac:	695b      	ldr	r3, [r3, #20]
 800a9ae:	4a03      	ldr	r2, [pc, #12]	@ (800a9bc <TL_TRACES_Init+0x1c>)
 800a9b0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800a9b2:	f002 fcaf 	bl	800d314 <HW_IPCC_TRACES_Init>

  return;
 800a9b6:	bf00      	nop
}
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	200300c0 	.word	0x200300c0
 800a9c0:	20030000 	.word	0x20030000

0800a9c4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b082      	sub	sp, #8
 800a9c8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a9ca:	e008      	b.n	800a9de <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800a9cc:	1d3b      	adds	r3, r7, #4
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	4808      	ldr	r0, [pc, #32]	@ (800a9f4 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a9d2:	f000 f9ee 	bl	800adb2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f000 f80d 	bl	800a9f8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a9de:	4805      	ldr	r0, [pc, #20]	@ (800a9f4 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a9e0:	f000 f958 	bl	800ac94 <LST_is_empty>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d0f0      	beq.n	800a9cc <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800a9ea:	bf00      	nop
}
 800a9ec:	3708      	adds	r7, #8
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	200300c0 	.word	0x200300c0

0800a9f8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800aa00:	bf00      	nop
 800aa02:	370c      	adds	r7, #12
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b085      	sub	sp, #20
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	4603      	mov	r3, r0
 800aa14:	6039      	str	r1, [r7, #0]
 800aa16:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800aa18:	79fb      	ldrb	r3, [r7, #7]
 800aa1a:	2b06      	cmp	r3, #6
 800aa1c:	d845      	bhi.n	800aaaa <OutputDbgTrace+0x9e>
 800aa1e:	a201      	add	r2, pc, #4	@ (adr r2, 800aa24 <OutputDbgTrace+0x18>)
 800aa20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa24:	0800aa41 	.word	0x0800aa41
 800aa28:	0800aa65 	.word	0x0800aa65
 800aa2c:	0800aa6b 	.word	0x0800aa6b
 800aa30:	0800aa7f 	.word	0x0800aa7f
 800aa34:	0800aa8b 	.word	0x0800aa8b
 800aa38:	0800aa91 	.word	0x0800aa91
 800aa3c:	0800aa9f 	.word	0x0800aa9f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	7a5b      	ldrb	r3, [r3, #9]
 800aa48:	2bff      	cmp	r3, #255	@ 0xff
 800aa4a:	d005      	beq.n	800aa58 <OutputDbgTrace+0x4c>
 800aa4c:	2bff      	cmp	r3, #255	@ 0xff
 800aa4e:	dc05      	bgt.n	800aa5c <OutputDbgTrace+0x50>
 800aa50:	2b0e      	cmp	r3, #14
 800aa52:	d005      	beq.n	800aa60 <OutputDbgTrace+0x54>
 800aa54:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800aa56:	e001      	b.n	800aa5c <OutputDbgTrace+0x50>
          break;
 800aa58:	bf00      	nop
 800aa5a:	e027      	b.n	800aaac <OutputDbgTrace+0xa0>
          break;
 800aa5c:	bf00      	nop
 800aa5e:	e025      	b.n	800aaac <OutputDbgTrace+0xa0>
          break;
 800aa60:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800aa62:	e023      	b.n	800aaac <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800aa68:	e020      	b.n	800aaac <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	7a5b      	ldrb	r3, [r3, #9]
 800aa72:	2b0e      	cmp	r3, #14
 800aa74:	d001      	beq.n	800aa7a <OutputDbgTrace+0x6e>
 800aa76:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800aa78:	e000      	b.n	800aa7c <OutputDbgTrace+0x70>
          break;
 800aa7a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800aa7c:	e016      	b.n	800aaac <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	7a5b      	ldrb	r3, [r3, #9]
 800aa86:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800aa88:	e010      	b.n	800aaac <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800aa8e:	e00d      	b.n	800aaac <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	7a5b      	ldrb	r3, [r3, #9]
 800aa98:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800aa9a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800aa9c:	e006      	b.n	800aaac <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	7a5b      	ldrb	r3, [r3, #9]
 800aaa6:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800aaa8:	e000      	b.n	800aaac <OutputDbgTrace+0xa0>

    default:
      break;
 800aaaa:	bf00      	nop
  }

  return;
 800aaac:	bf00      	nop
}
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b086      	sub	sp, #24
 800aabc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aabe:	f3ef 8310 	mrs	r3, PRIMASK
 800aac2:	60fb      	str	r3, [r7, #12]
  return(result);
 800aac4:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800aac6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aac8:	b672      	cpsid	i
}
 800aaca:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800aacc:	1cbb      	adds	r3, r7, #2
 800aace:	4619      	mov	r1, r3
 800aad0:	4812      	ldr	r0, [pc, #72]	@ (800ab1c <DbgTrace_TxCpltCallback+0x64>)
 800aad2:	f000 fbe5 	bl	800b2a0 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800aad6:	1cbb      	adds	r3, r7, #2
 800aad8:	4619      	mov	r1, r3
 800aada:	4810      	ldr	r0, [pc, #64]	@ (800ab1c <DbgTrace_TxCpltCallback+0x64>)
 800aadc:	f000 fccf 	bl	800b47e <CircularQueue_Sense>
 800aae0:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d00c      	beq.n	800ab02 <DbgTrace_TxCpltCallback+0x4a>
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	f383 8810 	msr	PRIMASK, r3
}
 800aaf2:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800aaf4:	887b      	ldrh	r3, [r7, #2]
 800aaf6:	4a0a      	ldr	r2, [pc, #40]	@ (800ab20 <DbgTrace_TxCpltCallback+0x68>)
 800aaf8:	4619      	mov	r1, r3
 800aafa:	6938      	ldr	r0, [r7, #16]
 800aafc:	f7f5 fe37 	bl	800076e <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800ab00:	e008      	b.n	800ab14 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800ab02:	4b08      	ldr	r3, [pc, #32]	@ (800ab24 <DbgTrace_TxCpltCallback+0x6c>)
 800ab04:	2201      	movs	r2, #1
 800ab06:	701a      	strb	r2, [r3, #0]
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f383 8810 	msr	PRIMASK, r3
}
 800ab12:	bf00      	nop
}
 800ab14:	bf00      	nop
 800ab16:	3718      	adds	r7, #24
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}
 800ab1c:	20000458 	.word	0x20000458
 800ab20:	0800aab9 	.word	0x0800aab9
 800ab24:	20000029 	.word	0x20000029

0800ab28 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800ab2e:	f7f5 fe18 	bl	8000762 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800ab32:	2302      	movs	r3, #2
 800ab34:	9300      	str	r3, [sp, #0]
 800ab36:	2300      	movs	r3, #0
 800ab38:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800ab3c:	4903      	ldr	r1, [pc, #12]	@ (800ab4c <DbgTraceInit+0x24>)
 800ab3e:	4804      	ldr	r0, [pc, #16]	@ (800ab50 <DbgTraceInit+0x28>)
 800ab40:	f000 f956 	bl	800adf0 <CircularQueue_Init>
#endif 
#endif
  return;
 800ab44:	bf00      	nop
}
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	20000478 	.word	0x20000478
 800ab50:	20000458 	.word	0x20000458

0800ab54 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	68b9      	ldr	r1, [r7, #8]
 800ab64:	68f8      	ldr	r0, [r7, #12]
 800ab66:	f000 f805 	bl	800ab74 <DbgTraceWrite>
 800ab6a:	4603      	mov	r3, r0
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3710      	adds	r7, #16
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b08a      	sub	sp, #40	@ 0x28
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800ab80:	2300      	movs	r3, #0
 800ab82:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab84:	f3ef 8310 	mrs	r3, PRIMASK
 800ab88:	61bb      	str	r3, [r7, #24]
  return(result);
 800ab8a:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800ab8c:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab94:	d102      	bne.n	800ab9c <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800ab96:	2300      	movs	r3, #0
 800ab98:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab9a:	e037      	b.n	800ac0c <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d006      	beq.n	800abb0 <DbgTraceWrite+0x3c>
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2b02      	cmp	r3, #2
 800aba6:	d003      	beq.n	800abb0 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800aba8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800abac:	627b      	str	r3, [r7, #36]	@ 0x24
 800abae:	e02d      	b.n	800ac0c <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d02a      	beq.n	800ac0c <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800abba:	b672      	cpsid	i
}
 800abbc:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	b29a      	uxth	r2, r3
 800abc2:	2301      	movs	r3, #1
 800abc4:	68b9      	ldr	r1, [r7, #8]
 800abc6:	4814      	ldr	r0, [pc, #80]	@ (800ac18 <DbgTraceWrite+0xa4>)
 800abc8:	f000 f944 	bl	800ae54 <CircularQueue_Add>
 800abcc:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d015      	beq.n	800ac00 <DbgTraceWrite+0x8c>
 800abd4:	4b11      	ldr	r3, [pc, #68]	@ (800ac1c <DbgTraceWrite+0xa8>)
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d010      	beq.n	800ac00 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800abde:	4b0f      	ldr	r3, [pc, #60]	@ (800ac1c <DbgTraceWrite+0xa8>)
 800abe0:	2200      	movs	r2, #0
 800abe2:	701a      	strb	r2, [r3, #0]
 800abe4:	6a3b      	ldr	r3, [r7, #32]
 800abe6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	f383 8810 	msr	PRIMASK, r3
}
 800abee:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	4a0a      	ldr	r2, [pc, #40]	@ (800ac20 <DbgTraceWrite+0xac>)
 800abf6:	4619      	mov	r1, r3
 800abf8:	69f8      	ldr	r0, [r7, #28]
 800abfa:	f7f5 fdb8 	bl	800076e <DbgOutputTraces>
 800abfe:	e005      	b.n	800ac0c <DbgTraceWrite+0x98>
 800ac00:	6a3b      	ldr	r3, [r7, #32]
 800ac02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	f383 8810 	msr	PRIMASK, r3
}
 800ac0a:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3728      	adds	r7, #40	@ 0x28
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	bf00      	nop
 800ac18:	20000458 	.word	0x20000458
 800ac1c:	20000029 	.word	0x20000029
 800ac20:	0800aab9 	.word	0x0800aab9

0800ac24 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800ac24:	b480      	push	{r7}
 800ac26:	b085      	sub	sp, #20
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800ac2e:	4b0f      	ldr	r3, [pc, #60]	@ (800ac6c <OTP_Read+0x48>)
 800ac30:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ac32:	e002      	b.n	800ac3a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	3b08      	subs	r3, #8
 800ac38:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	3307      	adds	r3, #7
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	79fa      	ldrb	r2, [r7, #7]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d003      	beq.n	800ac4e <OTP_Read+0x2a>
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	4a09      	ldr	r2, [pc, #36]	@ (800ac70 <OTP_Read+0x4c>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d1f2      	bne.n	800ac34 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	3307      	adds	r3, #7
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	79fa      	ldrb	r2, [r7, #7]
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d001      	beq.n	800ac5e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3714      	adds	r7, #20
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr
 800ac6c:	1fff73f8 	.word	0x1fff73f8
 800ac70:	1fff7000 	.word	0x1fff7000

0800ac74 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b083      	sub	sp, #12
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	605a      	str	r2, [r3, #4]
}
 800ac88:	bf00      	nop
 800ac8a:	370c      	adds	r7, #12
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b087      	sub	sp, #28
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac9c:	f3ef 8310 	mrs	r3, PRIMASK
 800aca0:	60fb      	str	r3, [r7, #12]
  return(result);
 800aca2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aca4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800aca6:	b672      	cpsid	i
}
 800aca8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d102      	bne.n	800acba <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800acb4:	2301      	movs	r3, #1
 800acb6:	75fb      	strb	r3, [r7, #23]
 800acb8:	e001      	b.n	800acbe <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800acba:	2300      	movs	r3, #0
 800acbc:	75fb      	strb	r3, [r7, #23]
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	f383 8810 	msr	PRIMASK, r3
}
 800acc8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800acca:	7dfb      	ldrb	r3, [r7, #23]
}
 800accc:	4618      	mov	r0, r3
 800acce:	371c      	adds	r7, #28
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800acd8:	b480      	push	{r7}
 800acda:	b087      	sub	sp, #28
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ace2:	f3ef 8310 	mrs	r3, PRIMASK
 800ace6:	60fb      	str	r3, [r7, #12]
  return(result);
 800ace8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800acea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800acec:	b672      	cpsid	i
}
 800acee:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	683a      	ldr	r2, [r7, #0]
 800ad02:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	683a      	ldr	r2, [r7, #0]
 800ad0a:	605a      	str	r2, [r3, #4]
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	f383 8810 	msr	PRIMASK, r3
}
 800ad16:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ad18:	bf00      	nop
 800ad1a:	371c      	adds	r7, #28
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr

0800ad24 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b087      	sub	sp, #28
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad2e:	f3ef 8310 	mrs	r3, PRIMASK
 800ad32:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad34:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ad36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad38:	b672      	cpsid	i
}
 800ad3a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	685a      	ldr	r2, [r3, #4]
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	683a      	ldr	r2, [r7, #0]
 800ad4e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	683a      	ldr	r2, [r7, #0]
 800ad56:	601a      	str	r2, [r3, #0]
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	f383 8810 	msr	PRIMASK, r3
}
 800ad62:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ad64:	bf00      	nop
 800ad66:	371c      	adds	r7, #28
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b087      	sub	sp, #28
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad78:	f3ef 8310 	mrs	r3, PRIMASK
 800ad7c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ad80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad82:	b672      	cpsid	i
}
 800ad84:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	6812      	ldr	r2, [r2, #0]
 800ad8e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	6852      	ldr	r2, [r2, #4]
 800ad98:	605a      	str	r2, [r3, #4]
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	f383 8810 	msr	PRIMASK, r3
}
 800ada4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ada6:	bf00      	nop
 800ada8:	371c      	adds	r7, #28
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr

0800adb2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b086      	sub	sp, #24
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
 800adba:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800adbc:	f3ef 8310 	mrs	r3, PRIMASK
 800adc0:	60fb      	str	r3, [r7, #12]
  return(result);
 800adc2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800adc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800adc6:	b672      	cpsid	i
}
 800adc8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681a      	ldr	r2, [r3, #0]
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4618      	mov	r0, r3
 800add8:	f7ff ffca 	bl	800ad70 <LST_remove_node>
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	f383 8810 	msr	PRIMASK, r3
}
 800ade6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ade8:	bf00      	nop
 800adea:	3718      	adds	r7, #24
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b085      	sub	sp, #20
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	607a      	str	r2, [r7, #4]
 800adfc:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	68ba      	ldr	r2, [r7, #8]
 800ae02:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2200      	movs	r2, #0
 800ae08:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2200      	movs	r2, #0
 800ae14:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	887a      	ldrh	r2, [r7, #2]
 800ae26:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	7e3a      	ldrb	r2, [r7, #24]
 800ae2c:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800ae2e:	7e3b      	ldrb	r3, [r7, #24]
 800ae30:	f003 0302 	and.w	r3, r3, #2
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d006      	beq.n	800ae46 <CircularQueue_Init+0x56>
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	891b      	ldrh	r3, [r3, #8]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d002      	beq.n	800ae46 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800ae40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ae44:	e000      	b.n	800ae48 <CircularQueue_Init+0x58>
  }
  return 0;
 800ae46:	2300      	movs	r3, #0
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3714      	adds	r7, #20
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b08e      	sub	sp, #56	@ 0x38
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	60b9      	str	r1, [r7, #8]
 800ae5e:	603b      	str	r3, [r7, #0]
 800ae60:	4613      	mov	r3, r2
 800ae62:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800ae64:	2300      	movs	r3, #0
 800ae66:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800ae68:	2300      	movs	r3, #0
 800ae6a:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800ae70:	2300      	movs	r3, #0
 800ae72:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ae74:	2300      	movs	r3, #0
 800ae76:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800ae78:	2300      	movs	r3, #0
 800ae7a:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	891b      	ldrh	r3, [r3, #8]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d101      	bne.n	800ae8c <CircularQueue_Add+0x38>
 800ae88:	2302      	movs	r3, #2
 800ae8a:	e000      	b.n	800ae8e <CircularQueue_Add+0x3a>
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	695b      	ldr	r3, [r3, #20]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d029      	beq.n	800aeec <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	891b      	ldrh	r3, [r3, #8]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d122      	bne.n	800aee6 <CircularQueue_Add+0x92>
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	691b      	ldr	r3, [r3, #16]
 800aea8:	4413      	add	r3, r2
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	4618      	mov	r0, r3
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	691b      	ldr	r3, [r3, #16]
 800aeb6:	1c59      	adds	r1, r3, #1
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	4299      	cmp	r1, r3
 800aebe:	d306      	bcc.n	800aece <CircularQueue_Add+0x7a>
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6919      	ldr	r1, [r3, #16]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	1acb      	subs	r3, r1, r3
 800aeca:	3301      	adds	r3, #1
 800aecc:	e002      	b.n	800aed4 <CircularQueue_Add+0x80>
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	691b      	ldr	r3, [r3, #16]
 800aed2:	3301      	adds	r3, #1
 800aed4:	4413      	add	r3, r2
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	021b      	lsls	r3, r3, #8
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	4403      	add	r3, r0
 800aede:	b29b      	uxth	r3, r3
 800aee0:	3302      	adds	r3, #2
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	e001      	b.n	800aeea <CircularQueue_Add+0x96>
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	891b      	ldrh	r3, [r3, #8]
 800aeea:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	891b      	ldrh	r3, [r3, #8]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d002      	beq.n	800aefa <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	891b      	ldrh	r3, [r3, #8]
 800aef8:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	691a      	ldr	r2, [r3, #16]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	429a      	cmp	r2, r3
 800af04:	d307      	bcc.n	800af16 <CircularQueue_Add+0xc2>
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	685a      	ldr	r2, [r3, #4]
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	6919      	ldr	r1, [r3, #16]
 800af0e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800af10:	440b      	add	r3, r1
 800af12:	1ad3      	subs	r3, r2, r3
 800af14:	e000      	b.n	800af18 <CircularQueue_Add+0xc4>
 800af16:	2300      	movs	r3, #0
 800af18:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800af1a:	88fa      	ldrh	r2, [r7, #6]
 800af1c:	7ffb      	ldrb	r3, [r7, #31]
 800af1e:	4413      	add	r3, r2
 800af20:	461a      	mov	r2, r3
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	fb02 f303 	mul.w	r3, r2, r3
 800af28:	69ba      	ldr	r2, [r7, #24]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d80b      	bhi.n	800af46 <CircularQueue_Add+0xf2>
 800af2e:	88fa      	ldrh	r2, [r7, #6]
 800af30:	7ffb      	ldrb	r3, [r7, #31]
 800af32:	4413      	add	r3, r2
 800af34:	461a      	mov	r2, r3
 800af36:	69bb      	ldr	r3, [r7, #24]
 800af38:	fbb3 f1f2 	udiv	r1, r3, r2
 800af3c:	fb01 f202 	mul.w	r2, r1, r2
 800af40:	1a9b      	subs	r3, r3, r2
 800af42:	b2db      	uxtb	r3, r3
 800af44:	e000      	b.n	800af48 <CircularQueue_Add+0xf4>
 800af46:	2300      	movs	r3, #0
 800af48:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800af4a:	7dfa      	ldrb	r2, [r7, #23]
 800af4c:	7ffb      	ldrb	r3, [r7, #31]
 800af4e:	429a      	cmp	r2, r3
 800af50:	bf8c      	ite	hi
 800af52:	2301      	movhi	r3, #1
 800af54:	2300      	movls	r3, #0
 800af56:	b2db      	uxtb	r3, r3
 800af58:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800af5a:	7fbb      	ldrb	r3, [r7, #30]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d008      	beq.n	800af72 <CircularQueue_Add+0x11e>
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	7f1b      	ldrb	r3, [r3, #28]
 800af64:	f003 0301 	and.w	r3, r3, #1
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d002      	beq.n	800af72 <CircularQueue_Add+0x11e>
 800af6c:	7dfb      	ldrb	r3, [r7, #23]
 800af6e:	b29b      	uxth	r3, r3
 800af70:	e000      	b.n	800af74 <CircularQueue_Add+0x120>
 800af72:	8bbb      	ldrh	r3, [r7, #28]
 800af74:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800af76:	7fbb      	ldrb	r3, [r7, #30]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d008      	beq.n	800af8e <CircularQueue_Add+0x13a>
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	7f1b      	ldrb	r3, [r3, #28]
 800af80:	f003 0302 	and.w	r3, r3, #2
 800af84:	2b00      	cmp	r3, #0
 800af86:	d002      	beq.n	800af8e <CircularQueue_Add+0x13a>
 800af88:	7ffb      	ldrb	r3, [r7, #31]
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	e000      	b.n	800af90 <CircularQueue_Add+0x13c>
 800af8e:	8bbb      	ldrh	r3, [r7, #28]
 800af90:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800af92:	88fb      	ldrh	r3, [r7, #6]
 800af94:	2b00      	cmp	r3, #0
 800af96:	f000 817e 	beq.w	800b296 <CircularQueue_Add+0x442>
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	695a      	ldr	r2, [r3, #20]
 800af9e:	88f9      	ldrh	r1, [r7, #6]
 800afa0:	7ffb      	ldrb	r3, [r7, #31]
 800afa2:	440b      	add	r3, r1
 800afa4:	4619      	mov	r1, r3
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	fb01 f303 	mul.w	r3, r1, r3
 800afac:	441a      	add	r2, r3
 800afae:	8bbb      	ldrh	r3, [r7, #28]
 800afb0:	441a      	add	r2, r3
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	429a      	cmp	r2, r3
 800afb8:	f200 816d 	bhi.w	800b296 <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800afbc:	2300      	movs	r3, #0
 800afbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800afc0:	e14a      	b.n	800b258 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	691a      	ldr	r2, [r3, #16]
 800afc6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800afc8:	441a      	add	r2, r3
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	429a      	cmp	r2, r3
 800afd0:	d307      	bcc.n	800afe2 <CircularQueue_Add+0x18e>
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	691a      	ldr	r2, [r3, #16]
 800afd6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800afd8:	441a      	add	r2, r3
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	1ad3      	subs	r3, r2, r3
 800afe0:	e003      	b.n	800afea <CircularQueue_Add+0x196>
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	691a      	ldr	r2, [r3, #16]
 800afe6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800afe8:	4413      	add	r3, r2
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	691b      	ldr	r3, [r3, #16]
 800aff2:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	891b      	ldrh	r3, [r3, #8]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d130      	bne.n	800b05e <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b002:	1c59      	adds	r1, r3, #1
 800b004:	6339      	str	r1, [r7, #48]	@ 0x30
 800b006:	4413      	add	r3, r2
 800b008:	88fa      	ldrh	r2, [r7, #6]
 800b00a:	b2d2      	uxtb	r2, r2
 800b00c:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b014:	429a      	cmp	r2, r3
 800b016:	d304      	bcc.n	800b022 <CircularQueue_Add+0x1ce>
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b01e:	1ad3      	subs	r3, r2, r3
 800b020:	e000      	b.n	800b024 <CircularQueue_Add+0x1d0>
 800b022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b024:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800b026:	88fb      	ldrh	r3, [r7, #6]
 800b028:	0a1b      	lsrs	r3, r3, #8
 800b02a:	b298      	uxth	r0, r3
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b032:	1c59      	adds	r1, r3, #1
 800b034:	6339      	str	r1, [r7, #48]	@ 0x30
 800b036:	4413      	add	r3, r2
 800b038:	b2c2      	uxtb	r2, r0
 800b03a:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b042:	429a      	cmp	r2, r3
 800b044:	d304      	bcc.n	800b050 <CircularQueue_Add+0x1fc>
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b04c:	1ad3      	subs	r3, r2, r3
 800b04e:	e000      	b.n	800b052 <CircularQueue_Add+0x1fe>
 800b050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b052:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	695b      	ldr	r3, [r3, #20]
 800b058:	1c9a      	adds	r2, r3, #2
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800b05e:	88fa      	ldrh	r2, [r7, #6]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	6859      	ldr	r1, [r3, #4]
 800b064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b066:	1acb      	subs	r3, r1, r3
 800b068:	4293      	cmp	r3, r2
 800b06a:	bf28      	it	cs
 800b06c:	4613      	movcs	r3, r2
 800b06e:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800b070:	88fb      	ldrh	r3, [r7, #6]
 800b072:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b074:	429a      	cmp	r2, r3
 800b076:	d007      	beq.n	800b088 <CircularQueue_Add+0x234>
 800b078:	88fb      	ldrh	r3, [r7, #6]
 800b07a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d225      	bcs.n	800b0cc <CircularQueue_Add+0x278>
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	7f1b      	ldrb	r3, [r3, #28]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d121      	bne.n	800b0cc <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681a      	ldr	r2, [r3, #0]
 800b08c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b08e:	18d0      	adds	r0, r2, r3
 800b090:	88fb      	ldrh	r3, [r7, #6]
 800b092:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b094:	fb02 f303 	mul.w	r3, r2, r3
 800b098:	68ba      	ldr	r2, [r7, #8]
 800b09a:	4413      	add	r3, r2
 800b09c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b09e:	4619      	mov	r1, r3
 800b0a0:	f002 fd59 	bl	800db56 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	695a      	ldr	r2, [r3, #20]
 800b0a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0aa:	441a      	add	r2, r3
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800b0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0b6:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800b0b8:	88fa      	ldrh	r2, [r7, #6]
 800b0ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0bc:	1ad3      	subs	r3, r2, r3
 800b0be:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800b0c0:	7ffb      	ldrb	r3, [r7, #31]
 800b0c2:	b29a      	uxth	r2, r3
 800b0c4:	88fb      	ldrh	r3, [r7, #6]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800b0ca:	e0a4      	b.n	800b216 <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800b0cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	f000 80a1 	beq.w	800b216 <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	7f1b      	ldrb	r3, [r3, #28]
 800b0d8:	f003 0301 	and.w	r3, r3, #1
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d03a      	beq.n	800b156 <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	891b      	ldrh	r3, [r3, #8]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d10d      	bne.n	800b104 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ee:	3b02      	subs	r3, #2
 800b0f0:	4413      	add	r3, r2
 800b0f2:	22ff      	movs	r2, #255	@ 0xff
 800b0f4:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	4413      	add	r3, r2
 800b100:	22ff      	movs	r2, #255	@ 0xff
 800b102:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	695a      	ldr	r2, [r3, #20]
 800b108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b10a:	441a      	add	r2, r3
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800b110:	2300      	movs	r3, #0
 800b112:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800b114:	88fb      	ldrh	r3, [r7, #6]
 800b116:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800b118:	2300      	movs	r3, #0
 800b11a:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	891b      	ldrh	r3, [r3, #8]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d16f      	bne.n	800b204 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b12a:	1c59      	adds	r1, r3, #1
 800b12c:	6339      	str	r1, [r7, #48]	@ 0x30
 800b12e:	4413      	add	r3, r2
 800b130:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b132:	b2d2      	uxtb	r2, r2
 800b134:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b138:	0a18      	lsrs	r0, r3, #8
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b140:	1c59      	adds	r1, r3, #1
 800b142:	6339      	str	r1, [r7, #48]	@ 0x30
 800b144:	4413      	add	r3, r2
 800b146:	b2c2      	uxtb	r2, r0
 800b148:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	695b      	ldr	r3, [r3, #20]
 800b14e:	1c9a      	adds	r2, r3, #2
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	615a      	str	r2, [r3, #20]
 800b154:	e056      	b.n	800b204 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	7f1b      	ldrb	r3, [r3, #28]
 800b15a:	f003 0302 	and.w	r3, r3, #2
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d050      	beq.n	800b204 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	891b      	ldrh	r3, [r3, #8]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d14a      	bne.n	800b200 <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b170:	3b02      	subs	r3, #2
 800b172:	4413      	add	r3, r2
 800b174:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b176:	b2d2      	uxtb	r2, r2
 800b178:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b17a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b17c:	0a19      	lsrs	r1, r3, #8
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b184:	3b01      	subs	r3, #1
 800b186:	4413      	add	r3, r2
 800b188:	b2ca      	uxtb	r2, r1
 800b18a:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b192:	18d0      	adds	r0, r2, r3
 800b194:	88fb      	ldrh	r3, [r7, #6]
 800b196:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b198:	fb02 f303 	mul.w	r3, r2, r3
 800b19c:	68ba      	ldr	r2, [r7, #8]
 800b19e:	4413      	add	r3, r2
 800b1a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	f002 fcd7 	bl	800db56 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	695a      	ldr	r2, [r3, #20]
 800b1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ae:	441a      	add	r2, r3
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800b1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1b6:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800b1b8:	88fa      	ldrh	r2, [r7, #6]
 800b1ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1bc:	1ad3      	subs	r3, r2, r3
 800b1be:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	699b      	ldr	r3, [r3, #24]
 800b1c4:	1c5a      	adds	r2, r3, #1
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681a      	ldr	r2, [r3, #0]
 800b1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d4:	1c59      	adds	r1, r3, #1
 800b1d6:	6339      	str	r1, [r7, #48]	@ 0x30
 800b1d8:	4413      	add	r3, r2
 800b1da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1dc:	b2d2      	uxtb	r2, r2
 800b1de:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e2:	0a18      	lsrs	r0, r3, #8
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ea:	1c59      	adds	r1, r3, #1
 800b1ec:	6339      	str	r1, [r7, #48]	@ 0x30
 800b1ee:	4413      	add	r3, r2
 800b1f0:	b2c2      	uxtb	r2, r0
 800b1f2:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	695b      	ldr	r3, [r3, #20]
 800b1f8:	1c9a      	adds	r2, r3, #2
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	615a      	str	r2, [r3, #20]
 800b1fe:	e001      	b.n	800b204 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800b200:	2300      	movs	r3, #0
 800b202:	e049      	b.n	800b298 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800b204:	7ffb      	ldrb	r3, [r7, #31]
 800b206:	b29a      	uxth	r2, r3
 800b208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	4413      	add	r3, r2
 800b20e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2200      	movs	r2, #0
 800b214:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800b216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d015      	beq.n	800b248 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b222:	18d0      	adds	r0, r2, r3
 800b224:	88fb      	ldrh	r3, [r7, #6]
 800b226:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b228:	fb03 f202 	mul.w	r2, r3, r2
 800b22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b22e:	4413      	add	r3, r2
 800b230:	68ba      	ldr	r2, [r7, #8]
 800b232:	4413      	add	r3, r2
 800b234:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b236:	4619      	mov	r1, r3
 800b238:	f002 fc8d 	bl	800db56 <memcpy>
        q->byteCount += NbBytesToCopy;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	695a      	ldr	r2, [r3, #20]
 800b240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b242:	441a      	add	r2, r3
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	699b      	ldr	r3, [r3, #24]
 800b24c:	1c5a      	adds	r2, r3, #1
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800b252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b254:	3301      	adds	r3, #1
 800b256:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b258:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	429a      	cmp	r2, r3
 800b25e:	f4ff aeb0 	bcc.w	800afc2 <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	6919      	ldr	r1, [r3, #16]
 800b26a:	7ffb      	ldrb	r3, [r7, #31]
 800b26c:	4419      	add	r1, r3
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	4299      	cmp	r1, r3
 800b274:	d307      	bcc.n	800b286 <CircularQueue_Add+0x432>
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	6919      	ldr	r1, [r3, #16]
 800b27a:	7ffb      	ldrb	r3, [r7, #31]
 800b27c:	4419      	add	r1, r3
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	1acb      	subs	r3, r1, r3
 800b284:	e003      	b.n	800b28e <CircularQueue_Add+0x43a>
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	6919      	ldr	r1, [r3, #16]
 800b28a:	7ffb      	ldrb	r3, [r7, #31]
 800b28c:	440b      	add	r3, r1
 800b28e:	4413      	add	r3, r2
 800b290:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800b292:	6a3b      	ldr	r3, [r7, #32]
 800b294:	e000      	b.n	800b298 <CircularQueue_Add+0x444>
    return NULL;
 800b296:	2300      	movs	r3, #0
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3738      	adds	r7, #56	@ 0x38
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b085      	sub	sp, #20
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	891b      	ldrh	r3, [r3, #8]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d101      	bne.n	800b2be <CircularQueue_Remove+0x1e>
 800b2ba:	2302      	movs	r3, #2
 800b2bc:	e000      	b.n	800b2c0 <CircularQueue_Remove+0x20>
 800b2be:	2300      	movs	r3, #0
 800b2c0:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	695b      	ldr	r3, [r3, #20]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	f000 80ca 	beq.w	800b464 <CircularQueue_Remove+0x1c4>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	891b      	ldrh	r3, [r3, #8]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d120      	bne.n	800b31a <CircularQueue_Remove+0x7a>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681a      	ldr	r2, [r3, #0]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	68db      	ldr	r3, [r3, #12]
 800b2ee:	1c59      	adds	r1, r3, #1
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	4299      	cmp	r1, r3
 800b2f6:	d306      	bcc.n	800b306 <CircularQueue_Remove+0x66>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	68d9      	ldr	r1, [r3, #12]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	1acb      	subs	r3, r1, r3
 800b302:	3301      	adds	r3, #1
 800b304:	e002      	b.n	800b30c <CircularQueue_Remove+0x6c>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	68db      	ldr	r3, [r3, #12]
 800b30a:	3301      	adds	r3, #1
 800b30c:	4413      	add	r3, r2
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	021b      	lsls	r3, r3, #8
 800b312:	b29b      	uxth	r3, r3
 800b314:	4403      	add	r3, r0
 800b316:	b29b      	uxth	r3, r3
 800b318:	e001      	b.n	800b31e <CircularQueue_Remove+0x7e>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	891b      	ldrh	r3, [r3, #8]
 800b31e:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	7f1b      	ldrb	r3, [r3, #28]
 800b324:	f003 0301 	and.w	r3, r3, #1
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d056      	beq.n	800b3da <CircularQueue_Remove+0x13a>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	7f1b      	ldrb	r3, [r3, #28]
 800b330:	f003 0302 	and.w	r3, r3, #2
 800b334:	2b00      	cmp	r3, #0
 800b336:	d150      	bne.n	800b3da <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b338:	897b      	ldrh	r3, [r7, #10]
 800b33a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b33e:	4293      	cmp	r3, r2
 800b340:	d103      	bne.n	800b34a <CircularQueue_Remove+0xaa>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	891b      	ldrh	r3, [r3, #8]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d012      	beq.n	800b370 <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	68da      	ldr	r2, [r3, #12]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b352:	429a      	cmp	r2, r3
 800b354:	d941      	bls.n	800b3da <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	891b      	ldrh	r3, [r3, #8]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d03d      	beq.n	800b3da <CircularQueue_Remove+0x13a>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	685a      	ldr	r2, [r3, #4]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	68db      	ldr	r3, [r3, #12]
 800b366:	1ad3      	subs	r3, r2, r3
 800b368:	687a      	ldr	r2, [r7, #4]
 800b36a:	8912      	ldrh	r2, [r2, #8]
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d234      	bcs.n	800b3da <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	695a      	ldr	r2, [r3, #20]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	68d9      	ldr	r1, [r3, #12]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	1acb      	subs	r3, r1, r3
 800b37e:	441a      	add	r2, r3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2200      	movs	r2, #0
 800b388:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	891b      	ldrh	r3, [r3, #8]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d120      	bne.n	800b3d4 <CircularQueue_Remove+0x134>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681a      	ldr	r2, [r3, #0]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	68db      	ldr	r3, [r3, #12]
 800b39a:	4413      	add	r3, r2
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	4618      	mov	r0, r3
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	68db      	ldr	r3, [r3, #12]
 800b3a8:	1c59      	adds	r1, r3, #1
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	4299      	cmp	r1, r3
 800b3b0:	d306      	bcc.n	800b3c0 <CircularQueue_Remove+0x120>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	68d9      	ldr	r1, [r3, #12]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	1acb      	subs	r3, r1, r3
 800b3bc:	3301      	adds	r3, #1
 800b3be:	e002      	b.n	800b3c6 <CircularQueue_Remove+0x126>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	4413      	add	r3, r2
 800b3c8:	781b      	ldrb	r3, [r3, #0]
 800b3ca:	021b      	lsls	r3, r3, #8
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	4403      	add	r3, r0
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	e001      	b.n	800b3d8 <CircularQueue_Remove+0x138>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	891b      	ldrh	r3, [r3, #8]
 800b3d8:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681a      	ldr	r2, [r3, #0]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	68d9      	ldr	r1, [r3, #12]
 800b3e2:	7a7b      	ldrb	r3, [r7, #9]
 800b3e4:	4419      	add	r1, r3
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	4299      	cmp	r1, r3
 800b3ec:	d307      	bcc.n	800b3fe <CircularQueue_Remove+0x15e>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	68d9      	ldr	r1, [r3, #12]
 800b3f2:	7a7b      	ldrb	r3, [r7, #9]
 800b3f4:	4419      	add	r1, r3
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	1acb      	subs	r3, r1, r3
 800b3fc:	e003      	b.n	800b406 <CircularQueue_Remove+0x166>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	68d9      	ldr	r1, [r3, #12]
 800b402:	7a7b      	ldrb	r3, [r7, #9]
 800b404:	440b      	add	r3, r1
 800b406:	4413      	add	r3, r2
 800b408:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	695b      	ldr	r3, [r3, #20]
 800b40e:	8979      	ldrh	r1, [r7, #10]
 800b410:	7a7a      	ldrb	r2, [r7, #9]
 800b412:	440a      	add	r2, r1
 800b414:	1a9a      	subs	r2, r3, r2
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	695b      	ldr	r3, [r3, #20]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d01b      	beq.n	800b45a <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	68da      	ldr	r2, [r3, #12]
 800b426:	897b      	ldrh	r3, [r7, #10]
 800b428:	441a      	add	r2, r3
 800b42a:	7a7b      	ldrb	r3, [r7, #9]
 800b42c:	441a      	add	r2, r3
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	429a      	cmp	r2, r3
 800b434:	d309      	bcc.n	800b44a <CircularQueue_Remove+0x1aa>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	68da      	ldr	r2, [r3, #12]
 800b43a:	897b      	ldrh	r3, [r7, #10]
 800b43c:	441a      	add	r2, r3
 800b43e:	7a7b      	ldrb	r3, [r7, #9]
 800b440:	441a      	add	r2, r3
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	1ad3      	subs	r3, r2, r3
 800b448:	e005      	b.n	800b456 <CircularQueue_Remove+0x1b6>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	68da      	ldr	r2, [r3, #12]
 800b44e:	897b      	ldrh	r3, [r7, #10]
 800b450:	441a      	add	r2, r3
 800b452:	7a7b      	ldrb	r3, [r7, #9]
 800b454:	4413      	add	r3, r2
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	699b      	ldr	r3, [r3, #24]
 800b45e:	1e5a      	subs	r2, r3, #1
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d002      	beq.n	800b470 <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	897a      	ldrh	r2, [r7, #10]
 800b46e:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800b470:	68fb      	ldr	r3, [r7, #12]
}
 800b472:	4618      	mov	r0, r3
 800b474:	3714      	adds	r7, #20
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr

0800b47e <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800b47e:	b480      	push	{r7}
 800b480:	b087      	sub	sp, #28
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
 800b486:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b488:	2300      	movs	r3, #0
 800b48a:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800b48c:	2300      	movs	r3, #0
 800b48e:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	891b      	ldrh	r3, [r3, #8]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d101      	bne.n	800b49c <CircularQueue_Sense+0x1e>
 800b498:	2302      	movs	r3, #2
 800b49a:	e000      	b.n	800b49e <CircularQueue_Sense+0x20>
 800b49c:	2300      	movs	r3, #0
 800b49e:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	695b      	ldr	r3, [r3, #20]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	f000 808e 	beq.w	800b5ce <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	891b      	ldrh	r3, [r3, #8]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d120      	bne.n	800b502 <CircularQueue_Sense+0x84>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	68db      	ldr	r3, [r3, #12]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	68db      	ldr	r3, [r3, #12]
 800b4d6:	1c59      	adds	r1, r3, #1
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	4299      	cmp	r1, r3
 800b4de:	d306      	bcc.n	800b4ee <CircularQueue_Sense+0x70>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	68d9      	ldr	r1, [r3, #12]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	1acb      	subs	r3, r1, r3
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	e002      	b.n	800b4f4 <CircularQueue_Sense+0x76>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	68db      	ldr	r3, [r3, #12]
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	4413      	add	r3, r2
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	021b      	lsls	r3, r3, #8
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	4403      	add	r3, r0
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	e001      	b.n	800b506 <CircularQueue_Sense+0x88>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	891b      	ldrh	r3, [r3, #8]
 800b506:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	7f1b      	ldrb	r3, [r3, #28]
 800b50c:	f003 0301 	and.w	r3, r3, #1
 800b510:	2b00      	cmp	r3, #0
 800b512:	d047      	beq.n	800b5a4 <CircularQueue_Sense+0x126>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	7f1b      	ldrb	r3, [r3, #28]
 800b518:	f003 0302 	and.w	r3, r3, #2
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d141      	bne.n	800b5a4 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b520:	8a7b      	ldrh	r3, [r7, #18]
 800b522:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b526:	4293      	cmp	r3, r2
 800b528:	d103      	bne.n	800b532 <CircularQueue_Sense+0xb4>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	891b      	ldrh	r3, [r3, #8]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d012      	beq.n	800b558 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	68da      	ldr	r2, [r3, #12]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d932      	bls.n	800b5a4 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	891b      	ldrh	r3, [r3, #8]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d02e      	beq.n	800b5a4 <CircularQueue_Sense+0x126>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	685a      	ldr	r2, [r3, #4]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	68db      	ldr	r3, [r3, #12]
 800b54e:	1ad3      	subs	r3, r2, r3
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	8912      	ldrh	r2, [r2, #8]
 800b554:	4293      	cmp	r3, r2
 800b556:	d225      	bcs.n	800b5a4 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800b558:	2300      	movs	r3, #0
 800b55a:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	891b      	ldrh	r3, [r3, #8]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d11c      	bne.n	800b59e <CircularQueue_Sense+0x120>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	4413      	add	r3, r2
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	4618      	mov	r0, r3
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681a      	ldr	r2, [r3, #0]
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	1c59      	adds	r1, r3, #1
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	4299      	cmp	r1, r3
 800b57e:	d305      	bcc.n	800b58c <CircularQueue_Sense+0x10e>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	68f9      	ldr	r1, [r7, #12]
 800b586:	1acb      	subs	r3, r1, r3
 800b588:	3301      	adds	r3, #1
 800b58a:	e001      	b.n	800b590 <CircularQueue_Sense+0x112>
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	3301      	adds	r3, #1
 800b590:	4413      	add	r3, r2
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	021b      	lsls	r3, r3, #8
 800b596:	b29b      	uxth	r3, r3
 800b598:	4403      	add	r3, r0
 800b59a:	b29b      	uxth	r3, r3
 800b59c:	e001      	b.n	800b5a2 <CircularQueue_Sense+0x124>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	891b      	ldrh	r3, [r3, #8]
 800b5a2:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	7af9      	ldrb	r1, [r7, #11]
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	4419      	add	r1, r3
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	4299      	cmp	r1, r3
 800b5b4:	d306      	bcc.n	800b5c4 <CircularQueue_Sense+0x146>
 800b5b6:	7af9      	ldrb	r1, [r7, #11]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	4419      	add	r1, r3
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	1acb      	subs	r3, r1, r3
 800b5c2:	e002      	b.n	800b5ca <CircularQueue_Sense+0x14c>
 800b5c4:	7af9      	ldrb	r1, [r7, #11]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	440b      	add	r3, r1
 800b5ca:	4413      	add	r3, r2
 800b5cc:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d002      	beq.n	800b5da <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	8a7a      	ldrh	r2, [r7, #18]
 800b5d8:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800b5da:	697b      	ldr	r3, [r7, #20]
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	371c      	adds	r7, #28
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800b5ec:	4b03      	ldr	r3, [pc, #12]	@ (800b5fc <LL_FLASH_GetUDN+0x14>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f8:	4770      	bx	lr
 800b5fa:	bf00      	nop
 800b5fc:	1fff7580 	.word	0x1fff7580

0800b600 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800b600:	b480      	push	{r7}
 800b602:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800b604:	4b03      	ldr	r3, [pc, #12]	@ (800b614 <LL_FLASH_GetDeviceID+0x14>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	b2db      	uxtb	r3, r3
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr
 800b614:	1fff7584 	.word	0x1fff7584

0800b618 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800b618:	b480      	push	{r7}
 800b61a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800b61c:	4b03      	ldr	r3, [pc, #12]	@ (800b62c <LL_FLASH_GetSTCompanyID+0x14>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	0a1b      	lsrs	r3, r3, #8
}
 800b622:	4618      	mov	r0, r3
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr
 800b62c:	1fff7584 	.word	0x1fff7584

0800b630 <APP_BLE_Init>:

/* USER CODE END 0 */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800b630:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b632:	b097      	sub	sp, #92	@ 0x5c
 800b634:	af04      	add	r7, sp, #16
  SHCI_CmdStatus_t status;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b636:	2392      	movs	r3, #146	@ 0x92
 800b638:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */

  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800b63c:	4b8a      	ldr	r3, [pc, #552]	@ (800b868 <APP_BLE_Init+0x238>)
 800b63e:	f107 040c 	add.w	r4, r7, #12
 800b642:	461d      	mov	r5, r3
 800b644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b64a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b64c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b64e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b650:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b654:	c403      	stmia	r4!, {r0, r1}
 800b656:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800b658:	f000 fbbe 	bl	800bdd8 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800b65c:	2101      	movs	r1, #1
 800b65e:	2002      	movs	r0, #2
 800b660:	f001 fe80 	bl	800d364 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800b664:	4a81      	ldr	r2, [pc, #516]	@ (800b86c <APP_BLE_Init+0x23c>)
 800b666:	2100      	movs	r1, #0
 800b668:	2010      	movs	r0, #16
 800b66a:	f001 ffa7 	bl	800d5bc <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800b66e:	f107 030c 	add.w	r3, r7, #12
 800b672:	4618      	mov	r0, r3
 800b674:	f7fe fc1c 	bl	8009eb0 <SHCI_C2_BLE_Init>
 800b678:	4603      	mov	r3, r0
 800b67a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  if (status != SHCI_Success)
 800b67e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800b682:	2b00      	cmp	r3, #0
 800b684:	d008      	beq.n	800b698 <APP_BLE_Init+0x68>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800b686:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800b68a:	4619      	mov	r1, r3
 800b68c:	4878      	ldr	r0, [pc, #480]	@ (800b870 <APP_BLE_Init+0x240>)
 800b68e:	f002 f9b5 	bl	800d9fc <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800b692:	f7f6 fe5d 	bl	8002350 <Error_Handler>
 800b696:	e002      	b.n	800b69e <APP_BLE_Init+0x6e>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800b698:	4876      	ldr	r0, [pc, #472]	@ (800b874 <APP_BLE_Init+0x244>)
 800b69a:	f002 f9af 	bl	800d9fc <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800b69e:	f000 fbb1 	bl	800be04 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800b6a2:	f7fe fb43 	bl	8009d2c <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_START_SCAN_ID, UTIL_SEQ_RFU, Scan_Request);
 800b6a6:	4a74      	ldr	r2, [pc, #464]	@ (800b878 <APP_BLE_Init+0x248>)
 800b6a8:	2100      	movs	r1, #0
 800b6aa:	2001      	movs	r0, #1
 800b6ac:	f001 ff86 	bl	800d5bc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_DEV_1_ID, UTIL_SEQ_RFU, Connect_Request);
 800b6b0:	4a72      	ldr	r2, [pc, #456]	@ (800b87c <APP_BLE_Init+0x24c>)
 800b6b2:	2100      	movs	r1, #0
 800b6b4:	2002      	movs	r0, #2
 800b6b6:	f001 ff81 	bl	800d5bc <UTIL_SEQ_RegTask>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b6ba:	4b71      	ldr	r3, [pc, #452]	@ (800b880 <APP_BLE_Init+0x250>)
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /*Radio mask Activity*/
#if (OOB_DEMO != 0)
  ret = aci_hal_set_radio_activity_mask(0x0020);
 800b6c2:	2020      	movs	r0, #32
 800b6c4:	f7fe f8dd 	bl	8009882 <aci_hal_set_radio_activity_mask>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  if (ret != BLE_STATUS_SUCCESS)
 800b6ce:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d006      	beq.n	800b6e4 <APP_BLE_Init+0xb4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800b6d6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b6da:	4619      	mov	r1, r3
 800b6dc:	4869      	ldr	r0, [pc, #420]	@ (800b884 <APP_BLE_Init+0x254>)
 800b6de:	f002 f98d 	bl	800d9fc <iprintf>
 800b6e2:	e002      	b.n	800b6ea <APP_BLE_Init+0xba>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800b6e4:	4868      	ldr	r0, [pc, #416]	@ (800b888 <APP_BLE_Init+0x258>)
 800b6e6:	f002 f989 	bl	800d9fc <iprintf>
  }
  APP_DBG_MSG("\n");
 800b6ea:	200a      	movs	r0, #10
 800b6ec:	f002 f998 	bl	800da20 <putchar>
#endif
  /**
   * Initialize P2P Client Application
   */
  P2PC_APP_Init();
 800b6f0:	f000 fee8 	bl	800c4c4 <P2PC_APP_Init>

  /* USER CODE BEGIN APP_BLE_Init_3 */
  UTIL_SEQ_RegTask(1<<CFG_TASK_SEND_OOB_DATA_ID, UTIL_SEQ_RFU, send_oob_data); // [STM]
 800b6f4:	4a65      	ldr	r2, [pc, #404]	@ (800b88c <APP_BLE_Init+0x25c>)
 800b6f6:	2100      	movs	r1, #0
 800b6f8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800b6fc:	f001 ff5e 	bl	800d5bc <UTIL_SEQ_RegTask>
  
  uint8_t events[8]={0x9F,0x01,0x00,0x00,0x00,0x00,0x00,0x00};
 800b700:	4a63      	ldr	r2, [pc, #396]	@ (800b890 <APP_BLE_Init+0x260>)
 800b702:	1d3b      	adds	r3, r7, #4
 800b704:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b708:	e883 0003 	stmia.w	r3, {r0, r1}
  // [STM] LE read local P-256 public key complete event + LE generate DHKey complete event + and other events (check AN5270)
  
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800b70c:	2201      	movs	r2, #1
 800b70e:	2102      	movs	r1, #2
 800b710:	4860      	ldr	r0, [pc, #384]	@ (800b894 <APP_BLE_Init+0x264>)
 800b712:	f7f8 f873 	bl	80037fc <HAL_GPIO_WritePin>
  
  ret = hci_le_set_event_mask(events);
 800b716:	1d3b      	adds	r3, r7, #4
 800b718:	4618      	mov	r0, r3
 800b71a:	f7fe f92a 	bl	8009972 <hci_le_set_event_mask>
 800b71e:	4603      	mov	r3, r0
 800b720:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  ret |= hci_le_read_local_p256_public_key();
 800b724:	f7fe f97a 	bl	8009a1c <hci_le_read_local_p256_public_key>
 800b728:	4603      	mov	r3, r0
 800b72a:	461a      	mov	r2, r3
 800b72c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b730:	4313      	orrs	r3, r2
 800b732:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  if(ret == BLE_STATUS_SUCCESS)
 800b736:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d171      	bne.n	800b822 <APP_BLE_Init+0x1f2>
  {
    APP_DBG_MSG("  Success: hci_le_set_event_mask and hci_le_read_local_p256_public_key command.\n");
 800b73e:	4856      	ldr	r0, [pc, #344]	@ (800b898 <APP_BLE_Init+0x268>)
 800b740:	f002 f9cc 	bl	800dadc <puts>
    APP_DBG_MSG("  Waiting for HCI_LE_READ_LOCAL_P256_PUBLIC_KEY_COMPLETE_EVENT\n");
 800b744:	4855      	ldr	r0, [pc, #340]	@ (800b89c <APP_BLE_Init+0x26c>)
 800b746:	f002 f9c9 	bl	800dadc <puts>
    UTIL_SEQ_WaitEvt(1 << CFG_WAIT_EVT_READ_LOCAL_P256_PUBLIC_KEY_ID);
 800b74a:	2004      	movs	r0, #4
 800b74c:	f001 ffe4 	bl	800d718 <UTIL_SEQ_WaitEvt>
    
    // [STM] Generate OOB data
    ret = aci_gap_set_oob_data(0x00, // OOB device type = local device
 800b750:	2300      	movs	r3, #0
 800b752:	9301      	str	r3, [sp, #4]
 800b754:	2300      	movs	r3, #0
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	2300      	movs	r3, #0
 800b75a:	2200      	movs	r2, #0
 800b75c:	2100      	movs	r1, #0
 800b75e:	2000      	movs	r0, #0
 800b760:	f7fd fb96 	bl	8008e90 <aci_gap_set_oob_data>
 800b764:	4603      	mov	r3, r0
 800b766:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                               0x00, 
                               0x00,
                               0x00,
                               0x00,
                               0x00);
    if(ret != 0)
 800b76a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d00b      	beq.n	800b78a <APP_BLE_Init+0x15a>
    {
      HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800b772:	2201      	movs	r2, #1
 800b774:	2102      	movs	r1, #2
 800b776:	4847      	ldr	r0, [pc, #284]	@ (800b894 <APP_BLE_Init+0x264>)
 800b778:	f7f8 f840 	bl	80037fc <HAL_GPIO_WritePin>
      APP_DBG_MSG("  Fail   : aci_gap_set_oob_data, result: 0x%x\n", ret);
 800b77c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b780:	4619      	mov	r1, r3
 800b782:	4847      	ldr	r0, [pc, #284]	@ (800b8a0 <APP_BLE_Init+0x270>)
 800b784:	f002 f93a 	bl	800d9fc <iprintf>
 800b788:	e002      	b.n	800b790 <APP_BLE_Init+0x160>
    }
    else{
      APP_DBG_MSG("  Success: aci_gap_set_oob_data\n");
 800b78a:	4846      	ldr	r0, [pc, #280]	@ (800b8a4 <APP_BLE_Init+0x274>)
 800b78c:	f002 f9a6 	bl	800dadc <puts>
    }
    
    ret = aci_gap_get_oob_data(0x00, &m_oob_uart_data.address_type, m_oob_uart_data.address, &m_oob_uart_data.tk_size, m_oob_uart_data.tk);
 800b790:	4b45      	ldr	r3, [pc, #276]	@ (800b8a8 <APP_BLE_Init+0x278>)
 800b792:	9300      	str	r3, [sp, #0]
 800b794:	4b45      	ldr	r3, [pc, #276]	@ (800b8ac <APP_BLE_Init+0x27c>)
 800b796:	4a46      	ldr	r2, [pc, #280]	@ (800b8b0 <APP_BLE_Init+0x280>)
 800b798:	4946      	ldr	r1, [pc, #280]	@ (800b8b4 <APP_BLE_Init+0x284>)
 800b79a:	2000      	movs	r0, #0
 800b79c:	f7fd fae0 	bl	8008d60 <aci_gap_get_oob_data>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if(ret != 0)
 800b7a6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d00b      	beq.n	800b7c6 <APP_BLE_Init+0x196>
    {
      HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	2102      	movs	r1, #2
 800b7b2:	4838      	ldr	r0, [pc, #224]	@ (800b894 <APP_BLE_Init+0x264>)
 800b7b4:	f7f8 f822 	bl	80037fc <HAL_GPIO_WritePin>
      APP_DBG_MSG("  Fail   : aci_gap_get_oob_data, result: 0x%x\n", ret);
 800b7b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b7bc:	4619      	mov	r1, r3
 800b7be:	483e      	ldr	r0, [pc, #248]	@ (800b8b8 <APP_BLE_Init+0x288>)
 800b7c0:	f002 f91c 	bl	800d9fc <iprintf>
 800b7c4:	e033      	b.n	800b82e <APP_BLE_Init+0x1fe>
    }
    else{
      APP_DBG_MSG("  Success: aci_gap_get_oob_data\r\n");
 800b7c6:	483d      	ldr	r0, [pc, #244]	@ (800b8bc <APP_BLE_Init+0x28c>)
 800b7c8:	f002 f988 	bl	800dadc <puts>
      APP_DBG_MSG("\r\n BLE Client address (type %s) %02X:%02X:%02X:%02X:%02X:%02X\r\n",
              m_oob_uart_data.address_type == 0 ? "Public" : "Random",
 800b7cc:	4b39      	ldr	r3, [pc, #228]	@ (800b8b4 <APP_BLE_Init+0x284>)
 800b7ce:	781b      	ldrb	r3, [r3, #0]
      APP_DBG_MSG("\r\n BLE Client address (type %s) %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d101      	bne.n	800b7d8 <APP_BLE_Init+0x1a8>
 800b7d4:	493a      	ldr	r1, [pc, #232]	@ (800b8c0 <APP_BLE_Init+0x290>)
 800b7d6:	e000      	b.n	800b7da <APP_BLE_Init+0x1aa>
 800b7d8:	493a      	ldr	r1, [pc, #232]	@ (800b8c4 <APP_BLE_Init+0x294>)
              m_oob_uart_data.address[5], m_oob_uart_data.address[4], m_oob_uart_data.address[3],
 800b7da:	4b36      	ldr	r3, [pc, #216]	@ (800b8b4 <APP_BLE_Init+0x284>)
 800b7dc:	799b      	ldrb	r3, [r3, #6]
      APP_DBG_MSG("\r\n BLE Client address (type %s) %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b7de:	461d      	mov	r5, r3
              m_oob_uart_data.address[5], m_oob_uart_data.address[4], m_oob_uart_data.address[3],
 800b7e0:	4b34      	ldr	r3, [pc, #208]	@ (800b8b4 <APP_BLE_Init+0x284>)
 800b7e2:	795b      	ldrb	r3, [r3, #5]
      APP_DBG_MSG("\r\n BLE Client address (type %s) %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b7e4:	461e      	mov	r6, r3
              m_oob_uart_data.address[5], m_oob_uart_data.address[4], m_oob_uart_data.address[3],
 800b7e6:	4b33      	ldr	r3, [pc, #204]	@ (800b8b4 <APP_BLE_Init+0x284>)
 800b7e8:	791b      	ldrb	r3, [r3, #4]
      APP_DBG_MSG("\r\n BLE Client address (type %s) %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b7ea:	461a      	mov	r2, r3
              m_oob_uart_data.address[2], m_oob_uart_data.address[1], m_oob_uart_data.address[0]);
 800b7ec:	4b31      	ldr	r3, [pc, #196]	@ (800b8b4 <APP_BLE_Init+0x284>)
 800b7ee:	78db      	ldrb	r3, [r3, #3]
      APP_DBG_MSG("\r\n BLE Client address (type %s) %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b7f0:	4618      	mov	r0, r3
              m_oob_uart_data.address[2], m_oob_uart_data.address[1], m_oob_uart_data.address[0]);
 800b7f2:	4b30      	ldr	r3, [pc, #192]	@ (800b8b4 <APP_BLE_Init+0x284>)
 800b7f4:	789b      	ldrb	r3, [r3, #2]
      APP_DBG_MSG("\r\n BLE Client address (type %s) %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b7f6:	461c      	mov	r4, r3
              m_oob_uart_data.address[2], m_oob_uart_data.address[1], m_oob_uart_data.address[0]);
 800b7f8:	4b2e      	ldr	r3, [pc, #184]	@ (800b8b4 <APP_BLE_Init+0x284>)
 800b7fa:	785b      	ldrb	r3, [r3, #1]
      APP_DBG_MSG("\r\n BLE Client address (type %s) %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b7fc:	9303      	str	r3, [sp, #12]
 800b7fe:	9402      	str	r4, [sp, #8]
 800b800:	9001      	str	r0, [sp, #4]
 800b802:	9200      	str	r2, [sp, #0]
 800b804:	4633      	mov	r3, r6
 800b806:	462a      	mov	r2, r5
 800b808:	482f      	ldr	r0, [pc, #188]	@ (800b8c8 <APP_BLE_Init+0x298>)
 800b80a:	f002 f8f7 	bl	800d9fc <iprintf>
      ble_oob_data_log(m_oob_uart_data.tk_size,m_oob_uart_data.tk);
 800b80e:	4b29      	ldr	r3, [pc, #164]	@ (800b8b4 <APP_BLE_Init+0x284>)
 800b810:	79db      	ldrb	r3, [r3, #7]
 800b812:	4925      	ldr	r1, [pc, #148]	@ (800b8a8 <APP_BLE_Init+0x278>)
 800b814:	4618      	mov	r0, r3
 800b816:	f000 fe0b 	bl	800c430 <ble_oob_data_log>
      APP_DBG_MSG(" = Press SW1 to send OOB data via UART to BLE Server =\r\n\r\n");
 800b81a:	482c      	ldr	r0, [pc, #176]	@ (800b8cc <APP_BLE_Init+0x29c>)
 800b81c:	f002 f95e 	bl	800dadc <puts>
 800b820:	e005      	b.n	800b82e <APP_BLE_Init+0x1fe>
    }
  }
  else
  {
    APP_DBG_MSG("  Fail   : hci_le_set_event_mask and hci_le_read_local_p256_public_key command, result: 0x%x\n", ret);
 800b822:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b826:	4619      	mov	r1, r3
 800b828:	4829      	ldr	r0, [pc, #164]	@ (800b8d0 <APP_BLE_Init+0x2a0>)
 800b82a:	f002 f8e7 	bl	800d9fc <iprintf>
  }
  /* USER CODE END APP_BLE_Init_3 */

#if (OOB_DEMO != 0)
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800b82e:	4b29      	ldr	r3, [pc, #164]	@ (800b8d4 <APP_BLE_Init+0x2a4>)
 800b830:	2200      	movs	r2, #0
 800b832:	4929      	ldr	r1, [pc, #164]	@ (800b8d8 <APP_BLE_Init+0x2a8>)
 800b834:	2000      	movs	r0, #0
 800b836:	f7f6 f849 	bl	80018cc <HW_TS_Create>
   * Start scanning
   */
  UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
#endif
  /* USER CODE BEGIN APP_BLE_Init_2 */
  UTIL_SEQ_RegTask(1<<CFG_TASK_OOB_PROCESS_ID, UTIL_SEQ_RFU, ble_oob_process);
 800b83a:	4a28      	ldr	r2, [pc, #160]	@ (800b8dc <APP_BLE_Init+0x2ac>)
 800b83c:	2100      	movs	r1, #0
 800b83e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800b842:	f001 febb 	bl	800d5bc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<<CFG_TASK_BLE_CLIENT_PAIRING_REQUEST_ID, UTIL_SEQ_RFU, ble_client_pairing_request);
 800b846:	4a26      	ldr	r2, [pc, #152]	@ (800b8e0 <APP_BLE_Init+0x2b0>)
 800b848:	2100      	movs	r1, #0
 800b84a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b84e:	f001 feb5 	bl	800d5bc <UTIL_SEQ_RegTask>
  
  HW_UART_Receive_IT(hw_uart1, (uint8_t *)&m_oob_remote_data, sizeof(m_oob_remote_data), uart_rx_callback);
 800b852:	4b24      	ldr	r3, [pc, #144]	@ (800b8e4 <APP_BLE_Init+0x2b4>)
 800b854:	2207      	movs	r2, #7
 800b856:	4924      	ldr	r1, [pc, #144]	@ (800b8e8 <APP_BLE_Init+0x2b8>)
 800b858:	2000      	movs	r0, #0
 800b85a:	f7f6 f9c9 	bl	8001bf0 <HW_UART_Receive_IT>
  /* USER CODE END APP_BLE_Init_2 */
  return;
 800b85e:	bf00      	nop
}
 800b860:	374c      	adds	r7, #76	@ 0x4c
 800b862:	46bd      	mov	sp, r7
 800b864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b866:	bf00      	nop
 800b868:	0800f210 	.word	0x0800f210
 800b86c:	0800a0cd 	.word	0x0800a0cd
 800b870:	0800ef14 	.word	0x0800ef14
 800b874:	0800ef4c 	.word	0x0800ef4c
 800b878:	0800c091 	.word	0x0800c091
 800b87c:	0800c0f9 	.word	0x0800c0f9
 800b880:	2000148c 	.word	0x2000148c
 800b884:	0800ef74 	.word	0x0800ef74
 800b888:	0800efb8 	.word	0x0800efb8
 800b88c:	0800c225 	.word	0x0800c225
 800b890:	0800f24c 	.word	0x0800f24c
 800b894:	48000400 	.word	0x48000400
 800b898:	0800eff0 	.word	0x0800eff0
 800b89c:	0800f040 	.word	0x0800f040
 800b8a0:	0800f080 	.word	0x0800f080
 800b8a4:	0800f0b0 	.word	0x0800f0b0
 800b8a8:	20001524 	.word	0x20001524
 800b8ac:	20001523 	.word	0x20001523
 800b8b0:	2000151d 	.word	0x2000151d
 800b8b4:	2000151c 	.word	0x2000151c
 800b8b8:	0800f0d0 	.word	0x0800f0d0
 800b8bc:	0800f100 	.word	0x0800f100
 800b8c0:	0800f124 	.word	0x0800f124
 800b8c4:	0800f12c 	.word	0x0800f12c
 800b8c8:	0800f134 	.word	0x0800f134
 800b8cc:	0800f174 	.word	0x0800f174
 800b8d0:	0800f1b0 	.word	0x0800f1b0
 800b8d4:	0800c185 	.word	0x0800c185
 800b8d8:	2000150d 	.word	0x2000150d
 800b8dc:	0800c3ed 	.word	0x0800c3ed
 800b8e0:	0800c401 	.word	0x0800c401
 800b8e4:	0800c3d9 	.word	0x0800c3d9
 800b8e8:	20001534 	.word	0x20001534

0800b8ec <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *pckt)
{
 800b8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8ee:	b097      	sub	sp, #92	@ 0x5c
 800b8f0:	af06      	add	r7, sp, #24
 800b8f2:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  hci_le_connection_complete_event_rp0 * connection_complete_event;
  evt_blecore_aci *blecore_evt;
  hci_le_advertising_report_event_rp0 * le_advertising_event;
  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  hci_disconnection_complete_event_rp0 *cc = (void *) event_pckt->data;
 800b8fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8fc:	3302      	adds	r3, #2
 800b8fe:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t result;
  uint8_t event_type, event_data_size;
  int k = 0;
 800b900:	2300      	movs	r3, #0
 800b902:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint8_t adtype, adlength;
#if (OOB_DEMO != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b904:	2392      	movs	r3, #146	@ 0x92
 800b906:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
#endif

  switch (event_pckt->evt)
 800b90a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	2bff      	cmp	r3, #255	@ 0xff
 800b910:	d009      	beq.n	800b926 <SVCCTL_App_Notification+0x3a>
 800b912:	2bff      	cmp	r3, #255	@ 0xff
 800b914:	f300 8204 	bgt.w	800bd20 <SVCCTL_App_Notification+0x434>
 800b918:	2b05      	cmp	r3, #5
 800b91a:	f000 80d1 	beq.w	800bac0 <SVCCTL_App_Notification+0x1d4>
 800b91e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b920:	f000 80ec 	beq.w	800bafc <SVCCTL_App_Notification+0x210>

    default:
      /* USER CODE BEGIN evt_default */

      /* USER CODE END evt_default */
      break;
 800b924:	e1fc      	b.n	800bd20 <SVCCTL_App_Notification+0x434>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800b926:	4ba4      	ldr	r3, [pc, #656]	@ (800bbb8 <SVCCTL_App_Notification+0x2cc>)
 800b928:	2201      	movs	r2, #1
 800b92a:	701a      	strb	r2, [r3, #0]
        blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800b92c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b92e:	3302      	adds	r3, #2
 800b930:	62fb      	str	r3, [r7, #44]	@ 0x2c
        switch (blecore_evt->ecode)
 800b932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b934:	881b      	ldrh	r3, [r3, #0]
 800b936:	b29b      	uxth	r3, r3
 800b938:	f640 0202 	movw	r2, #2050	@ 0x802
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d032      	beq.n	800b9a6 <SVCCTL_App_Notification+0xba>
 800b940:	f640 0202 	movw	r2, #2050	@ 0x802
 800b944:	4293      	cmp	r3, r2
 800b946:	f300 80b7 	bgt.w	800bab8 <SVCCTL_App_Notification+0x1cc>
 800b94a:	2b04      	cmp	r3, #4
 800b94c:	f000 80a7 	beq.w	800ba9e <SVCCTL_App_Notification+0x1b2>
 800b950:	f240 4207 	movw	r2, #1031	@ 0x407
 800b954:	4293      	cmp	r3, r2
 800b956:	f040 80af 	bne.w	800bab8 <SVCCTL_App_Notification+0x1cc>
              aci_gap_proc_complete_event_rp0 *gap_evt_proc_complete = (void*) blecore_evt->data;
 800b95a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b95c:	3302      	adds	r3, #2
 800b95e:	627b      	str	r3, [r7, #36]	@ 0x24
              if (gap_evt_proc_complete->Procedure_Code == GAP_GENERAL_DISCOVERY_PROC
 800b960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	2b02      	cmp	r3, #2
 800b966:	f040 80a9 	bne.w	800babc <SVCCTL_App_Notification+0x1d0>
                  && gap_evt_proc_complete->Status == 0x00)
 800b96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b96c:	785b      	ldrb	r3, [r3, #1]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	f040 80a4 	bne.w	800babc <SVCCTL_App_Notification+0x1d0>
                HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800b974:	2200      	movs	r2, #0
 800b976:	2120      	movs	r1, #32
 800b978:	4890      	ldr	r0, [pc, #576]	@ (800bbbc <SVCCTL_App_Notification+0x2d0>)
 800b97a:	f7f7 ff3f 	bl	80037fc <HAL_GPIO_WritePin>
                APP_DBG_MSG("-- GAP GENERAL DISCOVERY PROCEDURE_COMPLETED\n\r");
 800b97e:	4890      	ldr	r0, [pc, #576]	@ (800bbc0 <SVCCTL_App_Notification+0x2d4>)
 800b980:	f002 f83c 	bl	800d9fc <iprintf>
                if (BleApplicationContext.DeviceServerFound == 0x01 && BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800b984:	4b8f      	ldr	r3, [pc, #572]	@ (800bbc4 <SVCCTL_App_Notification+0x2d8>)
 800b986:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	f040 8096 	bne.w	800babc <SVCCTL_App_Notification+0x1d0>
 800b990:	4b8c      	ldr	r3, [pc, #560]	@ (800bbc4 <SVCCTL_App_Notification+0x2d8>)
 800b992:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b996:	2b06      	cmp	r3, #6
 800b998:	f000 8090 	beq.w	800babc <SVCCTL_App_Notification+0x1d0>
                  UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_0);
 800b99c:	2100      	movs	r1, #0
 800b99e:	2002      	movs	r0, #2
 800b9a0:	f001 fe2e 	bl	800d600 <UTIL_SEQ_SetTask>
            break;
 800b9a4:	e08a      	b.n	800babc <SVCCTL_App_Notification+0x1d0>
              aci_l2cap_connection_update_req_event_rp0 *pr = (aci_l2cap_connection_update_req_event_rp0 *) blecore_evt->data;
 800b9a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9a8:	3302      	adds	r3, #2
 800b9aa:	62bb      	str	r3, [r7, #40]	@ 0x28
              ret = aci_hal_set_radio_activity_mask(0x0000);
 800b9ac:	2000      	movs	r0, #0
 800b9ae:	f7fd ff68 	bl	8009882 <aci_hal_set_radio_activity_mask>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
              if (ret != BLE_STATUS_SUCCESS)
 800b9b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d006      	beq.n	800b9ce <SVCCTL_App_Notification+0xe2>
                APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800b9c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	4880      	ldr	r0, [pc, #512]	@ (800bbc8 <SVCCTL_App_Notification+0x2dc>)
 800b9c8:	f002 f818 	bl	800d9fc <iprintf>
 800b9cc:	e002      	b.n	800b9d4 <SVCCTL_App_Notification+0xe8>
                APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800b9ce:	487f      	ldr	r0, [pc, #508]	@ (800bbcc <SVCCTL_App_Notification+0x2e0>)
 800b9d0:	f002 f814 	bl	800d9fc <iprintf>
              APP_BLE_p2p_Conn_Update_req.Identifier = pr->Identifier;
 800b9d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9d6:	789a      	ldrb	r2, [r3, #2]
 800b9d8:	4b7d      	ldr	r3, [pc, #500]	@ (800bbd0 <SVCCTL_App_Notification+0x2e4>)
 800b9da:	701a      	strb	r2, [r3, #0]
              APP_BLE_p2p_Conn_Update_req.L2CAP_Length = pr->L2CAP_Length;
 800b9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9de:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800b9e2:	b29a      	uxth	r2, r3
 800b9e4:	4b7a      	ldr	r3, [pc, #488]	@ (800bbd0 <SVCCTL_App_Notification+0x2e4>)
 800b9e6:	805a      	strh	r2, [r3, #2]
              APP_BLE_p2p_Conn_Update_req.Interval_Min = pr->Interval_Min;
 800b9e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9ea:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800b9ee:	b29a      	uxth	r2, r3
 800b9f0:	4b77      	ldr	r3, [pc, #476]	@ (800bbd0 <SVCCTL_App_Notification+0x2e4>)
 800b9f2:	809a      	strh	r2, [r3, #4]
              APP_BLE_p2p_Conn_Update_req.Interval_Max = pr->Interval_Max;
 800b9f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9f6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b9fa:	b29a      	uxth	r2, r3
 800b9fc:	4b74      	ldr	r3, [pc, #464]	@ (800bbd0 <SVCCTL_App_Notification+0x2e4>)
 800b9fe:	80da      	strh	r2, [r3, #6]
              APP_BLE_p2p_Conn_Update_req.Slave_Latency = pr->Slave_Latency;
 800ba00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba02:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800ba06:	b29a      	uxth	r2, r3
 800ba08:	4b71      	ldr	r3, [pc, #452]	@ (800bbd0 <SVCCTL_App_Notification+0x2e4>)
 800ba0a:	811a      	strh	r2, [r3, #8]
              APP_BLE_p2p_Conn_Update_req.Timeout_Multiplier = pr->Timeout_Multiplier;
 800ba0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba0e:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800ba12:	b29a      	uxth	r2, r3
 800ba14:	4b6e      	ldr	r3, [pc, #440]	@ (800bbd0 <SVCCTL_App_Notification+0x2e4>)
 800ba16:	815a      	strh	r2, [r3, #10]
              ret = aci_l2cap_connection_parameter_update_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800ba18:	4b6a      	ldr	r3, [pc, #424]	@ (800bbc4 <SVCCTL_App_Notification+0x2d8>)
 800ba1a:	8ad8      	ldrh	r0, [r3, #22]
 800ba1c:	4b6c      	ldr	r3, [pc, #432]	@ (800bbd0 <SVCCTL_App_Notification+0x2e4>)
 800ba1e:	8899      	ldrh	r1, [r3, #4]
 800ba20:	4b6b      	ldr	r3, [pc, #428]	@ (800bbd0 <SVCCTL_App_Notification+0x2e4>)
 800ba22:	88dc      	ldrh	r4, [r3, #6]
 800ba24:	4b6a      	ldr	r3, [pc, #424]	@ (800bbd0 <SVCCTL_App_Notification+0x2e4>)
 800ba26:	891d      	ldrh	r5, [r3, #8]
 800ba28:	4b69      	ldr	r3, [pc, #420]	@ (800bbd0 <SVCCTL_App_Notification+0x2e4>)
 800ba2a:	895b      	ldrh	r3, [r3, #10]
 800ba2c:	4a68      	ldr	r2, [pc, #416]	@ (800bbd0 <SVCCTL_App_Notification+0x2e4>)
 800ba2e:	7812      	ldrb	r2, [r2, #0]
 800ba30:	2601      	movs	r6, #1
 800ba32:	9604      	str	r6, [sp, #16]
 800ba34:	9203      	str	r2, [sp, #12]
 800ba36:	2210      	movs	r2, #16
 800ba38:	9202      	str	r2, [sp, #8]
 800ba3a:	2210      	movs	r2, #16
 800ba3c:	9201      	str	r2, [sp, #4]
 800ba3e:	9300      	str	r3, [sp, #0]
 800ba40:	462b      	mov	r3, r5
 800ba42:	4622      	mov	r2, r4
 800ba44:	f7fe f810 	bl	8009a68 <aci_l2cap_connection_parameter_update_resp>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
              if(ret != BLE_STATUS_SUCCESS)
 800ba4e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d00b      	beq.n	800ba6e <SVCCTL_App_Notification+0x182>
                APP_DBG_MSG("  Fail   : aci_l2cap_connection_parameter_update_resp command, result: 0x%x \n\r", ret);
 800ba56:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	485d      	ldr	r0, [pc, #372]	@ (800bbd4 <SVCCTL_App_Notification+0x2e8>)
 800ba5e:	f001 ffcd 	bl	800d9fc <iprintf>
                HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800ba62:	2201      	movs	r2, #1
 800ba64:	2102      	movs	r1, #2
 800ba66:	4855      	ldr	r0, [pc, #340]	@ (800bbbc <SVCCTL_App_Notification+0x2d0>)
 800ba68:	f7f7 fec8 	bl	80037fc <HAL_GPIO_WritePin>
 800ba6c:	e002      	b.n	800ba74 <SVCCTL_App_Notification+0x188>
                APP_DBG_MSG("  Success: aci_l2cap_connection_parameter_update_resp command\n\r");
 800ba6e:	485a      	ldr	r0, [pc, #360]	@ (800bbd8 <SVCCTL_App_Notification+0x2ec>)
 800ba70:	f001 ffc4 	bl	800d9fc <iprintf>
              ret = aci_hal_set_radio_activity_mask(0x0020);
 800ba74:	2020      	movs	r0, #32
 800ba76:	f7fd ff04 	bl	8009882 <aci_hal_set_radio_activity_mask>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
              if (ret != BLE_STATUS_SUCCESS)
 800ba80:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d006      	beq.n	800ba96 <SVCCTL_App_Notification+0x1aa>
                APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800ba88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	484e      	ldr	r0, [pc, #312]	@ (800bbc8 <SVCCTL_App_Notification+0x2dc>)
 800ba90:	f001 ffb4 	bl	800d9fc <iprintf>
            break;
 800ba94:	e013      	b.n	800babe <SVCCTL_App_Notification+0x1d2>
                APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800ba96:	484d      	ldr	r0, [pc, #308]	@ (800bbcc <SVCCTL_App_Notification+0x2e0>)
 800ba98:	f001 ffb0 	bl	800d9fc <iprintf>
            break;
 800ba9c:	e00f      	b.n	800babe <SVCCTL_App_Notification+0x1d2>
              HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800ba9e:	2201      	movs	r2, #1
 800baa0:	2101      	movs	r1, #1
 800baa2:	4846      	ldr	r0, [pc, #280]	@ (800bbbc <SVCCTL_App_Notification+0x2d0>)
 800baa4:	f7f7 feaa 	bl	80037fc <HAL_GPIO_WritePin>
              HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 800baa8:	4b46      	ldr	r3, [pc, #280]	@ (800bbc4 <SVCCTL_App_Notification+0x2d8>)
 800baaa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800baae:	210a      	movs	r1, #10
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7f6 f809 	bl	8001ac8 <HW_TS_Start>
            break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800bab6:	e002      	b.n	800babe <SVCCTL_App_Notification+0x1d2>
            break;
 800bab8:	bf00      	nop
 800baba:	e134      	b.n	800bd26 <SVCCTL_App_Notification+0x43a>
            break;
 800babc:	bf00      	nop
      break;
 800babe:	e132      	b.n	800bd26 <SVCCTL_App_Notification+0x43a>
        if (cc->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800bac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bac2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	4b3e      	ldr	r3, [pc, #248]	@ (800bbc4 <SVCCTL_App_Notification+0x2d8>)
 800baca:	8adb      	ldrh	r3, [r3, #22]
 800bacc:	429a      	cmp	r2, r3
 800bace:	f040 8129 	bne.w	800bd24 <SVCCTL_App_Notification+0x438>
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800bad2:	4b3c      	ldr	r3, [pc, #240]	@ (800bbc4 <SVCCTL_App_Notification+0x2d8>)
 800bad4:	2200      	movs	r2, #0
 800bad6:	82da      	strh	r2, [r3, #22]
          BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800bad8:	4b3a      	ldr	r3, [pc, #232]	@ (800bbc4 <SVCCTL_App_Notification+0x2d8>)
 800bada:	2200      	movs	r2, #0
 800badc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH SERVER \n\r");
 800bae0:	483e      	ldr	r0, [pc, #248]	@ (800bbdc <SVCCTL_App_Notification+0x2f0>)
 800bae2:	f001 ff8b 	bl	800d9fc <iprintf>
          handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800bae6:	4b34      	ldr	r3, [pc, #208]	@ (800bbb8 <SVCCTL_App_Notification+0x2cc>)
 800bae8:	2201      	movs	r2, #1
 800baea:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800baec:	4b35      	ldr	r3, [pc, #212]	@ (800bbc4 <SVCCTL_App_Notification+0x2d8>)
 800baee:	8ada      	ldrh	r2, [r3, #22]
 800baf0:	4b31      	ldr	r3, [pc, #196]	@ (800bbb8 <SVCCTL_App_Notification+0x2cc>)
 800baf2:	805a      	strh	r2, [r3, #2]
          P2PC_APP_Notification(&handleNotification);
 800baf4:	4830      	ldr	r0, [pc, #192]	@ (800bbb8 <SVCCTL_App_Notification+0x2cc>)
 800baf6:	f000 fd39 	bl	800c56c <P2PC_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800bafa:	e113      	b.n	800bd24 <SVCCTL_App_Notification+0x438>
        meta_evt = (evt_le_meta_event*) event_pckt->data;
 800bafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bafe:	3302      	adds	r3, #2
 800bb00:	623b      	str	r3, [r7, #32]
        switch (meta_evt->subevent)
 800bb02:	6a3b      	ldr	r3, [r7, #32]
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	2b08      	cmp	r3, #8
 800bb08:	d007      	beq.n	800bb1a <SVCCTL_App_Notification+0x22e>
 800bb0a:	2b08      	cmp	r3, #8
 800bb0c:	f300 8104 	bgt.w	800bd18 <SVCCTL_App_Notification+0x42c>
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d00e      	beq.n	800bb32 <SVCCTL_App_Notification+0x246>
 800bb14:	2b02      	cmp	r3, #2
 800bb16:	d03b      	beq.n	800bb90 <SVCCTL_App_Notification+0x2a4>
            break;
 800bb18:	e0fe      	b.n	800bd18 <SVCCTL_App_Notification+0x42c>
              UTIL_SEQ_SetEvt(1 << CFG_WAIT_EVT_READ_LOCAL_P256_PUBLIC_KEY_ID);
 800bb1a:	2004      	movs	r0, #4
 800bb1c:	f001 fddc 	bl	800d6d8 <UTIL_SEQ_SetEvt>
              APP_DBG_MSG(">>== HCI_LE_READ_LOCAL_P256_PUBLIC_KEY_COMPLETE_SUBEVT_CODE event \r\n");
 800bb20:	482f      	ldr	r0, [pc, #188]	@ (800bbe0 <SVCCTL_App_Notification+0x2f4>)
 800bb22:	f001 ffdb 	bl	800dadc <puts>
              HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800bb26:	2200      	movs	r2, #0
 800bb28:	2102      	movs	r1, #2
 800bb2a:	4824      	ldr	r0, [pc, #144]	@ (800bbbc <SVCCTL_App_Notification+0x2d0>)
 800bb2c:	f7f7 fe66 	bl	80037fc <HAL_GPIO_WritePin>
            break;
 800bb30:	e0f5      	b.n	800bd1e <SVCCTL_App_Notification+0x432>
            connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800bb32:	6a3b      	ldr	r3, [r7, #32]
 800bb34:	3301      	adds	r3, #1
 800bb36:	60fb      	str	r3, [r7, #12]
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bb3e:	b29a      	uxth	r2, r3
 800bb40:	4b20      	ldr	r3, [pc, #128]	@ (800bbc4 <SVCCTL_App_Notification+0x2d8>)
 800bb42:	82da      	strh	r2, [r3, #22]
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800bb44:	4b1f      	ldr	r3, [pc, #124]	@ (800bbc4 <SVCCTL_App_Notification+0x2d8>)
 800bb46:	2206      	movs	r2, #6
 800bb48:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            APP_DBG_MSG("\r\n\r**  CONNECTION COMPLETE EVENT WITH SERVER \n\r");
 800bb4c:	4825      	ldr	r0, [pc, #148]	@ (800bbe4 <SVCCTL_App_Notification+0x2f8>)
 800bb4e:	f001 ff55 	bl	800d9fc <iprintf>
            handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800bb52:	4b19      	ldr	r3, [pc, #100]	@ (800bbb8 <SVCCTL_App_Notification+0x2cc>)
 800bb54:	2200      	movs	r2, #0
 800bb56:	701a      	strb	r2, [r3, #0]
            handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800bb58:	4b1a      	ldr	r3, [pc, #104]	@ (800bbc4 <SVCCTL_App_Notification+0x2d8>)
 800bb5a:	8ada      	ldrh	r2, [r3, #22]
 800bb5c:	4b16      	ldr	r3, [pc, #88]	@ (800bbb8 <SVCCTL_App_Notification+0x2cc>)
 800bb5e:	805a      	strh	r2, [r3, #2]
            P2PC_APP_Notification(&handleNotification);
 800bb60:	4815      	ldr	r0, [pc, #84]	@ (800bbb8 <SVCCTL_App_Notification+0x2cc>)
 800bb62:	f000 fd03 	bl	800c56c <P2PC_APP_Notification>
            result = aci_gatt_disc_all_primary_services(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800bb66:	4b17      	ldr	r3, [pc, #92]	@ (800bbc4 <SVCCTL_App_Notification+0x2d8>)
 800bb68:	8adb      	ldrh	r3, [r3, #22]
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7fd fb08 	bl	8009180 <aci_gatt_disc_all_primary_services>
 800bb70:	4603      	mov	r3, r0
 800bb72:	72fb      	strb	r3, [r7, #11]
            if (result == BLE_STATUS_SUCCESS)
 800bb74:	7afb      	ldrb	r3, [r7, #11]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d106      	bne.n	800bb88 <SVCCTL_App_Notification+0x29c>
              APP_DBG_MSG("\r\n\r** GATT SERVICES & CHARACTERISTICS DISCOVERY  \n\r");
 800bb7a:	481b      	ldr	r0, [pc, #108]	@ (800bbe8 <SVCCTL_App_Notification+0x2fc>)
 800bb7c:	f001 ff3e 	bl	800d9fc <iprintf>
              APP_DBG_MSG("* GATT :  Start Searching Primary Services \r\n\r");
 800bb80:	481a      	ldr	r0, [pc, #104]	@ (800bbec <SVCCTL_App_Notification+0x300>)
 800bb82:	f001 ff3b 	bl	800d9fc <iprintf>
            break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800bb86:	e0ca      	b.n	800bd1e <SVCCTL_App_Notification+0x432>
              APP_DBG_MSG("BLE_CTRL_App_Notification(), All services discovery Failed \r\n\r");
 800bb88:	4819      	ldr	r0, [pc, #100]	@ (800bbf0 <SVCCTL_App_Notification+0x304>)
 800bb8a:	f001 ff37 	bl	800d9fc <iprintf>
            break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800bb8e:	e0c6      	b.n	800bd1e <SVCCTL_App_Notification+0x432>
              le_advertising_event = (hci_le_advertising_report_event_rp0 *) meta_evt->data;
 800bb90:	6a3b      	ldr	r3, [r7, #32]
 800bb92:	3301      	adds	r3, #1
 800bb94:	61fb      	str	r3, [r7, #28]
              event_type = le_advertising_event->Advertising_Report[0].Event_Type;
 800bb96:	69fb      	ldr	r3, [r7, #28]
 800bb98:	785b      	ldrb	r3, [r3, #1]
 800bb9a:	76fb      	strb	r3, [r7, #27]
              event_data_size = le_advertising_event->Advertising_Report[0].Length_Data;
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	7a5b      	ldrb	r3, [r3, #9]
 800bba0:	76bb      	strb	r3, [r7, #26]
              adv_report_data = (uint8_t*)(&le_advertising_event->Advertising_Report[0].Length_Data) + 1;
 800bba2:	69fb      	ldr	r3, [r7, #28]
 800bba4:	3309      	adds	r3, #9
 800bba6:	3301      	adds	r3, #1
 800bba8:	617b      	str	r3, [r7, #20]
              k = 0;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	63fb      	str	r3, [r7, #60]	@ 0x3c
              if (event_type == ADV_IND)
 800bbae:	7efb      	ldrb	r3, [r7, #27]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	f040 80b3 	bne.w	800bd1c <SVCCTL_App_Notification+0x430>
                while(k < event_data_size)
 800bbb6:	e0a9      	b.n	800bd0c <SVCCTL_App_Notification+0x420>
 800bbb8:	20001488 	.word	0x20001488
 800bbbc:	48000400 	.word	0x48000400
 800bbc0:	0800f254 	.word	0x0800f254
 800bbc4:	2000148c 	.word	0x2000148c
 800bbc8:	0800ef74 	.word	0x0800ef74
 800bbcc:	0800efb8 	.word	0x0800efb8
 800bbd0:	20001510 	.word	0x20001510
 800bbd4:	0800f284 	.word	0x0800f284
 800bbd8:	0800f2d4 	.word	0x0800f2d4
 800bbdc:	0800f314 	.word	0x0800f314
 800bbe0:	0800f340 	.word	0x0800f340
 800bbe4:	0800f384 	.word	0x0800f384
 800bbe8:	0800f3b4 	.word	0x0800f3b4
 800bbec:	0800f3e8 	.word	0x0800f3e8
 800bbf0:	0800f418 	.word	0x0800f418
                  adlength = adv_report_data[k];
 800bbf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbf6:	697a      	ldr	r2, [r7, #20]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	74fb      	strb	r3, [r7, #19]
                  adtype = adv_report_data[k + 1];
 800bbfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc00:	3301      	adds	r3, #1
 800bc02:	697a      	ldr	r2, [r7, #20]
 800bc04:	4413      	add	r3, r2
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	74bb      	strb	r3, [r7, #18]
                  switch (adtype)
 800bc0a:	7cbb      	ldrb	r3, [r7, #18]
 800bc0c:	2bff      	cmp	r3, #255	@ 0xff
 800bc0e:	d009      	beq.n	800bc24 <SVCCTL_App_Notification+0x338>
 800bc10:	2bff      	cmp	r3, #255	@ 0xff
 800bc12:	dc6f      	bgt.n	800bcf4 <SVCCTL_App_Notification+0x408>
 800bc14:	2b16      	cmp	r3, #22
 800bc16:	d06f      	beq.n	800bcf8 <SVCCTL_App_Notification+0x40c>
 800bc18:	2b16      	cmp	r3, #22
 800bc1a:	dc6b      	bgt.n	800bcf4 <SVCCTL_App_Notification+0x408>
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d06d      	beq.n	800bcfc <SVCCTL_App_Notification+0x410>
 800bc20:	2b0a      	cmp	r3, #10
                      break;
 800bc22:	e06e      	b.n	800bd02 <SVCCTL_App_Notification+0x416>
                      if(adlength >= 7 && adv_report_data[k + 2] == 0x01 && adv_report_data[k + 3] == CFG_DEV_ID_P2P_SERVER1)
 800bc24:	7cfb      	ldrb	r3, [r7, #19]
 800bc26:	2b06      	cmp	r3, #6
 800bc28:	d92a      	bls.n	800bc80 <SVCCTL_App_Notification+0x394>
 800bc2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc2c:	3302      	adds	r3, #2
 800bc2e:	697a      	ldr	r2, [r7, #20]
 800bc30:	4413      	add	r3, r2
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d123      	bne.n	800bc80 <SVCCTL_App_Notification+0x394>
 800bc38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc3a:	3303      	adds	r3, #3
 800bc3c:	697a      	ldr	r2, [r7, #20]
 800bc3e:	4413      	add	r3, r2
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	2b83      	cmp	r3, #131	@ 0x83
 800bc44:	d11c      	bne.n	800bc80 <SVCCTL_App_Notification+0x394>
                        aci_gap_terminate_gap_proc(0x02); // [STM] Stop scanning, adding code here considering STM32CubeMX
 800bc46:	2002      	movs	r0, #2
 800bc48:	f7fc ffcc 	bl	8008be4 <aci_gap_terminate_gap_proc>
                                        le_advertising_event->Advertising_Report[0].Address[5],
 800bc4c:	69fb      	ldr	r3, [r7, #28]
 800bc4e:	7a1b      	ldrb	r3, [r3, #8]
                        APP_DBG_MSG("Scanned device %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 800bc50:	4618      	mov	r0, r3
                                        le_advertising_event->Advertising_Report[0].Address[4],
 800bc52:	69fb      	ldr	r3, [r7, #28]
 800bc54:	79db      	ldrb	r3, [r3, #7]
                        APP_DBG_MSG("Scanned device %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 800bc56:	461c      	mov	r4, r3
                                        le_advertising_event->Advertising_Report[0].Address[3],
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	799b      	ldrb	r3, [r3, #6]
                        APP_DBG_MSG("Scanned device %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 800bc5c:	461d      	mov	r5, r3
                                        le_advertising_event->Advertising_Report[0].Address[2],
 800bc5e:	69fb      	ldr	r3, [r7, #28]
 800bc60:	795b      	ldrb	r3, [r3, #5]
                        APP_DBG_MSG("Scanned device %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 800bc62:	461a      	mov	r2, r3
                                        le_advertising_event->Advertising_Report[0].Address[1],
 800bc64:	69fb      	ldr	r3, [r7, #28]
 800bc66:	791b      	ldrb	r3, [r3, #4]
                        APP_DBG_MSG("Scanned device %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 800bc68:	4619      	mov	r1, r3
                                        le_advertising_event->Advertising_Report[0].Address[0]);
 800bc6a:	69fb      	ldr	r3, [r7, #28]
 800bc6c:	78db      	ldrb	r3, [r3, #3]
                        APP_DBG_MSG("Scanned device %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 800bc6e:	9302      	str	r3, [sp, #8]
 800bc70:	9101      	str	r1, [sp, #4]
 800bc72:	9200      	str	r2, [sp, #0]
 800bc74:	462b      	mov	r3, r5
 800bc76:	4622      	mov	r2, r4
 800bc78:	4601      	mov	r1, r0
 800bc7a:	482d      	ldr	r0, [pc, #180]	@ (800bd30 <SVCCTL_App_Notification+0x444>)
 800bc7c:	f001 febe 	bl	800d9fc <iprintf>
                      if (adlength >= 7 && adv_report_data[k + 2] == 0x01)
 800bc80:	7cfb      	ldrb	r3, [r7, #19]
 800bc82:	2b06      	cmp	r3, #6
 800bc84:	d93c      	bls.n	800bd00 <SVCCTL_App_Notification+0x414>
 800bc86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc88:	3302      	adds	r3, #2
 800bc8a:	697a      	ldr	r2, [r7, #20]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d135      	bne.n	800bd00 <SVCCTL_App_Notification+0x414>
                        APP_DBG_MSG("--- ST MANUFACTURER ID --- \n\r");
 800bc94:	4827      	ldr	r0, [pc, #156]	@ (800bd34 <SVCCTL_App_Notification+0x448>)
 800bc96:	f001 feb1 	bl	800d9fc <iprintf>
                        switch (adv_report_data[k + 3])
 800bc9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc9c:	3303      	adds	r3, #3
 800bc9e:	697a      	ldr	r2, [r7, #20]
 800bca0:	4413      	add	r3, r2
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	2b83      	cmp	r3, #131	@ 0x83
 800bca6:	d123      	bne.n	800bcf0 <SVCCTL_App_Notification+0x404>
                           APP_DBG_MSG("-- SERVER DETECTED -- VIA MAN ID\n\r");
 800bca8:	4823      	ldr	r0, [pc, #140]	@ (800bd38 <SVCCTL_App_Notification+0x44c>)
 800bcaa:	f001 fea7 	bl	800d9fc <iprintf>
                           BleApplicationContext.DeviceServerFound = 0x01;
 800bcae:	4b23      	ldr	r3, [pc, #140]	@ (800bd3c <SVCCTL_App_Notification+0x450>)
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
                           SERVER_REMOTE_ADDR_TYPE = le_advertising_event->Advertising_Report[0].Address_Type;
 800bcb6:	69fb      	ldr	r3, [r7, #28]
 800bcb8:	789a      	ldrb	r2, [r3, #2]
 800bcba:	4b21      	ldr	r3, [pc, #132]	@ (800bd40 <SVCCTL_App_Notification+0x454>)
 800bcbc:	701a      	strb	r2, [r3, #0]
                           SERVER_REMOTE_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 800bcbe:	69fb      	ldr	r3, [r7, #28]
 800bcc0:	78da      	ldrb	r2, [r3, #3]
 800bcc2:	4b20      	ldr	r3, [pc, #128]	@ (800bd44 <SVCCTL_App_Notification+0x458>)
 800bcc4:	701a      	strb	r2, [r3, #0]
                           SERVER_REMOTE_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 800bcc6:	69fb      	ldr	r3, [r7, #28]
 800bcc8:	791a      	ldrb	r2, [r3, #4]
 800bcca:	4b1e      	ldr	r3, [pc, #120]	@ (800bd44 <SVCCTL_App_Notification+0x458>)
 800bccc:	705a      	strb	r2, [r3, #1]
                           SERVER_REMOTE_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 800bcce:	69fb      	ldr	r3, [r7, #28]
 800bcd0:	795a      	ldrb	r2, [r3, #5]
 800bcd2:	4b1c      	ldr	r3, [pc, #112]	@ (800bd44 <SVCCTL_App_Notification+0x458>)
 800bcd4:	709a      	strb	r2, [r3, #2]
                           SERVER_REMOTE_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	799a      	ldrb	r2, [r3, #6]
 800bcda:	4b1a      	ldr	r3, [pc, #104]	@ (800bd44 <SVCCTL_App_Notification+0x458>)
 800bcdc:	70da      	strb	r2, [r3, #3]
                           SERVER_REMOTE_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 800bcde:	69fb      	ldr	r3, [r7, #28]
 800bce0:	79da      	ldrb	r2, [r3, #7]
 800bce2:	4b18      	ldr	r3, [pc, #96]	@ (800bd44 <SVCCTL_App_Notification+0x458>)
 800bce4:	711a      	strb	r2, [r3, #4]
                           SERVER_REMOTE_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 800bce6:	69fb      	ldr	r3, [r7, #28]
 800bce8:	7a1a      	ldrb	r2, [r3, #8]
 800bcea:	4b16      	ldr	r3, [pc, #88]	@ (800bd44 <SVCCTL_App_Notification+0x458>)
 800bcec:	715a      	strb	r2, [r3, #5]
                           break;
 800bcee:	e000      	b.n	800bcf2 <SVCCTL_App_Notification+0x406>
                            break;
 800bcf0:	bf00      	nop
                      break;
 800bcf2:	e005      	b.n	800bd00 <SVCCTL_App_Notification+0x414>
                      break;
 800bcf4:	bf00      	nop
 800bcf6:	e004      	b.n	800bd02 <SVCCTL_App_Notification+0x416>
                      break;
 800bcf8:	bf00      	nop
 800bcfa:	e002      	b.n	800bd02 <SVCCTL_App_Notification+0x416>
                      break;
 800bcfc:	bf00      	nop
 800bcfe:	e000      	b.n	800bd02 <SVCCTL_App_Notification+0x416>
                      break;
 800bd00:	bf00      	nop
                  k += adlength + 1;
 800bd02:	7cfb      	ldrb	r3, [r7, #19]
 800bd04:	3301      	adds	r3, #1
 800bd06:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bd08:	4413      	add	r3, r2
 800bd0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                while(k < event_data_size)
 800bd0c:	7ebb      	ldrb	r3, [r7, #26]
 800bd0e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bd10:	429a      	cmp	r2, r3
 800bd12:	f6ff af6f 	blt.w	800bbf4 <SVCCTL_App_Notification+0x308>
            break;
 800bd16:	e001      	b.n	800bd1c <SVCCTL_App_Notification+0x430>
            break;
 800bd18:	bf00      	nop
 800bd1a:	e004      	b.n	800bd26 <SVCCTL_App_Notification+0x43a>
            break;
 800bd1c:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800bd1e:	e002      	b.n	800bd26 <SVCCTL_App_Notification+0x43a>
      break;
 800bd20:	bf00      	nop
 800bd22:	e000      	b.n	800bd26 <SVCCTL_App_Notification+0x43a>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800bd24:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800bd26:	2301      	movs	r3, #1
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3744      	adds	r7, #68	@ 0x44
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd30:	0800f458 	.word	0x0800f458
 800bd34:	0800f488 	.word	0x0800f488
 800bd38:	0800f4a8 	.word	0x0800f4a8
 800bd3c:	2000148c 	.word	0x2000148c
 800bd40:	20001486 	.word	0x20001486
 800bd44:	20001480 	.word	0x20001480

0800bd48 <APP_BLE_Get_Client_Connection_Status>:

APP_BLE_ConnStatus_t APP_BLE_Get_Client_Connection_Status(uint16_t Connection_Handle)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b083      	sub	sp, #12
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	4603      	mov	r3, r0
 800bd50:	80fb      	strh	r3, [r7, #6]
  if (BleApplicationContext.BleApplicationContext_legacy.connectionHandle == Connection_Handle)
 800bd52:	4b08      	ldr	r3, [pc, #32]	@ (800bd74 <APP_BLE_Get_Client_Connection_Status+0x2c>)
 800bd54:	8adb      	ldrh	r3, [r3, #22]
 800bd56:	88fa      	ldrh	r2, [r7, #6]
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d103      	bne.n	800bd64 <APP_BLE_Get_Client_Connection_Status+0x1c>
  {
    return BleApplicationContext.Device_Connection_Status;
 800bd5c:	4b05      	ldr	r3, [pc, #20]	@ (800bd74 <APP_BLE_Get_Client_Connection_Status+0x2c>)
 800bd5e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bd62:	e000      	b.n	800bd66 <APP_BLE_Get_Client_Connection_Status+0x1e>
  }
  return APP_BLE_IDLE;
 800bd64:	2300      	movs	r3, #0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	370c      	adds	r7, #12
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr
 800bd72:	bf00      	nop
 800bd74:	2000148c 	.word	0x2000148c

0800bd78 <APP_BLE_Key_Button1_Action>:
/* USER CODE BEGIN FD */
void APP_BLE_Key_Button1_Action(void)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	af00      	add	r7, sp, #0
#if OOB_DEMO == 0 
  P2PC_APP_SW1_Button_Action();
#else 
  if(P2P_Client_APP_Get_State () != APP_BLE_CONNECTED_CLIENT)
 800bd7c:	f000 ff42 	bl	800cc04 <P2P_Client_APP_Get_State>
 800bd80:	4603      	mov	r3, r0
 800bd82:	2b06      	cmp	r3, #6
 800bd84:	d009      	beq.n	800bd9a <APP_BLE_Key_Button1_Action+0x22>
  {
    //UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0); [STM]
    UTIL_SEQ_SetTask(1 << CFG_TASK_SEND_OOB_DATA_ID, CFG_SCH_PRIO_0);
 800bd86:	2100      	movs	r1, #0
 800bd88:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800bd8c:	f001 fc38 	bl	800d600 <UTIL_SEQ_SetTask>
    HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_5);
 800bd90:	2120      	movs	r1, #32
 800bd92:	4806      	ldr	r0, [pc, #24]	@ (800bdac <APP_BLE_Key_Button1_Action+0x34>)
 800bd94:	f7f7 fd4a 	bl	800382c <HAL_GPIO_TogglePin>
  {
    P2PC_APP_SW1_Button_Action();
    HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_1);
  }   
#endif 
}
 800bd98:	e005      	b.n	800bda6 <APP_BLE_Key_Button1_Action+0x2e>
    P2PC_APP_SW1_Button_Action();
 800bd9a:	f000 fc1d 	bl	800c5d8 <P2PC_APP_SW1_Button_Action>
    HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_1);
 800bd9e:	2102      	movs	r1, #2
 800bda0:	4802      	ldr	r0, [pc, #8]	@ (800bdac <APP_BLE_Key_Button1_Action+0x34>)
 800bda2:	f7f7 fd43 	bl	800382c <HAL_GPIO_TogglePin>
}
 800bda6:	bf00      	nop
 800bda8:	bd80      	pop	{r7, pc}
 800bdaa:	bf00      	nop
 800bdac:	48000400 	.word	0x48000400

0800bdb0 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	af00      	add	r7, sp, #0
#if OOB_DEMO == 0
	UTIL_SEQ_SetTask(1<<CFG_TASK_SW2_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);;
#else
  if(P2P_Client_APP_Get_State () != APP_BLE_CONNECTED_CLIENT)
 800bdb4:	f000 ff26 	bl	800cc04 <P2P_Client_APP_Get_State>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	2b06      	cmp	r3, #6
 800bdbc:	d005      	beq.n	800bdca <APP_BLE_Key_Button2_Action+0x1a>
  {
    //UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0); [STM]
    UTIL_SEQ_SetTask(1 << CFG_TASK_SEND_OOB_DATA_ID, CFG_SCH_PRIO_0);
 800bdbe:	2100      	movs	r1, #0
 800bdc0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800bdc4:	f001 fc1c 	bl	800d600 <UTIL_SEQ_SetTask>
	  UTIL_SEQ_SetTask(1<<CFG_TASK_SW2_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
  }
#endif


}
 800bdc8:	e003      	b.n	800bdd2 <APP_BLE_Key_Button2_Action+0x22>
	  UTIL_SEQ_SetTask(1<<CFG_TASK_SW2_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800bdca:	2100      	movs	r1, #0
 800bdcc:	2040      	movs	r0, #64	@ 0x40
 800bdce:	f001 fc17 	bl	800d600 <UTIL_SEQ_SetTask>
}
 800bdd2:	bf00      	nop
 800bdd4:	bd80      	pop	{r7, pc}
	...

0800bdd8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800bdde:	4b06      	ldr	r3, [pc, #24]	@ (800bdf8 <Ble_Tl_Init+0x20>)
 800bde0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800bde2:	4b06      	ldr	r3, [pc, #24]	@ (800bdfc <Ble_Tl_Init+0x24>)
 800bde4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800bde6:	463b      	mov	r3, r7
 800bde8:	4619      	mov	r1, r3
 800bdea:	4805      	ldr	r0, [pc, #20]	@ (800be00 <Ble_Tl_Init+0x28>)
 800bdec:	f7fe f952 	bl	800a094 <hci_init>

  return;
 800bdf0:	bf00      	nop
}
 800bdf2:	3708      	adds	r7, #8
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	200300d8 	.word	0x200300d8
 800bdfc:	0800c2d9 	.word	0x0800c2d9
 800be00:	0800c2a1 	.word	0x0800c2a1

0800be04 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800be04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be06:	b08d      	sub	sp, #52	@ 0x34
 800be08:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 800be0a:	2300      	movs	r3, #0
 800be0c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800be0e:	2392      	movs	r3, #146	@ 0x92
 800be10:	75fb      	strb	r3, [r7, #23]

  APP_DBG_MSG("Start Ble_Hci_Gap_Gatt_Init function\n\r");
 800be12:	4889      	ldr	r0, [pc, #548]	@ (800c038 <Ble_Hci_Gap_Gatt_Init+0x234>)
 800be14:	f001 fdf2 	bl	800d9fc <iprintf>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800be18:	f7fd fd87 	bl	800992a <hci_reset>
 800be1c:	4603      	mov	r3, r0
 800be1e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800be20:	7dfb      	ldrb	r3, [r7, #23]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d005      	beq.n	800be32 <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n\r", ret);
 800be26:	7dfb      	ldrb	r3, [r7, #23]
 800be28:	4619      	mov	r1, r3
 800be2a:	4884      	ldr	r0, [pc, #528]	@ (800c03c <Ble_Hci_Gap_Gatt_Init+0x238>)
 800be2c:	f001 fde6 	bl	800d9fc <iprintf>
 800be30:	e002      	b.n	800be38 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n\r");
 800be32:	4883      	ldr	r0, [pc, #524]	@ (800c040 <Ble_Hci_Gap_Gatt_Init+0x23c>)
 800be34:	f001 fde2 	bl	800d9fc <iprintf>
  }

 /**
   * Write the BD Address
   */
   bd_addr = BleGetBdAddress();
 800be38:	f000 f9b0 	bl	800c19c <BleGetBdAddress>
 800be3c:	6138      	str	r0, [r7, #16]
   ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800be3e:	693a      	ldr	r2, [r7, #16]
 800be40:	2106      	movs	r1, #6
 800be42:	2000      	movs	r0, #0
 800be44:	f7fd fc31 	bl	80096aa <aci_hal_write_config_data>
 800be48:	4603      	mov	r3, r0
 800be4a:	75fb      	strb	r3, [r7, #23]
                                  CONFIG_DATA_PUBADDR_LEN,
                                  (uint8_t*) bd_addr);

   if (ret != BLE_STATUS_SUCCESS)
 800be4c:	7dfb      	ldrb	r3, [r7, #23]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d005      	beq.n	800be5e <Ble_Hci_Gap_Gatt_Init+0x5a>
   {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command, result: 0x%x \n\r", ret);
 800be52:	7dfb      	ldrb	r3, [r7, #23]
 800be54:	4619      	mov	r1, r3
 800be56:	487b      	ldr	r0, [pc, #492]	@ (800c044 <Ble_Hci_Gap_Gatt_Init+0x240>)
 800be58:	f001 fdd0 	bl	800d9fc <iprintf>
 800be5c:	e002      	b.n	800be64 <Ble_Hci_Gap_Gatt_Init+0x60>
   }
   else
   {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command\n\r");
 800be5e:	487a      	ldr	r0, [pc, #488]	@ (800c048 <Ble_Hci_Gap_Gatt_Init+0x244>)
 800be60:	f001 fdcc 	bl	800d9fc <iprintf>
   }

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE);
 800be64:	4a79      	ldr	r2, [pc, #484]	@ (800c04c <Ble_Hci_Gap_Gatt_Init+0x248>)
 800be66:	2110      	movs	r1, #16
 800be68:	2018      	movs	r0, #24
 800be6a:	f7fd fc1e 	bl	80096aa <aci_hal_write_config_data>
 800be6e:	4603      	mov	r3, r0
 800be70:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800be72:	7dfb      	ldrb	r3, [r7, #23]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d005      	beq.n	800be84 <Ble_Hci_Gap_Gatt_Init+0x80>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command, result: 0x%x \n\r", ret);
 800be78:	7dfb      	ldrb	r3, [r7, #23]
 800be7a:	4619      	mov	r1, r3
 800be7c:	4871      	ldr	r0, [pc, #452]	@ (800c044 <Ble_Hci_Gap_Gatt_Init+0x240>)
 800be7e:	f001 fdbd 	bl	800d9fc <iprintf>
 800be82:	e002      	b.n	800be8a <Ble_Hci_Gap_Gatt_Init+0x86>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command\n\r");
 800be84:	4870      	ldr	r0, [pc, #448]	@ (800c048 <Ble_Hci_Gap_Gatt_Init+0x244>)
 800be86:	f001 fdb9 	bl	800d9fc <iprintf>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE);
 800be8a:	4a71      	ldr	r2, [pc, #452]	@ (800c050 <Ble_Hci_Gap_Gatt_Init+0x24c>)
 800be8c:	2110      	movs	r1, #16
 800be8e:	2008      	movs	r0, #8
 800be90:	f7fd fc0b 	bl	80096aa <aci_hal_write_config_data>
 800be94:	4603      	mov	r3, r0
 800be96:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800be98:	7dfb      	ldrb	r3, [r7, #23]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d005      	beq.n	800beaa <Ble_Hci_Gap_Gatt_Init+0xa6>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command, result: 0x%x \n\r", ret);
 800be9e:	7dfb      	ldrb	r3, [r7, #23]
 800bea0:	4619      	mov	r1, r3
 800bea2:	4868      	ldr	r0, [pc, #416]	@ (800c044 <Ble_Hci_Gap_Gatt_Init+0x240>)
 800bea4:	f001 fdaa 	bl	800d9fc <iprintf>
 800bea8:	e002      	b.n	800beb0 <Ble_Hci_Gap_Gatt_Init+0xac>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command\n\r");
 800beaa:	4867      	ldr	r0, [pc, #412]	@ (800c048 <Ble_Hci_Gap_Gatt_Init+0x244>)
 800beac:	f001 fda6 	bl	800d9fc <iprintf>
  }

  /**
   * Set TX Power to 0dBm.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800beb0:	2118      	movs	r1, #24
 800beb2:	2001      	movs	r0, #1
 800beb4:	f7fd fc7e 	bl	80097b4 <aci_hal_set_tx_power_level>
 800beb8:	4603      	mov	r3, r0
 800beba:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800bebc:	7dfb      	ldrb	r3, [r7, #23]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d005      	beq.n	800bece <Ble_Hci_Gap_Gatt_Init+0xca>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n\r", ret);
 800bec2:	7dfb      	ldrb	r3, [r7, #23]
 800bec4:	4619      	mov	r1, r3
 800bec6:	4863      	ldr	r0, [pc, #396]	@ (800c054 <Ble_Hci_Gap_Gatt_Init+0x250>)
 800bec8:	f001 fd98 	bl	800d9fc <iprintf>
 800becc:	e002      	b.n	800bed4 <Ble_Hci_Gap_Gatt_Init+0xd0>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n\r");
 800bece:	4862      	ldr	r0, [pc, #392]	@ (800c058 <Ble_Hci_Gap_Gatt_Init+0x254>)
 800bed0:	f001 fd94 	bl	800d9fc <iprintf>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800bed4:	f7fd f886 	bl	8008fe4 <aci_gatt_init>
 800bed8:	4603      	mov	r3, r0
 800beda:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800bedc:	7dfb      	ldrb	r3, [r7, #23]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d005      	beq.n	800beee <Ble_Hci_Gap_Gatt_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n\r", ret);
 800bee2:	7dfb      	ldrb	r3, [r7, #23]
 800bee4:	4619      	mov	r1, r3
 800bee6:	485d      	ldr	r0, [pc, #372]	@ (800c05c <Ble_Hci_Gap_Gatt_Init+0x258>)
 800bee8:	f001 fd88 	bl	800d9fc <iprintf>
 800beec:	e002      	b.n	800bef4 <Ble_Hci_Gap_Gatt_Init+0xf0>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n\r");
 800beee:	485c      	ldr	r0, [pc, #368]	@ (800c060 <Ble_Hci_Gap_Gatt_Init+0x25c>)
 800bef0:	f001 fd84 	bl	800d9fc <iprintf>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800bef4:	2300      	movs	r3, #0
 800bef6:	73fb      	strb	r3, [r7, #15]
#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
#endif

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
 800bef8:	7bfb      	ldrb	r3, [r7, #15]
 800befa:	f043 0304 	orr.w	r3, r3, #4
 800befe:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800bf00:	7bfb      	ldrb	r3, [r7, #15]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d029      	beq.n	800bf5a <Ble_Hci_Gap_Gatt_Init+0x156>
  {
    const char *name = "P2P_C";
 800bf06:	4b57      	ldr	r3, [pc, #348]	@ (800c064 <Ble_Hci_Gap_Gatt_Init+0x260>)
 800bf08:	60bb      	str	r3, [r7, #8]

    ret = aci_gap_init(role,
 800bf0a:	1dba      	adds	r2, r7, #6
 800bf0c:	7bf8      	ldrb	r0, [r7, #15]
 800bf0e:	1cbb      	adds	r3, r7, #2
 800bf10:	9301      	str	r3, [sp, #4]
 800bf12:	1d3b      	adds	r3, r7, #4
 800bf14:	9300      	str	r3, [sp, #0]
 800bf16:	4613      	mov	r3, r2
 800bf18:	2207      	movs	r2, #7
 800bf1a:	2100      	movs	r1, #0
 800bf1c:	f7fc fc22 	bl	8008764 <aci_gap_init>
 800bf20:	4603      	mov	r3, r0
 800bf22:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800bf24:	7dfb      	ldrb	r3, [r7, #23]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d005      	beq.n	800bf36 <Ble_Hci_Gap_Gatt_Init+0x132>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n\r", ret);
 800bf2a:	7dfb      	ldrb	r3, [r7, #23]
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	484e      	ldr	r0, [pc, #312]	@ (800c068 <Ble_Hci_Gap_Gatt_Init+0x264>)
 800bf30:	f001 fd64 	bl	800d9fc <iprintf>
 800bf34:	e002      	b.n	800bf3c <Ble_Hci_Gap_Gatt_Init+0x138>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n\r");
 800bf36:	484d      	ldr	r0, [pc, #308]	@ (800c06c <Ble_Hci_Gap_Gatt_Init+0x268>)
 800bf38:	f001 fd60 	bl	800d9fc <iprintf>
    }

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800bf3c:	88fc      	ldrh	r4, [r7, #6]
 800bf3e:	88bd      	ldrh	r5, [r7, #4]
 800bf40:	68b8      	ldr	r0, [r7, #8]
 800bf42:	f7f4 f91d 	bl	8000180 <strlen>
 800bf46:	4603      	mov	r3, r0
 800bf48:	b2da      	uxtb	r2, r3
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	9300      	str	r3, [sp, #0]
 800bf4e:	4613      	mov	r3, r2
 800bf50:	2200      	movs	r2, #0
 800bf52:	4629      	mov	r1, r5
 800bf54:	4620      	mov	r0, r4
 800bf56:	f7fd f86a 	bl	800902e <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n\r");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800bf5a:	88f8      	ldrh	r0, [r7, #6]
 800bf5c:	8879      	ldrh	r1, [r7, #2]
 800bf5e:	463b      	mov	r3, r7
 800bf60:	9300      	str	r3, [sp, #0]
 800bf62:	2302      	movs	r3, #2
 800bf64:	2200      	movs	r2, #0
 800bf66:	f7fd f862 	bl	800902e <aci_gatt_update_char_value>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800bf6a:	4b41      	ldr	r3, [pc, #260]	@ (800c070 <Ble_Hci_Gap_Gatt_Init+0x26c>)
 800bf6c:	2204      	movs	r2, #4
 800bf6e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800bf70:	4b3f      	ldr	r3, [pc, #252]	@ (800c070 <Ble_Hci_Gap_Gatt_Init+0x26c>)
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	4618      	mov	r0, r3
 800bf76:	f7fc fadd 	bl	8008534 <aci_gap_set_io_capability>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800bf7e:	7dfb      	ldrb	r3, [r7, #23]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d005      	beq.n	800bf90 <Ble_Hci_Gap_Gatt_Init+0x18c>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n\r", ret);
 800bf84:	7dfb      	ldrb	r3, [r7, #23]
 800bf86:	4619      	mov	r1, r3
 800bf88:	483a      	ldr	r0, [pc, #232]	@ (800c074 <Ble_Hci_Gap_Gatt_Init+0x270>)
 800bf8a:	f001 fd37 	bl	800d9fc <iprintf>
 800bf8e:	e002      	b.n	800bf96 <Ble_Hci_Gap_Gatt_Init+0x192>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n\r");
 800bf90:	4839      	ldr	r0, [pc, #228]	@ (800c078 <Ble_Hci_Gap_Gatt_Init+0x274>)
 800bf92:	f001 fd33 	bl	800d9fc <iprintf>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800bf96:	4b36      	ldr	r3, [pc, #216]	@ (800c070 <Ble_Hci_Gap_Gatt_Init+0x26c>)
 800bf98:	2201      	movs	r2, #1
 800bf9a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800bf9c:	4b34      	ldr	r3, [pc, #208]	@ (800c070 <Ble_Hci_Gap_Gatt_Init+0x26c>)
 800bf9e:	2208      	movs	r2, #8
 800bfa0:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800bfa2:	4b33      	ldr	r3, [pc, #204]	@ (800c070 <Ble_Hci_Gap_Gatt_Init+0x26c>)
 800bfa4:	2210      	movs	r2, #16
 800bfa6:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800bfa8:	4b31      	ldr	r3, [pc, #196]	@ (800c070 <Ble_Hci_Gap_Gatt_Init+0x26c>)
 800bfaa:	2201      	movs	r2, #1
 800bfac:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800bfae:	4b30      	ldr	r3, [pc, #192]	@ (800c070 <Ble_Hci_Gap_Gatt_Init+0x26c>)
 800bfb0:	4a32      	ldr	r2, [pc, #200]	@ (800c07c <Ble_Hci_Gap_Gatt_Init+0x278>)
 800bfb2:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800bfb4:	4b2e      	ldr	r3, [pc, #184]	@ (800c070 <Ble_Hci_Gap_Gatt_Init+0x26c>)
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	709a      	strb	r2, [r3, #2]

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800bfba:	4b2d      	ldr	r3, [pc, #180]	@ (800c070 <Ble_Hci_Gap_Gatt_Init+0x26c>)
 800bfbc:	789c      	ldrb	r4, [r3, #2]
 800bfbe:	4b2c      	ldr	r3, [pc, #176]	@ (800c070 <Ble_Hci_Gap_Gatt_Init+0x26c>)
 800bfc0:	785d      	ldrb	r5, [r3, #1]
 800bfc2:	4b2b      	ldr	r3, [pc, #172]	@ (800c070 <Ble_Hci_Gap_Gatt_Init+0x26c>)
 800bfc4:	791b      	ldrb	r3, [r3, #4]
 800bfc6:	4a2a      	ldr	r2, [pc, #168]	@ (800c070 <Ble_Hci_Gap_Gatt_Init+0x26c>)
 800bfc8:	7952      	ldrb	r2, [r2, #5]
 800bfca:	4929      	ldr	r1, [pc, #164]	@ (800c070 <Ble_Hci_Gap_Gatt_Init+0x26c>)
 800bfcc:	78c9      	ldrb	r1, [r1, #3]
 800bfce:	4828      	ldr	r0, [pc, #160]	@ (800c070 <Ble_Hci_Gap_Gatt_Init+0x26c>)
 800bfd0:	6880      	ldr	r0, [r0, #8]
 800bfd2:	2600      	movs	r6, #0
 800bfd4:	9604      	str	r6, [sp, #16]
 800bfd6:	9003      	str	r0, [sp, #12]
 800bfd8:	9102      	str	r1, [sp, #8]
 800bfda:	9201      	str	r2, [sp, #4]
 800bfdc:	9300      	str	r3, [sp, #0]
 800bfde:	2300      	movs	r3, #0
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	4629      	mov	r1, r5
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	f7fc faf9 	bl	80085dc <aci_gap_set_authentication_requirement>
 800bfea:	4603      	mov	r3, r0
 800bfec:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);

  if (ret != BLE_STATUS_SUCCESS)
 800bfee:	7dfb      	ldrb	r3, [r7, #23]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d005      	beq.n	800c000 <Ble_Hci_Gap_Gatt_Init+0x1fc>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n\r", ret);
 800bff4:	7dfb      	ldrb	r3, [r7, #23]
 800bff6:	4619      	mov	r1, r3
 800bff8:	4821      	ldr	r0, [pc, #132]	@ (800c080 <Ble_Hci_Gap_Gatt_Init+0x27c>)
 800bffa:	f001 fcff 	bl	800d9fc <iprintf>
 800bffe:	e002      	b.n	800c006 <Ble_Hci_Gap_Gatt_Init+0x202>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n\r");
 800c000:	4820      	ldr	r0, [pc, #128]	@ (800c084 <Ble_Hci_Gap_Gatt_Init+0x280>)
 800c002:	f001 fcfb 	bl	800d9fc <iprintf>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800c006:	4b1a      	ldr	r3, [pc, #104]	@ (800c070 <Ble_Hci_Gap_Gatt_Init+0x26c>)
 800c008:	789b      	ldrb	r3, [r3, #2]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00f      	beq.n	800c02e <Ble_Hci_Gap_Gatt_Init+0x22a>
  {
    ret = aci_gap_configure_whitelist();
 800c00e:	f7fc fc56 	bl	80088be <aci_gap_configure_whitelist>
 800c012:	4603      	mov	r3, r0
 800c014:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800c016:	7dfb      	ldrb	r3, [r7, #23]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d005      	beq.n	800c028 <Ble_Hci_Gap_Gatt_Init+0x224>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n\r", ret);
 800c01c:	7dfb      	ldrb	r3, [r7, #23]
 800c01e:	4619      	mov	r1, r3
 800c020:	4819      	ldr	r0, [pc, #100]	@ (800c088 <Ble_Hci_Gap_Gatt_Init+0x284>)
 800c022:	f001 fceb 	bl	800d9fc <iprintf>
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n\r");
    }
  }
}
 800c026:	e002      	b.n	800c02e <Ble_Hci_Gap_Gatt_Init+0x22a>
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n\r");
 800c028:	4818      	ldr	r0, [pc, #96]	@ (800c08c <Ble_Hci_Gap_Gatt_Init+0x288>)
 800c02a:	f001 fce7 	bl	800d9fc <iprintf>
}
 800c02e:	bf00      	nop
 800c030:	371c      	adds	r7, #28
 800c032:	46bd      	mov	sp, r7
 800c034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c036:	bf00      	nop
 800c038:	0800f4f8 	.word	0x0800f4f8
 800c03c:	0800f520 	.word	0x0800f520
 800c040:	0800f550 	.word	0x0800f550
 800c044:	0800f570 	.word	0x0800f570
 800c048:	0800f5b0 	.word	0x0800f5b0
 800c04c:	0800ffc0 	.word	0x0800ffc0
 800c050:	0800ffd0 	.word	0x0800ffd0
 800c054:	0800f5e0 	.word	0x0800f5e0
 800c058:	0800f620 	.word	0x0800f620
 800c05c:	0800f650 	.word	0x0800f650
 800c060:	0800f684 	.word	0x0800f684
 800c064:	0800f6a8 	.word	0x0800f6a8
 800c068:	0800f6b0 	.word	0x0800f6b0
 800c06c:	0800f6e4 	.word	0x0800f6e4
 800c070:	2000148c 	.word	0x2000148c
 800c074:	0800f708 	.word	0x0800f708
 800c078:	0800f748 	.word	0x0800f748
 800c07c:	0001b207 	.word	0x0001b207
 800c080:	0800f778 	.word	0x0800f778
 800c084:	0800f7c4 	.word	0x0800f7c4
 800c088:	0800f800 	.word	0x0800f800
 800c08c:	0800f840 	.word	0x0800f840

0800c090 <Scan_Request>:

static void Scan_Request(void)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Scan_Request_1 */

  /* USER CODE END Scan_Request_1 */
  tBleStatus result;
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800c096:	4b14      	ldr	r3, [pc, #80]	@ (800c0e8 <Scan_Request+0x58>)
 800c098:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c09c:	2b06      	cmp	r3, #6
 800c09e:	d01e      	beq.n	800c0de <Scan_Request+0x4e>
  {
    /* USER CODE BEGIN APP_BLE_CONNECTED_CLIENT */
    HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	2120      	movs	r1, #32
 800c0a4:	4811      	ldr	r0, [pc, #68]	@ (800c0ec <Scan_Request+0x5c>)
 800c0a6:	f7f7 fba9 	bl	80037fc <HAL_GPIO_WritePin>
    /* USER CODE END APP_BLE_CONNECTED_CLIENT */
    result = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, CFG_BLE_ADDRESS_TYPE, 1);
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800c0b2:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800c0b6:	f7fc fc26 	bl	8008906 <aci_gap_start_general_discovery_proc>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	71fb      	strb	r3, [r7, #7]
    if (result == BLE_STATUS_SUCCESS)
 800c0be:	79fb      	ldrb	r3, [r7, #7]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d103      	bne.n	800c0cc <Scan_Request+0x3c>
    {
    /* USER CODE BEGIN BLE_SCAN_SUCCESS */
      
    /* USER CODE END BLE_SCAN_SUCCESS */
      APP_DBG_MSG(" \r\n\r** START GENERAL DISCOVERY (SCAN) **  \r\n\r");
 800c0c4:	480a      	ldr	r0, [pc, #40]	@ (800c0f0 <Scan_Request+0x60>)
 800c0c6:	f001 fc99 	bl	800d9fc <iprintf>
    }
  }
  /* USER CODE BEGIN Scan_Request_2 */
  
  /* USER CODE END Scan_Request_2 */
  return;
 800c0ca:	e008      	b.n	800c0de <Scan_Request+0x4e>
      HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	2102      	movs	r1, #2
 800c0d0:	4806      	ldr	r0, [pc, #24]	@ (800c0ec <Scan_Request+0x5c>)
 800c0d2:	f7f7 fb93 	bl	80037fc <HAL_GPIO_WritePin>
      APP_DBG_MSG("-- BLE_App_Start_Limited_Disc_Req, Failed \r\n\r");
 800c0d6:	4807      	ldr	r0, [pc, #28]	@ (800c0f4 <Scan_Request+0x64>)
 800c0d8:	f001 fc90 	bl	800d9fc <iprintf>
  return;
 800c0dc:	bf00      	nop
 800c0de:	bf00      	nop
}
 800c0e0:	3708      	adds	r7, #8
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	2000148c 	.word	0x2000148c
 800c0ec:	48000400 	.word	0x48000400
 800c0f0:	0800f874 	.word	0x0800f874
 800c0f4:	0800f8a4 	.word	0x0800f8a4

0800c0f8 <Connect_Request>:

static void Connect_Request(void)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b08a      	sub	sp, #40	@ 0x28
 800c0fc:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Connect_Request_1 */

  /* USER CODE END Connect_Request_1 */
  tBleStatus result;

  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO SERVER **  \r\n\r");
 800c0fe:	481c      	ldr	r0, [pc, #112]	@ (800c170 <Connect_Request+0x78>)
 800c100:	f001 fc7c 	bl	800d9fc <iprintf>

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800c104:	4b1b      	ldr	r3, [pc, #108]	@ (800c174 <Connect_Request+0x7c>)
 800c106:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c10a:	2b06      	cmp	r3, #6
 800c10c:	d02b      	beq.n	800c166 <Connect_Request+0x6e>
  {
    result = aci_gap_create_connection(SCAN_P,
 800c10e:	4b1a      	ldr	r3, [pc, #104]	@ (800c178 <Connect_Request+0x80>)
 800c110:	781a      	ldrb	r2, [r3, #0]
 800c112:	2310      	movs	r3, #16
 800c114:	9306      	str	r3, [sp, #24]
 800c116:	2310      	movs	r3, #16
 800c118:	9305      	str	r3, [sp, #20]
 800c11a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800c11e:	9304      	str	r3, [sp, #16]
 800c120:	2300      	movs	r3, #0
 800c122:	9303      	str	r3, [sp, #12]
 800c124:	2350      	movs	r3, #80	@ 0x50
 800c126:	9302      	str	r3, [sp, #8]
 800c128:	2328      	movs	r3, #40	@ 0x28
 800c12a:	9301      	str	r3, [sp, #4]
 800c12c:	2300      	movs	r3, #0
 800c12e:	9300      	str	r3, [sp, #0]
 800c130:	4b12      	ldr	r3, [pc, #72]	@ (800c17c <Connect_Request+0x84>)
 800c132:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800c136:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800c13a:	f7fc fc78 	bl	8008a2e <aci_gap_create_connection>
 800c13e:	4603      	mov	r3, r0
 800c140:	71fb      	strb	r3, [r7, #7]
                                       0,
                                       SUPERV_TIMEOUT,
                                       CONN_L1,
                                       CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 800c142:	79fb      	ldrb	r3, [r7, #7]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d104      	bne.n	800c152 <Connect_Request+0x5a>
    {
      /* USER CODE BEGIN BLE_CONNECT_SUCCESS */

      /* USER CODE END BLE_CONNECT_SUCCESS */
      BleApplicationContext.Device_Connection_Status = APP_BLE_LP_CONNECTING;
 800c148:	4b0a      	ldr	r3, [pc, #40]	@ (800c174 <Connect_Request+0x7c>)
 800c14a:	2204      	movs	r2, #4
 800c14c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    }
  }
  /* USER CODE BEGIN Connect_Request_2 */

  /* USER CODE END Connect_Request_2 */
  return;
 800c150:	e009      	b.n	800c166 <Connect_Request+0x6e>
      HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800c152:	2201      	movs	r2, #1
 800c154:	2102      	movs	r1, #2
 800c156:	480a      	ldr	r0, [pc, #40]	@ (800c180 <Connect_Request+0x88>)
 800c158:	f7f7 fb50 	bl	80037fc <HAL_GPIO_WritePin>
      BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c15c:	4b05      	ldr	r3, [pc, #20]	@ (800c174 <Connect_Request+0x7c>)
 800c15e:	2200      	movs	r2, #0
 800c160:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  return;
 800c164:	bf00      	nop
 800c166:	bf00      	nop
}
 800c168:	3708      	adds	r7, #8
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop
 800c170:	0800f8d4 	.word	0x0800f8d4
 800c174:	2000148c 	.word	0x2000148c
 800c178:	20001486 	.word	0x20001486
 800c17c:	20001480 	.word	0x20001480
 800c180:	48000400 	.word	0x48000400

0800c184 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 800c184:	b580      	push	{r7, lr}
 800c186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800c188:	2200      	movs	r2, #0
 800c18a:	2101      	movs	r1, #1
 800c18c:	4802      	ldr	r0, [pc, #8]	@ (800c198 <Switch_OFF_GPIO+0x14>)
 800c18e:	f7f7 fb35 	bl	80037fc <HAL_GPIO_WritePin>
  /* USER CODE END Switch_OFF_GPIO */
}
 800c192:	bf00      	nop
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	48000400 	.word	0x48000400

0800c19c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b086      	sub	sp, #24
 800c1a0:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800c1a2:	f7ff fa21 	bl	800b5e8 <LL_FLASH_GetUDN>
 800c1a6:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c1ae:	d023      	beq.n	800c1f8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800c1b0:	f7ff fa32 	bl	800b618 <LL_FLASH_GetSTCompanyID>
 800c1b4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800c1b6:	f7ff fa23 	bl	800b600 <LL_FLASH_GetDeviceID>
 800c1ba:	6078      	str	r0, [r7, #4]
   * bit[23:16] : Device ID.
   * bit[15:0] : The last 16bits from the UDN
   * Note: In order to use the Public Address in a final product, a dedicated
   * 24bits company ID (OUI) shall be bought.
   */
   bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	b2da      	uxtb	r2, r3
 800c1c0:	4b16      	ldr	r3, [pc, #88]	@ (800c21c <BleGetBdAddress+0x80>)
 800c1c2:	701a      	strb	r2, [r3, #0]
   bd_addr_udn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	0a1b      	lsrs	r3, r3, #8
 800c1c8:	b2da      	uxtb	r2, r3
 800c1ca:	4b14      	ldr	r3, [pc, #80]	@ (800c21c <BleGetBdAddress+0x80>)
 800c1cc:	705a      	strb	r2, [r3, #1]
   bd_addr_udn[2] = (uint8_t)device_id;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	b2da      	uxtb	r2, r3
 800c1d2:	4b12      	ldr	r3, [pc, #72]	@ (800c21c <BleGetBdAddress+0x80>)
 800c1d4:	709a      	strb	r2, [r3, #2]
   bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	b2da      	uxtb	r2, r3
 800c1da:	4b10      	ldr	r3, [pc, #64]	@ (800c21c <BleGetBdAddress+0x80>)
 800c1dc:	70da      	strb	r2, [r3, #3]
   bd_addr_udn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	0a1b      	lsrs	r3, r3, #8
 800c1e2:	b2da      	uxtb	r2, r3
 800c1e4:	4b0d      	ldr	r3, [pc, #52]	@ (800c21c <BleGetBdAddress+0x80>)
 800c1e6:	711a      	strb	r2, [r3, #4]
   bd_addr_udn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	0c1b      	lsrs	r3, r3, #16
 800c1ec:	b2da      	uxtb	r2, r3
 800c1ee:	4b0b      	ldr	r3, [pc, #44]	@ (800c21c <BleGetBdAddress+0x80>)
 800c1f0:	715a      	strb	r2, [r3, #5]

   bd_addr = (const uint8_t *)bd_addr_udn;
 800c1f2:	4b0a      	ldr	r3, [pc, #40]	@ (800c21c <BleGetBdAddress+0x80>)
 800c1f4:	617b      	str	r3, [r7, #20]
 800c1f6:	e00b      	b.n	800c210 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800c1f8:	2000      	movs	r0, #0
 800c1fa:	f7fe fd13 	bl	800ac24 <OTP_Read>
 800c1fe:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d002      	beq.n	800c20c <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	617b      	str	r3, [r7, #20]
 800c20a:	e001      	b.n	800c210 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800c20c:	4b04      	ldr	r3, [pc, #16]	@ (800c220 <BleGetBdAddress+0x84>)
 800c20e:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 800c210:	697b      	ldr	r3, [r7, #20]
}
 800c212:	4618      	mov	r0, r3
 800c214:	3718      	adds	r7, #24
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
 800c21a:	bf00      	nop
 800c21c:	20001478 	.word	0x20001478
 800c220:	0800ffb8 	.word	0x0800ffb8

0800c224 <send_oob_data>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void send_oob_data(void)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_UART_Transmit(&hlpuart1, (uint8_t *)&m_oob_uart_data, sizeof(m_oob_uart_data), 1000);
 800c22a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c22e:	2218      	movs	r2, #24
 800c230:	4907      	ldr	r1, [pc, #28]	@ (800c250 <send_oob_data+0x2c>)
 800c232:	4808      	ldr	r0, [pc, #32]	@ (800c254 <send_oob_data+0x30>)
 800c234:	f7fa f820 	bl	8006278 <HAL_UART_Transmit>
 800c238:	4603      	mov	r3, r0
 800c23a:	71fb      	strb	r3, [r7, #7]
  
  APP_DBG_MSG("<<== BLE Client OOB data - UART TX to BLE server status = 0x%02X\r\n\r\n", status);
 800c23c:	79fb      	ldrb	r3, [r7, #7]
 800c23e:	4619      	mov	r1, r3
 800c240:	4805      	ldr	r0, [pc, #20]	@ (800c258 <send_oob_data+0x34>)
 800c242:	f001 fbdb 	bl	800d9fc <iprintf>
  
  //UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0); // [STM] Do not scan
}
 800c246:	bf00      	nop
 800c248:	3708      	adds	r7, #8
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	2000151c 	.word	0x2000151c
 800c254:	200001ec 	.word	0x200001ec
 800c258:	0800f900 	.word	0x0800f900

0800c25c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800c264:	2100      	movs	r1, #0
 800c266:	2010      	movs	r0, #16
 800c268:	f001 f9ca 	bl	800d600 <UTIL_SEQ_SetTask>
  return;
 800c26c:	bf00      	nop
}
 800c26e:	3708      	adds	r7, #8
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}

0800c274 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b082      	sub	sp, #8
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c27c:	2001      	movs	r0, #1
 800c27e:	f001 fa2b 	bl	800d6d8 <UTIL_SEQ_SetEvt>
  return;
 800c282:	bf00      	nop
}
 800c284:	3708      	adds	r7, #8
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}

0800c28a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800c28a:	b580      	push	{r7, lr}
 800c28c:	b082      	sub	sp, #8
 800c28e:	af00      	add	r7, sp, #0
 800c290:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c292:	2001      	movs	r0, #1
 800c294:	f001 fa40 	bl	800d718 <UTIL_SEQ_WaitEvt>
  return;
 800c298:	bf00      	nop
}
 800c29a:	3708      	adds	r7, #8
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void * pPayload)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	685b      	ldr	r3, [r3, #4]
 800c2b0:	3308      	adds	r3, #8
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7fd fd8c 	bl	8009dd0 <SVCCTL_UserEvtRx>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800c2bc:	7afb      	ldrb	r3, [r7, #11]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d003      	beq.n	800c2ca <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800c2c8:	e003      	b.n	800c2d2 <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	701a      	strb	r2, [r3, #0]
  return;
 800c2d0:	bf00      	nop
}
 800c2d2:	3710      	adds	r7, #16
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t status)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	4603      	mov	r3, r0
 800c2e0:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800c2e2:	79fb      	ldrb	r3, [r7, #7]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d002      	beq.n	800c2ee <BLE_StatusNot+0x16>
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d007      	beq.n	800c2fc <BLE_StatusNot+0x24>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      UTIL_SEQ_ResumeTask(task_id_list);
      break;

    default:
      break;
 800c2ec:	e00d      	b.n	800c30a <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800c2ee:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800c2f2:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800c2f4:	68f8      	ldr	r0, [r7, #12]
 800c2f6:	f001 f9af 	bl	800d658 <UTIL_SEQ_PauseTask>
      break;
 800c2fa:	e006      	b.n	800c30a <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800c2fc:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800c300:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800c302:	68f8      	ldr	r0, [r7, #12]
 800c304:	f001 f9c8 	bl	800d698 <UTIL_SEQ_ResumeTask>
      break;
 800c308:	bf00      	nop
  }
  return;
 800c30a:	bf00      	nop
}
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
	...

0800c314 <APP_BLE_set_oob>:
  * @brief  Run OOB process, set the OOB data arrived via OOB communication (which is UART in this case)
  * @param p_data: BLE server data that has Server device's address and address type
  * @retval none
  */
void APP_BLE_set_oob(app_ble_server_data_t *p_data)
{
 800c314:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c316:	b089      	sub	sp, #36	@ 0x24
 800c318:	af04      	add	r7, sp, #16
 800c31a:	6078      	str	r0, [r7, #4]
  tBleStatus status;
  
  status = aci_gap_set_oob_data(0x01, // Remote device
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	7819      	ldrb	r1, [r3, #0]
                                p_data->address_type, // BLE server address type
                                p_data->address, // BLE server address
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	1c5a      	adds	r2, r3, #1
  status = aci_gap_set_oob_data(0x01, // Remote device
 800c324:	4b23      	ldr	r3, [pc, #140]	@ (800c3b4 <APP_BLE_set_oob+0xa0>)
 800c326:	79db      	ldrb	r3, [r3, #7]
 800c328:	4823      	ldr	r0, [pc, #140]	@ (800c3b8 <APP_BLE_set_oob+0xa4>)
 800c32a:	9001      	str	r0, [sp, #4]
 800c32c:	9300      	str	r3, [sp, #0]
 800c32e:	2300      	movs	r3, #0
 800c330:	2001      	movs	r0, #1
 800c332:	f7fc fdad 	bl	8008e90 <aci_gap_set_oob_data>
 800c336:	4603      	mov	r3, r0
 800c338:	73fb      	strb	r3, [r7, #15]
                                0x00, // OOB Data type - TK
                                m_oob_uart_data.tk_size, // TK size
                                m_oob_uart_data.tk);  // TK
  
  APP_DBG_MSG("==>> aci_gap_set_oob_data (Remote device) result = 0x%02X\r\n", status);
 800c33a:	7bfb      	ldrb	r3, [r7, #15]
 800c33c:	4619      	mov	r1, r3
 800c33e:	481f      	ldr	r0, [pc, #124]	@ (800c3bc <APP_BLE_set_oob+0xa8>)
 800c340:	f001 fb5c 	bl	800d9fc <iprintf>
  APP_DBG_MSG("<<== Received BLE Server address (type %s) %02X:%02X:%02X:%02X:%02X:%02X, schedule to connect with Server\r\n",
              p_data->address_type == 0 ? "Public" : "Random",
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	781b      	ldrb	r3, [r3, #0]
  APP_DBG_MSG("<<== Received BLE Server address (type %s) %02X:%02X:%02X:%02X:%02X:%02X, schedule to connect with Server\r\n",
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d101      	bne.n	800c350 <APP_BLE_set_oob+0x3c>
 800c34c:	491c      	ldr	r1, [pc, #112]	@ (800c3c0 <APP_BLE_set_oob+0xac>)
 800c34e:	e000      	b.n	800c352 <APP_BLE_set_oob+0x3e>
 800c350:	491c      	ldr	r1, [pc, #112]	@ (800c3c4 <APP_BLE_set_oob+0xb0>)
              p_data->address[5], p_data->address[4], p_data->address[3],
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	799b      	ldrb	r3, [r3, #6]
  APP_DBG_MSG("<<== Received BLE Server address (type %s) %02X:%02X:%02X:%02X:%02X:%02X, schedule to connect with Server\r\n",
 800c356:	461d      	mov	r5, r3
              p_data->address[5], p_data->address[4], p_data->address[3],
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	795b      	ldrb	r3, [r3, #5]
  APP_DBG_MSG("<<== Received BLE Server address (type %s) %02X:%02X:%02X:%02X:%02X:%02X, schedule to connect with Server\r\n",
 800c35c:	461e      	mov	r6, r3
              p_data->address[5], p_data->address[4], p_data->address[3],
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	791b      	ldrb	r3, [r3, #4]
  APP_DBG_MSG("<<== Received BLE Server address (type %s) %02X:%02X:%02X:%02X:%02X:%02X, schedule to connect with Server\r\n",
 800c362:	461a      	mov	r2, r3
              p_data->address[2], p_data->address[1], p_data->address[0]);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	78db      	ldrb	r3, [r3, #3]
  APP_DBG_MSG("<<== Received BLE Server address (type %s) %02X:%02X:%02X:%02X:%02X:%02X, schedule to connect with Server\r\n",
 800c368:	4618      	mov	r0, r3
              p_data->address[2], p_data->address[1], p_data->address[0]);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	789b      	ldrb	r3, [r3, #2]
  APP_DBG_MSG("<<== Received BLE Server address (type %s) %02X:%02X:%02X:%02X:%02X:%02X, schedule to connect with Server\r\n",
 800c36e:	461c      	mov	r4, r3
              p_data->address[2], p_data->address[1], p_data->address[0]);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	785b      	ldrb	r3, [r3, #1]
  APP_DBG_MSG("<<== Received BLE Server address (type %s) %02X:%02X:%02X:%02X:%02X:%02X, schedule to connect with Server\r\n",
 800c374:	9303      	str	r3, [sp, #12]
 800c376:	9402      	str	r4, [sp, #8]
 800c378:	9001      	str	r0, [sp, #4]
 800c37a:	9200      	str	r2, [sp, #0]
 800c37c:	4633      	mov	r3, r6
 800c37e:	462a      	mov	r2, r5
 800c380:	4811      	ldr	r0, [pc, #68]	@ (800c3c8 <APP_BLE_set_oob+0xb4>)
 800c382:	f001 fb3b 	bl	800d9fc <iprintf>
  
  // [STM] Configure REMOTE (BLE Server) address data to connect via Bluetooth
  BleApplicationContext.DeviceServerFound = 0x01;
 800c386:	4b11      	ldr	r3, [pc, #68]	@ (800c3cc <APP_BLE_set_oob+0xb8>)
 800c388:	2201      	movs	r2, #1
 800c38a:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
  SERVER_REMOTE_ADDR_TYPE = p_data->address_type;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	781a      	ldrb	r2, [r3, #0]
 800c392:	4b0f      	ldr	r3, [pc, #60]	@ (800c3d0 <APP_BLE_set_oob+0xbc>)
 800c394:	701a      	strb	r2, [r3, #0]
  memcpy(SERVER_REMOTE_BDADDR, p_data->address, sizeof(SERVER_REMOTE_BDADDR));
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	1c5a      	adds	r2, r3, #1
 800c39a:	4b0e      	ldr	r3, [pc, #56]	@ (800c3d4 <APP_BLE_set_oob+0xc0>)
 800c39c:	6810      	ldr	r0, [r2, #0]
 800c39e:	6018      	str	r0, [r3, #0]
 800c3a0:	8892      	ldrh	r2, [r2, #4]
 800c3a2:	809a      	strh	r2, [r3, #4]
  
  // [STM] schedule to connect with BLE Server
  UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_0);
 800c3a4:	2100      	movs	r1, #0
 800c3a6:	2002      	movs	r0, #2
 800c3a8:	f001 f92a 	bl	800d600 <UTIL_SEQ_SetTask>
  
  //ble_oob_data_log(m_oob_uart_data.tk_size, m_oob_uart_data.tk);
}
 800c3ac:	bf00      	nop
 800c3ae:	3714      	adds	r7, #20
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3b4:	2000151c 	.word	0x2000151c
 800c3b8:	20001524 	.word	0x20001524
 800c3bc:	0800f948 	.word	0x0800f948
 800c3c0:	0800f124 	.word	0x0800f124
 800c3c4:	0800f12c 	.word	0x0800f12c
 800c3c8:	0800f984 	.word	0x0800f984
 800c3cc:	2000148c 	.word	0x2000148c
 800c3d0:	20001486 	.word	0x20001486
 800c3d4:	20001480 	.word	0x20001480

0800c3d8 <uart_rx_callback>:
/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
static void uart_rx_callback (void) // [STM]
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_OOB_PROCESS_ID, CFG_SCH_PRIO_0);
 800c3dc:	2100      	movs	r1, #0
 800c3de:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800c3e2:	f001 f90d 	bl	800d600 <UTIL_SEQ_SetTask>
}
 800c3e6:	bf00      	nop
 800c3e8:	bd80      	pop	{r7, pc}
	...

0800c3ec <ble_oob_process>:

static void ble_oob_process (void) // [STM]
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	af00      	add	r7, sp, #0
  APP_BLE_set_oob(&m_oob_remote_data);
 800c3f0:	4802      	ldr	r0, [pc, #8]	@ (800c3fc <ble_oob_process+0x10>)
 800c3f2:	f7ff ff8f 	bl	800c314 <APP_BLE_set_oob>
}
 800c3f6:	bf00      	nop
 800c3f8:	bd80      	pop	{r7, pc}
 800c3fa:	bf00      	nop
 800c3fc:	20001534 	.word	0x20001534

0800c400 <ble_client_pairing_request>:

static void ble_client_pairing_request(void) // [STM]
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
  tBleStatus ret = aci_gap_send_pairing_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800c406:	4b08      	ldr	r3, [pc, #32]	@ (800c428 <ble_client_pairing_request+0x28>)
 800c408:	8adb      	ldrh	r3, [r3, #22]
 800c40a:	2101      	movs	r1, #1
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7fc fc3d 	bl	8008c8c <aci_gap_send_pairing_req>
 800c412:	4603      	mov	r3, r0
 800c414:	71fb      	strb	r3, [r7, #7]
                                            0x01); // [STM] Request pairing, force rebond
  APP_DBG_MSG("aci_gap_send_pairing_req, result: 0x%02X \n\r", ret);
 800c416:	79fb      	ldrb	r3, [r7, #7]
 800c418:	4619      	mov	r1, r3
 800c41a:	4804      	ldr	r0, [pc, #16]	@ (800c42c <ble_client_pairing_request+0x2c>)
 800c41c:	f001 faee 	bl	800d9fc <iprintf>
}
 800c420:	bf00      	nop
 800c422:	3708      	adds	r7, #8
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}
 800c428:	2000148c 	.word	0x2000148c
 800c42c:	0800f9f0 	.word	0x0800f9f0

0800c430 <ble_oob_data_log>:

static void ble_oob_data_log (uint32_t size, uint8_t *p_data)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b0c4      	sub	sp, #272	@ 0x110
 800c434:	af00      	add	r7, sp, #0
 800c436:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c43a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c43e:	6018      	str	r0, [r3, #0]
 800c440:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c444:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c448:	6019      	str	r1, [r3, #0]
  uint8_t msg[256];
  
  sprintf((char *) msg, "OOB TK Data generated by BLE client (size = %d) =", size);
 800c44a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c44e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c452:	f107 000c 	add.w	r0, r7, #12
 800c456:	681a      	ldr	r2, [r3, #0]
 800c458:	4917      	ldr	r1, [pc, #92]	@ (800c4b8 <ble_oob_data_log+0x88>)
 800c45a:	f001 f9ed 	bl	800d838 <siprintf>
  
  for(uint32_t k = 0; k < size; k++)
 800c45e:	2300      	movs	r3, #0
 800c460:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800c464:	e014      	b.n	800c490 <ble_oob_data_log+0x60>
  {
    sprintf((char *)msg, "%s %02X", msg, p_data[k]);
 800c466:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c46a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c474:	4413      	add	r3, r2
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	f107 020c 	add.w	r2, r7, #12
 800c47c:	f107 000c 	add.w	r0, r7, #12
 800c480:	490e      	ldr	r1, [pc, #56]	@ (800c4bc <ble_oob_data_log+0x8c>)
 800c482:	f001 f9d9 	bl	800d838 <siprintf>
  for(uint32_t k = 0; k < size; k++)
 800c486:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c48a:	3301      	adds	r3, #1
 800c48c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800c490:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c494:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c498:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d3e1      	bcc.n	800c466 <ble_oob_data_log+0x36>
  }
  APP_DBG_MSG("%s\r\n", msg);
 800c4a2:	f107 030c 	add.w	r3, r7, #12
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	4805      	ldr	r0, [pc, #20]	@ (800c4c0 <ble_oob_data_log+0x90>)
 800c4aa:	f001 faa7 	bl	800d9fc <iprintf>
}
 800c4ae:	bf00      	nop
 800c4b0:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}
 800c4b8:	0800fa1c 	.word	0x0800fa1c
 800c4bc:	0800fa50 	.word	0x0800fa50
 800c4c0:	0800fa58 	.word	0x0800fa58

0800c4c4 <P2PC_APP_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PC_APP_Init(void)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
  uint8_t index =0;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN P2PC_APP_Init_1 */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SEARCH_SERVICE_ID, UTIL_SEQ_RFU, Update_Service );
 800c4ce:	4a20      	ldr	r2, [pc, #128]	@ (800c550 <P2PC_APP_Init+0x8c>)
 800c4d0:	2100      	movs	r1, #0
 800c4d2:	2004      	movs	r0, #4
 800c4d4:	f001 f872 	bl	800d5bc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button_Trigger_Received );
 800c4d8:	4a1e      	ldr	r2, [pc, #120]	@ (800c554 <P2PC_APP_Init+0x90>)
 800c4da:	2100      	movs	r1, #0
 800c4dc:	2020      	movs	r0, #32
 800c4de:	f001 f86d 	bl	800d5bc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW2_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button2_Trigger_Received );
 800c4e2:	4a1d      	ldr	r2, [pc, #116]	@ (800c558 <P2PC_APP_Init+0x94>)
 800c4e4:	2100      	movs	r1, #0
 800c4e6:	2040      	movs	r0, #64	@ 0x40
 800c4e8:	f001 f868 	bl	800d5bc <UTIL_SEQ_RegTask>
  /**
   * Initialize LedButton Service
   */
  P2P_Client_App_Context.Notification_Status=0;
 800c4ec:	4b1b      	ldr	r3, [pc, #108]	@ (800c55c <P2PC_APP_Init+0x98>)
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	701a      	strb	r2, [r3, #0]
  P2P_Client_App_Context.ConnectionHandle =  0x00;
 800c4f2:	4b1a      	ldr	r3, [pc, #104]	@ (800c55c <P2PC_APP_Init+0x98>)
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	811a      	strh	r2, [r3, #8]

  P2P_Client_App_Context.LedControl.Device_Led_Selection=0x00;/* device Led */
 800c4f8:	4b18      	ldr	r3, [pc, #96]	@ (800c55c <P2PC_APP_Init+0x98>)
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	705a      	strb	r2, [r3, #1]
  P2P_Client_App_Context.LedControl.Led1=0x00; /* led OFF */
 800c4fe:	4b17      	ldr	r3, [pc, #92]	@ (800c55c <P2PC_APP_Init+0x98>)
 800c500:	2200      	movs	r2, #0
 800c502:	709a      	strb	r2, [r3, #2]
  P2P_Client_App_Context.ButtonStatus.Device_Button_Selection=0x01;/* Device1 */
 800c504:	4b15      	ldr	r3, [pc, #84]	@ (800c55c <P2PC_APP_Init+0x98>)
 800c506:	2201      	movs	r2, #1
 800c508:	70da      	strb	r2, [r3, #3]
  P2P_Client_App_Context.ButtonStatus.Button1=0x00;
 800c50a:	4b14      	ldr	r3, [pc, #80]	@ (800c55c <P2PC_APP_Init+0x98>)
 800c50c:	2200      	movs	r2, #0
 800c50e:	711a      	strb	r2, [r3, #4]

  P2P_Client_App_Context.Button2Status.Device_Button_Selection=0x02;/* Device1 */
 800c510:	4b12      	ldr	r3, [pc, #72]	@ (800c55c <P2PC_APP_Init+0x98>)
 800c512:	2202      	movs	r2, #2
 800c514:	715a      	strb	r2, [r3, #5]
  P2P_Client_App_Context.Button2Status.Button1=0x02;
 800c516:	4b11      	ldr	r3, [pc, #68]	@ (800c55c <P2PC_APP_Init+0x98>)
 800c518:	2202      	movs	r2, #2
 800c51a:	719a      	strb	r2, [r3, #6]
/* USER CODE END P2PC_APP_Init_1 */
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 800c51c:	2300      	movs	r3, #0
 800c51e:	71fb      	strb	r3, [r7, #7]
 800c520:	e008      	b.n	800c534 <P2PC_APP_Init+0x70>
  {
    aP2PClientContext[index].state= APP_BLE_IDLE;
 800c522:	79fb      	ldrb	r3, [r7, #7]
 800c524:	4a0e      	ldr	r2, [pc, #56]	@ (800c560 <P2PC_APP_Init+0x9c>)
 800c526:	011b      	lsls	r3, r3, #4
 800c528:	4413      	add	r3, r2
 800c52a:	2200      	movs	r2, #0
 800c52c:	701a      	strb	r2, [r3, #0]
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 800c52e:	79fb      	ldrb	r3, [r7, #7]
 800c530:	3301      	adds	r3, #1
 800c532:	71fb      	strb	r3, [r7, #7]
 800c534:	79fb      	ldrb	r3, [r7, #7]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d0f3      	beq.n	800c522 <P2PC_APP_Init+0x5e>
  }

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterCltHandler(Event_Handler);
 800c53a:	480a      	ldr	r0, [pc, #40]	@ (800c564 <P2PC_APP_Init+0xa0>)
 800c53c:	f7fd fc2e 	bl	8009d9c <SVCCTL_RegisterCltHandler>

#if(CFG_DEBUG_APP_TRACE != 0)
  APP_DBG_MSG("-- P2P CLIENT INITIALIZED \n");
 800c540:	4809      	ldr	r0, [pc, #36]	@ (800c568 <P2PC_APP_Init+0xa4>)
 800c542:	f001 facb 	bl	800dadc <puts>
#endif

/* USER CODE BEGIN P2PC_APP_Init_2 */

/* USER CODE END P2PC_APP_Init_2 */
  return;
 800c546:	bf00      	nop
}
 800c548:	3708      	adds	r7, #8
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	0800cd01 	.word	0x0800cd01
 800c554:	0800cc91 	.word	0x0800cc91
 800c558:	0800ccc9 	.word	0x0800ccc9
 800c55c:	200000e0 	.word	0x200000e0
 800c560:	2000153c 	.word	0x2000153c
 800c564:	0800c5e9 	.word	0x0800c5e9
 800c568:	0800fa60 	.word	0x0800fa60

0800c56c <P2PC_APP_Notification>:

void P2PC_APP_Notification(P2PC_APP_ConnHandle_Not_evt_t *pNotification)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b084      	sub	sp, #16
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PC_APP_Notification_1 */

/* USER CODE END P2PC_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d002      	beq.n	800c582 <P2PC_APP_Notification+0x16>
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d005      	beq.n	800c58c <P2PC_APP_Notification+0x20>

    default:
/* USER CODE BEGIN P2P_Evt_Opcode_Default */

/* USER CODE END P2P_Evt_Opcode_Default */
      break;
 800c580:	e020      	b.n	800c5c4 <P2PC_APP_Notification+0x58>
    P2P_Client_App_Context.ConnectionHandle = pNotification->ConnectionHandle;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	885a      	ldrh	r2, [r3, #2]
 800c586:	4b11      	ldr	r3, [pc, #68]	@ (800c5cc <P2PC_APP_Notification+0x60>)
 800c588:	811a      	strh	r2, [r3, #8]
      break;
 800c58a:	e01b      	b.n	800c5c4 <P2PC_APP_Notification+0x58>
      uint8_t index = 0;
 800c58c:	2300      	movs	r3, #0
 800c58e:	73fb      	strb	r3, [r7, #15]
      P2P_Client_App_Context.ConnectionHandle =  0x00;
 800c590:	4b0e      	ldr	r3, [pc, #56]	@ (800c5cc <P2PC_APP_Notification+0x60>)
 800c592:	2200      	movs	r2, #0
 800c594:	811a      	strh	r2, [r3, #8]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800c596:	e005      	b.n	800c5a4 <P2PC_APP_Notification+0x38>
        aP2PClientContext[index].state = APP_BLE_IDLE;
 800c598:	7bfb      	ldrb	r3, [r7, #15]
 800c59a:	4a0d      	ldr	r2, [pc, #52]	@ (800c5d0 <P2PC_APP_Notification+0x64>)
 800c59c:	011b      	lsls	r3, r3, #4
 800c59e:	4413      	add	r3, r2
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	701a      	strb	r2, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800c5a4:	7bfb      	ldrb	r3, [r7, #15]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d106      	bne.n	800c5b8 <P2PC_APP_Notification+0x4c>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 800c5aa:	7bfb      	ldrb	r3, [r7, #15]
 800c5ac:	4a08      	ldr	r2, [pc, #32]	@ (800c5d0 <P2PC_APP_Notification+0x64>)
 800c5ae:	011b      	lsls	r3, r3, #4
 800c5b0:	4413      	add	r3, r2
 800c5b2:	781b      	ldrb	r3, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d1ef      	bne.n	800c598 <P2PC_APP_Notification+0x2c>
      HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	2120      	movs	r1, #32
 800c5bc:	4805      	ldr	r0, [pc, #20]	@ (800c5d4 <P2PC_APP_Notification+0x68>)
 800c5be:	f7f7 f91d 	bl	80037fc <HAL_GPIO_WritePin>
      break;
 800c5c2:	bf00      	nop
  }
/* USER CODE BEGIN P2PC_APP_Notification_2 */

/* USER CODE END P2PC_APP_Notification_2 */
  return;
 800c5c4:	bf00      	nop
}
 800c5c6:	3710      	adds	r7, #16
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	200000e0 	.word	0x200000e0
 800c5d0:	2000153c 	.word	0x2000153c
 800c5d4:	48000400 	.word	0x48000400

0800c5d8 <P2PC_APP_SW1_Button_Action>:
/* USER CODE BEGIN FD */
void P2PC_APP_SW1_Button_Action(void)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	af00      	add	r7, sp, #0

  UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800c5dc:	2100      	movs	r1, #0
 800c5de:	2020      	movs	r0, #32
 800c5e0:	f001 f80e 	bl	800d600 <UTIL_SEQ_SetTask>

}
 800c5e4:	bf00      	nop
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Event_Handler(void *Event)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b094      	sub	sp, #80	@ 0x50
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;

  P2P_Client_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	3301      	adds	r3, #1
 800c5fa:	643b      	str	r3, [r7, #64]	@ 0x40

  switch(event_pckt->evt)
 800c5fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	2bff      	cmp	r3, #255	@ 0xff
 800c602:	f040 82ad 	bne.w	800cb60 <Event_Handler+0x578>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800c606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c608:	3302      	adds	r3, #2
 800c60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      switch(blecore_evt->ecode)
 800c60c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c60e:	881b      	ldrh	r3, [r3, #0]
 800c610:	b29b      	uxth	r3, r3
 800c612:	f6a3 4304 	subw	r3, r3, #3076	@ 0xc04
 800c616:	2b0c      	cmp	r3, #12
 800c618:	f200 8296 	bhi.w	800cb48 <Event_Handler+0x560>
 800c61c:	a201      	add	r2, pc, #4	@ (adr r2, 800c624 <Event_Handler+0x3c>)
 800c61e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c622:	bf00      	nop
 800c624:	0800c94f 	.word	0x0800c94f
 800c628:	0800cb49 	.word	0x0800cb49
 800c62c:	0800c809 	.word	0x0800c809
 800c630:	0800cb49 	.word	0x0800cb49
 800c634:	0800cb49 	.word	0x0800cb49
 800c638:	0800cb49 	.word	0x0800cb49
 800c63c:	0800c659 	.word	0x0800c659
 800c640:	0800cb49 	.word	0x0800cb49
 800c644:	0800cb49 	.word	0x0800cb49
 800c648:	0800cb49 	.word	0x0800cb49
 800c64c:	0800cb49 	.word	0x0800cb49
 800c650:	0800ca77 	.word	0x0800ca77
 800c654:	0800caf3 	.word	0x0800caf3
      {

        case ACI_ATT_READ_BY_GROUP_TYPE_RESP_VSEVT_CODE:
        {
          aci_att_read_by_group_type_resp_event_rp0 *pr = (void*)blecore_evt->data;
 800c658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c65a:	3302      	adds	r3, #2
 800c65c:	633b      	str	r3, [r7, #48]	@ 0x30
          uint8_t numServ, i, idx;
          uint16_t uuid, handle;

          uint8_t index;
          handle = pr->Connection_Handle;
 800c65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c660:	781a      	ldrb	r2, [r3, #0]
 800c662:	785b      	ldrb	r3, [r3, #1]
 800c664:	021b      	lsls	r3, r3, #8
 800c666:	4313      	orrs	r3, r2
 800c668:	85fb      	strh	r3, [r7, #46]	@ 0x2e
          index = 0;
 800c66a:	2300      	movs	r3, #0
 800c66c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800c670:	e02e      	b.n	800c6d0 <Event_Handler+0xe8>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
          {
            APP_BLE_ConnStatus_t status;

            status = APP_BLE_Get_Client_Connection_Status(aP2PClientContext[index].connHandle);
 800c672:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800c676:	4ab9      	ldr	r2, [pc, #740]	@ (800c95c <Event_Handler+0x374>)
 800c678:	011b      	lsls	r3, r3, #4
 800c67a:	4413      	add	r3, r2
 800c67c:	3302      	adds	r3, #2
 800c67e:	881b      	ldrh	r3, [r3, #0]
 800c680:	4618      	mov	r0, r3
 800c682:	f7ff fb61 	bl	800bd48 <APP_BLE_Get_Client_Connection_Status>
 800c686:	4603      	mov	r3, r0
 800c688:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

            if((aP2PClientContext[index].state == APP_BLE_CONNECTED_CLIENT)&&
 800c68c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800c690:	4ab2      	ldr	r2, [pc, #712]	@ (800c95c <Event_Handler+0x374>)
 800c692:	011b      	lsls	r3, r3, #4
 800c694:	4413      	add	r3, r2
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	2b06      	cmp	r3, #6
 800c69a:	d114      	bne.n	800c6c6 <Event_Handler+0xde>
 800c69c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d110      	bne.n	800c6c6 <Event_Handler+0xde>
                    (status == APP_BLE_IDLE))
            {
              /* Handle deconnected */

              aP2PClientContext[index].state = APP_BLE_IDLE;
 800c6a4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800c6a8:	4aac      	ldr	r2, [pc, #688]	@ (800c95c <Event_Handler+0x374>)
 800c6aa:	011b      	lsls	r3, r3, #4
 800c6ac:	4413      	add	r3, r2
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	701a      	strb	r2, [r3, #0]
              aP2PClientContext[index].connHandle = 0xFFFF;
 800c6b2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800c6b6:	4aa9      	ldr	r2, [pc, #676]	@ (800c95c <Event_Handler+0x374>)
 800c6b8:	011b      	lsls	r3, r3, #4
 800c6ba:	4413      	add	r3, r2
 800c6bc:	3302      	adds	r3, #2
 800c6be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c6c2:	801a      	strh	r2, [r3, #0]
              break;
 800c6c4:	e010      	b.n	800c6e8 <Event_Handler+0x100>
            }
            index++;
 800c6c6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800c6d0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d107      	bne.n	800c6e8 <Event_Handler+0x100>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 800c6d8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800c6dc:	4a9f      	ldr	r2, [pc, #636]	@ (800c95c <Event_Handler+0x374>)
 800c6de:	011b      	lsls	r3, r3, #4
 800c6e0:	4413      	add	r3, r2
 800c6e2:	781b      	ldrb	r3, [r3, #0]
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d1c4      	bne.n	800c672 <Event_Handler+0x8a>
          }

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800c6e8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	f040 822d 	bne.w	800cb4c <Event_Handler+0x564>
          {
            aP2PClientContext[index].connHandle= handle;
 800c6f2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800c6f6:	4a99      	ldr	r2, [pc, #612]	@ (800c95c <Event_Handler+0x374>)
 800c6f8:	011b      	lsls	r3, r3, #4
 800c6fa:	4413      	add	r3, r2
 800c6fc:	3302      	adds	r3, #2
 800c6fe:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c700:	801a      	strh	r2, [r3, #0]

            numServ = (pr->Data_Length) / pr->Attribute_Data_Length;
 800c702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c704:	78da      	ldrb	r2, [r3, #3]
 800c706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c708:	789b      	ldrb	r3, [r3, #2]
 800c70a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c70e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
             * 2 or 16 bytes data
             * we are interested only if the UUID is 16 bit.
             * So check if the data length is 6
             */
#if (UUID_128BIT_FORMAT==1)
          if (pr->Attribute_Data_Length == 20)
 800c712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c714:	789b      	ldrb	r3, [r3, #2]
 800c716:	2b14      	cmp	r3, #20
 800c718:	f040 8218 	bne.w	800cb4c <Event_Handler+0x564>
          {
            idx = 16;
 800c71c:	2310      	movs	r3, #16
 800c71e:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
#else
          if (pr->Attribute_Data_Length == 6)
          {
            idx = 4;
#endif
              for (i=0; i<numServ; i++)
 800c722:	2300      	movs	r3, #0
 800c724:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800c728:	e067      	b.n	800c7fa <Event_Handler+0x212>
              {
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx]);
 800c72a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800c72e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c730:	4413      	add	r3, r2
 800c732:	791b      	ldrb	r3, [r3, #4]
 800c734:	4619      	mov	r1, r3
 800c736:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800c73a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c73c:	4413      	add	r3, r2
 800c73e:	3304      	adds	r3, #4
 800c740:	3301      	adds	r3, #1
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	021b      	lsls	r3, r3, #8
 800c746:	b29b      	uxth	r3, r3
 800c748:	430b      	orrs	r3, r1
 800c74a:	857b      	strh	r3, [r7, #42]	@ 0x2a
                if(uuid == P2P_SERVICE_UUID)
 800c74c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c74e:	f64f 6240 	movw	r2, #65088	@ 0xfe40
 800c752:	4293      	cmp	r3, r2
 800c754:	d147      	bne.n	800c7e6 <Event_Handler+0x1fe>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : P2P_SERVICE_UUID FOUND - connection handle 0x%x \n", aP2PClientContext[index].connHandle);
 800c756:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800c75a:	4a80      	ldr	r2, [pc, #512]	@ (800c95c <Event_Handler+0x374>)
 800c75c:	011b      	lsls	r3, r3, #4
 800c75e:	4413      	add	r3, r2
 800c760:	3302      	adds	r3, #2
 800c762:	881b      	ldrh	r3, [r3, #0]
 800c764:	4619      	mov	r1, r3
 800c766:	487e      	ldr	r0, [pc, #504]	@ (800c960 <Event_Handler+0x378>)
 800c768:	f001 f948 	bl	800d9fc <iprintf>
#endif
#if (UUID_128BIT_FORMAT==1)
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-16]);
 800c76c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800c770:	3b10      	subs	r3, #16
 800c772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c774:	4413      	add	r3, r2
 800c776:	791b      	ldrb	r3, [r3, #4]
 800c778:	4619      	mov	r1, r3
 800c77a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800c77e:	3b10      	subs	r3, #16
 800c780:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c782:	4413      	add	r3, r2
 800c784:	3304      	adds	r3, #4
 800c786:	3301      	adds	r3, #1
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	021b      	lsls	r3, r3, #8
 800c78c:	b29a      	uxth	r2, r3
 800c78e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800c792:	430a      	orrs	r2, r1
 800c794:	b291      	uxth	r1, r2
 800c796:	4a71      	ldr	r2, [pc, #452]	@ (800c95c <Event_Handler+0x374>)
 800c798:	011b      	lsls	r3, r3, #4
 800c79a:	4413      	add	r3, r2
 800c79c:	3304      	adds	r3, #4
 800c79e:	460a      	mov	r2, r1
 800c7a0:	801a      	strh	r2, [r3, #0]
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-14]);
 800c7a2:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800c7a6:	3b0e      	subs	r3, #14
 800c7a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7aa:	4413      	add	r3, r2
 800c7ac:	791b      	ldrb	r3, [r3, #4]
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800c7b4:	3b0e      	subs	r3, #14
 800c7b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7b8:	4413      	add	r3, r2
 800c7ba:	3304      	adds	r3, #4
 800c7bc:	3301      	adds	r3, #1
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	021b      	lsls	r3, r3, #8
 800c7c2:	b29a      	uxth	r2, r3
 800c7c4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800c7c8:	430a      	orrs	r2, r1
 800c7ca:	b291      	uxth	r1, r2
 800c7cc:	4a63      	ldr	r2, [pc, #396]	@ (800c95c <Event_Handler+0x374>)
 800c7ce:	011b      	lsls	r3, r3, #4
 800c7d0:	4413      	add	r3, r2
 800c7d2:	3306      	adds	r3, #6
 800c7d4:	460a      	mov	r2, r1
 800c7d6:	801a      	strh	r2, [r3, #0]
#else
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-4]);
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-2]);
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_CHARACS ;
 800c7d8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800c7dc:	4a5f      	ldr	r2, [pc, #380]	@ (800c95c <Event_Handler+0x374>)
 800c7de:	011b      	lsls	r3, r3, #4
 800c7e0:	4413      	add	r3, r2
 800c7e2:	2208      	movs	r2, #8
 800c7e4:	701a      	strb	r2, [r3, #0]
                }
                idx += 6;
 800c7e6:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800c7ea:	3306      	adds	r3, #6
 800c7ec:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
              for (i=0; i<numServ; i++)
 800c7f0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800c7fa:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800c7fe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c802:	429a      	cmp	r2, r3
 800c804:	d391      	bcc.n	800c72a <Event_Handler+0x142>
              }
            }
          }
        }
        break;
 800c806:	e1a1      	b.n	800cb4c <Event_Handler+0x564>

        case ACI_ATT_READ_BY_TYPE_RESP_VSEVT_CODE:
        {

          aci_att_read_by_type_resp_event_rp0 *pr = (void*)blecore_evt->data;
 800c808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c80a:	3302      	adds	r3, #2
 800c80c:	627b      	str	r3, [r7, #36]	@ 0x24
           * 2 or 16 bytes data
           */

          uint8_t index;

          index = 0;
 800c80e:	2300      	movs	r3, #0
 800c810:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800c814:	e004      	b.n	800c820 <Event_Handler+0x238>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 800c816:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800c81a:	3301      	adds	r3, #1
 800c81c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800c820:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800c824:	2b00      	cmp	r3, #0
 800c826:	d10b      	bne.n	800c840 <Event_Handler+0x258>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800c828:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800c82c:	4a4b      	ldr	r2, [pc, #300]	@ (800c95c <Event_Handler+0x374>)
 800c82e:	011b      	lsls	r3, r3, #4
 800c830:	4413      	add	r3, r2
 800c832:	3302      	adds	r3, #2
 800c834:	881a      	ldrh	r2, [r3, #0]
 800c836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c838:	881b      	ldrh	r3, [r3, #0]
 800c83a:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d1ea      	bne.n	800c816 <Event_Handler+0x22e>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800c840:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800c844:	2b00      	cmp	r3, #0
 800c846:	f040 8183 	bne.w	800cb50 <Event_Handler+0x568>
          {

            /* we are interested in only 16 bit UUIDs */
#if (UUID_128BIT_FORMAT==1)
            idx = 17;
 800c84a:	2311      	movs	r3, #17
 800c84c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
            if (pr->Handle_Value_Pair_Length == 21)
 800c850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c852:	789b      	ldrb	r3, [r3, #2]
 800c854:	2b15      	cmp	r3, #21
 800c856:	f040 817b 	bne.w	800cb50 <Event_Handler+0x568>
#else
              idx = 5;
            if (pr->Handle_Value_Pair_Length == 7)
#endif
            {
              pr->Data_Length -= 1;
 800c85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c85c:	78db      	ldrb	r3, [r3, #3]
 800c85e:	3b01      	subs	r3, #1
 800c860:	b2da      	uxtb	r2, r3
 800c862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c864:	70da      	strb	r2, [r3, #3]
              while(pr->Data_Length > 0)
 800c866:	e06d      	b.n	800c944 <Event_Handler+0x35c>
              {
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx]);
 800c868:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800c86c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c86e:	4413      	add	r3, r2
 800c870:	791b      	ldrb	r3, [r3, #4]
 800c872:	4619      	mov	r1, r3
 800c874:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800c878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c87a:	4413      	add	r3, r2
 800c87c:	3304      	adds	r3, #4
 800c87e:	3301      	adds	r3, #1
 800c880:	781b      	ldrb	r3, [r3, #0]
 800c882:	021b      	lsls	r3, r3, #8
 800c884:	b29b      	uxth	r3, r3
 800c886:	430b      	orrs	r3, r1
 800c888:	847b      	strh	r3, [r7, #34]	@ 0x22
                /* store the characteristic handle not the attribute handle */
#if (UUID_128BIT_FORMAT==1)
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-14]);
 800c88a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800c88e:	3b0e      	subs	r3, #14
 800c890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c892:	4413      	add	r3, r2
 800c894:	791b      	ldrb	r3, [r3, #4]
 800c896:	4619      	mov	r1, r3
 800c898:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800c89c:	3b0e      	subs	r3, #14
 800c89e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8a0:	4413      	add	r3, r2
 800c8a2:	3304      	adds	r3, #4
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	021b      	lsls	r3, r3, #8
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	430b      	orrs	r3, r1
 800c8ae:	843b      	strh	r3, [r7, #32]
#else
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-2]);
#endif
                if(uuid == P2P_WRITE_CHAR_UUID)
 800c8b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c8b2:	f64f 6241 	movw	r2, #65089	@ 0xfe41
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d11a      	bne.n	800c8f0 <Event_Handler+0x308>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : WRITE_UUID FOUND - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 800c8ba:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800c8be:	4a27      	ldr	r2, [pc, #156]	@ (800c95c <Event_Handler+0x374>)
 800c8c0:	011b      	lsls	r3, r3, #4
 800c8c2:	4413      	add	r3, r2
 800c8c4:	3302      	adds	r3, #2
 800c8c6:	881b      	ldrh	r3, [r3, #0]
 800c8c8:	4619      	mov	r1, r3
 800c8ca:	4826      	ldr	r0, [pc, #152]	@ (800c964 <Event_Handler+0x37c>)
 800c8cc:	f001 f896 	bl	800d9fc <iprintf>
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_WRITE_DESC;
 800c8d0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800c8d4:	4a21      	ldr	r2, [pc, #132]	@ (800c95c <Event_Handler+0x374>)
 800c8d6:	011b      	lsls	r3, r3, #4
 800c8d8:	4413      	add	r3, r2
 800c8da:	2209      	movs	r2, #9
 800c8dc:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PWriteToServerCharHdle = handle;
 800c8de:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800c8e2:	4a1e      	ldr	r2, [pc, #120]	@ (800c95c <Event_Handler+0x374>)
 800c8e4:	011b      	lsls	r3, r3, #4
 800c8e6:	4413      	add	r3, r2
 800c8e8:	3308      	adds	r3, #8
 800c8ea:	8c3a      	ldrh	r2, [r7, #32]
 800c8ec:	801a      	strh	r2, [r3, #0]
 800c8ee:	e01e      	b.n	800c92e <Event_Handler+0x346>
                }

                else if(uuid == P2P_NOTIFY_CHAR_UUID)
 800c8f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c8f2:	f64f 6242 	movw	r2, #65090	@ 0xfe42
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d119      	bne.n	800c92e <Event_Handler+0x346>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : NOTIFICATION_CHAR_UUID FOUND  - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 800c8fa:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800c8fe:	4a17      	ldr	r2, [pc, #92]	@ (800c95c <Event_Handler+0x374>)
 800c900:	011b      	lsls	r3, r3, #4
 800c902:	4413      	add	r3, r2
 800c904:	3302      	adds	r3, #2
 800c906:	881b      	ldrh	r3, [r3, #0]
 800c908:	4619      	mov	r1, r3
 800c90a:	4817      	ldr	r0, [pc, #92]	@ (800c968 <Event_Handler+0x380>)
 800c90c:	f001 f876 	bl	800d9fc <iprintf>
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC;
 800c910:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800c914:	4a11      	ldr	r2, [pc, #68]	@ (800c95c <Event_Handler+0x374>)
 800c916:	011b      	lsls	r3, r3, #4
 800c918:	4413      	add	r3, r2
 800c91a:	220a      	movs	r2, #10
 800c91c:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PNotificationCharHdle = handle;
 800c91e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800c922:	4a0e      	ldr	r2, [pc, #56]	@ (800c95c <Event_Handler+0x374>)
 800c924:	011b      	lsls	r3, r3, #4
 800c926:	4413      	add	r3, r2
 800c928:	330c      	adds	r3, #12
 800c92a:	8c3a      	ldrh	r2, [r7, #32]
 800c92c:	801a      	strh	r2, [r3, #0]
                }
#if (UUID_128BIT_FORMAT==1)
                pr->Data_Length -= 21;
 800c92e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c930:	78db      	ldrb	r3, [r3, #3]
 800c932:	3b15      	subs	r3, #21
 800c934:	b2da      	uxtb	r2, r3
 800c936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c938:	70da      	strb	r2, [r3, #3]
                idx += 21;
 800c93a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800c93e:	3315      	adds	r3, #21
 800c940:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
              while(pr->Data_Length > 0)
 800c944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c946:	78db      	ldrb	r3, [r3, #3]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d18d      	bne.n	800c868 <Event_Handler+0x280>
#endif
              }
            }
          }
        }
        break;
 800c94c:	e100      	b.n	800cb50 <Event_Handler+0x568>

        case ACI_ATT_FIND_INFO_RESP_VSEVT_CODE:
        {
          aci_att_find_info_resp_event_rp0 *pr = (void*)blecore_evt->data;
 800c94e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c950:	3302      	adds	r3, #2
 800c952:	61fb      	str	r3, [r7, #28]
           * 2 bytes UUID
           */

          uint8_t index;

          index = 0;
 800c954:	2300      	movs	r3, #0
 800c956:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800c95a:	e00c      	b.n	800c976 <Event_Handler+0x38e>
 800c95c:	2000153c 	.word	0x2000153c
 800c960:	0800fa7c 	.word	0x0800fa7c
 800c964:	0800fab8 	.word	0x0800fab8
 800c968:	0800faf0 	.word	0x0800faf0
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))

            index++;
 800c96c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800c970:	3301      	adds	r3, #1
 800c972:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800c976:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d10b      	bne.n	800c996 <Event_Handler+0x3ae>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800c97e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800c982:	4a7b      	ldr	r2, [pc, #492]	@ (800cb70 <Event_Handler+0x588>)
 800c984:	011b      	lsls	r3, r3, #4
 800c986:	4413      	add	r3, r2
 800c988:	3302      	adds	r3, #2
 800c98a:	881a      	ldrh	r2, [r3, #0]
 800c98c:	69fb      	ldr	r3, [r7, #28]
 800c98e:	881b      	ldrh	r3, [r3, #0]
 800c990:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800c992:	429a      	cmp	r2, r3
 800c994:	d1ea      	bne.n	800c96c <Event_Handler+0x384>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800c996:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	f040 80da 	bne.w	800cb54 <Event_Handler+0x56c>
          {

            numDesc = (pr->Event_Data_Length) / 4;
 800c9a0:	69fb      	ldr	r3, [r7, #28]
 800c9a2:	78db      	ldrb	r3, [r3, #3]
 800c9a4:	089b      	lsrs	r3, r3, #2
 800c9a6:	76fb      	strb	r3, [r7, #27]
            /* we are interested only in 16 bit UUIDs */
            idx = 0;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
            if (pr->Format == UUID_TYPE_16)
 800c9ae:	69fb      	ldr	r3, [r7, #28]
 800c9b0:	789b      	ldrb	r3, [r3, #2]
 800c9b2:	2b01      	cmp	r3, #1
 800c9b4:	f040 80ce 	bne.w	800cb54 <Event_Handler+0x56c>
            {
              for (i=0; i<numDesc; i++)
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 800c9be:	e054      	b.n	800ca6a <Event_Handler+0x482>
              {
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx]);
 800c9c0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800c9c4:	69fa      	ldr	r2, [r7, #28]
 800c9c6:	4413      	add	r3, r2
 800c9c8:	791b      	ldrb	r3, [r3, #4]
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800c9d0:	69fa      	ldr	r2, [r7, #28]
 800c9d2:	4413      	add	r3, r2
 800c9d4:	3304      	adds	r3, #4
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	021b      	lsls	r3, r3, #8
 800c9dc:	b29b      	uxth	r3, r3
 800c9de:	430b      	orrs	r3, r1
 800c9e0:	833b      	strh	r3, [r7, #24]
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx+2]);
 800c9e2:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800c9e6:	3302      	adds	r3, #2
 800c9e8:	69fa      	ldr	r2, [r7, #28]
 800c9ea:	4413      	add	r3, r2
 800c9ec:	791b      	ldrb	r3, [r3, #4]
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800c9f4:	3302      	adds	r3, #2
 800c9f6:	69fa      	ldr	r2, [r7, #28]
 800c9f8:	4413      	add	r3, r2
 800c9fa:	3304      	adds	r3, #4
 800c9fc:	3301      	adds	r3, #1
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	021b      	lsls	r3, r3, #8
 800ca02:	b29b      	uxth	r3, r3
 800ca04:	430b      	orrs	r3, r1
 800ca06:	82fb      	strh	r3, [r7, #22]

                if(uuid == CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID)
 800ca08:	8afb      	ldrh	r3, [r7, #22]
 800ca0a:	f642 1202 	movw	r2, #10498	@ 0x2902
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d121      	bne.n	800ca56 <Event_Handler+0x46e>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID- connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 800ca12:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800ca16:	4a56      	ldr	r2, [pc, #344]	@ (800cb70 <Event_Handler+0x588>)
 800ca18:	011b      	lsls	r3, r3, #4
 800ca1a:	4413      	add	r3, r2
 800ca1c:	3302      	adds	r3, #2
 800ca1e:	881b      	ldrh	r3, [r3, #0]
 800ca20:	4619      	mov	r1, r3
 800ca22:	4854      	ldr	r0, [pc, #336]	@ (800cb74 <Event_Handler+0x58c>)
 800ca24:	f000 ffea 	bl	800d9fc <iprintf>
#endif
                  if( aP2PClientContext[index].state == APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC)
 800ca28:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800ca2c:	4a50      	ldr	r2, [pc, #320]	@ (800cb70 <Event_Handler+0x588>)
 800ca2e:	011b      	lsls	r3, r3, #4
 800ca30:	4413      	add	r3, r2
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	2b0a      	cmp	r3, #10
 800ca36:	d10e      	bne.n	800ca56 <Event_Handler+0x46e>
                  {

                    aP2PClientContext[index].P2PNotificationDescHandle = handle;
 800ca38:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800ca3c:	4a4c      	ldr	r2, [pc, #304]	@ (800cb70 <Event_Handler+0x588>)
 800ca3e:	011b      	lsls	r3, r3, #4
 800ca40:	4413      	add	r3, r2
 800ca42:	330e      	adds	r3, #14
 800ca44:	8b3a      	ldrh	r2, [r7, #24]
 800ca46:	801a      	strh	r2, [r3, #0]
                    aP2PClientContext[index].state = APP_BLE_ENABLE_NOTIFICATION_DESC;
 800ca48:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800ca4c:	4a48      	ldr	r2, [pc, #288]	@ (800cb70 <Event_Handler+0x588>)
 800ca4e:	011b      	lsls	r3, r3, #4
 800ca50:	4413      	add	r3, r2
 800ca52:	220b      	movs	r2, #11
 800ca54:	701a      	strb	r2, [r3, #0]

                  }
                }
                idx += 4;
 800ca56:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800ca5a:	3304      	adds	r3, #4
 800ca5c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
              for (i=0; i<numDesc; i++)
 800ca60:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800ca64:	3301      	adds	r3, #1
 800ca66:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 800ca6a:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 800ca6e:	7efb      	ldrb	r3, [r7, #27]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d3a5      	bcc.n	800c9c0 <Event_Handler+0x3d8>
              }
            }
          }
        }
        break; /*ACI_ATT_FIND_INFO_RESP_VSEVT_CODE*/
 800ca74:	e06e      	b.n	800cb54 <Event_Handler+0x56c>

        case ACI_GATT_NOTIFICATION_VSEVT_CODE:
        {
          aci_gatt_notification_event_rp0 *pr = (void*)blecore_evt->data;
 800ca76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca78:	3302      	adds	r3, #2
 800ca7a:	637b      	str	r3, [r7, #52]	@ 0x34
          uint8_t index;

          index = 0;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ca82:	e004      	b.n	800ca8e <Event_Handler+0x4a6>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 800ca84:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ca88:	3301      	adds	r3, #1
 800ca8a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ca8e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d10b      	bne.n	800caae <Event_Handler+0x4c6>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800ca96:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ca9a:	4a35      	ldr	r2, [pc, #212]	@ (800cb70 <Event_Handler+0x588>)
 800ca9c:	011b      	lsls	r3, r3, #4
 800ca9e:	4413      	add	r3, r2
 800caa0:	3302      	adds	r3, #2
 800caa2:	881a      	ldrh	r2, [r3, #0]
 800caa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caa6:	881b      	ldrh	r3, [r3, #0]
 800caa8:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800caaa:	429a      	cmp	r2, r3
 800caac:	d1ea      	bne.n	800ca84 <Event_Handler+0x49c>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800caae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d150      	bne.n	800cb58 <Event_Handler+0x570>
          {

            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 800cab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cab8:	885b      	ldrh	r3, [r3, #2]
 800caba:	b29a      	uxth	r2, r3
 800cabc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cac0:	492b      	ldr	r1, [pc, #172]	@ (800cb70 <Event_Handler+0x588>)
 800cac2:	011b      	lsls	r3, r3, #4
 800cac4:	440b      	add	r3, r1
 800cac6:	330c      	adds	r3, #12
 800cac8:	881b      	ldrh	r3, [r3, #0]
 800caca:	429a      	cmp	r2, r3
 800cacc:	d144      	bne.n	800cb58 <Event_Handler+0x570>
                    (pr->Attribute_Value_Length == (2)) )
 800cace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cad0:	791b      	ldrb	r3, [r3, #4]
            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 800cad2:	2b02      	cmp	r3, #2
 800cad4:	d140      	bne.n	800cb58 <Event_Handler+0x570>
            {

              Notification.P2P_Client_Evt_Opcode = P2P_NOTIFICATION_INFO_RECEIVED_EVT;
 800cad6:	2302      	movs	r3, #2
 800cad8:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length = pr->Attribute_Value_Length;
 800cada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cadc:	791b      	ldrb	r3, [r3, #4]
 800cade:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload = &pr->Attribute_Value[0];
 800cae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cae2:	3305      	adds	r3, #5
 800cae4:	60fb      	str	r3, [r7, #12]

              Gatt_Notification(&Notification);
 800cae6:	f107 0308 	add.w	r3, r7, #8
 800caea:	4618      	mov	r0, r3
 800caec:	f000 f846 	bl	800cb7c <Gatt_Notification>
              /* INFORM APPLICATION BUTTON IS PUSHED BY END DEVICE */

            }
          }
        }
        break;/* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
 800caf0:	e032      	b.n	800cb58 <Event_Handler+0x570>

        case ACI_GATT_PROC_COMPLETE_VSEVT_CODE:
        {
          aci_gatt_proc_complete_event_rp0 *pr = (void*)blecore_evt->data;
 800caf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caf4:	3302      	adds	r3, #2
 800caf6:	63bb      	str	r3, [r7, #56]	@ 0x38
#if(CFG_DEBUG_APP_TRACE != 0)
          APP_DBG_MSG("-- GATT : ACI_GATT_PROC_COMPLETE_VSEVT_CODE \n");
 800caf8:	481f      	ldr	r0, [pc, #124]	@ (800cb78 <Event_Handler+0x590>)
 800cafa:	f000 ffef 	bl	800dadc <puts>
          APP_DBG_MSG("\n");
 800cafe:	200a      	movs	r0, #10
 800cb00:	f000 ff8e 	bl	800da20 <putchar>
#endif

          uint8_t index;

          index = 0;
 800cb04:	2300      	movs	r3, #0
 800cb06:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cb0a:	e004      	b.n	800cb16 <Event_Handler+0x52e>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 800cb0c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800cb10:	3301      	adds	r3, #1
 800cb12:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cb16:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d10b      	bne.n	800cb36 <Event_Handler+0x54e>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800cb1e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800cb22:	4a13      	ldr	r2, [pc, #76]	@ (800cb70 <Event_Handler+0x588>)
 800cb24:	011b      	lsls	r3, r3, #4
 800cb26:	4413      	add	r3, r2
 800cb28:	3302      	adds	r3, #2
 800cb2a:	881a      	ldrh	r2, [r3, #0]
 800cb2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb2e:	881b      	ldrh	r3, [r3, #0]
 800cb30:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d1ea      	bne.n	800cb0c <Event_Handler+0x524>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800cb36:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d10e      	bne.n	800cb5c <Event_Handler+0x574>
          {
            UTIL_SEQ_SetTask( 1<<CFG_TASK_SEARCH_SERVICE_ID, CFG_SCH_PRIO_0);
 800cb3e:	2100      	movs	r1, #0
 800cb40:	2004      	movs	r0, #4
 800cb42:	f000 fd5d 	bl	800d600 <UTIL_SEQ_SetTask>
          }
        }
        break; /*ACI_GATT_PROC_COMPLETE_VSEVT_CODE*/
 800cb46:	e009      	b.n	800cb5c <Event_Handler+0x574>
        default:
          break;
 800cb48:	bf00      	nop
 800cb4a:	e00a      	b.n	800cb62 <Event_Handler+0x57a>
        break;
 800cb4c:	bf00      	nop
 800cb4e:	e008      	b.n	800cb62 <Event_Handler+0x57a>
        break;
 800cb50:	bf00      	nop
 800cb52:	e006      	b.n	800cb62 <Event_Handler+0x57a>
        break; /*ACI_ATT_FIND_INFO_RESP_VSEVT_CODE*/
 800cb54:	bf00      	nop
 800cb56:	e004      	b.n	800cb62 <Event_Handler+0x57a>
        break;/* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
 800cb58:	bf00      	nop
 800cb5a:	e002      	b.n	800cb62 <Event_Handler+0x57a>
        break; /*ACI_GATT_PROC_COMPLETE_VSEVT_CODE*/
 800cb5c:	bf00      	nop
      }
    }

    break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800cb5e:	e000      	b.n	800cb62 <Event_Handler+0x57a>

    default:
      break;
 800cb60:	bf00      	nop
  }

  return(return_value);
 800cb62:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
}/* end BLE_CTRL_Event_Acknowledged_Status_t */
 800cb66:	4618      	mov	r0, r3
 800cb68:	3750      	adds	r7, #80	@ 0x50
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	2000153c 	.word	0x2000153c
 800cb74:	0800fb34 	.word	0x0800fb34
 800cb78:	0800fb7c 	.word	0x0800fb7c

0800cb7c <Gatt_Notification>:

void Gatt_Notification(P2P_Client_App_Notification_evt_t *pNotification)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b082      	sub	sp, #8
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Gatt_Notification_1*/

/* USER CODE END Gatt_Notification_1 */
  switch(pNotification->P2P_Client_Evt_Opcode)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	2b02      	cmp	r3, #2
 800cb8a:	d12b      	bne.n	800cbe4 <Gatt_Notification+0x68>
/* USER CODE END P2P_Client_Evt_Opcode */

    case P2P_NOTIFICATION_INFO_RECEIVED_EVT:
/* USER CODE BEGIN P2P_NOTIFICATION_INFO_RECEIVED_EVT */
    {
      P2P_Client_App_Context.LedControl.Device_Led_Selection=pNotification->DataTransfered.pPayload[0];
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	781a      	ldrb	r2, [r3, #0]
 800cb92:	4b17      	ldr	r3, [pc, #92]	@ (800cbf0 <Gatt_Notification+0x74>)
 800cb94:	705a      	strb	r2, [r3, #1]
      switch(P2P_Client_App_Context.LedControl.Device_Led_Selection) {
 800cb96:	4b16      	ldr	r3, [pc, #88]	@ (800cbf0 <Gatt_Notification+0x74>)
 800cb98:	785b      	ldrb	r3, [r3, #1]
 800cb9a:	2b01      	cmp	r3, #1
 800cb9c:	d120      	bne.n	800cbe0 <Gatt_Notification+0x64>

        case 0x01 : {

          P2P_Client_App_Context.LedControl.Led1=pNotification->DataTransfered.pPayload[1];
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	785a      	ldrb	r2, [r3, #1]
 800cba4:	4b12      	ldr	r3, [pc, #72]	@ (800cbf0 <Gatt_Notification+0x74>)
 800cba6:	709a      	strb	r2, [r3, #2]

          if(P2P_Client_App_Context.LedControl.Led1==0x00){
 800cba8:	4b11      	ldr	r3, [pc, #68]	@ (800cbf0 <Gatt_Notification+0x74>)
 800cbaa:	789b      	ldrb	r3, [r3, #2]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d10b      	bne.n	800cbc8 <Gatt_Notification+0x4c>
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	2120      	movs	r1, #32
 800cbb4:	480f      	ldr	r0, [pc, #60]	@ (800cbf4 <Gatt_Notification+0x78>)
 800cbb6:	f7f6 fe21 	bl	80037fc <HAL_GPIO_WritePin>
            APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - LED OFF \n\r");
 800cbba:	480f      	ldr	r0, [pc, #60]	@ (800cbf8 <Gatt_Notification+0x7c>)
 800cbbc:	f000 ff1e 	bl	800d9fc <iprintf>
            APP_DBG_MSG(" \n\r");
 800cbc0:	480e      	ldr	r0, [pc, #56]	@ (800cbfc <Gatt_Notification+0x80>)
 800cbc2:	f000 ff1b 	bl	800d9fc <iprintf>
            APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - LED ON\n\r");
            APP_DBG_MSG(" \n\r");
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
          }

          break;
 800cbc6:	e00c      	b.n	800cbe2 <Gatt_Notification+0x66>
            APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - LED ON\n\r");
 800cbc8:	480d      	ldr	r0, [pc, #52]	@ (800cc00 <Gatt_Notification+0x84>)
 800cbca:	f000 ff17 	bl	800d9fc <iprintf>
            APP_DBG_MSG(" \n\r");
 800cbce:	480b      	ldr	r0, [pc, #44]	@ (800cbfc <Gatt_Notification+0x80>)
 800cbd0:	f000 ff14 	bl	800d9fc <iprintf>
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	2120      	movs	r1, #32
 800cbd8:	4806      	ldr	r0, [pc, #24]	@ (800cbf4 <Gatt_Notification+0x78>)
 800cbda:	f7f6 fe0f 	bl	80037fc <HAL_GPIO_WritePin>
          break;
 800cbde:	e000      	b.n	800cbe2 <Gatt_Notification+0x66>
        }
        default : break;
 800cbe0:	bf00      	nop
      }

    }
/* USER CODE END P2P_NOTIFICATION_INFO_RECEIVED_EVT */
      break;
 800cbe2:	e000      	b.n	800cbe6 <Gatt_Notification+0x6a>

    default:
/* USER CODE BEGIN P2P_Client_Evt_Opcode_Default */

/* USER CODE END P2P_Client_Evt_Opcode_Default */
      break;
 800cbe4:	bf00      	nop
  }
/* USER CODE BEGIN Gatt_Notification_2*/

/* USER CODE END Gatt_Notification_2 */
  return;
 800cbe6:	bf00      	nop
}
 800cbe8:	3708      	adds	r7, #8
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	200000e0 	.word	0x200000e0
 800cbf4:	48000400 	.word	0x48000400
 800cbf8:	0800fbac 	.word	0x0800fbac
 800cbfc:	0800fbec 	.word	0x0800fbec
 800cc00:	0800fbf0 	.word	0x0800fbf0

0800cc04 <P2P_Client_APP_Get_State>:

uint8_t P2P_Client_APP_Get_State( void ) {
 800cc04:	b480      	push	{r7}
 800cc06:	af00      	add	r7, sp, #0
  return aP2PClientContext[0].state;
 800cc08:	4b03      	ldr	r3, [pc, #12]	@ (800cc18 <P2P_Client_APP_Get_State+0x14>)
 800cc0a:	781b      	ldrb	r3, [r3, #0]
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc14:	4770      	bx	lr
 800cc16:	bf00      	nop
 800cc18:	2000153c 	.word	0x2000153c

0800cc1c <Write_Char>:
 * @brief  Feature Characteristic update
 * @param  pFeatureValue: The address of the new value to be written
 * @retval None
 */
tBleStatus Write_Char(uint16_t UUID, uint8_t Service_Instance, uint8_t *pPayload)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	4603      	mov	r3, r0
 800cc24:	603a      	str	r2, [r7, #0]
 800cc26:	80fb      	strh	r3, [r7, #6]
 800cc28:	460b      	mov	r3, r1
 800cc2a:	717b      	strb	r3, [r7, #5]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800cc2c:	2392      	movs	r3, #146	@ 0x92
 800cc2e:	73fb      	strb	r3, [r7, #15]
  uint8_t index;

  index = 0;
 800cc30:	2300      	movs	r3, #0
 800cc32:	73bb      	strb	r3, [r7, #14]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cc34:	e01b      	b.n	800cc6e <Write_Char+0x52>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
  {
    switch(UUID)
 800cc36:	88fb      	ldrh	r3, [r7, #6]
 800cc38:	f64f 6241 	movw	r2, #65089	@ 0xfe41
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d112      	bne.n	800cc66 <Write_Char+0x4a>
    {
      case P2P_WRITE_CHAR_UUID: /* SERVER RX -- so CLIENT TX */
        ret = aci_gatt_write_without_resp(aP2PClientContext[index].connHandle,
 800cc40:	7bbb      	ldrb	r3, [r7, #14]
 800cc42:	4a12      	ldr	r2, [pc, #72]	@ (800cc8c <Write_Char+0x70>)
 800cc44:	011b      	lsls	r3, r3, #4
 800cc46:	4413      	add	r3, r2
 800cc48:	3302      	adds	r3, #2
 800cc4a:	8818      	ldrh	r0, [r3, #0]
 800cc4c:	7bbb      	ldrb	r3, [r7, #14]
 800cc4e:	4a0f      	ldr	r2, [pc, #60]	@ (800cc8c <Write_Char+0x70>)
 800cc50:	011b      	lsls	r3, r3, #4
 800cc52:	4413      	add	r3, r2
 800cc54:	3308      	adds	r3, #8
 800cc56:	8819      	ldrh	r1, [r3, #0]
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	2202      	movs	r2, #2
 800cc5c:	f7fc fc89 	bl	8009572 <aci_gatt_write_without_resp>
 800cc60:	4603      	mov	r3, r0
 800cc62:	73fb      	strb	r3, [r7, #15]
                                         aP2PClientContext[index].P2PWriteToServerCharHdle,
                                         2, /* charValueLen */
                                         (uint8_t *)  pPayload);
        break;
 800cc64:	e000      	b.n	800cc68 <Write_Char+0x4c>
      default:
        break;
 800cc66:	bf00      	nop
    }
    index++;
 800cc68:	7bbb      	ldrb	r3, [r7, #14]
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	73bb      	strb	r3, [r7, #14]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cc6e:	7bbb      	ldrb	r3, [r7, #14]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d106      	bne.n	800cc82 <Write_Char+0x66>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
 800cc74:	7bbb      	ldrb	r3, [r7, #14]
 800cc76:	4a05      	ldr	r2, [pc, #20]	@ (800cc8c <Write_Char+0x70>)
 800cc78:	011b      	lsls	r3, r3, #4
 800cc7a:	4413      	add	r3, r2
 800cc7c:	781b      	ldrb	r3, [r3, #0]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d1d9      	bne.n	800cc36 <Write_Char+0x1a>
  }

  return ret;
 800cc82:	7bfb      	ldrb	r3, [r7, #15]
}/* end Write_Char() */
 800cc84:	4618      	mov	r0, r3
 800cc86:	3710      	adds	r7, #16
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}
 800cc8c:	2000153c 	.word	0x2000153c

0800cc90 <Button_Trigger_Received>:

void Button_Trigger_Received(void)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	af00      	add	r7, sp, #0
  APP_DBG_MSG("-- P2P APPLICATION CLIENT  : BUTTON 1 PUSHED - WRITE TO SERVER \n ");
 800cc94:	4808      	ldr	r0, [pc, #32]	@ (800ccb8 <Button_Trigger_Received+0x28>)
 800cc96:	f000 feb1 	bl	800d9fc <iprintf>
  APP_DBG_MSG(" \n\r");
 800cc9a:	4808      	ldr	r0, [pc, #32]	@ (800ccbc <Button_Trigger_Received+0x2c>)
 800cc9c:	f000 feae 	bl	800d9fc <iprintf>

  P2P_Client_App_Context.ButtonStatus.Button1 = 0x01;
 800cca0:	4b07      	ldr	r3, [pc, #28]	@ (800ccc0 <Button_Trigger_Received+0x30>)
 800cca2:	2201      	movs	r2, #1
 800cca4:	711a      	strb	r2, [r3, #4]

  Write_Char( P2P_WRITE_CHAR_UUID, 0, (uint8_t *)&P2P_Client_App_Context.ButtonStatus);
 800cca6:	4a07      	ldr	r2, [pc, #28]	@ (800ccc4 <Button_Trigger_Received+0x34>)
 800cca8:	2100      	movs	r1, #0
 800ccaa:	f64f 6041 	movw	r0, #65089	@ 0xfe41
 800ccae:	f7ff ffb5 	bl	800cc1c <Write_Char>
}
 800ccb2:	bf00      	nop
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	0800fc30 	.word	0x0800fc30
 800ccbc:	0800fbec 	.word	0x0800fbec
 800ccc0:	200000e0 	.word	0x200000e0
 800ccc4:	200000e3 	.word	0x200000e3

0800ccc8 <Button2_Trigger_Received>:

void Button2_Trigger_Received(void)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	af00      	add	r7, sp, #0
  APP_DBG_MSG("-- P2P APPLICATION CLIENT  : BUTTON 2 PUSHED - WRITE TO SERVER \n ");
 800cccc:	4808      	ldr	r0, [pc, #32]	@ (800ccf0 <Button2_Trigger_Received+0x28>)
 800ccce:	f000 fe95 	bl	800d9fc <iprintf>
  APP_DBG_MSG(" \n\r");
 800ccd2:	4808      	ldr	r0, [pc, #32]	@ (800ccf4 <Button2_Trigger_Received+0x2c>)
 800ccd4:	f000 fe92 	bl	800d9fc <iprintf>

  P2P_Client_App_Context.Button2Status.Button1 = 0x02;
 800ccd8:	4b07      	ldr	r3, [pc, #28]	@ (800ccf8 <Button2_Trigger_Received+0x30>)
 800ccda:	2202      	movs	r2, #2
 800ccdc:	719a      	strb	r2, [r3, #6]

  Write_Char( P2P_WRITE_CHAR_UUID, 0, (uint8_t *)&P2P_Client_App_Context.Button2Status);
 800ccde:	4a07      	ldr	r2, [pc, #28]	@ (800ccfc <Button2_Trigger_Received+0x34>)
 800cce0:	2100      	movs	r1, #0
 800cce2:	f64f 6041 	movw	r0, #65089	@ 0xfe41
 800cce6:	f7ff ff99 	bl	800cc1c <Write_Char>
}
 800ccea:	bf00      	nop
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	0800fc74 	.word	0x0800fc74
 800ccf4:	0800fbec 	.word	0x0800fbec
 800ccf8:	200000e0 	.word	0x200000e0
 800ccfc:	200000e5 	.word	0x200000e5

0800cd00 <Update_Service>:

void Update_Service()
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b082      	sub	sp, #8
 800cd04:	af00      	add	r7, sp, #0
  uint16_t enable = 0x0001;
 800cd06:	2301      	movs	r3, #1
 800cd08:	80bb      	strh	r3, [r7, #4]
  uint16_t disable = 0x0000;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	807b      	strh	r3, [r7, #2]
  uint8_t index;

  index = 0;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cd12:	e0ac      	b.n	800ce6e <Update_Service+0x16e>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
  {
    switch(aP2PClientContext[index].state)
 800cd14:	79fb      	ldrb	r3, [r7, #7]
 800cd16:	4a5e      	ldr	r2, [pc, #376]	@ (800ce90 <Update_Service+0x190>)
 800cd18:	011b      	lsls	r3, r3, #4
 800cd1a:	4413      	add	r3, r2
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	3b07      	subs	r3, #7
 800cd20:	2b05      	cmp	r3, #5
 800cd22:	f200 80a0 	bhi.w	800ce66 <Update_Service+0x166>
 800cd26:	a201      	add	r2, pc, #4	@ (adr r2, 800cd2c <Update_Service+0x2c>)
 800cd28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd2c:	0800cd45 	.word	0x0800cd45
 800cd30:	0800cd4d 	.word	0x0800cd4d
 800cd34:	0800cd7f 	.word	0x0800cd7f
 800cd38:	0800cdb5 	.word	0x0800cdb5
 800cd3c:	0800cdeb 	.word	0x0800cdeb
 800cd40:	0800ce33 	.word	0x0800ce33
    {
      case APP_BLE_DISCOVER_SERVICES:
        APP_DBG_MSG("P2P_DISCOVER_SERVICES\n");
 800cd44:	4853      	ldr	r0, [pc, #332]	@ (800ce94 <Update_Service+0x194>)
 800cd46:	f000 fec9 	bl	800dadc <puts>
        break;
 800cd4a:	e08d      	b.n	800ce68 <Update_Service+0x168>
      case APP_BLE_DISCOVER_CHARACS:
        APP_DBG_MSG("* GATT : Discover P2P Characteristics\n");
 800cd4c:	4852      	ldr	r0, [pc, #328]	@ (800ce98 <Update_Service+0x198>)
 800cd4e:	f000 fec5 	bl	800dadc <puts>
        aci_gatt_disc_all_char_of_service(aP2PClientContext[index].connHandle,
 800cd52:	79fb      	ldrb	r3, [r7, #7]
 800cd54:	4a4e      	ldr	r2, [pc, #312]	@ (800ce90 <Update_Service+0x190>)
 800cd56:	011b      	lsls	r3, r3, #4
 800cd58:	4413      	add	r3, r2
 800cd5a:	3302      	adds	r3, #2
 800cd5c:	8818      	ldrh	r0, [r3, #0]
 800cd5e:	79fb      	ldrb	r3, [r7, #7]
 800cd60:	4a4b      	ldr	r2, [pc, #300]	@ (800ce90 <Update_Service+0x190>)
 800cd62:	011b      	lsls	r3, r3, #4
 800cd64:	4413      	add	r3, r2
 800cd66:	3304      	adds	r3, #4
 800cd68:	8819      	ldrh	r1, [r3, #0]
 800cd6a:	79fb      	ldrb	r3, [r7, #7]
 800cd6c:	4a48      	ldr	r2, [pc, #288]	@ (800ce90 <Update_Service+0x190>)
 800cd6e:	011b      	lsls	r3, r3, #4
 800cd70:	4413      	add	r3, r2
 800cd72:	3306      	adds	r3, #6
 800cd74:	881b      	ldrh	r3, [r3, #0]
 800cd76:	461a      	mov	r2, r3
 800cd78:	f7fc fa5a 	bl	8009230 <aci_gatt_disc_all_char_of_service>
                                          aP2PClientContext[index].P2PServiceHandle,
                                          aP2PClientContext[index].P2PServiceEndHandle);
        break;
 800cd7c:	e074      	b.n	800ce68 <Update_Service+0x168>
      case APP_BLE_DISCOVER_WRITE_DESC: /* Not Used - No descriptor */
        APP_DBG_MSG("* GATT : Discover Descriptor of TX - Write Characteritic\n");
 800cd7e:	4847      	ldr	r0, [pc, #284]	@ (800ce9c <Update_Service+0x19c>)
 800cd80:	f000 feac 	bl	800dadc <puts>
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800cd84:	79fb      	ldrb	r3, [r7, #7]
 800cd86:	4a42      	ldr	r2, [pc, #264]	@ (800ce90 <Update_Service+0x190>)
 800cd88:	011b      	lsls	r3, r3, #4
 800cd8a:	4413      	add	r3, r2
 800cd8c:	3302      	adds	r3, #2
 800cd8e:	8818      	ldrh	r0, [r3, #0]
 800cd90:	79fb      	ldrb	r3, [r7, #7]
 800cd92:	4a3f      	ldr	r2, [pc, #252]	@ (800ce90 <Update_Service+0x190>)
 800cd94:	011b      	lsls	r3, r3, #4
 800cd96:	4413      	add	r3, r2
 800cd98:	3308      	adds	r3, #8
 800cd9a:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PWriteToServerCharHdle,
                                    aP2PClientContext[index].P2PWriteToServerCharHdle+2);
 800cd9c:	79fb      	ldrb	r3, [r7, #7]
 800cd9e:	4a3c      	ldr	r2, [pc, #240]	@ (800ce90 <Update_Service+0x190>)
 800cda0:	011b      	lsls	r3, r3, #4
 800cda2:	4413      	add	r3, r2
 800cda4:	3308      	adds	r3, #8
 800cda6:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800cda8:	3302      	adds	r3, #2
 800cdaa:	b29b      	uxth	r3, r3
 800cdac:	461a      	mov	r2, r3
 800cdae:	f7fc fac0 	bl	8009332 <aci_gatt_disc_all_char_desc>
        break;
 800cdb2:	e059      	b.n	800ce68 <Update_Service+0x168>
      case APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC:
        APP_DBG_MSG("* GATT : Discover Descriptor of Rx - Notification Characteritic\n");
 800cdb4:	483a      	ldr	r0, [pc, #232]	@ (800cea0 <Update_Service+0x1a0>)
 800cdb6:	f000 fe91 	bl	800dadc <puts>
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800cdba:	79fb      	ldrb	r3, [r7, #7]
 800cdbc:	4a34      	ldr	r2, [pc, #208]	@ (800ce90 <Update_Service+0x190>)
 800cdbe:	011b      	lsls	r3, r3, #4
 800cdc0:	4413      	add	r3, r2
 800cdc2:	3302      	adds	r3, #2
 800cdc4:	8818      	ldrh	r0, [r3, #0]
 800cdc6:	79fb      	ldrb	r3, [r7, #7]
 800cdc8:	4a31      	ldr	r2, [pc, #196]	@ (800ce90 <Update_Service+0x190>)
 800cdca:	011b      	lsls	r3, r3, #4
 800cdcc:	4413      	add	r3, r2
 800cdce:	330c      	adds	r3, #12
 800cdd0:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PNotificationCharHdle,
                                    aP2PClientContext[index].P2PNotificationCharHdle+2);
 800cdd2:	79fb      	ldrb	r3, [r7, #7]
 800cdd4:	4a2e      	ldr	r2, [pc, #184]	@ (800ce90 <Update_Service+0x190>)
 800cdd6:	011b      	lsls	r3, r3, #4
 800cdd8:	4413      	add	r3, r2
 800cdda:	330c      	adds	r3, #12
 800cddc:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800cdde:	3302      	adds	r3, #2
 800cde0:	b29b      	uxth	r3, r3
 800cde2:	461a      	mov	r2, r3
 800cde4:	f7fc faa5 	bl	8009332 <aci_gatt_disc_all_char_desc>
        break;
 800cde8:	e03e      	b.n	800ce68 <Update_Service+0x168>
      case APP_BLE_ENABLE_NOTIFICATION_DESC:
        APP_DBG_MSG("* GATT : Enable Server Notification\n");
 800cdea:	482e      	ldr	r0, [pc, #184]	@ (800cea4 <Update_Service+0x1a4>)
 800cdec:	f000 fe76 	bl	800dadc <puts>
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 800cdf0:	79fb      	ldrb	r3, [r7, #7]
 800cdf2:	4a27      	ldr	r2, [pc, #156]	@ (800ce90 <Update_Service+0x190>)
 800cdf4:	011b      	lsls	r3, r3, #4
 800cdf6:	4413      	add	r3, r2
 800cdf8:	3302      	adds	r3, #2
 800cdfa:	8818      	ldrh	r0, [r3, #0]
 800cdfc:	79fb      	ldrb	r3, [r7, #7]
 800cdfe:	4a24      	ldr	r2, [pc, #144]	@ (800ce90 <Update_Service+0x190>)
 800ce00:	011b      	lsls	r3, r3, #4
 800ce02:	4413      	add	r3, r2
 800ce04:	330e      	adds	r3, #14
 800ce06:	8819      	ldrh	r1, [r3, #0]
 800ce08:	1d3b      	adds	r3, r7, #4
 800ce0a:	2202      	movs	r2, #2
 800ce0c:	f7fc fb12 	bl	8009434 <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&enable);
        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 800ce10:	79fb      	ldrb	r3, [r7, #7]
 800ce12:	4a1f      	ldr	r2, [pc, #124]	@ (800ce90 <Update_Service+0x190>)
 800ce14:	011b      	lsls	r3, r3, #4
 800ce16:	4413      	add	r3, r2
 800ce18:	2206      	movs	r2, #6
 800ce1a:	701a      	strb	r2, [r3, #0]
        
        UTIL_SEQ_SetTask( 1<<CFG_TASK_BLE_CLIENT_PAIRING_REQUEST_ID, CFG_SCH_PRIO_1); // [STM]
 800ce1c:	2101      	movs	r1, #1
 800ce1e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ce22:	f000 fbed 	bl	800d600 <UTIL_SEQ_SetTask>
        
        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800ce26:	2200      	movs	r2, #0
 800ce28:	2102      	movs	r1, #2
 800ce2a:	481f      	ldr	r0, [pc, #124]	@ (800cea8 <Update_Service+0x1a8>)
 800ce2c:	f7f6 fce6 	bl	80037fc <HAL_GPIO_WritePin>
        break;
 800ce30:	e01a      	b.n	800ce68 <Update_Service+0x168>
      case APP_BLE_DISABLE_NOTIFICATION_DESC :
        APP_DBG_MSG("* GATT : Disable Server Notification\n");
 800ce32:	481e      	ldr	r0, [pc, #120]	@ (800ceac <Update_Service+0x1ac>)
 800ce34:	f000 fe52 	bl	800dadc <puts>
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 800ce38:	79fb      	ldrb	r3, [r7, #7]
 800ce3a:	4a15      	ldr	r2, [pc, #84]	@ (800ce90 <Update_Service+0x190>)
 800ce3c:	011b      	lsls	r3, r3, #4
 800ce3e:	4413      	add	r3, r2
 800ce40:	3302      	adds	r3, #2
 800ce42:	8818      	ldrh	r0, [r3, #0]
 800ce44:	79fb      	ldrb	r3, [r7, #7]
 800ce46:	4a12      	ldr	r2, [pc, #72]	@ (800ce90 <Update_Service+0x190>)
 800ce48:	011b      	lsls	r3, r3, #4
 800ce4a:	4413      	add	r3, r2
 800ce4c:	330e      	adds	r3, #14
 800ce4e:	8819      	ldrh	r1, [r3, #0]
 800ce50:	1cbb      	adds	r3, r7, #2
 800ce52:	2202      	movs	r2, #2
 800ce54:	f7fc faee 	bl	8009434 <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&disable);
        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 800ce58:	79fb      	ldrb	r3, [r7, #7]
 800ce5a:	4a0d      	ldr	r2, [pc, #52]	@ (800ce90 <Update_Service+0x190>)
 800ce5c:	011b      	lsls	r3, r3, #4
 800ce5e:	4413      	add	r3, r2
 800ce60:	2206      	movs	r2, #6
 800ce62:	701a      	strb	r2, [r3, #0]
        break;
 800ce64:	e000      	b.n	800ce68 <Update_Service+0x168>
      default:
        break;
 800ce66:	bf00      	nop
    }
    index++;
 800ce68:	79fb      	ldrb	r3, [r7, #7]
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ce6e:	79fb      	ldrb	r3, [r7, #7]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d108      	bne.n	800ce86 <Update_Service+0x186>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
 800ce74:	79fb      	ldrb	r3, [r7, #7]
 800ce76:	4a06      	ldr	r2, [pc, #24]	@ (800ce90 <Update_Service+0x190>)
 800ce78:	011b      	lsls	r3, r3, #4
 800ce7a:	4413      	add	r3, r2
 800ce7c:	781b      	ldrb	r3, [r3, #0]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	f47f af48 	bne.w	800cd14 <Update_Service+0x14>
  }
  return;
 800ce84:	bf00      	nop
 800ce86:	bf00      	nop
}
 800ce88:	3708      	adds	r7, #8
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	2000153c 	.word	0x2000153c
 800ce94:	0800fcb8 	.word	0x0800fcb8
 800ce98:	0800fcd0 	.word	0x0800fcd0
 800ce9c:	0800fcf8 	.word	0x0800fcf8
 800cea0:	0800fd34 	.word	0x0800fd34
 800cea4:	0800fd74 	.word	0x0800fd74
 800cea8:	48000400 	.word	0x48000400
 800ceac:	0800fd98 	.word	0x0800fd98

0800ceb0 <LL_PWR_EnableBootC2>:
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800ceb4:	4b05      	ldr	r3, [pc, #20]	@ (800cecc <LL_PWR_EnableBootC2+0x1c>)
 800ceb6:	68db      	ldr	r3, [r3, #12]
 800ceb8:	4a04      	ldr	r2, [pc, #16]	@ (800cecc <LL_PWR_EnableBootC2+0x1c>)
 800ceba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cebe:	60d3      	str	r3, [r2, #12]
}
 800cec0:	bf00      	nop
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr
 800ceca:	bf00      	nop
 800cecc:	58000400 	.word	0x58000400

0800ced0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800ced0:	b480      	push	{r7}
 800ced2:	b083      	sub	sp, #12
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800ced8:	4b06      	ldr	r3, [pc, #24]	@ (800cef4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800ceda:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800cede:	4905      	ldr	r1, [pc, #20]	@ (800cef4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	4313      	orrs	r3, r2
 800cee4:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800cee8:	bf00      	nop
 800ceea:	370c      	adds	r7, #12
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr
 800cef4:	58000800 	.word	0x58000800

0800cef8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b083      	sub	sp, #12
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800cf00:	4b05      	ldr	r3, [pc, #20]	@ (800cf18 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800cf02:	6a1a      	ldr	r2, [r3, #32]
 800cf04:	4904      	ldr	r1, [pc, #16]	@ (800cf18 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	4313      	orrs	r3, r2
 800cf0a:	620b      	str	r3, [r1, #32]
}
 800cf0c:	bf00      	nop
 800cf0e:	370c      	adds	r7, #12
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr
 800cf18:	58000800 	.word	0x58000800

0800cf1c <LL_AHB3_GRP1_EnableClock>:
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b085      	sub	sp, #20
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800cf24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cf2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	4313      	orrs	r3, r2
 800cf32:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800cf34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	4013      	ands	r3, r2
 800cf3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800cf40:	68fb      	ldr	r3, [r7, #12]
}
 800cf42:	bf00      	nop
 800cf44:	3714      	adds	r7, #20
 800cf46:	46bd      	mov	sp, r7
 800cf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4c:	4770      	bx	lr

0800cf4e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800cf4e:	b480      	push	{r7}
 800cf50:	b085      	sub	sp, #20
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800cf56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf5a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800cf5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	4313      	orrs	r3, r2
 800cf66:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800cf6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf6e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	4013      	ands	r3, r2
 800cf76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800cf78:	68fb      	ldr	r3, [r7, #12]
}
 800cf7a:	bf00      	nop
 800cf7c:	3714      	adds	r7, #20
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr

0800cf86 <LL_C1_IPCC_EnableIT_TXF>:
{
 800cf86:	b480      	push	{r7}
 800cf88:	b083      	sub	sp, #12
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	601a      	str	r2, [r3, #0]
}
 800cf9a:	bf00      	nop
 800cf9c:	370c      	adds	r7, #12
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa4:	4770      	bx	lr

0800cfa6 <LL_C1_IPCC_EnableIT_RXO>:
{
 800cfa6:	b480      	push	{r7}
 800cfa8:	b083      	sub	sp, #12
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f043 0201 	orr.w	r2, r3, #1
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	601a      	str	r2, [r3, #0]
}
 800cfba:	bf00      	nop
 800cfbc:	370c      	adds	r7, #12
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc4:	4770      	bx	lr

0800cfc6 <LL_C1_IPCC_EnableTransmitChannel>:
{
 800cfc6:	b480      	push	{r7}
 800cfc8:	b083      	sub	sp, #12
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
 800cfce:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	685a      	ldr	r2, [r3, #4]
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	041b      	lsls	r3, r3, #16
 800cfd8:	43db      	mvns	r3, r3
 800cfda:	401a      	ands	r2, r3
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	605a      	str	r2, [r3, #4]
}
 800cfe0:	bf00      	nop
 800cfe2:	370c      	adds	r7, #12
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr

0800cfec <LL_C1_IPCC_DisableTransmitChannel>:
{
 800cfec:	b480      	push	{r7}
 800cfee:	b083      	sub	sp, #12
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	685a      	ldr	r2, [r3, #4]
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	041b      	lsls	r3, r3, #16
 800cffe:	431a      	orrs	r2, r3
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	605a      	str	r2, [r3, #4]
}
 800d004:	bf00      	nop
 800d006:	370c      	adds	r7, #12
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr

0800d010 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	685a      	ldr	r2, [r3, #4]
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	43db      	mvns	r3, r3
 800d022:	401a      	ands	r2, r3
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	605a      	str	r2, [r3, #4]
}
 800d028:	bf00      	nop
 800d02a:	370c      	adds	r7, #12
 800d02c:	46bd      	mov	sp, r7
 800d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d032:	4770      	bx	lr

0800d034 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800d034:	b480      	push	{r7}
 800d036:	b083      	sub	sp, #12
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	683a      	ldr	r2, [r7, #0]
 800d042:	609a      	str	r2, [r3, #8]
}
 800d044:	bf00      	nop
 800d046:	370c      	adds	r7, #12
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	4770      	bx	lr

0800d050 <LL_C1_IPCC_SetFlag_CHx>:
{
 800d050:	b480      	push	{r7}
 800d052:	b083      	sub	sp, #12
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
 800d058:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	041a      	lsls	r2, r3, #16
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	609a      	str	r2, [r3, #8]
}
 800d062:	bf00      	nop
 800d064:	370c      	adds	r7, #12
 800d066:	46bd      	mov	sp, r7
 800d068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06c:	4770      	bx	lr

0800d06e <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800d06e:	b480      	push	{r7}
 800d070:	b083      	sub	sp, #12
 800d072:	af00      	add	r7, sp, #0
 800d074:	6078      	str	r0, [r7, #4]
 800d076:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	68da      	ldr	r2, [r3, #12]
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	4013      	ands	r3, r2
 800d080:	683a      	ldr	r2, [r7, #0]
 800d082:	429a      	cmp	r2, r3
 800d084:	d101      	bne.n	800d08a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800d086:	2301      	movs	r3, #1
 800d088:	e000      	b.n	800d08c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800d08a:	2300      	movs	r3, #0
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	370c      	adds	r7, #12
 800d090:	46bd      	mov	sp, r7
 800d092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d096:	4770      	bx	lr

0800d098 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d098:	b480      	push	{r7}
 800d09a:	b083      	sub	sp, #12
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	69da      	ldr	r2, [r3, #28]
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	4013      	ands	r3, r2
 800d0aa:	683a      	ldr	r2, [r7, #0]
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d101      	bne.n	800d0b4 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	e000      	b.n	800d0b6 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800d0b4:	2300      	movs	r3, #0
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	370c      	adds	r7, #12
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c0:	4770      	bx	lr
	...

0800d0c4 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800d0c8:	2102      	movs	r1, #2
 800d0ca:	4818      	ldr	r0, [pc, #96]	@ (800d12c <HW_IPCC_Rx_Handler+0x68>)
 800d0cc:	f7ff ffe4 	bl	800d098 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d008      	beq.n	800d0e8 <HW_IPCC_Rx_Handler+0x24>
 800d0d6:	4b15      	ldr	r3, [pc, #84]	@ (800d12c <HW_IPCC_Rx_Handler+0x68>)
 800d0d8:	685b      	ldr	r3, [r3, #4]
 800d0da:	f003 0302 	and.w	r3, r3, #2
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d102      	bne.n	800d0e8 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800d0e2:	f000 f8d5 	bl	800d290 <HW_IPCC_SYS_EvtHandler>
 800d0e6:	e01e      	b.n	800d126 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800d0e8:	2101      	movs	r1, #1
 800d0ea:	4810      	ldr	r0, [pc, #64]	@ (800d12c <HW_IPCC_Rx_Handler+0x68>)
 800d0ec:	f7ff ffd4 	bl	800d098 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d008      	beq.n	800d108 <HW_IPCC_Rx_Handler+0x44>
 800d0f6:	4b0d      	ldr	r3, [pc, #52]	@ (800d12c <HW_IPCC_Rx_Handler+0x68>)
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	f003 0301 	and.w	r3, r3, #1
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d102      	bne.n	800d108 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800d102:	f000 f889 	bl	800d218 <HW_IPCC_BLE_EvtHandler>
 800d106:	e00e      	b.n	800d126 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800d108:	2108      	movs	r1, #8
 800d10a:	4808      	ldr	r0, [pc, #32]	@ (800d12c <HW_IPCC_Rx_Handler+0x68>)
 800d10c:	f7ff ffc4 	bl	800d098 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d110:	4603      	mov	r3, r0
 800d112:	2b00      	cmp	r3, #0
 800d114:	d008      	beq.n	800d128 <HW_IPCC_Rx_Handler+0x64>
 800d116:	4b05      	ldr	r3, [pc, #20]	@ (800d12c <HW_IPCC_Rx_Handler+0x68>)
 800d118:	685b      	ldr	r3, [r3, #4]
 800d11a:	f003 0308 	and.w	r3, r3, #8
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d102      	bne.n	800d128 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800d122:	f000 f901 	bl	800d328 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800d126:	bf00      	nop
 800d128:	bf00      	nop
}
 800d12a:	bd80      	pop	{r7, pc}
 800d12c:	58000c00 	.word	0x58000c00

0800d130 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800d130:	b580      	push	{r7, lr}
 800d132:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d134:	2102      	movs	r1, #2
 800d136:	4818      	ldr	r0, [pc, #96]	@ (800d198 <HW_IPCC_Tx_Handler+0x68>)
 800d138:	f7ff ff99 	bl	800d06e <LL_C1_IPCC_IsActiveFlag_CHx>
 800d13c:	4603      	mov	r3, r0
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d108      	bne.n	800d154 <HW_IPCC_Tx_Handler+0x24>
 800d142:	4b15      	ldr	r3, [pc, #84]	@ (800d198 <HW_IPCC_Tx_Handler+0x68>)
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d102      	bne.n	800d154 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d14e:	f000 f893 	bl	800d278 <HW_IPCC_SYS_CmdEvtHandler>
 800d152:	e01e      	b.n	800d192 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800d154:	2108      	movs	r1, #8
 800d156:	4810      	ldr	r0, [pc, #64]	@ (800d198 <HW_IPCC_Tx_Handler+0x68>)
 800d158:	f7ff ff89 	bl	800d06e <LL_C1_IPCC_IsActiveFlag_CHx>
 800d15c:	4603      	mov	r3, r0
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d108      	bne.n	800d174 <HW_IPCC_Tx_Handler+0x44>
 800d162:	4b0d      	ldr	r3, [pc, #52]	@ (800d198 <HW_IPCC_Tx_Handler+0x68>)
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d102      	bne.n	800d174 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800d16e:	f000 f8bd 	bl	800d2ec <HW_IPCC_MM_FreeBufHandler>
 800d172:	e00e      	b.n	800d192 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800d174:	2120      	movs	r1, #32
 800d176:	4808      	ldr	r0, [pc, #32]	@ (800d198 <HW_IPCC_Tx_Handler+0x68>)
 800d178:	f7ff ff79 	bl	800d06e <LL_C1_IPCC_IsActiveFlag_CHx>
 800d17c:	4603      	mov	r3, r0
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d108      	bne.n	800d194 <HW_IPCC_Tx_Handler+0x64>
 800d182:	4b05      	ldr	r3, [pc, #20]	@ (800d198 <HW_IPCC_Tx_Handler+0x68>)
 800d184:	685b      	ldr	r3, [r3, #4]
 800d186:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d102      	bne.n	800d194 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800d18e:	f000 f84f 	bl	800d230 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800d192:	bf00      	nop
 800d194:	bf00      	nop
}
 800d196:	bd80      	pop	{r7, pc}
 800d198:	58000c00 	.word	0x58000c00

0800d19c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800d1a0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d1a4:	f7ff fed3 	bl	800cf4e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800d1a8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d1ac:	f7ff fea4 	bl	800cef8 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800d1b0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d1b4:	f7ff fe8c 	bl	800ced0 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800d1b8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800d1ba:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800d1bc:	f7ff fe78 	bl	800ceb0 <LL_PWR_EnableBootC2>

  return;
 800d1c0:	bf00      	nop
}
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800d1c8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d1cc:	f7ff fea6 	bl	800cf1c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800d1d0:	4806      	ldr	r0, [pc, #24]	@ (800d1ec <HW_IPCC_Init+0x28>)
 800d1d2:	f7ff fee8 	bl	800cfa6 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800d1d6:	4805      	ldr	r0, [pc, #20]	@ (800d1ec <HW_IPCC_Init+0x28>)
 800d1d8:	f7ff fed5 	bl	800cf86 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800d1dc:	202c      	movs	r0, #44	@ 0x2c
 800d1de:	f7f5 fe0e 	bl	8002dfe <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800d1e2:	202d      	movs	r0, #45	@ 0x2d
 800d1e4:	f7f5 fe0b 	bl	8002dfe <HAL_NVIC_EnableIRQ>

  return;
 800d1e8:	bf00      	nop
}
 800d1ea:	bd80      	pop	{r7, pc}
 800d1ec:	58000c00 	.word	0x58000c00

0800d1f0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d1f4:	2101      	movs	r1, #1
 800d1f6:	4802      	ldr	r0, [pc, #8]	@ (800d200 <HW_IPCC_BLE_Init+0x10>)
 800d1f8:	f7ff ff0a 	bl	800d010 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d1fc:	bf00      	nop
}
 800d1fe:	bd80      	pop	{r7, pc}
 800d200:	58000c00 	.word	0x58000c00

0800d204 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800d204:	b580      	push	{r7, lr}
 800d206:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800d208:	2101      	movs	r1, #1
 800d20a:	4802      	ldr	r0, [pc, #8]	@ (800d214 <HW_IPCC_BLE_SendCmd+0x10>)
 800d20c:	f7ff ff20 	bl	800d050 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d210:	bf00      	nop
}
 800d212:	bd80      	pop	{r7, pc}
 800d214:	58000c00 	.word	0x58000c00

0800d218 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800d21c:	f7fd fa94 	bl	800a748 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d220:	2101      	movs	r1, #1
 800d222:	4802      	ldr	r0, [pc, #8]	@ (800d22c <HW_IPCC_BLE_EvtHandler+0x14>)
 800d224:	f7ff ff06 	bl	800d034 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d228:	bf00      	nop
}
 800d22a:	bd80      	pop	{r7, pc}
 800d22c:	58000c00 	.word	0x58000c00

0800d230 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800d230:	b580      	push	{r7, lr}
 800d232:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800d234:	2120      	movs	r1, #32
 800d236:	4803      	ldr	r0, [pc, #12]	@ (800d244 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800d238:	f7ff fed8 	bl	800cfec <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800d23c:	f7fd fab4 	bl	800a7a8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800d240:	bf00      	nop
}
 800d242:	bd80      	pop	{r7, pc}
 800d244:	58000c00 	.word	0x58000c00

0800d248 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d24c:	2102      	movs	r1, #2
 800d24e:	4802      	ldr	r0, [pc, #8]	@ (800d258 <HW_IPCC_SYS_Init+0x10>)
 800d250:	f7ff fede 	bl	800d010 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d254:	bf00      	nop
}
 800d256:	bd80      	pop	{r7, pc}
 800d258:	58000c00 	.word	0x58000c00

0800d25c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d260:	2102      	movs	r1, #2
 800d262:	4804      	ldr	r0, [pc, #16]	@ (800d274 <HW_IPCC_SYS_SendCmd+0x18>)
 800d264:	f7ff fef4 	bl	800d050 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d268:	2102      	movs	r1, #2
 800d26a:	4802      	ldr	r0, [pc, #8]	@ (800d274 <HW_IPCC_SYS_SendCmd+0x18>)
 800d26c:	f7ff feab 	bl	800cfc6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800d270:	bf00      	nop
}
 800d272:	bd80      	pop	{r7, pc}
 800d274:	58000c00 	.word	0x58000c00

0800d278 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d27c:	2102      	movs	r1, #2
 800d27e:	4803      	ldr	r0, [pc, #12]	@ (800d28c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800d280:	f7ff feb4 	bl	800cfec <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800d284:	f7fd fae0 	bl	800a848 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800d288:	bf00      	nop
}
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	58000c00 	.word	0x58000c00

0800d290 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800d290:	b580      	push	{r7, lr}
 800d292:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800d294:	f7fd faee 	bl	800a874 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d298:	2102      	movs	r1, #2
 800d29a:	4802      	ldr	r0, [pc, #8]	@ (800d2a4 <HW_IPCC_SYS_EvtHandler+0x14>)
 800d29c:	f7ff feca 	bl	800d034 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d2a0:	bf00      	nop
}
 800d2a2:	bd80      	pop	{r7, pc}
 800d2a4:	58000c00 	.word	0x58000c00

0800d2a8 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b082      	sub	sp, #8
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800d2b0:	2108      	movs	r1, #8
 800d2b2:	480c      	ldr	r0, [pc, #48]	@ (800d2e4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d2b4:	f7ff fedb 	bl	800d06e <LL_C1_IPCC_IsActiveFlag_CHx>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d007      	beq.n	800d2ce <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800d2be:	4a0a      	ldr	r2, [pc, #40]	@ (800d2e8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d2c4:	2108      	movs	r1, #8
 800d2c6:	4807      	ldr	r0, [pc, #28]	@ (800d2e4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d2c8:	f7ff fe7d 	bl	800cfc6 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800d2cc:	e006      	b.n	800d2dc <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d2d2:	2108      	movs	r1, #8
 800d2d4:	4803      	ldr	r0, [pc, #12]	@ (800d2e4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d2d6:	f7ff febb 	bl	800d050 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800d2da:	bf00      	nop
}
 800d2dc:	3708      	adds	r7, #8
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	58000c00 	.word	0x58000c00
 800d2e8:	2000154c 	.word	0x2000154c

0800d2ec <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d2f0:	2108      	movs	r1, #8
 800d2f2:	4806      	ldr	r0, [pc, #24]	@ (800d30c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d2f4:	f7ff fe7a 	bl	800cfec <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800d2f8:	4b05      	ldr	r3, [pc, #20]	@ (800d310 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d2fe:	2108      	movs	r1, #8
 800d300:	4802      	ldr	r0, [pc, #8]	@ (800d30c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d302:	f7ff fea5 	bl	800d050 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d306:	bf00      	nop
}
 800d308:	bd80      	pop	{r7, pc}
 800d30a:	bf00      	nop
 800d30c:	58000c00 	.word	0x58000c00
 800d310:	2000154c 	.word	0x2000154c

0800d314 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800d314:	b580      	push	{r7, lr}
 800d316:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d318:	2108      	movs	r1, #8
 800d31a:	4802      	ldr	r0, [pc, #8]	@ (800d324 <HW_IPCC_TRACES_Init+0x10>)
 800d31c:	f7ff fe78 	bl	800d010 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d320:	bf00      	nop
}
 800d322:	bd80      	pop	{r7, pc}
 800d324:	58000c00 	.word	0x58000c00

0800d328 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800d32c:	f7fd fb4a 	bl	800a9c4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d330:	2108      	movs	r1, #8
 800d332:	4802      	ldr	r0, [pc, #8]	@ (800d33c <HW_IPCC_TRACES_EvtHandler+0x14>)
 800d334:	f7ff fe7e 	bl	800d034 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d338:	bf00      	nop
}
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	58000c00 	.word	0x58000c00

0800d340 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800d340:	b480      	push	{r7}
 800d342:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800d344:	4b05      	ldr	r3, [pc, #20]	@ (800d35c <UTIL_LPM_Init+0x1c>)
 800d346:	2200      	movs	r2, #0
 800d348:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800d34a:	4b05      	ldr	r3, [pc, #20]	@ (800d360 <UTIL_LPM_Init+0x20>)
 800d34c:	2200      	movs	r2, #0
 800d34e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800d350:	bf00      	nop
 800d352:	46bd      	mov	sp, r7
 800d354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d358:	4770      	bx	lr
 800d35a:	bf00      	nop
 800d35c:	20001550 	.word	0x20001550
 800d360:	20001554 	.word	0x20001554

0800d364 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800d364:	b480      	push	{r7}
 800d366:	b087      	sub	sp, #28
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	460b      	mov	r3, r1
 800d36e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d370:	f3ef 8310 	mrs	r3, PRIMASK
 800d374:	613b      	str	r3, [r7, #16]
  return(result);
 800d376:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800d378:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d37a:	b672      	cpsid	i
}
 800d37c:	bf00      	nop
  
  switch(state)
 800d37e:	78fb      	ldrb	r3, [r7, #3]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d008      	beq.n	800d396 <UTIL_LPM_SetOffMode+0x32>
 800d384:	2b01      	cmp	r3, #1
 800d386:	d10e      	bne.n	800d3a6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800d388:	4b0d      	ldr	r3, [pc, #52]	@ (800d3c0 <UTIL_LPM_SetOffMode+0x5c>)
 800d38a:	681a      	ldr	r2, [r3, #0]
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	4313      	orrs	r3, r2
 800d390:	4a0b      	ldr	r2, [pc, #44]	@ (800d3c0 <UTIL_LPM_SetOffMode+0x5c>)
 800d392:	6013      	str	r3, [r2, #0]
      break;
 800d394:	e008      	b.n	800d3a8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	43da      	mvns	r2, r3
 800d39a:	4b09      	ldr	r3, [pc, #36]	@ (800d3c0 <UTIL_LPM_SetOffMode+0x5c>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	4013      	ands	r3, r2
 800d3a0:	4a07      	ldr	r2, [pc, #28]	@ (800d3c0 <UTIL_LPM_SetOffMode+0x5c>)
 800d3a2:	6013      	str	r3, [r2, #0]
      break;
 800d3a4:	e000      	b.n	800d3a8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800d3a6:	bf00      	nop
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	f383 8810 	msr	PRIMASK, r3
}
 800d3b2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800d3b4:	bf00      	nop
 800d3b6:	371c      	adds	r7, #28
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr
 800d3c0:	20001554 	.word	0x20001554

0800d3c4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b090      	sub	sp, #64	@ 0x40
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800d3cc:	4b73      	ldr	r3, [pc, #460]	@ (800d59c <UTIL_SEQ_Run+0x1d8>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800d3d2:	4b72      	ldr	r3, [pc, #456]	@ (800d59c <UTIL_SEQ_Run+0x1d8>)
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	4013      	ands	r3, r2
 800d3da:	4a70      	ldr	r2, [pc, #448]	@ (800d59c <UTIL_SEQ_Run+0x1d8>)
 800d3dc:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800d3de:	4b70      	ldr	r3, [pc, #448]	@ (800d5a0 <UTIL_SEQ_Run+0x1dc>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800d3e4:	4b6f      	ldr	r3, [pc, #444]	@ (800d5a4 <UTIL_SEQ_Run+0x1e0>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800d3ea:	4b6f      	ldr	r3, [pc, #444]	@ (800d5a8 <UTIL_SEQ_Run+0x1e4>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800d3f0:	4b6e      	ldr	r3, [pc, #440]	@ (800d5ac <UTIL_SEQ_Run+0x1e8>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800d3f6:	e08d      	b.n	800d514 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800d3fc:	e002      	b.n	800d404 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800d3fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d400:	3301      	adds	r3, #1
 800d402:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800d404:	4a6a      	ldr	r2, [pc, #424]	@ (800d5b0 <UTIL_SEQ_Run+0x1ec>)
 800d406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d408:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d40e:	401a      	ands	r2, r3
 800d410:	4b62      	ldr	r3, [pc, #392]	@ (800d59c <UTIL_SEQ_Run+0x1d8>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4013      	ands	r3, r2
 800d416:	2b00      	cmp	r3, #0
 800d418:	d0f1      	beq.n	800d3fe <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800d41a:	4a65      	ldr	r2, [pc, #404]	@ (800d5b0 <UTIL_SEQ_Run+0x1ec>)
 800d41c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d41e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d424:	401a      	ands	r2, r3
 800d426:	4b5d      	ldr	r3, [pc, #372]	@ (800d59c <UTIL_SEQ_Run+0x1d8>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	4013      	ands	r3, r2
 800d42c:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800d42e:	4a60      	ldr	r2, [pc, #384]	@ (800d5b0 <UTIL_SEQ_Run+0x1ec>)
 800d430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d432:	00db      	lsls	r3, r3, #3
 800d434:	4413      	add	r3, r2
 800d436:	685a      	ldr	r2, [r3, #4]
 800d438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d43a:	4013      	ands	r3, r2
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d106      	bne.n	800d44e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800d440:	4a5b      	ldr	r2, [pc, #364]	@ (800d5b0 <UTIL_SEQ_Run+0x1ec>)
 800d442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d444:	00db      	lsls	r3, r3, #3
 800d446:	4413      	add	r3, r2
 800d448:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d44c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800d44e:	4a58      	ldr	r2, [pc, #352]	@ (800d5b0 <UTIL_SEQ_Run+0x1ec>)
 800d450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d452:	00db      	lsls	r3, r3, #3
 800d454:	4413      	add	r3, r2
 800d456:	685a      	ldr	r2, [r3, #4]
 800d458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d45a:	4013      	ands	r3, r2
 800d45c:	4618      	mov	r0, r3
 800d45e:	f000 f9b3 	bl	800d7c8 <SEQ_BitPosition>
 800d462:	4603      	mov	r3, r0
 800d464:	461a      	mov	r2, r3
 800d466:	4b53      	ldr	r3, [pc, #332]	@ (800d5b4 <UTIL_SEQ_Run+0x1f0>)
 800d468:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800d46a:	4a51      	ldr	r2, [pc, #324]	@ (800d5b0 <UTIL_SEQ_Run+0x1ec>)
 800d46c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d46e:	00db      	lsls	r3, r3, #3
 800d470:	4413      	add	r3, r2
 800d472:	685a      	ldr	r2, [r3, #4]
 800d474:	4b4f      	ldr	r3, [pc, #316]	@ (800d5b4 <UTIL_SEQ_Run+0x1f0>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	2101      	movs	r1, #1
 800d47a:	fa01 f303 	lsl.w	r3, r1, r3
 800d47e:	43db      	mvns	r3, r3
 800d480:	401a      	ands	r2, r3
 800d482:	494b      	ldr	r1, [pc, #300]	@ (800d5b0 <UTIL_SEQ_Run+0x1ec>)
 800d484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d486:	00db      	lsls	r3, r3, #3
 800d488:	440b      	add	r3, r1
 800d48a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d48c:	f3ef 8310 	mrs	r3, PRIMASK
 800d490:	61bb      	str	r3, [r7, #24]
  return(result);
 800d492:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d494:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800d496:	b672      	cpsid	i
}
 800d498:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800d49a:	4b46      	ldr	r3, [pc, #280]	@ (800d5b4 <UTIL_SEQ_Run+0x1f0>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	2201      	movs	r2, #1
 800d4a0:	fa02 f303 	lsl.w	r3, r2, r3
 800d4a4:	43da      	mvns	r2, r3
 800d4a6:	4b3e      	ldr	r3, [pc, #248]	@ (800d5a0 <UTIL_SEQ_Run+0x1dc>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	4013      	ands	r3, r2
 800d4ac:	4a3c      	ldr	r2, [pc, #240]	@ (800d5a0 <UTIL_SEQ_Run+0x1dc>)
 800d4ae:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d4b0:	2302      	movs	r3, #2
 800d4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d4b4:	e013      	b.n	800d4de <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800d4b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4b8:	3b01      	subs	r3, #1
 800d4ba:	4a3d      	ldr	r2, [pc, #244]	@ (800d5b0 <UTIL_SEQ_Run+0x1ec>)
 800d4bc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800d4c0:	4b3c      	ldr	r3, [pc, #240]	@ (800d5b4 <UTIL_SEQ_Run+0x1f0>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	fa02 f303 	lsl.w	r3, r2, r3
 800d4ca:	43da      	mvns	r2, r3
 800d4cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4ce:	3b01      	subs	r3, #1
 800d4d0:	400a      	ands	r2, r1
 800d4d2:	4937      	ldr	r1, [pc, #220]	@ (800d5b0 <UTIL_SEQ_Run+0x1ec>)
 800d4d4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d4d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4da:	3b01      	subs	r3, #1
 800d4dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d4de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d1e8      	bne.n	800d4b6 <UTIL_SEQ_Run+0xf2>
 800d4e4:	6a3b      	ldr	r3, [r7, #32]
 800d4e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	f383 8810 	msr	PRIMASK, r3
}
 800d4ee:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800d4f0:	4b30      	ldr	r3, [pc, #192]	@ (800d5b4 <UTIL_SEQ_Run+0x1f0>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4a30      	ldr	r2, [pc, #192]	@ (800d5b8 <UTIL_SEQ_Run+0x1f4>)
 800d4f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4fa:	4798      	blx	r3

    local_taskset = TaskSet;
 800d4fc:	4b28      	ldr	r3, [pc, #160]	@ (800d5a0 <UTIL_SEQ_Run+0x1dc>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800d502:	4b28      	ldr	r3, [pc, #160]	@ (800d5a4 <UTIL_SEQ_Run+0x1e0>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800d508:	4b27      	ldr	r3, [pc, #156]	@ (800d5a8 <UTIL_SEQ_Run+0x1e4>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800d50e:	4b27      	ldr	r3, [pc, #156]	@ (800d5ac <UTIL_SEQ_Run+0x1e8>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800d514:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d518:	401a      	ands	r2, r3
 800d51a:	4b20      	ldr	r3, [pc, #128]	@ (800d59c <UTIL_SEQ_Run+0x1d8>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	4013      	ands	r3, r2
 800d520:	2b00      	cmp	r3, #0
 800d522:	d005      	beq.n	800d530 <UTIL_SEQ_Run+0x16c>
 800d524:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d528:	4013      	ands	r3, r2
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	f43f af64 	beq.w	800d3f8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800d530:	4b20      	ldr	r3, [pc, #128]	@ (800d5b4 <UTIL_SEQ_Run+0x1f0>)
 800d532:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d536:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800d538:	f000 f938 	bl	800d7ac <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d53c:	f3ef 8310 	mrs	r3, PRIMASK
 800d540:	613b      	str	r3, [r7, #16]
  return(result);
 800d542:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800d544:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d546:	b672      	cpsid	i
}
 800d548:	bf00      	nop
  local_taskset = TaskSet;
 800d54a:	4b15      	ldr	r3, [pc, #84]	@ (800d5a0 <UTIL_SEQ_Run+0x1dc>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800d550:	4b14      	ldr	r3, [pc, #80]	@ (800d5a4 <UTIL_SEQ_Run+0x1e0>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800d556:	4b14      	ldr	r3, [pc, #80]	@ (800d5a8 <UTIL_SEQ_Run+0x1e4>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800d55c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d55e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d560:	401a      	ands	r2, r3
 800d562:	4b0e      	ldr	r3, [pc, #56]	@ (800d59c <UTIL_SEQ_Run+0x1d8>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	4013      	ands	r3, r2
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d107      	bne.n	800d57c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800d56c:	4b0f      	ldr	r3, [pc, #60]	@ (800d5ac <UTIL_SEQ_Run+0x1e8>)
 800d56e:	681a      	ldr	r2, [r3, #0]
 800d570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d572:	4013      	ands	r3, r2
 800d574:	2b00      	cmp	r3, #0
 800d576:	d101      	bne.n	800d57c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800d578:	f7f3 fc82 	bl	8000e80 <UTIL_SEQ_Idle>
 800d57c:	69fb      	ldr	r3, [r7, #28]
 800d57e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f383 8810 	msr	PRIMASK, r3
}
 800d586:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800d588:	f000 f917 	bl	800d7ba <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800d58c:	4a03      	ldr	r2, [pc, #12]	@ (800d59c <UTIL_SEQ_Run+0x1d8>)
 800d58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d590:	6013      	str	r3, [r2, #0]

  return;
 800d592:	bf00      	nop
}
 800d594:	3740      	adds	r7, #64	@ 0x40
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}
 800d59a:	bf00      	nop
 800d59c:	20000030 	.word	0x20000030
 800d5a0:	20001558 	.word	0x20001558
 800d5a4:	2000155c 	.word	0x2000155c
 800d5a8:	2000002c 	.word	0x2000002c
 800d5ac:	20001560 	.word	0x20001560
 800d5b0:	200015e8 	.word	0x200015e8
 800d5b4:	20001564 	.word	0x20001564
 800d5b8:	20001568 	.word	0x20001568

0800d5bc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b088      	sub	sp, #32
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	60f8      	str	r0, [r7, #12]
 800d5c4:	60b9      	str	r1, [r7, #8]
 800d5c6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5c8:	f3ef 8310 	mrs	r3, PRIMASK
 800d5cc:	617b      	str	r3, [r7, #20]
  return(result);
 800d5ce:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800d5d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d5d2:	b672      	cpsid	i
}
 800d5d4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800d5d6:	68f8      	ldr	r0, [r7, #12]
 800d5d8:	f000 f8f6 	bl	800d7c8 <SEQ_BitPosition>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	4619      	mov	r1, r3
 800d5e0:	4a06      	ldr	r2, [pc, #24]	@ (800d5fc <UTIL_SEQ_RegTask+0x40>)
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d5e8:	69fb      	ldr	r3, [r7, #28]
 800d5ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5ec:	69bb      	ldr	r3, [r7, #24]
 800d5ee:	f383 8810 	msr	PRIMASK, r3
}
 800d5f2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800d5f4:	bf00      	nop
}
 800d5f6:	3720      	adds	r7, #32
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}
 800d5fc:	20001568 	.word	0x20001568

0800d600 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800d600:	b480      	push	{r7}
 800d602:	b087      	sub	sp, #28
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d60a:	f3ef 8310 	mrs	r3, PRIMASK
 800d60e:	60fb      	str	r3, [r7, #12]
  return(result);
 800d610:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d612:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d614:	b672      	cpsid	i
}
 800d616:	bf00      	nop

  TaskSet |= TaskId_bm;
 800d618:	4b0d      	ldr	r3, [pc, #52]	@ (800d650 <UTIL_SEQ_SetTask+0x50>)
 800d61a:	681a      	ldr	r2, [r3, #0]
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	4313      	orrs	r3, r2
 800d620:	4a0b      	ldr	r2, [pc, #44]	@ (800d650 <UTIL_SEQ_SetTask+0x50>)
 800d622:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800d624:	4a0b      	ldr	r2, [pc, #44]	@ (800d654 <UTIL_SEQ_SetTask+0x54>)
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	431a      	orrs	r2, r3
 800d630:	4908      	ldr	r1, [pc, #32]	@ (800d654 <UTIL_SEQ_SetTask+0x54>)
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	f383 8810 	msr	PRIMASK, r3
}
 800d642:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d644:	bf00      	nop
}
 800d646:	371c      	adds	r7, #28
 800d648:	46bd      	mov	sp, r7
 800d64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64e:	4770      	bx	lr
 800d650:	20001558 	.word	0x20001558
 800d654:	200015e8 	.word	0x200015e8

0800d658 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800d658:	b480      	push	{r7}
 800d65a:	b087      	sub	sp, #28
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d660:	f3ef 8310 	mrs	r3, PRIMASK
 800d664:	60fb      	str	r3, [r7, #12]
  return(result);
 800d666:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d668:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d66a:	b672      	cpsid	i
}
 800d66c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	43da      	mvns	r2, r3
 800d672:	4b08      	ldr	r3, [pc, #32]	@ (800d694 <UTIL_SEQ_PauseTask+0x3c>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	4013      	ands	r3, r2
 800d678:	4a06      	ldr	r2, [pc, #24]	@ (800d694 <UTIL_SEQ_PauseTask+0x3c>)
 800d67a:	6013      	str	r3, [r2, #0]
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	f383 8810 	msr	PRIMASK, r3
}
 800d686:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d688:	bf00      	nop
}
 800d68a:	371c      	adds	r7, #28
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr
 800d694:	2000002c 	.word	0x2000002c

0800d698 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800d698:	b480      	push	{r7}
 800d69a:	b087      	sub	sp, #28
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6a0:	f3ef 8310 	mrs	r3, PRIMASK
 800d6a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800d6a6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d6a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d6aa:	b672      	cpsid	i
}
 800d6ac:	bf00      	nop

  TaskMask |= TaskId_bm;
 800d6ae:	4b09      	ldr	r3, [pc, #36]	@ (800d6d4 <UTIL_SEQ_ResumeTask+0x3c>)
 800d6b0:	681a      	ldr	r2, [r3, #0]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	4a07      	ldr	r2, [pc, #28]	@ (800d6d4 <UTIL_SEQ_ResumeTask+0x3c>)
 800d6b8:	6013      	str	r3, [r2, #0]
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	f383 8810 	msr	PRIMASK, r3
}
 800d6c4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d6c6:	bf00      	nop
}
 800d6c8:	371c      	adds	r7, #28
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d0:	4770      	bx	lr
 800d6d2:	bf00      	nop
 800d6d4:	2000002c 	.word	0x2000002c

0800d6d8 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b087      	sub	sp, #28
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6e0:	f3ef 8310 	mrs	r3, PRIMASK
 800d6e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800d6e6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d6e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d6ea:	b672      	cpsid	i
}
 800d6ec:	bf00      	nop

  EvtSet |= EvtId_bm;
 800d6ee:	4b09      	ldr	r3, [pc, #36]	@ (800d714 <UTIL_SEQ_SetEvt+0x3c>)
 800d6f0:	681a      	ldr	r2, [r3, #0]
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	4313      	orrs	r3, r2
 800d6f6:	4a07      	ldr	r2, [pc, #28]	@ (800d714 <UTIL_SEQ_SetEvt+0x3c>)
 800d6f8:	6013      	str	r3, [r2, #0]
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	f383 8810 	msr	PRIMASK, r3
}
 800d704:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d706:	bf00      	nop
}
 800d708:	371c      	adds	r7, #28
 800d70a:	46bd      	mov	sp, r7
 800d70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d710:	4770      	bx	lr
 800d712:	bf00      	nop
 800d714:	2000155c 	.word	0x2000155c

0800d718 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b088      	sub	sp, #32
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800d720:	4b1f      	ldr	r3, [pc, #124]	@ (800d7a0 <UTIL_SEQ_WaitEvt+0x88>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800d726:	4b1e      	ldr	r3, [pc, #120]	@ (800d7a0 <UTIL_SEQ_WaitEvt+0x88>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d72e:	d102      	bne.n	800d736 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800d730:	2300      	movs	r3, #0
 800d732:	61fb      	str	r3, [r7, #28]
 800d734:	e005      	b.n	800d742 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800d736:	4b1a      	ldr	r3, [pc, #104]	@ (800d7a0 <UTIL_SEQ_WaitEvt+0x88>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	2201      	movs	r2, #1
 800d73c:	fa02 f303 	lsl.w	r3, r2, r3
 800d740:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800d742:	4b18      	ldr	r3, [pc, #96]	@ (800d7a4 <UTIL_SEQ_WaitEvt+0x8c>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800d748:	4a16      	ldr	r2, [pc, #88]	@ (800d7a4 <UTIL_SEQ_WaitEvt+0x8c>)
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800d74e:	e003      	b.n	800d758 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800d750:	6879      	ldr	r1, [r7, #4]
 800d752:	69f8      	ldr	r0, [r7, #28]
 800d754:	f7f3 fb9b 	bl	8000e8e <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800d758:	4b13      	ldr	r3, [pc, #76]	@ (800d7a8 <UTIL_SEQ_WaitEvt+0x90>)
 800d75a:	681a      	ldr	r2, [r3, #0]
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	4013      	ands	r3, r2
 800d760:	2b00      	cmp	r3, #0
 800d762:	d0f5      	beq.n	800d750 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800d764:	4a0e      	ldr	r2, [pc, #56]	@ (800d7a0 <UTIL_SEQ_WaitEvt+0x88>)
 800d766:	69bb      	ldr	r3, [r7, #24]
 800d768:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d76a:	f3ef 8310 	mrs	r3, PRIMASK
 800d76e:	60bb      	str	r3, [r7, #8]
  return(result);
 800d770:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d772:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d774:	b672      	cpsid	i
}
 800d776:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	43da      	mvns	r2, r3
 800d77c:	4b0a      	ldr	r3, [pc, #40]	@ (800d7a8 <UTIL_SEQ_WaitEvt+0x90>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4013      	ands	r3, r2
 800d782:	4a09      	ldr	r2, [pc, #36]	@ (800d7a8 <UTIL_SEQ_WaitEvt+0x90>)
 800d784:	6013      	str	r3, [r2, #0]
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f383 8810 	msr	PRIMASK, r3
}
 800d790:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800d792:	4a04      	ldr	r2, [pc, #16]	@ (800d7a4 <UTIL_SEQ_WaitEvt+0x8c>)
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	6013      	str	r3, [r2, #0]
  return;
 800d798:	bf00      	nop
}
 800d79a:	3720      	adds	r7, #32
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}
 800d7a0:	20001564 	.word	0x20001564
 800d7a4:	20001560 	.word	0x20001560
 800d7a8:	2000155c 	.word	0x2000155c

0800d7ac <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d7b0:	bf00      	nop
}
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b8:	4770      	bx	lr

0800d7ba <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800d7ba:	b480      	push	{r7}
 800d7bc:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d7be:	bf00      	nop
}
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr

0800d7c8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b085      	sub	sp, #20
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7de:	d204      	bcs.n	800d7ea <SEQ_BitPosition+0x22>
 800d7e0:	2310      	movs	r3, #16
 800d7e2:	73fb      	strb	r3, [r7, #15]
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	041b      	lsls	r3, r3, #16
 800d7e8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d7f0:	d205      	bcs.n	800d7fe <SEQ_BitPosition+0x36>
 800d7f2:	7bfb      	ldrb	r3, [r7, #15]
 800d7f4:	3308      	adds	r3, #8
 800d7f6:	73fb      	strb	r3, [r7, #15]
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	021b      	lsls	r3, r3, #8
 800d7fc:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d804:	d205      	bcs.n	800d812 <SEQ_BitPosition+0x4a>
 800d806:	7bfb      	ldrb	r3, [r7, #15]
 800d808:	3304      	adds	r3, #4
 800d80a:	73fb      	strb	r3, [r7, #15]
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	011b      	lsls	r3, r3, #4
 800d810:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	0f1b      	lsrs	r3, r3, #28
 800d816:	4a07      	ldr	r2, [pc, #28]	@ (800d834 <SEQ_BitPosition+0x6c>)
 800d818:	5cd2      	ldrb	r2, [r2, r3]
 800d81a:	7bfb      	ldrb	r3, [r7, #15]
 800d81c:	4413      	add	r3, r2
 800d81e:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800d820:	7bfb      	ldrb	r3, [r7, #15]
 800d822:	f1c3 031f 	rsb	r3, r3, #31
 800d826:	b2db      	uxtb	r3, r3
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3714      	adds	r7, #20
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr
 800d834:	0800ffe0 	.word	0x0800ffe0

0800d838 <siprintf>:
 800d838:	b40e      	push	{r1, r2, r3}
 800d83a:	b500      	push	{lr}
 800d83c:	b09c      	sub	sp, #112	@ 0x70
 800d83e:	ab1d      	add	r3, sp, #116	@ 0x74
 800d840:	9002      	str	r0, [sp, #8]
 800d842:	9006      	str	r0, [sp, #24]
 800d844:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d848:	4809      	ldr	r0, [pc, #36]	@ (800d870 <siprintf+0x38>)
 800d84a:	9107      	str	r1, [sp, #28]
 800d84c:	9104      	str	r1, [sp, #16]
 800d84e:	4909      	ldr	r1, [pc, #36]	@ (800d874 <siprintf+0x3c>)
 800d850:	f853 2b04 	ldr.w	r2, [r3], #4
 800d854:	9105      	str	r1, [sp, #20]
 800d856:	6800      	ldr	r0, [r0, #0]
 800d858:	9301      	str	r3, [sp, #4]
 800d85a:	a902      	add	r1, sp, #8
 800d85c:	f000 f9e4 	bl	800dc28 <_svfiprintf_r>
 800d860:	9b02      	ldr	r3, [sp, #8]
 800d862:	2200      	movs	r2, #0
 800d864:	701a      	strb	r2, [r3, #0]
 800d866:	b01c      	add	sp, #112	@ 0x70
 800d868:	f85d eb04 	ldr.w	lr, [sp], #4
 800d86c:	b003      	add	sp, #12
 800d86e:	4770      	bx	lr
 800d870:	20000040 	.word	0x20000040
 800d874:	ffff0208 	.word	0xffff0208

0800d878 <std>:
 800d878:	2300      	movs	r3, #0
 800d87a:	b510      	push	{r4, lr}
 800d87c:	4604      	mov	r4, r0
 800d87e:	e9c0 3300 	strd	r3, r3, [r0]
 800d882:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d886:	6083      	str	r3, [r0, #8]
 800d888:	8181      	strh	r1, [r0, #12]
 800d88a:	6643      	str	r3, [r0, #100]	@ 0x64
 800d88c:	81c2      	strh	r2, [r0, #14]
 800d88e:	6183      	str	r3, [r0, #24]
 800d890:	4619      	mov	r1, r3
 800d892:	2208      	movs	r2, #8
 800d894:	305c      	adds	r0, #92	@ 0x5c
 800d896:	f000 f929 	bl	800daec <memset>
 800d89a:	4b0d      	ldr	r3, [pc, #52]	@ (800d8d0 <std+0x58>)
 800d89c:	6263      	str	r3, [r4, #36]	@ 0x24
 800d89e:	4b0d      	ldr	r3, [pc, #52]	@ (800d8d4 <std+0x5c>)
 800d8a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d8a2:	4b0d      	ldr	r3, [pc, #52]	@ (800d8d8 <std+0x60>)
 800d8a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d8a6:	4b0d      	ldr	r3, [pc, #52]	@ (800d8dc <std+0x64>)
 800d8a8:	6323      	str	r3, [r4, #48]	@ 0x30
 800d8aa:	4b0d      	ldr	r3, [pc, #52]	@ (800d8e0 <std+0x68>)
 800d8ac:	6224      	str	r4, [r4, #32]
 800d8ae:	429c      	cmp	r4, r3
 800d8b0:	d006      	beq.n	800d8c0 <std+0x48>
 800d8b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d8b6:	4294      	cmp	r4, r2
 800d8b8:	d002      	beq.n	800d8c0 <std+0x48>
 800d8ba:	33d0      	adds	r3, #208	@ 0xd0
 800d8bc:	429c      	cmp	r4, r3
 800d8be:	d105      	bne.n	800d8cc <std+0x54>
 800d8c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d8c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8c8:	f000 b942 	b.w	800db50 <__retarget_lock_init_recursive>
 800d8cc:	bd10      	pop	{r4, pc}
 800d8ce:	bf00      	nop
 800d8d0:	0800e675 	.word	0x0800e675
 800d8d4:	0800e697 	.word	0x0800e697
 800d8d8:	0800e6cf 	.word	0x0800e6cf
 800d8dc:	0800e6f3 	.word	0x0800e6f3
 800d8e0:	200015f8 	.word	0x200015f8

0800d8e4 <stdio_exit_handler>:
 800d8e4:	4a02      	ldr	r2, [pc, #8]	@ (800d8f0 <stdio_exit_handler+0xc>)
 800d8e6:	4903      	ldr	r1, [pc, #12]	@ (800d8f4 <stdio_exit_handler+0x10>)
 800d8e8:	4803      	ldr	r0, [pc, #12]	@ (800d8f8 <stdio_exit_handler+0x14>)
 800d8ea:	f000 b869 	b.w	800d9c0 <_fwalk_sglue>
 800d8ee:	bf00      	nop
 800d8f0:	20000034 	.word	0x20000034
 800d8f4:	0800e60d 	.word	0x0800e60d
 800d8f8:	20000044 	.word	0x20000044

0800d8fc <cleanup_stdio>:
 800d8fc:	6841      	ldr	r1, [r0, #4]
 800d8fe:	4b0c      	ldr	r3, [pc, #48]	@ (800d930 <cleanup_stdio+0x34>)
 800d900:	4299      	cmp	r1, r3
 800d902:	b510      	push	{r4, lr}
 800d904:	4604      	mov	r4, r0
 800d906:	d001      	beq.n	800d90c <cleanup_stdio+0x10>
 800d908:	f000 fe80 	bl	800e60c <_fflush_r>
 800d90c:	68a1      	ldr	r1, [r4, #8]
 800d90e:	4b09      	ldr	r3, [pc, #36]	@ (800d934 <cleanup_stdio+0x38>)
 800d910:	4299      	cmp	r1, r3
 800d912:	d002      	beq.n	800d91a <cleanup_stdio+0x1e>
 800d914:	4620      	mov	r0, r4
 800d916:	f000 fe79 	bl	800e60c <_fflush_r>
 800d91a:	68e1      	ldr	r1, [r4, #12]
 800d91c:	4b06      	ldr	r3, [pc, #24]	@ (800d938 <cleanup_stdio+0x3c>)
 800d91e:	4299      	cmp	r1, r3
 800d920:	d004      	beq.n	800d92c <cleanup_stdio+0x30>
 800d922:	4620      	mov	r0, r4
 800d924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d928:	f000 be70 	b.w	800e60c <_fflush_r>
 800d92c:	bd10      	pop	{r4, pc}
 800d92e:	bf00      	nop
 800d930:	200015f8 	.word	0x200015f8
 800d934:	20001660 	.word	0x20001660
 800d938:	200016c8 	.word	0x200016c8

0800d93c <global_stdio_init.part.0>:
 800d93c:	b510      	push	{r4, lr}
 800d93e:	4b0b      	ldr	r3, [pc, #44]	@ (800d96c <global_stdio_init.part.0+0x30>)
 800d940:	4c0b      	ldr	r4, [pc, #44]	@ (800d970 <global_stdio_init.part.0+0x34>)
 800d942:	4a0c      	ldr	r2, [pc, #48]	@ (800d974 <global_stdio_init.part.0+0x38>)
 800d944:	601a      	str	r2, [r3, #0]
 800d946:	4620      	mov	r0, r4
 800d948:	2200      	movs	r2, #0
 800d94a:	2104      	movs	r1, #4
 800d94c:	f7ff ff94 	bl	800d878 <std>
 800d950:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d954:	2201      	movs	r2, #1
 800d956:	2109      	movs	r1, #9
 800d958:	f7ff ff8e 	bl	800d878 <std>
 800d95c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d960:	2202      	movs	r2, #2
 800d962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d966:	2112      	movs	r1, #18
 800d968:	f7ff bf86 	b.w	800d878 <std>
 800d96c:	20001730 	.word	0x20001730
 800d970:	200015f8 	.word	0x200015f8
 800d974:	0800d8e5 	.word	0x0800d8e5

0800d978 <__sfp_lock_acquire>:
 800d978:	4801      	ldr	r0, [pc, #4]	@ (800d980 <__sfp_lock_acquire+0x8>)
 800d97a:	f000 b8ea 	b.w	800db52 <__retarget_lock_acquire_recursive>
 800d97e:	bf00      	nop
 800d980:	20001735 	.word	0x20001735

0800d984 <__sfp_lock_release>:
 800d984:	4801      	ldr	r0, [pc, #4]	@ (800d98c <__sfp_lock_release+0x8>)
 800d986:	f000 b8e5 	b.w	800db54 <__retarget_lock_release_recursive>
 800d98a:	bf00      	nop
 800d98c:	20001735 	.word	0x20001735

0800d990 <__sinit>:
 800d990:	b510      	push	{r4, lr}
 800d992:	4604      	mov	r4, r0
 800d994:	f7ff fff0 	bl	800d978 <__sfp_lock_acquire>
 800d998:	6a23      	ldr	r3, [r4, #32]
 800d99a:	b11b      	cbz	r3, 800d9a4 <__sinit+0x14>
 800d99c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9a0:	f7ff bff0 	b.w	800d984 <__sfp_lock_release>
 800d9a4:	4b04      	ldr	r3, [pc, #16]	@ (800d9b8 <__sinit+0x28>)
 800d9a6:	6223      	str	r3, [r4, #32]
 800d9a8:	4b04      	ldr	r3, [pc, #16]	@ (800d9bc <__sinit+0x2c>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d1f5      	bne.n	800d99c <__sinit+0xc>
 800d9b0:	f7ff ffc4 	bl	800d93c <global_stdio_init.part.0>
 800d9b4:	e7f2      	b.n	800d99c <__sinit+0xc>
 800d9b6:	bf00      	nop
 800d9b8:	0800d8fd 	.word	0x0800d8fd
 800d9bc:	20001730 	.word	0x20001730

0800d9c0 <_fwalk_sglue>:
 800d9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9c4:	4607      	mov	r7, r0
 800d9c6:	4688      	mov	r8, r1
 800d9c8:	4614      	mov	r4, r2
 800d9ca:	2600      	movs	r6, #0
 800d9cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d9d0:	f1b9 0901 	subs.w	r9, r9, #1
 800d9d4:	d505      	bpl.n	800d9e2 <_fwalk_sglue+0x22>
 800d9d6:	6824      	ldr	r4, [r4, #0]
 800d9d8:	2c00      	cmp	r4, #0
 800d9da:	d1f7      	bne.n	800d9cc <_fwalk_sglue+0xc>
 800d9dc:	4630      	mov	r0, r6
 800d9de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9e2:	89ab      	ldrh	r3, [r5, #12]
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	d907      	bls.n	800d9f8 <_fwalk_sglue+0x38>
 800d9e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d9ec:	3301      	adds	r3, #1
 800d9ee:	d003      	beq.n	800d9f8 <_fwalk_sglue+0x38>
 800d9f0:	4629      	mov	r1, r5
 800d9f2:	4638      	mov	r0, r7
 800d9f4:	47c0      	blx	r8
 800d9f6:	4306      	orrs	r6, r0
 800d9f8:	3568      	adds	r5, #104	@ 0x68
 800d9fa:	e7e9      	b.n	800d9d0 <_fwalk_sglue+0x10>

0800d9fc <iprintf>:
 800d9fc:	b40f      	push	{r0, r1, r2, r3}
 800d9fe:	b507      	push	{r0, r1, r2, lr}
 800da00:	4906      	ldr	r1, [pc, #24]	@ (800da1c <iprintf+0x20>)
 800da02:	ab04      	add	r3, sp, #16
 800da04:	6808      	ldr	r0, [r1, #0]
 800da06:	f853 2b04 	ldr.w	r2, [r3], #4
 800da0a:	6881      	ldr	r1, [r0, #8]
 800da0c:	9301      	str	r3, [sp, #4]
 800da0e:	f000 fa31 	bl	800de74 <_vfiprintf_r>
 800da12:	b003      	add	sp, #12
 800da14:	f85d eb04 	ldr.w	lr, [sp], #4
 800da18:	b004      	add	sp, #16
 800da1a:	4770      	bx	lr
 800da1c:	20000040 	.word	0x20000040

0800da20 <putchar>:
 800da20:	4b02      	ldr	r3, [pc, #8]	@ (800da2c <putchar+0xc>)
 800da22:	4601      	mov	r1, r0
 800da24:	6818      	ldr	r0, [r3, #0]
 800da26:	6882      	ldr	r2, [r0, #8]
 800da28:	f000 bf8c 	b.w	800e944 <_putc_r>
 800da2c:	20000040 	.word	0x20000040

0800da30 <_puts_r>:
 800da30:	6a03      	ldr	r3, [r0, #32]
 800da32:	b570      	push	{r4, r5, r6, lr}
 800da34:	6884      	ldr	r4, [r0, #8]
 800da36:	4605      	mov	r5, r0
 800da38:	460e      	mov	r6, r1
 800da3a:	b90b      	cbnz	r3, 800da40 <_puts_r+0x10>
 800da3c:	f7ff ffa8 	bl	800d990 <__sinit>
 800da40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800da42:	07db      	lsls	r3, r3, #31
 800da44:	d405      	bmi.n	800da52 <_puts_r+0x22>
 800da46:	89a3      	ldrh	r3, [r4, #12]
 800da48:	0598      	lsls	r0, r3, #22
 800da4a:	d402      	bmi.n	800da52 <_puts_r+0x22>
 800da4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da4e:	f000 f880 	bl	800db52 <__retarget_lock_acquire_recursive>
 800da52:	89a3      	ldrh	r3, [r4, #12]
 800da54:	0719      	lsls	r1, r3, #28
 800da56:	d502      	bpl.n	800da5e <_puts_r+0x2e>
 800da58:	6923      	ldr	r3, [r4, #16]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d135      	bne.n	800daca <_puts_r+0x9a>
 800da5e:	4621      	mov	r1, r4
 800da60:	4628      	mov	r0, r5
 800da62:	f000 feb7 	bl	800e7d4 <__swsetup_r>
 800da66:	b380      	cbz	r0, 800daca <_puts_r+0x9a>
 800da68:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800da6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800da6e:	07da      	lsls	r2, r3, #31
 800da70:	d405      	bmi.n	800da7e <_puts_r+0x4e>
 800da72:	89a3      	ldrh	r3, [r4, #12]
 800da74:	059b      	lsls	r3, r3, #22
 800da76:	d402      	bmi.n	800da7e <_puts_r+0x4e>
 800da78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da7a:	f000 f86b 	bl	800db54 <__retarget_lock_release_recursive>
 800da7e:	4628      	mov	r0, r5
 800da80:	bd70      	pop	{r4, r5, r6, pc}
 800da82:	2b00      	cmp	r3, #0
 800da84:	da04      	bge.n	800da90 <_puts_r+0x60>
 800da86:	69a2      	ldr	r2, [r4, #24]
 800da88:	429a      	cmp	r2, r3
 800da8a:	dc17      	bgt.n	800dabc <_puts_r+0x8c>
 800da8c:	290a      	cmp	r1, #10
 800da8e:	d015      	beq.n	800dabc <_puts_r+0x8c>
 800da90:	6823      	ldr	r3, [r4, #0]
 800da92:	1c5a      	adds	r2, r3, #1
 800da94:	6022      	str	r2, [r4, #0]
 800da96:	7019      	strb	r1, [r3, #0]
 800da98:	68a3      	ldr	r3, [r4, #8]
 800da9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800da9e:	3b01      	subs	r3, #1
 800daa0:	60a3      	str	r3, [r4, #8]
 800daa2:	2900      	cmp	r1, #0
 800daa4:	d1ed      	bne.n	800da82 <_puts_r+0x52>
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	da11      	bge.n	800dace <_puts_r+0x9e>
 800daaa:	4622      	mov	r2, r4
 800daac:	210a      	movs	r1, #10
 800daae:	4628      	mov	r0, r5
 800dab0:	f000 fe51 	bl	800e756 <__swbuf_r>
 800dab4:	3001      	adds	r0, #1
 800dab6:	d0d7      	beq.n	800da68 <_puts_r+0x38>
 800dab8:	250a      	movs	r5, #10
 800daba:	e7d7      	b.n	800da6c <_puts_r+0x3c>
 800dabc:	4622      	mov	r2, r4
 800dabe:	4628      	mov	r0, r5
 800dac0:	f000 fe49 	bl	800e756 <__swbuf_r>
 800dac4:	3001      	adds	r0, #1
 800dac6:	d1e7      	bne.n	800da98 <_puts_r+0x68>
 800dac8:	e7ce      	b.n	800da68 <_puts_r+0x38>
 800daca:	3e01      	subs	r6, #1
 800dacc:	e7e4      	b.n	800da98 <_puts_r+0x68>
 800dace:	6823      	ldr	r3, [r4, #0]
 800dad0:	1c5a      	adds	r2, r3, #1
 800dad2:	6022      	str	r2, [r4, #0]
 800dad4:	220a      	movs	r2, #10
 800dad6:	701a      	strb	r2, [r3, #0]
 800dad8:	e7ee      	b.n	800dab8 <_puts_r+0x88>
	...

0800dadc <puts>:
 800dadc:	4b02      	ldr	r3, [pc, #8]	@ (800dae8 <puts+0xc>)
 800dade:	4601      	mov	r1, r0
 800dae0:	6818      	ldr	r0, [r3, #0]
 800dae2:	f7ff bfa5 	b.w	800da30 <_puts_r>
 800dae6:	bf00      	nop
 800dae8:	20000040 	.word	0x20000040

0800daec <memset>:
 800daec:	4402      	add	r2, r0
 800daee:	4603      	mov	r3, r0
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d100      	bne.n	800daf6 <memset+0xa>
 800daf4:	4770      	bx	lr
 800daf6:	f803 1b01 	strb.w	r1, [r3], #1
 800dafa:	e7f9      	b.n	800daf0 <memset+0x4>

0800dafc <__errno>:
 800dafc:	4b01      	ldr	r3, [pc, #4]	@ (800db04 <__errno+0x8>)
 800dafe:	6818      	ldr	r0, [r3, #0]
 800db00:	4770      	bx	lr
 800db02:	bf00      	nop
 800db04:	20000040 	.word	0x20000040

0800db08 <__libc_init_array>:
 800db08:	b570      	push	{r4, r5, r6, lr}
 800db0a:	4d0d      	ldr	r5, [pc, #52]	@ (800db40 <__libc_init_array+0x38>)
 800db0c:	4c0d      	ldr	r4, [pc, #52]	@ (800db44 <__libc_init_array+0x3c>)
 800db0e:	1b64      	subs	r4, r4, r5
 800db10:	10a4      	asrs	r4, r4, #2
 800db12:	2600      	movs	r6, #0
 800db14:	42a6      	cmp	r6, r4
 800db16:	d109      	bne.n	800db2c <__libc_init_array+0x24>
 800db18:	4d0b      	ldr	r5, [pc, #44]	@ (800db48 <__libc_init_array+0x40>)
 800db1a:	4c0c      	ldr	r4, [pc, #48]	@ (800db4c <__libc_init_array+0x44>)
 800db1c:	f001 f82a 	bl	800eb74 <_init>
 800db20:	1b64      	subs	r4, r4, r5
 800db22:	10a4      	asrs	r4, r4, #2
 800db24:	2600      	movs	r6, #0
 800db26:	42a6      	cmp	r6, r4
 800db28:	d105      	bne.n	800db36 <__libc_init_array+0x2e>
 800db2a:	bd70      	pop	{r4, r5, r6, pc}
 800db2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800db30:	4798      	blx	r3
 800db32:	3601      	adds	r6, #1
 800db34:	e7ee      	b.n	800db14 <__libc_init_array+0xc>
 800db36:	f855 3b04 	ldr.w	r3, [r5], #4
 800db3a:	4798      	blx	r3
 800db3c:	3601      	adds	r6, #1
 800db3e:	e7f2      	b.n	800db26 <__libc_init_array+0x1e>
 800db40:	0801002c 	.word	0x0801002c
 800db44:	0801002c 	.word	0x0801002c
 800db48:	0801002c 	.word	0x0801002c
 800db4c:	08010030 	.word	0x08010030

0800db50 <__retarget_lock_init_recursive>:
 800db50:	4770      	bx	lr

0800db52 <__retarget_lock_acquire_recursive>:
 800db52:	4770      	bx	lr

0800db54 <__retarget_lock_release_recursive>:
 800db54:	4770      	bx	lr

0800db56 <memcpy>:
 800db56:	440a      	add	r2, r1
 800db58:	4291      	cmp	r1, r2
 800db5a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800db5e:	d100      	bne.n	800db62 <memcpy+0xc>
 800db60:	4770      	bx	lr
 800db62:	b510      	push	{r4, lr}
 800db64:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db68:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db6c:	4291      	cmp	r1, r2
 800db6e:	d1f9      	bne.n	800db64 <memcpy+0xe>
 800db70:	bd10      	pop	{r4, pc}

0800db72 <__ssputs_r>:
 800db72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db76:	688e      	ldr	r6, [r1, #8]
 800db78:	461f      	mov	r7, r3
 800db7a:	42be      	cmp	r6, r7
 800db7c:	680b      	ldr	r3, [r1, #0]
 800db7e:	4682      	mov	sl, r0
 800db80:	460c      	mov	r4, r1
 800db82:	4690      	mov	r8, r2
 800db84:	d82d      	bhi.n	800dbe2 <__ssputs_r+0x70>
 800db86:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800db8a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800db8e:	d026      	beq.n	800dbde <__ssputs_r+0x6c>
 800db90:	6965      	ldr	r5, [r4, #20]
 800db92:	6909      	ldr	r1, [r1, #16]
 800db94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db98:	eba3 0901 	sub.w	r9, r3, r1
 800db9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dba0:	1c7b      	adds	r3, r7, #1
 800dba2:	444b      	add	r3, r9
 800dba4:	106d      	asrs	r5, r5, #1
 800dba6:	429d      	cmp	r5, r3
 800dba8:	bf38      	it	cc
 800dbaa:	461d      	movcc	r5, r3
 800dbac:	0553      	lsls	r3, r2, #21
 800dbae:	d527      	bpl.n	800dc00 <__ssputs_r+0x8e>
 800dbb0:	4629      	mov	r1, r5
 800dbb2:	f000 fa99 	bl	800e0e8 <_malloc_r>
 800dbb6:	4606      	mov	r6, r0
 800dbb8:	b360      	cbz	r0, 800dc14 <__ssputs_r+0xa2>
 800dbba:	6921      	ldr	r1, [r4, #16]
 800dbbc:	464a      	mov	r2, r9
 800dbbe:	f7ff ffca 	bl	800db56 <memcpy>
 800dbc2:	89a3      	ldrh	r3, [r4, #12]
 800dbc4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dbc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbcc:	81a3      	strh	r3, [r4, #12]
 800dbce:	6126      	str	r6, [r4, #16]
 800dbd0:	6165      	str	r5, [r4, #20]
 800dbd2:	444e      	add	r6, r9
 800dbd4:	eba5 0509 	sub.w	r5, r5, r9
 800dbd8:	6026      	str	r6, [r4, #0]
 800dbda:	60a5      	str	r5, [r4, #8]
 800dbdc:	463e      	mov	r6, r7
 800dbde:	42be      	cmp	r6, r7
 800dbe0:	d900      	bls.n	800dbe4 <__ssputs_r+0x72>
 800dbe2:	463e      	mov	r6, r7
 800dbe4:	6820      	ldr	r0, [r4, #0]
 800dbe6:	4632      	mov	r2, r6
 800dbe8:	4641      	mov	r1, r8
 800dbea:	f000 fedf 	bl	800e9ac <memmove>
 800dbee:	68a3      	ldr	r3, [r4, #8]
 800dbf0:	1b9b      	subs	r3, r3, r6
 800dbf2:	60a3      	str	r3, [r4, #8]
 800dbf4:	6823      	ldr	r3, [r4, #0]
 800dbf6:	4433      	add	r3, r6
 800dbf8:	6023      	str	r3, [r4, #0]
 800dbfa:	2000      	movs	r0, #0
 800dbfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc00:	462a      	mov	r2, r5
 800dc02:	f000 fd7a 	bl	800e6fa <_realloc_r>
 800dc06:	4606      	mov	r6, r0
 800dc08:	2800      	cmp	r0, #0
 800dc0a:	d1e0      	bne.n	800dbce <__ssputs_r+0x5c>
 800dc0c:	6921      	ldr	r1, [r4, #16]
 800dc0e:	4650      	mov	r0, sl
 800dc10:	f000 ff5e 	bl	800ead0 <_free_r>
 800dc14:	230c      	movs	r3, #12
 800dc16:	f8ca 3000 	str.w	r3, [sl]
 800dc1a:	89a3      	ldrh	r3, [r4, #12]
 800dc1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc20:	81a3      	strh	r3, [r4, #12]
 800dc22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc26:	e7e9      	b.n	800dbfc <__ssputs_r+0x8a>

0800dc28 <_svfiprintf_r>:
 800dc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc2c:	4698      	mov	r8, r3
 800dc2e:	898b      	ldrh	r3, [r1, #12]
 800dc30:	061b      	lsls	r3, r3, #24
 800dc32:	b09d      	sub	sp, #116	@ 0x74
 800dc34:	4607      	mov	r7, r0
 800dc36:	460d      	mov	r5, r1
 800dc38:	4614      	mov	r4, r2
 800dc3a:	d510      	bpl.n	800dc5e <_svfiprintf_r+0x36>
 800dc3c:	690b      	ldr	r3, [r1, #16]
 800dc3e:	b973      	cbnz	r3, 800dc5e <_svfiprintf_r+0x36>
 800dc40:	2140      	movs	r1, #64	@ 0x40
 800dc42:	f000 fa51 	bl	800e0e8 <_malloc_r>
 800dc46:	6028      	str	r0, [r5, #0]
 800dc48:	6128      	str	r0, [r5, #16]
 800dc4a:	b930      	cbnz	r0, 800dc5a <_svfiprintf_r+0x32>
 800dc4c:	230c      	movs	r3, #12
 800dc4e:	603b      	str	r3, [r7, #0]
 800dc50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc54:	b01d      	add	sp, #116	@ 0x74
 800dc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc5a:	2340      	movs	r3, #64	@ 0x40
 800dc5c:	616b      	str	r3, [r5, #20]
 800dc5e:	2300      	movs	r3, #0
 800dc60:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc62:	2320      	movs	r3, #32
 800dc64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dc68:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc6c:	2330      	movs	r3, #48	@ 0x30
 800dc6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800de0c <_svfiprintf_r+0x1e4>
 800dc72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dc76:	f04f 0901 	mov.w	r9, #1
 800dc7a:	4623      	mov	r3, r4
 800dc7c:	469a      	mov	sl, r3
 800dc7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc82:	b10a      	cbz	r2, 800dc88 <_svfiprintf_r+0x60>
 800dc84:	2a25      	cmp	r2, #37	@ 0x25
 800dc86:	d1f9      	bne.n	800dc7c <_svfiprintf_r+0x54>
 800dc88:	ebba 0b04 	subs.w	fp, sl, r4
 800dc8c:	d00b      	beq.n	800dca6 <_svfiprintf_r+0x7e>
 800dc8e:	465b      	mov	r3, fp
 800dc90:	4622      	mov	r2, r4
 800dc92:	4629      	mov	r1, r5
 800dc94:	4638      	mov	r0, r7
 800dc96:	f7ff ff6c 	bl	800db72 <__ssputs_r>
 800dc9a:	3001      	adds	r0, #1
 800dc9c:	f000 80a7 	beq.w	800ddee <_svfiprintf_r+0x1c6>
 800dca0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dca2:	445a      	add	r2, fp
 800dca4:	9209      	str	r2, [sp, #36]	@ 0x24
 800dca6:	f89a 3000 	ldrb.w	r3, [sl]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	f000 809f 	beq.w	800ddee <_svfiprintf_r+0x1c6>
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dcb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dcba:	f10a 0a01 	add.w	sl, sl, #1
 800dcbe:	9304      	str	r3, [sp, #16]
 800dcc0:	9307      	str	r3, [sp, #28]
 800dcc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dcc6:	931a      	str	r3, [sp, #104]	@ 0x68
 800dcc8:	4654      	mov	r4, sl
 800dcca:	2205      	movs	r2, #5
 800dccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcd0:	484e      	ldr	r0, [pc, #312]	@ (800de0c <_svfiprintf_r+0x1e4>)
 800dcd2:	f7f2 fa5d 	bl	8000190 <memchr>
 800dcd6:	9a04      	ldr	r2, [sp, #16]
 800dcd8:	b9d8      	cbnz	r0, 800dd12 <_svfiprintf_r+0xea>
 800dcda:	06d0      	lsls	r0, r2, #27
 800dcdc:	bf44      	itt	mi
 800dcde:	2320      	movmi	r3, #32
 800dce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dce4:	0711      	lsls	r1, r2, #28
 800dce6:	bf44      	itt	mi
 800dce8:	232b      	movmi	r3, #43	@ 0x2b
 800dcea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dcee:	f89a 3000 	ldrb.w	r3, [sl]
 800dcf2:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcf4:	d015      	beq.n	800dd22 <_svfiprintf_r+0xfa>
 800dcf6:	9a07      	ldr	r2, [sp, #28]
 800dcf8:	4654      	mov	r4, sl
 800dcfa:	2000      	movs	r0, #0
 800dcfc:	f04f 0c0a 	mov.w	ip, #10
 800dd00:	4621      	mov	r1, r4
 800dd02:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd06:	3b30      	subs	r3, #48	@ 0x30
 800dd08:	2b09      	cmp	r3, #9
 800dd0a:	d94b      	bls.n	800dda4 <_svfiprintf_r+0x17c>
 800dd0c:	b1b0      	cbz	r0, 800dd3c <_svfiprintf_r+0x114>
 800dd0e:	9207      	str	r2, [sp, #28]
 800dd10:	e014      	b.n	800dd3c <_svfiprintf_r+0x114>
 800dd12:	eba0 0308 	sub.w	r3, r0, r8
 800dd16:	fa09 f303 	lsl.w	r3, r9, r3
 800dd1a:	4313      	orrs	r3, r2
 800dd1c:	9304      	str	r3, [sp, #16]
 800dd1e:	46a2      	mov	sl, r4
 800dd20:	e7d2      	b.n	800dcc8 <_svfiprintf_r+0xa0>
 800dd22:	9b03      	ldr	r3, [sp, #12]
 800dd24:	1d19      	adds	r1, r3, #4
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	9103      	str	r1, [sp, #12]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	bfbb      	ittet	lt
 800dd2e:	425b      	neglt	r3, r3
 800dd30:	f042 0202 	orrlt.w	r2, r2, #2
 800dd34:	9307      	strge	r3, [sp, #28]
 800dd36:	9307      	strlt	r3, [sp, #28]
 800dd38:	bfb8      	it	lt
 800dd3a:	9204      	strlt	r2, [sp, #16]
 800dd3c:	7823      	ldrb	r3, [r4, #0]
 800dd3e:	2b2e      	cmp	r3, #46	@ 0x2e
 800dd40:	d10a      	bne.n	800dd58 <_svfiprintf_r+0x130>
 800dd42:	7863      	ldrb	r3, [r4, #1]
 800dd44:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd46:	d132      	bne.n	800ddae <_svfiprintf_r+0x186>
 800dd48:	9b03      	ldr	r3, [sp, #12]
 800dd4a:	1d1a      	adds	r2, r3, #4
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	9203      	str	r2, [sp, #12]
 800dd50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dd54:	3402      	adds	r4, #2
 800dd56:	9305      	str	r3, [sp, #20]
 800dd58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800de1c <_svfiprintf_r+0x1f4>
 800dd5c:	7821      	ldrb	r1, [r4, #0]
 800dd5e:	2203      	movs	r2, #3
 800dd60:	4650      	mov	r0, sl
 800dd62:	f7f2 fa15 	bl	8000190 <memchr>
 800dd66:	b138      	cbz	r0, 800dd78 <_svfiprintf_r+0x150>
 800dd68:	9b04      	ldr	r3, [sp, #16]
 800dd6a:	eba0 000a 	sub.w	r0, r0, sl
 800dd6e:	2240      	movs	r2, #64	@ 0x40
 800dd70:	4082      	lsls	r2, r0
 800dd72:	4313      	orrs	r3, r2
 800dd74:	3401      	adds	r4, #1
 800dd76:	9304      	str	r3, [sp, #16]
 800dd78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd7c:	4824      	ldr	r0, [pc, #144]	@ (800de10 <_svfiprintf_r+0x1e8>)
 800dd7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dd82:	2206      	movs	r2, #6
 800dd84:	f7f2 fa04 	bl	8000190 <memchr>
 800dd88:	2800      	cmp	r0, #0
 800dd8a:	d036      	beq.n	800ddfa <_svfiprintf_r+0x1d2>
 800dd8c:	4b21      	ldr	r3, [pc, #132]	@ (800de14 <_svfiprintf_r+0x1ec>)
 800dd8e:	bb1b      	cbnz	r3, 800ddd8 <_svfiprintf_r+0x1b0>
 800dd90:	9b03      	ldr	r3, [sp, #12]
 800dd92:	3307      	adds	r3, #7
 800dd94:	f023 0307 	bic.w	r3, r3, #7
 800dd98:	3308      	adds	r3, #8
 800dd9a:	9303      	str	r3, [sp, #12]
 800dd9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd9e:	4433      	add	r3, r6
 800dda0:	9309      	str	r3, [sp, #36]	@ 0x24
 800dda2:	e76a      	b.n	800dc7a <_svfiprintf_r+0x52>
 800dda4:	fb0c 3202 	mla	r2, ip, r2, r3
 800dda8:	460c      	mov	r4, r1
 800ddaa:	2001      	movs	r0, #1
 800ddac:	e7a8      	b.n	800dd00 <_svfiprintf_r+0xd8>
 800ddae:	2300      	movs	r3, #0
 800ddb0:	3401      	adds	r4, #1
 800ddb2:	9305      	str	r3, [sp, #20]
 800ddb4:	4619      	mov	r1, r3
 800ddb6:	f04f 0c0a 	mov.w	ip, #10
 800ddba:	4620      	mov	r0, r4
 800ddbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddc0:	3a30      	subs	r2, #48	@ 0x30
 800ddc2:	2a09      	cmp	r2, #9
 800ddc4:	d903      	bls.n	800ddce <_svfiprintf_r+0x1a6>
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d0c6      	beq.n	800dd58 <_svfiprintf_r+0x130>
 800ddca:	9105      	str	r1, [sp, #20]
 800ddcc:	e7c4      	b.n	800dd58 <_svfiprintf_r+0x130>
 800ddce:	fb0c 2101 	mla	r1, ip, r1, r2
 800ddd2:	4604      	mov	r4, r0
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	e7f0      	b.n	800ddba <_svfiprintf_r+0x192>
 800ddd8:	ab03      	add	r3, sp, #12
 800ddda:	9300      	str	r3, [sp, #0]
 800dddc:	462a      	mov	r2, r5
 800ddde:	4b0e      	ldr	r3, [pc, #56]	@ (800de18 <_svfiprintf_r+0x1f0>)
 800dde0:	a904      	add	r1, sp, #16
 800dde2:	4638      	mov	r0, r7
 800dde4:	f3af 8000 	nop.w
 800dde8:	1c42      	adds	r2, r0, #1
 800ddea:	4606      	mov	r6, r0
 800ddec:	d1d6      	bne.n	800dd9c <_svfiprintf_r+0x174>
 800ddee:	89ab      	ldrh	r3, [r5, #12]
 800ddf0:	065b      	lsls	r3, r3, #25
 800ddf2:	f53f af2d 	bmi.w	800dc50 <_svfiprintf_r+0x28>
 800ddf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ddf8:	e72c      	b.n	800dc54 <_svfiprintf_r+0x2c>
 800ddfa:	ab03      	add	r3, sp, #12
 800ddfc:	9300      	str	r3, [sp, #0]
 800ddfe:	462a      	mov	r2, r5
 800de00:	4b05      	ldr	r3, [pc, #20]	@ (800de18 <_svfiprintf_r+0x1f0>)
 800de02:	a904      	add	r1, sp, #16
 800de04:	4638      	mov	r0, r7
 800de06:	f000 fa5d 	bl	800e2c4 <_printf_i>
 800de0a:	e7ed      	b.n	800dde8 <_svfiprintf_r+0x1c0>
 800de0c:	0800fff0 	.word	0x0800fff0
 800de10:	0800fffa 	.word	0x0800fffa
 800de14:	00000000 	.word	0x00000000
 800de18:	0800db73 	.word	0x0800db73
 800de1c:	0800fff6 	.word	0x0800fff6

0800de20 <__sfputc_r>:
 800de20:	6893      	ldr	r3, [r2, #8]
 800de22:	3b01      	subs	r3, #1
 800de24:	2b00      	cmp	r3, #0
 800de26:	b410      	push	{r4}
 800de28:	6093      	str	r3, [r2, #8]
 800de2a:	da08      	bge.n	800de3e <__sfputc_r+0x1e>
 800de2c:	6994      	ldr	r4, [r2, #24]
 800de2e:	42a3      	cmp	r3, r4
 800de30:	db01      	blt.n	800de36 <__sfputc_r+0x16>
 800de32:	290a      	cmp	r1, #10
 800de34:	d103      	bne.n	800de3e <__sfputc_r+0x1e>
 800de36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de3a:	f000 bc8c 	b.w	800e756 <__swbuf_r>
 800de3e:	6813      	ldr	r3, [r2, #0]
 800de40:	1c58      	adds	r0, r3, #1
 800de42:	6010      	str	r0, [r2, #0]
 800de44:	7019      	strb	r1, [r3, #0]
 800de46:	4608      	mov	r0, r1
 800de48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de4c:	4770      	bx	lr

0800de4e <__sfputs_r>:
 800de4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de50:	4606      	mov	r6, r0
 800de52:	460f      	mov	r7, r1
 800de54:	4614      	mov	r4, r2
 800de56:	18d5      	adds	r5, r2, r3
 800de58:	42ac      	cmp	r4, r5
 800de5a:	d101      	bne.n	800de60 <__sfputs_r+0x12>
 800de5c:	2000      	movs	r0, #0
 800de5e:	e007      	b.n	800de70 <__sfputs_r+0x22>
 800de60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de64:	463a      	mov	r2, r7
 800de66:	4630      	mov	r0, r6
 800de68:	f7ff ffda 	bl	800de20 <__sfputc_r>
 800de6c:	1c43      	adds	r3, r0, #1
 800de6e:	d1f3      	bne.n	800de58 <__sfputs_r+0xa>
 800de70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800de74 <_vfiprintf_r>:
 800de74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de78:	460d      	mov	r5, r1
 800de7a:	b09d      	sub	sp, #116	@ 0x74
 800de7c:	4614      	mov	r4, r2
 800de7e:	4698      	mov	r8, r3
 800de80:	4606      	mov	r6, r0
 800de82:	b118      	cbz	r0, 800de8c <_vfiprintf_r+0x18>
 800de84:	6a03      	ldr	r3, [r0, #32]
 800de86:	b90b      	cbnz	r3, 800de8c <_vfiprintf_r+0x18>
 800de88:	f7ff fd82 	bl	800d990 <__sinit>
 800de8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de8e:	07d9      	lsls	r1, r3, #31
 800de90:	d405      	bmi.n	800de9e <_vfiprintf_r+0x2a>
 800de92:	89ab      	ldrh	r3, [r5, #12]
 800de94:	059a      	lsls	r2, r3, #22
 800de96:	d402      	bmi.n	800de9e <_vfiprintf_r+0x2a>
 800de98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de9a:	f7ff fe5a 	bl	800db52 <__retarget_lock_acquire_recursive>
 800de9e:	89ab      	ldrh	r3, [r5, #12]
 800dea0:	071b      	lsls	r3, r3, #28
 800dea2:	d501      	bpl.n	800dea8 <_vfiprintf_r+0x34>
 800dea4:	692b      	ldr	r3, [r5, #16]
 800dea6:	b99b      	cbnz	r3, 800ded0 <_vfiprintf_r+0x5c>
 800dea8:	4629      	mov	r1, r5
 800deaa:	4630      	mov	r0, r6
 800deac:	f000 fc92 	bl	800e7d4 <__swsetup_r>
 800deb0:	b170      	cbz	r0, 800ded0 <_vfiprintf_r+0x5c>
 800deb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800deb4:	07dc      	lsls	r4, r3, #31
 800deb6:	d504      	bpl.n	800dec2 <_vfiprintf_r+0x4e>
 800deb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800debc:	b01d      	add	sp, #116	@ 0x74
 800debe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dec2:	89ab      	ldrh	r3, [r5, #12]
 800dec4:	0598      	lsls	r0, r3, #22
 800dec6:	d4f7      	bmi.n	800deb8 <_vfiprintf_r+0x44>
 800dec8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800deca:	f7ff fe43 	bl	800db54 <__retarget_lock_release_recursive>
 800dece:	e7f3      	b.n	800deb8 <_vfiprintf_r+0x44>
 800ded0:	2300      	movs	r3, #0
 800ded2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ded4:	2320      	movs	r3, #32
 800ded6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800deda:	f8cd 800c 	str.w	r8, [sp, #12]
 800dede:	2330      	movs	r3, #48	@ 0x30
 800dee0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e090 <_vfiprintf_r+0x21c>
 800dee4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dee8:	f04f 0901 	mov.w	r9, #1
 800deec:	4623      	mov	r3, r4
 800deee:	469a      	mov	sl, r3
 800def0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800def4:	b10a      	cbz	r2, 800defa <_vfiprintf_r+0x86>
 800def6:	2a25      	cmp	r2, #37	@ 0x25
 800def8:	d1f9      	bne.n	800deee <_vfiprintf_r+0x7a>
 800defa:	ebba 0b04 	subs.w	fp, sl, r4
 800defe:	d00b      	beq.n	800df18 <_vfiprintf_r+0xa4>
 800df00:	465b      	mov	r3, fp
 800df02:	4622      	mov	r2, r4
 800df04:	4629      	mov	r1, r5
 800df06:	4630      	mov	r0, r6
 800df08:	f7ff ffa1 	bl	800de4e <__sfputs_r>
 800df0c:	3001      	adds	r0, #1
 800df0e:	f000 80a7 	beq.w	800e060 <_vfiprintf_r+0x1ec>
 800df12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df14:	445a      	add	r2, fp
 800df16:	9209      	str	r2, [sp, #36]	@ 0x24
 800df18:	f89a 3000 	ldrb.w	r3, [sl]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	f000 809f 	beq.w	800e060 <_vfiprintf_r+0x1ec>
 800df22:	2300      	movs	r3, #0
 800df24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800df28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df2c:	f10a 0a01 	add.w	sl, sl, #1
 800df30:	9304      	str	r3, [sp, #16]
 800df32:	9307      	str	r3, [sp, #28]
 800df34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df38:	931a      	str	r3, [sp, #104]	@ 0x68
 800df3a:	4654      	mov	r4, sl
 800df3c:	2205      	movs	r2, #5
 800df3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df42:	4853      	ldr	r0, [pc, #332]	@ (800e090 <_vfiprintf_r+0x21c>)
 800df44:	f7f2 f924 	bl	8000190 <memchr>
 800df48:	9a04      	ldr	r2, [sp, #16]
 800df4a:	b9d8      	cbnz	r0, 800df84 <_vfiprintf_r+0x110>
 800df4c:	06d1      	lsls	r1, r2, #27
 800df4e:	bf44      	itt	mi
 800df50:	2320      	movmi	r3, #32
 800df52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df56:	0713      	lsls	r3, r2, #28
 800df58:	bf44      	itt	mi
 800df5a:	232b      	movmi	r3, #43	@ 0x2b
 800df5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df60:	f89a 3000 	ldrb.w	r3, [sl]
 800df64:	2b2a      	cmp	r3, #42	@ 0x2a
 800df66:	d015      	beq.n	800df94 <_vfiprintf_r+0x120>
 800df68:	9a07      	ldr	r2, [sp, #28]
 800df6a:	4654      	mov	r4, sl
 800df6c:	2000      	movs	r0, #0
 800df6e:	f04f 0c0a 	mov.w	ip, #10
 800df72:	4621      	mov	r1, r4
 800df74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df78:	3b30      	subs	r3, #48	@ 0x30
 800df7a:	2b09      	cmp	r3, #9
 800df7c:	d94b      	bls.n	800e016 <_vfiprintf_r+0x1a2>
 800df7e:	b1b0      	cbz	r0, 800dfae <_vfiprintf_r+0x13a>
 800df80:	9207      	str	r2, [sp, #28]
 800df82:	e014      	b.n	800dfae <_vfiprintf_r+0x13a>
 800df84:	eba0 0308 	sub.w	r3, r0, r8
 800df88:	fa09 f303 	lsl.w	r3, r9, r3
 800df8c:	4313      	orrs	r3, r2
 800df8e:	9304      	str	r3, [sp, #16]
 800df90:	46a2      	mov	sl, r4
 800df92:	e7d2      	b.n	800df3a <_vfiprintf_r+0xc6>
 800df94:	9b03      	ldr	r3, [sp, #12]
 800df96:	1d19      	adds	r1, r3, #4
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	9103      	str	r1, [sp, #12]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	bfbb      	ittet	lt
 800dfa0:	425b      	neglt	r3, r3
 800dfa2:	f042 0202 	orrlt.w	r2, r2, #2
 800dfa6:	9307      	strge	r3, [sp, #28]
 800dfa8:	9307      	strlt	r3, [sp, #28]
 800dfaa:	bfb8      	it	lt
 800dfac:	9204      	strlt	r2, [sp, #16]
 800dfae:	7823      	ldrb	r3, [r4, #0]
 800dfb0:	2b2e      	cmp	r3, #46	@ 0x2e
 800dfb2:	d10a      	bne.n	800dfca <_vfiprintf_r+0x156>
 800dfb4:	7863      	ldrb	r3, [r4, #1]
 800dfb6:	2b2a      	cmp	r3, #42	@ 0x2a
 800dfb8:	d132      	bne.n	800e020 <_vfiprintf_r+0x1ac>
 800dfba:	9b03      	ldr	r3, [sp, #12]
 800dfbc:	1d1a      	adds	r2, r3, #4
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	9203      	str	r2, [sp, #12]
 800dfc2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dfc6:	3402      	adds	r4, #2
 800dfc8:	9305      	str	r3, [sp, #20]
 800dfca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e0a0 <_vfiprintf_r+0x22c>
 800dfce:	7821      	ldrb	r1, [r4, #0]
 800dfd0:	2203      	movs	r2, #3
 800dfd2:	4650      	mov	r0, sl
 800dfd4:	f7f2 f8dc 	bl	8000190 <memchr>
 800dfd8:	b138      	cbz	r0, 800dfea <_vfiprintf_r+0x176>
 800dfda:	9b04      	ldr	r3, [sp, #16]
 800dfdc:	eba0 000a 	sub.w	r0, r0, sl
 800dfe0:	2240      	movs	r2, #64	@ 0x40
 800dfe2:	4082      	lsls	r2, r0
 800dfe4:	4313      	orrs	r3, r2
 800dfe6:	3401      	adds	r4, #1
 800dfe8:	9304      	str	r3, [sp, #16]
 800dfea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfee:	4829      	ldr	r0, [pc, #164]	@ (800e094 <_vfiprintf_r+0x220>)
 800dff0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dff4:	2206      	movs	r2, #6
 800dff6:	f7f2 f8cb 	bl	8000190 <memchr>
 800dffa:	2800      	cmp	r0, #0
 800dffc:	d03f      	beq.n	800e07e <_vfiprintf_r+0x20a>
 800dffe:	4b26      	ldr	r3, [pc, #152]	@ (800e098 <_vfiprintf_r+0x224>)
 800e000:	bb1b      	cbnz	r3, 800e04a <_vfiprintf_r+0x1d6>
 800e002:	9b03      	ldr	r3, [sp, #12]
 800e004:	3307      	adds	r3, #7
 800e006:	f023 0307 	bic.w	r3, r3, #7
 800e00a:	3308      	adds	r3, #8
 800e00c:	9303      	str	r3, [sp, #12]
 800e00e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e010:	443b      	add	r3, r7
 800e012:	9309      	str	r3, [sp, #36]	@ 0x24
 800e014:	e76a      	b.n	800deec <_vfiprintf_r+0x78>
 800e016:	fb0c 3202 	mla	r2, ip, r2, r3
 800e01a:	460c      	mov	r4, r1
 800e01c:	2001      	movs	r0, #1
 800e01e:	e7a8      	b.n	800df72 <_vfiprintf_r+0xfe>
 800e020:	2300      	movs	r3, #0
 800e022:	3401      	adds	r4, #1
 800e024:	9305      	str	r3, [sp, #20]
 800e026:	4619      	mov	r1, r3
 800e028:	f04f 0c0a 	mov.w	ip, #10
 800e02c:	4620      	mov	r0, r4
 800e02e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e032:	3a30      	subs	r2, #48	@ 0x30
 800e034:	2a09      	cmp	r2, #9
 800e036:	d903      	bls.n	800e040 <_vfiprintf_r+0x1cc>
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d0c6      	beq.n	800dfca <_vfiprintf_r+0x156>
 800e03c:	9105      	str	r1, [sp, #20]
 800e03e:	e7c4      	b.n	800dfca <_vfiprintf_r+0x156>
 800e040:	fb0c 2101 	mla	r1, ip, r1, r2
 800e044:	4604      	mov	r4, r0
 800e046:	2301      	movs	r3, #1
 800e048:	e7f0      	b.n	800e02c <_vfiprintf_r+0x1b8>
 800e04a:	ab03      	add	r3, sp, #12
 800e04c:	9300      	str	r3, [sp, #0]
 800e04e:	462a      	mov	r2, r5
 800e050:	4b12      	ldr	r3, [pc, #72]	@ (800e09c <_vfiprintf_r+0x228>)
 800e052:	a904      	add	r1, sp, #16
 800e054:	4630      	mov	r0, r6
 800e056:	f3af 8000 	nop.w
 800e05a:	4607      	mov	r7, r0
 800e05c:	1c78      	adds	r0, r7, #1
 800e05e:	d1d6      	bne.n	800e00e <_vfiprintf_r+0x19a>
 800e060:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e062:	07d9      	lsls	r1, r3, #31
 800e064:	d405      	bmi.n	800e072 <_vfiprintf_r+0x1fe>
 800e066:	89ab      	ldrh	r3, [r5, #12]
 800e068:	059a      	lsls	r2, r3, #22
 800e06a:	d402      	bmi.n	800e072 <_vfiprintf_r+0x1fe>
 800e06c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e06e:	f7ff fd71 	bl	800db54 <__retarget_lock_release_recursive>
 800e072:	89ab      	ldrh	r3, [r5, #12]
 800e074:	065b      	lsls	r3, r3, #25
 800e076:	f53f af1f 	bmi.w	800deb8 <_vfiprintf_r+0x44>
 800e07a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e07c:	e71e      	b.n	800debc <_vfiprintf_r+0x48>
 800e07e:	ab03      	add	r3, sp, #12
 800e080:	9300      	str	r3, [sp, #0]
 800e082:	462a      	mov	r2, r5
 800e084:	4b05      	ldr	r3, [pc, #20]	@ (800e09c <_vfiprintf_r+0x228>)
 800e086:	a904      	add	r1, sp, #16
 800e088:	4630      	mov	r0, r6
 800e08a:	f000 f91b 	bl	800e2c4 <_printf_i>
 800e08e:	e7e4      	b.n	800e05a <_vfiprintf_r+0x1e6>
 800e090:	0800fff0 	.word	0x0800fff0
 800e094:	0800fffa 	.word	0x0800fffa
 800e098:	00000000 	.word	0x00000000
 800e09c:	0800de4f 	.word	0x0800de4f
 800e0a0:	0800fff6 	.word	0x0800fff6

0800e0a4 <sbrk_aligned>:
 800e0a4:	b570      	push	{r4, r5, r6, lr}
 800e0a6:	4e0f      	ldr	r6, [pc, #60]	@ (800e0e4 <sbrk_aligned+0x40>)
 800e0a8:	460c      	mov	r4, r1
 800e0aa:	6831      	ldr	r1, [r6, #0]
 800e0ac:	4605      	mov	r5, r0
 800e0ae:	b911      	cbnz	r1, 800e0b6 <sbrk_aligned+0x12>
 800e0b0:	f000 fcec 	bl	800ea8c <_sbrk_r>
 800e0b4:	6030      	str	r0, [r6, #0]
 800e0b6:	4621      	mov	r1, r4
 800e0b8:	4628      	mov	r0, r5
 800e0ba:	f000 fce7 	bl	800ea8c <_sbrk_r>
 800e0be:	1c43      	adds	r3, r0, #1
 800e0c0:	d103      	bne.n	800e0ca <sbrk_aligned+0x26>
 800e0c2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e0c6:	4620      	mov	r0, r4
 800e0c8:	bd70      	pop	{r4, r5, r6, pc}
 800e0ca:	1cc4      	adds	r4, r0, #3
 800e0cc:	f024 0403 	bic.w	r4, r4, #3
 800e0d0:	42a0      	cmp	r0, r4
 800e0d2:	d0f8      	beq.n	800e0c6 <sbrk_aligned+0x22>
 800e0d4:	1a21      	subs	r1, r4, r0
 800e0d6:	4628      	mov	r0, r5
 800e0d8:	f000 fcd8 	bl	800ea8c <_sbrk_r>
 800e0dc:	3001      	adds	r0, #1
 800e0de:	d1f2      	bne.n	800e0c6 <sbrk_aligned+0x22>
 800e0e0:	e7ef      	b.n	800e0c2 <sbrk_aligned+0x1e>
 800e0e2:	bf00      	nop
 800e0e4:	20001738 	.word	0x20001738

0800e0e8 <_malloc_r>:
 800e0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0ec:	1ccd      	adds	r5, r1, #3
 800e0ee:	f025 0503 	bic.w	r5, r5, #3
 800e0f2:	3508      	adds	r5, #8
 800e0f4:	2d0c      	cmp	r5, #12
 800e0f6:	bf38      	it	cc
 800e0f8:	250c      	movcc	r5, #12
 800e0fa:	2d00      	cmp	r5, #0
 800e0fc:	4606      	mov	r6, r0
 800e0fe:	db01      	blt.n	800e104 <_malloc_r+0x1c>
 800e100:	42a9      	cmp	r1, r5
 800e102:	d904      	bls.n	800e10e <_malloc_r+0x26>
 800e104:	230c      	movs	r3, #12
 800e106:	6033      	str	r3, [r6, #0]
 800e108:	2000      	movs	r0, #0
 800e10a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e10e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e1e4 <_malloc_r+0xfc>
 800e112:	f000 faa3 	bl	800e65c <__malloc_lock>
 800e116:	f8d8 3000 	ldr.w	r3, [r8]
 800e11a:	461c      	mov	r4, r3
 800e11c:	bb44      	cbnz	r4, 800e170 <_malloc_r+0x88>
 800e11e:	4629      	mov	r1, r5
 800e120:	4630      	mov	r0, r6
 800e122:	f7ff ffbf 	bl	800e0a4 <sbrk_aligned>
 800e126:	1c43      	adds	r3, r0, #1
 800e128:	4604      	mov	r4, r0
 800e12a:	d158      	bne.n	800e1de <_malloc_r+0xf6>
 800e12c:	f8d8 4000 	ldr.w	r4, [r8]
 800e130:	4627      	mov	r7, r4
 800e132:	2f00      	cmp	r7, #0
 800e134:	d143      	bne.n	800e1be <_malloc_r+0xd6>
 800e136:	2c00      	cmp	r4, #0
 800e138:	d04b      	beq.n	800e1d2 <_malloc_r+0xea>
 800e13a:	6823      	ldr	r3, [r4, #0]
 800e13c:	4639      	mov	r1, r7
 800e13e:	4630      	mov	r0, r6
 800e140:	eb04 0903 	add.w	r9, r4, r3
 800e144:	f000 fca2 	bl	800ea8c <_sbrk_r>
 800e148:	4581      	cmp	r9, r0
 800e14a:	d142      	bne.n	800e1d2 <_malloc_r+0xea>
 800e14c:	6821      	ldr	r1, [r4, #0]
 800e14e:	1a6d      	subs	r5, r5, r1
 800e150:	4629      	mov	r1, r5
 800e152:	4630      	mov	r0, r6
 800e154:	f7ff ffa6 	bl	800e0a4 <sbrk_aligned>
 800e158:	3001      	adds	r0, #1
 800e15a:	d03a      	beq.n	800e1d2 <_malloc_r+0xea>
 800e15c:	6823      	ldr	r3, [r4, #0]
 800e15e:	442b      	add	r3, r5
 800e160:	6023      	str	r3, [r4, #0]
 800e162:	f8d8 3000 	ldr.w	r3, [r8]
 800e166:	685a      	ldr	r2, [r3, #4]
 800e168:	bb62      	cbnz	r2, 800e1c4 <_malloc_r+0xdc>
 800e16a:	f8c8 7000 	str.w	r7, [r8]
 800e16e:	e00f      	b.n	800e190 <_malloc_r+0xa8>
 800e170:	6822      	ldr	r2, [r4, #0]
 800e172:	1b52      	subs	r2, r2, r5
 800e174:	d420      	bmi.n	800e1b8 <_malloc_r+0xd0>
 800e176:	2a0b      	cmp	r2, #11
 800e178:	d917      	bls.n	800e1aa <_malloc_r+0xc2>
 800e17a:	1961      	adds	r1, r4, r5
 800e17c:	42a3      	cmp	r3, r4
 800e17e:	6025      	str	r5, [r4, #0]
 800e180:	bf18      	it	ne
 800e182:	6059      	strne	r1, [r3, #4]
 800e184:	6863      	ldr	r3, [r4, #4]
 800e186:	bf08      	it	eq
 800e188:	f8c8 1000 	streq.w	r1, [r8]
 800e18c:	5162      	str	r2, [r4, r5]
 800e18e:	604b      	str	r3, [r1, #4]
 800e190:	4630      	mov	r0, r6
 800e192:	f000 fa69 	bl	800e668 <__malloc_unlock>
 800e196:	f104 000b 	add.w	r0, r4, #11
 800e19a:	1d23      	adds	r3, r4, #4
 800e19c:	f020 0007 	bic.w	r0, r0, #7
 800e1a0:	1ac2      	subs	r2, r0, r3
 800e1a2:	bf1c      	itt	ne
 800e1a4:	1a1b      	subne	r3, r3, r0
 800e1a6:	50a3      	strne	r3, [r4, r2]
 800e1a8:	e7af      	b.n	800e10a <_malloc_r+0x22>
 800e1aa:	6862      	ldr	r2, [r4, #4]
 800e1ac:	42a3      	cmp	r3, r4
 800e1ae:	bf0c      	ite	eq
 800e1b0:	f8c8 2000 	streq.w	r2, [r8]
 800e1b4:	605a      	strne	r2, [r3, #4]
 800e1b6:	e7eb      	b.n	800e190 <_malloc_r+0xa8>
 800e1b8:	4623      	mov	r3, r4
 800e1ba:	6864      	ldr	r4, [r4, #4]
 800e1bc:	e7ae      	b.n	800e11c <_malloc_r+0x34>
 800e1be:	463c      	mov	r4, r7
 800e1c0:	687f      	ldr	r7, [r7, #4]
 800e1c2:	e7b6      	b.n	800e132 <_malloc_r+0x4a>
 800e1c4:	461a      	mov	r2, r3
 800e1c6:	685b      	ldr	r3, [r3, #4]
 800e1c8:	42a3      	cmp	r3, r4
 800e1ca:	d1fb      	bne.n	800e1c4 <_malloc_r+0xdc>
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	6053      	str	r3, [r2, #4]
 800e1d0:	e7de      	b.n	800e190 <_malloc_r+0xa8>
 800e1d2:	230c      	movs	r3, #12
 800e1d4:	6033      	str	r3, [r6, #0]
 800e1d6:	4630      	mov	r0, r6
 800e1d8:	f000 fa46 	bl	800e668 <__malloc_unlock>
 800e1dc:	e794      	b.n	800e108 <_malloc_r+0x20>
 800e1de:	6005      	str	r5, [r0, #0]
 800e1e0:	e7d6      	b.n	800e190 <_malloc_r+0xa8>
 800e1e2:	bf00      	nop
 800e1e4:	2000173c 	.word	0x2000173c

0800e1e8 <_printf_common>:
 800e1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1ec:	4616      	mov	r6, r2
 800e1ee:	4698      	mov	r8, r3
 800e1f0:	688a      	ldr	r2, [r1, #8]
 800e1f2:	690b      	ldr	r3, [r1, #16]
 800e1f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e1f8:	4293      	cmp	r3, r2
 800e1fa:	bfb8      	it	lt
 800e1fc:	4613      	movlt	r3, r2
 800e1fe:	6033      	str	r3, [r6, #0]
 800e200:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e204:	4607      	mov	r7, r0
 800e206:	460c      	mov	r4, r1
 800e208:	b10a      	cbz	r2, 800e20e <_printf_common+0x26>
 800e20a:	3301      	adds	r3, #1
 800e20c:	6033      	str	r3, [r6, #0]
 800e20e:	6823      	ldr	r3, [r4, #0]
 800e210:	0699      	lsls	r1, r3, #26
 800e212:	bf42      	ittt	mi
 800e214:	6833      	ldrmi	r3, [r6, #0]
 800e216:	3302      	addmi	r3, #2
 800e218:	6033      	strmi	r3, [r6, #0]
 800e21a:	6825      	ldr	r5, [r4, #0]
 800e21c:	f015 0506 	ands.w	r5, r5, #6
 800e220:	d106      	bne.n	800e230 <_printf_common+0x48>
 800e222:	f104 0a19 	add.w	sl, r4, #25
 800e226:	68e3      	ldr	r3, [r4, #12]
 800e228:	6832      	ldr	r2, [r6, #0]
 800e22a:	1a9b      	subs	r3, r3, r2
 800e22c:	42ab      	cmp	r3, r5
 800e22e:	dc26      	bgt.n	800e27e <_printf_common+0x96>
 800e230:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e234:	6822      	ldr	r2, [r4, #0]
 800e236:	3b00      	subs	r3, #0
 800e238:	bf18      	it	ne
 800e23a:	2301      	movne	r3, #1
 800e23c:	0692      	lsls	r2, r2, #26
 800e23e:	d42b      	bmi.n	800e298 <_printf_common+0xb0>
 800e240:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e244:	4641      	mov	r1, r8
 800e246:	4638      	mov	r0, r7
 800e248:	47c8      	blx	r9
 800e24a:	3001      	adds	r0, #1
 800e24c:	d01e      	beq.n	800e28c <_printf_common+0xa4>
 800e24e:	6823      	ldr	r3, [r4, #0]
 800e250:	6922      	ldr	r2, [r4, #16]
 800e252:	f003 0306 	and.w	r3, r3, #6
 800e256:	2b04      	cmp	r3, #4
 800e258:	bf02      	ittt	eq
 800e25a:	68e5      	ldreq	r5, [r4, #12]
 800e25c:	6833      	ldreq	r3, [r6, #0]
 800e25e:	1aed      	subeq	r5, r5, r3
 800e260:	68a3      	ldr	r3, [r4, #8]
 800e262:	bf0c      	ite	eq
 800e264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e268:	2500      	movne	r5, #0
 800e26a:	4293      	cmp	r3, r2
 800e26c:	bfc4      	itt	gt
 800e26e:	1a9b      	subgt	r3, r3, r2
 800e270:	18ed      	addgt	r5, r5, r3
 800e272:	2600      	movs	r6, #0
 800e274:	341a      	adds	r4, #26
 800e276:	42b5      	cmp	r5, r6
 800e278:	d11a      	bne.n	800e2b0 <_printf_common+0xc8>
 800e27a:	2000      	movs	r0, #0
 800e27c:	e008      	b.n	800e290 <_printf_common+0xa8>
 800e27e:	2301      	movs	r3, #1
 800e280:	4652      	mov	r2, sl
 800e282:	4641      	mov	r1, r8
 800e284:	4638      	mov	r0, r7
 800e286:	47c8      	blx	r9
 800e288:	3001      	adds	r0, #1
 800e28a:	d103      	bne.n	800e294 <_printf_common+0xac>
 800e28c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e294:	3501      	adds	r5, #1
 800e296:	e7c6      	b.n	800e226 <_printf_common+0x3e>
 800e298:	18e1      	adds	r1, r4, r3
 800e29a:	1c5a      	adds	r2, r3, #1
 800e29c:	2030      	movs	r0, #48	@ 0x30
 800e29e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e2a2:	4422      	add	r2, r4
 800e2a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e2a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e2ac:	3302      	adds	r3, #2
 800e2ae:	e7c7      	b.n	800e240 <_printf_common+0x58>
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	4622      	mov	r2, r4
 800e2b4:	4641      	mov	r1, r8
 800e2b6:	4638      	mov	r0, r7
 800e2b8:	47c8      	blx	r9
 800e2ba:	3001      	adds	r0, #1
 800e2bc:	d0e6      	beq.n	800e28c <_printf_common+0xa4>
 800e2be:	3601      	adds	r6, #1
 800e2c0:	e7d9      	b.n	800e276 <_printf_common+0x8e>
	...

0800e2c4 <_printf_i>:
 800e2c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2c8:	7e0f      	ldrb	r7, [r1, #24]
 800e2ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e2cc:	2f78      	cmp	r7, #120	@ 0x78
 800e2ce:	4691      	mov	r9, r2
 800e2d0:	4680      	mov	r8, r0
 800e2d2:	460c      	mov	r4, r1
 800e2d4:	469a      	mov	sl, r3
 800e2d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e2da:	d807      	bhi.n	800e2ec <_printf_i+0x28>
 800e2dc:	2f62      	cmp	r7, #98	@ 0x62
 800e2de:	d80a      	bhi.n	800e2f6 <_printf_i+0x32>
 800e2e0:	2f00      	cmp	r7, #0
 800e2e2:	f000 80d2 	beq.w	800e48a <_printf_i+0x1c6>
 800e2e6:	2f58      	cmp	r7, #88	@ 0x58
 800e2e8:	f000 80b9 	beq.w	800e45e <_printf_i+0x19a>
 800e2ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e2f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e2f4:	e03a      	b.n	800e36c <_printf_i+0xa8>
 800e2f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e2fa:	2b15      	cmp	r3, #21
 800e2fc:	d8f6      	bhi.n	800e2ec <_printf_i+0x28>
 800e2fe:	a101      	add	r1, pc, #4	@ (adr r1, 800e304 <_printf_i+0x40>)
 800e300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e304:	0800e35d 	.word	0x0800e35d
 800e308:	0800e371 	.word	0x0800e371
 800e30c:	0800e2ed 	.word	0x0800e2ed
 800e310:	0800e2ed 	.word	0x0800e2ed
 800e314:	0800e2ed 	.word	0x0800e2ed
 800e318:	0800e2ed 	.word	0x0800e2ed
 800e31c:	0800e371 	.word	0x0800e371
 800e320:	0800e2ed 	.word	0x0800e2ed
 800e324:	0800e2ed 	.word	0x0800e2ed
 800e328:	0800e2ed 	.word	0x0800e2ed
 800e32c:	0800e2ed 	.word	0x0800e2ed
 800e330:	0800e471 	.word	0x0800e471
 800e334:	0800e39b 	.word	0x0800e39b
 800e338:	0800e42b 	.word	0x0800e42b
 800e33c:	0800e2ed 	.word	0x0800e2ed
 800e340:	0800e2ed 	.word	0x0800e2ed
 800e344:	0800e493 	.word	0x0800e493
 800e348:	0800e2ed 	.word	0x0800e2ed
 800e34c:	0800e39b 	.word	0x0800e39b
 800e350:	0800e2ed 	.word	0x0800e2ed
 800e354:	0800e2ed 	.word	0x0800e2ed
 800e358:	0800e433 	.word	0x0800e433
 800e35c:	6833      	ldr	r3, [r6, #0]
 800e35e:	1d1a      	adds	r2, r3, #4
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	6032      	str	r2, [r6, #0]
 800e364:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e368:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e36c:	2301      	movs	r3, #1
 800e36e:	e09d      	b.n	800e4ac <_printf_i+0x1e8>
 800e370:	6833      	ldr	r3, [r6, #0]
 800e372:	6820      	ldr	r0, [r4, #0]
 800e374:	1d19      	adds	r1, r3, #4
 800e376:	6031      	str	r1, [r6, #0]
 800e378:	0606      	lsls	r6, r0, #24
 800e37a:	d501      	bpl.n	800e380 <_printf_i+0xbc>
 800e37c:	681d      	ldr	r5, [r3, #0]
 800e37e:	e003      	b.n	800e388 <_printf_i+0xc4>
 800e380:	0645      	lsls	r5, r0, #25
 800e382:	d5fb      	bpl.n	800e37c <_printf_i+0xb8>
 800e384:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e388:	2d00      	cmp	r5, #0
 800e38a:	da03      	bge.n	800e394 <_printf_i+0xd0>
 800e38c:	232d      	movs	r3, #45	@ 0x2d
 800e38e:	426d      	negs	r5, r5
 800e390:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e394:	4859      	ldr	r0, [pc, #356]	@ (800e4fc <_printf_i+0x238>)
 800e396:	230a      	movs	r3, #10
 800e398:	e011      	b.n	800e3be <_printf_i+0xfa>
 800e39a:	6821      	ldr	r1, [r4, #0]
 800e39c:	6833      	ldr	r3, [r6, #0]
 800e39e:	0608      	lsls	r0, r1, #24
 800e3a0:	f853 5b04 	ldr.w	r5, [r3], #4
 800e3a4:	d402      	bmi.n	800e3ac <_printf_i+0xe8>
 800e3a6:	0649      	lsls	r1, r1, #25
 800e3a8:	bf48      	it	mi
 800e3aa:	b2ad      	uxthmi	r5, r5
 800e3ac:	2f6f      	cmp	r7, #111	@ 0x6f
 800e3ae:	4853      	ldr	r0, [pc, #332]	@ (800e4fc <_printf_i+0x238>)
 800e3b0:	6033      	str	r3, [r6, #0]
 800e3b2:	bf14      	ite	ne
 800e3b4:	230a      	movne	r3, #10
 800e3b6:	2308      	moveq	r3, #8
 800e3b8:	2100      	movs	r1, #0
 800e3ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e3be:	6866      	ldr	r6, [r4, #4]
 800e3c0:	60a6      	str	r6, [r4, #8]
 800e3c2:	2e00      	cmp	r6, #0
 800e3c4:	bfa2      	ittt	ge
 800e3c6:	6821      	ldrge	r1, [r4, #0]
 800e3c8:	f021 0104 	bicge.w	r1, r1, #4
 800e3cc:	6021      	strge	r1, [r4, #0]
 800e3ce:	b90d      	cbnz	r5, 800e3d4 <_printf_i+0x110>
 800e3d0:	2e00      	cmp	r6, #0
 800e3d2:	d04b      	beq.n	800e46c <_printf_i+0x1a8>
 800e3d4:	4616      	mov	r6, r2
 800e3d6:	fbb5 f1f3 	udiv	r1, r5, r3
 800e3da:	fb03 5711 	mls	r7, r3, r1, r5
 800e3de:	5dc7      	ldrb	r7, [r0, r7]
 800e3e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e3e4:	462f      	mov	r7, r5
 800e3e6:	42bb      	cmp	r3, r7
 800e3e8:	460d      	mov	r5, r1
 800e3ea:	d9f4      	bls.n	800e3d6 <_printf_i+0x112>
 800e3ec:	2b08      	cmp	r3, #8
 800e3ee:	d10b      	bne.n	800e408 <_printf_i+0x144>
 800e3f0:	6823      	ldr	r3, [r4, #0]
 800e3f2:	07df      	lsls	r7, r3, #31
 800e3f4:	d508      	bpl.n	800e408 <_printf_i+0x144>
 800e3f6:	6923      	ldr	r3, [r4, #16]
 800e3f8:	6861      	ldr	r1, [r4, #4]
 800e3fa:	4299      	cmp	r1, r3
 800e3fc:	bfde      	ittt	le
 800e3fe:	2330      	movle	r3, #48	@ 0x30
 800e400:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e404:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e408:	1b92      	subs	r2, r2, r6
 800e40a:	6122      	str	r2, [r4, #16]
 800e40c:	f8cd a000 	str.w	sl, [sp]
 800e410:	464b      	mov	r3, r9
 800e412:	aa03      	add	r2, sp, #12
 800e414:	4621      	mov	r1, r4
 800e416:	4640      	mov	r0, r8
 800e418:	f7ff fee6 	bl	800e1e8 <_printf_common>
 800e41c:	3001      	adds	r0, #1
 800e41e:	d14a      	bne.n	800e4b6 <_printf_i+0x1f2>
 800e420:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e424:	b004      	add	sp, #16
 800e426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e42a:	6823      	ldr	r3, [r4, #0]
 800e42c:	f043 0320 	orr.w	r3, r3, #32
 800e430:	6023      	str	r3, [r4, #0]
 800e432:	4833      	ldr	r0, [pc, #204]	@ (800e500 <_printf_i+0x23c>)
 800e434:	2778      	movs	r7, #120	@ 0x78
 800e436:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e43a:	6823      	ldr	r3, [r4, #0]
 800e43c:	6831      	ldr	r1, [r6, #0]
 800e43e:	061f      	lsls	r7, r3, #24
 800e440:	f851 5b04 	ldr.w	r5, [r1], #4
 800e444:	d402      	bmi.n	800e44c <_printf_i+0x188>
 800e446:	065f      	lsls	r7, r3, #25
 800e448:	bf48      	it	mi
 800e44a:	b2ad      	uxthmi	r5, r5
 800e44c:	6031      	str	r1, [r6, #0]
 800e44e:	07d9      	lsls	r1, r3, #31
 800e450:	bf44      	itt	mi
 800e452:	f043 0320 	orrmi.w	r3, r3, #32
 800e456:	6023      	strmi	r3, [r4, #0]
 800e458:	b11d      	cbz	r5, 800e462 <_printf_i+0x19e>
 800e45a:	2310      	movs	r3, #16
 800e45c:	e7ac      	b.n	800e3b8 <_printf_i+0xf4>
 800e45e:	4827      	ldr	r0, [pc, #156]	@ (800e4fc <_printf_i+0x238>)
 800e460:	e7e9      	b.n	800e436 <_printf_i+0x172>
 800e462:	6823      	ldr	r3, [r4, #0]
 800e464:	f023 0320 	bic.w	r3, r3, #32
 800e468:	6023      	str	r3, [r4, #0]
 800e46a:	e7f6      	b.n	800e45a <_printf_i+0x196>
 800e46c:	4616      	mov	r6, r2
 800e46e:	e7bd      	b.n	800e3ec <_printf_i+0x128>
 800e470:	6833      	ldr	r3, [r6, #0]
 800e472:	6825      	ldr	r5, [r4, #0]
 800e474:	6961      	ldr	r1, [r4, #20]
 800e476:	1d18      	adds	r0, r3, #4
 800e478:	6030      	str	r0, [r6, #0]
 800e47a:	062e      	lsls	r6, r5, #24
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	d501      	bpl.n	800e484 <_printf_i+0x1c0>
 800e480:	6019      	str	r1, [r3, #0]
 800e482:	e002      	b.n	800e48a <_printf_i+0x1c6>
 800e484:	0668      	lsls	r0, r5, #25
 800e486:	d5fb      	bpl.n	800e480 <_printf_i+0x1bc>
 800e488:	8019      	strh	r1, [r3, #0]
 800e48a:	2300      	movs	r3, #0
 800e48c:	6123      	str	r3, [r4, #16]
 800e48e:	4616      	mov	r6, r2
 800e490:	e7bc      	b.n	800e40c <_printf_i+0x148>
 800e492:	6833      	ldr	r3, [r6, #0]
 800e494:	1d1a      	adds	r2, r3, #4
 800e496:	6032      	str	r2, [r6, #0]
 800e498:	681e      	ldr	r6, [r3, #0]
 800e49a:	6862      	ldr	r2, [r4, #4]
 800e49c:	2100      	movs	r1, #0
 800e49e:	4630      	mov	r0, r6
 800e4a0:	f7f1 fe76 	bl	8000190 <memchr>
 800e4a4:	b108      	cbz	r0, 800e4aa <_printf_i+0x1e6>
 800e4a6:	1b80      	subs	r0, r0, r6
 800e4a8:	6060      	str	r0, [r4, #4]
 800e4aa:	6863      	ldr	r3, [r4, #4]
 800e4ac:	6123      	str	r3, [r4, #16]
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e4b4:	e7aa      	b.n	800e40c <_printf_i+0x148>
 800e4b6:	6923      	ldr	r3, [r4, #16]
 800e4b8:	4632      	mov	r2, r6
 800e4ba:	4649      	mov	r1, r9
 800e4bc:	4640      	mov	r0, r8
 800e4be:	47d0      	blx	sl
 800e4c0:	3001      	adds	r0, #1
 800e4c2:	d0ad      	beq.n	800e420 <_printf_i+0x15c>
 800e4c4:	6823      	ldr	r3, [r4, #0]
 800e4c6:	079b      	lsls	r3, r3, #30
 800e4c8:	d413      	bmi.n	800e4f2 <_printf_i+0x22e>
 800e4ca:	68e0      	ldr	r0, [r4, #12]
 800e4cc:	9b03      	ldr	r3, [sp, #12]
 800e4ce:	4298      	cmp	r0, r3
 800e4d0:	bfb8      	it	lt
 800e4d2:	4618      	movlt	r0, r3
 800e4d4:	e7a6      	b.n	800e424 <_printf_i+0x160>
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	4632      	mov	r2, r6
 800e4da:	4649      	mov	r1, r9
 800e4dc:	4640      	mov	r0, r8
 800e4de:	47d0      	blx	sl
 800e4e0:	3001      	adds	r0, #1
 800e4e2:	d09d      	beq.n	800e420 <_printf_i+0x15c>
 800e4e4:	3501      	adds	r5, #1
 800e4e6:	68e3      	ldr	r3, [r4, #12]
 800e4e8:	9903      	ldr	r1, [sp, #12]
 800e4ea:	1a5b      	subs	r3, r3, r1
 800e4ec:	42ab      	cmp	r3, r5
 800e4ee:	dcf2      	bgt.n	800e4d6 <_printf_i+0x212>
 800e4f0:	e7eb      	b.n	800e4ca <_printf_i+0x206>
 800e4f2:	2500      	movs	r5, #0
 800e4f4:	f104 0619 	add.w	r6, r4, #25
 800e4f8:	e7f5      	b.n	800e4e6 <_printf_i+0x222>
 800e4fa:	bf00      	nop
 800e4fc:	08010001 	.word	0x08010001
 800e500:	08010012 	.word	0x08010012

0800e504 <__sflush_r>:
 800e504:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e50c:	0716      	lsls	r6, r2, #28
 800e50e:	4605      	mov	r5, r0
 800e510:	460c      	mov	r4, r1
 800e512:	d454      	bmi.n	800e5be <__sflush_r+0xba>
 800e514:	684b      	ldr	r3, [r1, #4]
 800e516:	2b00      	cmp	r3, #0
 800e518:	dc02      	bgt.n	800e520 <__sflush_r+0x1c>
 800e51a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	dd48      	ble.n	800e5b2 <__sflush_r+0xae>
 800e520:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e522:	2e00      	cmp	r6, #0
 800e524:	d045      	beq.n	800e5b2 <__sflush_r+0xae>
 800e526:	2300      	movs	r3, #0
 800e528:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e52c:	682f      	ldr	r7, [r5, #0]
 800e52e:	6a21      	ldr	r1, [r4, #32]
 800e530:	602b      	str	r3, [r5, #0]
 800e532:	d030      	beq.n	800e596 <__sflush_r+0x92>
 800e534:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e536:	89a3      	ldrh	r3, [r4, #12]
 800e538:	0759      	lsls	r1, r3, #29
 800e53a:	d505      	bpl.n	800e548 <__sflush_r+0x44>
 800e53c:	6863      	ldr	r3, [r4, #4]
 800e53e:	1ad2      	subs	r2, r2, r3
 800e540:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e542:	b10b      	cbz	r3, 800e548 <__sflush_r+0x44>
 800e544:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e546:	1ad2      	subs	r2, r2, r3
 800e548:	2300      	movs	r3, #0
 800e54a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e54c:	6a21      	ldr	r1, [r4, #32]
 800e54e:	4628      	mov	r0, r5
 800e550:	47b0      	blx	r6
 800e552:	1c43      	adds	r3, r0, #1
 800e554:	89a3      	ldrh	r3, [r4, #12]
 800e556:	d106      	bne.n	800e566 <__sflush_r+0x62>
 800e558:	6829      	ldr	r1, [r5, #0]
 800e55a:	291d      	cmp	r1, #29
 800e55c:	d82b      	bhi.n	800e5b6 <__sflush_r+0xb2>
 800e55e:	4a2a      	ldr	r2, [pc, #168]	@ (800e608 <__sflush_r+0x104>)
 800e560:	410a      	asrs	r2, r1
 800e562:	07d6      	lsls	r6, r2, #31
 800e564:	d427      	bmi.n	800e5b6 <__sflush_r+0xb2>
 800e566:	2200      	movs	r2, #0
 800e568:	6062      	str	r2, [r4, #4]
 800e56a:	04d9      	lsls	r1, r3, #19
 800e56c:	6922      	ldr	r2, [r4, #16]
 800e56e:	6022      	str	r2, [r4, #0]
 800e570:	d504      	bpl.n	800e57c <__sflush_r+0x78>
 800e572:	1c42      	adds	r2, r0, #1
 800e574:	d101      	bne.n	800e57a <__sflush_r+0x76>
 800e576:	682b      	ldr	r3, [r5, #0]
 800e578:	b903      	cbnz	r3, 800e57c <__sflush_r+0x78>
 800e57a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e57c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e57e:	602f      	str	r7, [r5, #0]
 800e580:	b1b9      	cbz	r1, 800e5b2 <__sflush_r+0xae>
 800e582:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e586:	4299      	cmp	r1, r3
 800e588:	d002      	beq.n	800e590 <__sflush_r+0x8c>
 800e58a:	4628      	mov	r0, r5
 800e58c:	f000 faa0 	bl	800ead0 <_free_r>
 800e590:	2300      	movs	r3, #0
 800e592:	6363      	str	r3, [r4, #52]	@ 0x34
 800e594:	e00d      	b.n	800e5b2 <__sflush_r+0xae>
 800e596:	2301      	movs	r3, #1
 800e598:	4628      	mov	r0, r5
 800e59a:	47b0      	blx	r6
 800e59c:	4602      	mov	r2, r0
 800e59e:	1c50      	adds	r0, r2, #1
 800e5a0:	d1c9      	bne.n	800e536 <__sflush_r+0x32>
 800e5a2:	682b      	ldr	r3, [r5, #0]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d0c6      	beq.n	800e536 <__sflush_r+0x32>
 800e5a8:	2b1d      	cmp	r3, #29
 800e5aa:	d001      	beq.n	800e5b0 <__sflush_r+0xac>
 800e5ac:	2b16      	cmp	r3, #22
 800e5ae:	d11e      	bne.n	800e5ee <__sflush_r+0xea>
 800e5b0:	602f      	str	r7, [r5, #0]
 800e5b2:	2000      	movs	r0, #0
 800e5b4:	e022      	b.n	800e5fc <__sflush_r+0xf8>
 800e5b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5ba:	b21b      	sxth	r3, r3
 800e5bc:	e01b      	b.n	800e5f6 <__sflush_r+0xf2>
 800e5be:	690f      	ldr	r7, [r1, #16]
 800e5c0:	2f00      	cmp	r7, #0
 800e5c2:	d0f6      	beq.n	800e5b2 <__sflush_r+0xae>
 800e5c4:	0793      	lsls	r3, r2, #30
 800e5c6:	680e      	ldr	r6, [r1, #0]
 800e5c8:	bf08      	it	eq
 800e5ca:	694b      	ldreq	r3, [r1, #20]
 800e5cc:	600f      	str	r7, [r1, #0]
 800e5ce:	bf18      	it	ne
 800e5d0:	2300      	movne	r3, #0
 800e5d2:	eba6 0807 	sub.w	r8, r6, r7
 800e5d6:	608b      	str	r3, [r1, #8]
 800e5d8:	f1b8 0f00 	cmp.w	r8, #0
 800e5dc:	dde9      	ble.n	800e5b2 <__sflush_r+0xae>
 800e5de:	6a21      	ldr	r1, [r4, #32]
 800e5e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e5e2:	4643      	mov	r3, r8
 800e5e4:	463a      	mov	r2, r7
 800e5e6:	4628      	mov	r0, r5
 800e5e8:	47b0      	blx	r6
 800e5ea:	2800      	cmp	r0, #0
 800e5ec:	dc08      	bgt.n	800e600 <__sflush_r+0xfc>
 800e5ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5f6:	81a3      	strh	r3, [r4, #12]
 800e5f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e600:	4407      	add	r7, r0
 800e602:	eba8 0800 	sub.w	r8, r8, r0
 800e606:	e7e7      	b.n	800e5d8 <__sflush_r+0xd4>
 800e608:	dfbffffe 	.word	0xdfbffffe

0800e60c <_fflush_r>:
 800e60c:	b538      	push	{r3, r4, r5, lr}
 800e60e:	690b      	ldr	r3, [r1, #16]
 800e610:	4605      	mov	r5, r0
 800e612:	460c      	mov	r4, r1
 800e614:	b913      	cbnz	r3, 800e61c <_fflush_r+0x10>
 800e616:	2500      	movs	r5, #0
 800e618:	4628      	mov	r0, r5
 800e61a:	bd38      	pop	{r3, r4, r5, pc}
 800e61c:	b118      	cbz	r0, 800e626 <_fflush_r+0x1a>
 800e61e:	6a03      	ldr	r3, [r0, #32]
 800e620:	b90b      	cbnz	r3, 800e626 <_fflush_r+0x1a>
 800e622:	f7ff f9b5 	bl	800d990 <__sinit>
 800e626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d0f3      	beq.n	800e616 <_fflush_r+0xa>
 800e62e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e630:	07d0      	lsls	r0, r2, #31
 800e632:	d404      	bmi.n	800e63e <_fflush_r+0x32>
 800e634:	0599      	lsls	r1, r3, #22
 800e636:	d402      	bmi.n	800e63e <_fflush_r+0x32>
 800e638:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e63a:	f7ff fa8a 	bl	800db52 <__retarget_lock_acquire_recursive>
 800e63e:	4628      	mov	r0, r5
 800e640:	4621      	mov	r1, r4
 800e642:	f7ff ff5f 	bl	800e504 <__sflush_r>
 800e646:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e648:	07da      	lsls	r2, r3, #31
 800e64a:	4605      	mov	r5, r0
 800e64c:	d4e4      	bmi.n	800e618 <_fflush_r+0xc>
 800e64e:	89a3      	ldrh	r3, [r4, #12]
 800e650:	059b      	lsls	r3, r3, #22
 800e652:	d4e1      	bmi.n	800e618 <_fflush_r+0xc>
 800e654:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e656:	f7ff fa7d 	bl	800db54 <__retarget_lock_release_recursive>
 800e65a:	e7dd      	b.n	800e618 <_fflush_r+0xc>

0800e65c <__malloc_lock>:
 800e65c:	4801      	ldr	r0, [pc, #4]	@ (800e664 <__malloc_lock+0x8>)
 800e65e:	f7ff ba78 	b.w	800db52 <__retarget_lock_acquire_recursive>
 800e662:	bf00      	nop
 800e664:	20001734 	.word	0x20001734

0800e668 <__malloc_unlock>:
 800e668:	4801      	ldr	r0, [pc, #4]	@ (800e670 <__malloc_unlock+0x8>)
 800e66a:	f7ff ba73 	b.w	800db54 <__retarget_lock_release_recursive>
 800e66e:	bf00      	nop
 800e670:	20001734 	.word	0x20001734

0800e674 <__sread>:
 800e674:	b510      	push	{r4, lr}
 800e676:	460c      	mov	r4, r1
 800e678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e67c:	f000 f9f4 	bl	800ea68 <_read_r>
 800e680:	2800      	cmp	r0, #0
 800e682:	bfab      	itete	ge
 800e684:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e686:	89a3      	ldrhlt	r3, [r4, #12]
 800e688:	181b      	addge	r3, r3, r0
 800e68a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e68e:	bfac      	ite	ge
 800e690:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e692:	81a3      	strhlt	r3, [r4, #12]
 800e694:	bd10      	pop	{r4, pc}

0800e696 <__swrite>:
 800e696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e69a:	461f      	mov	r7, r3
 800e69c:	898b      	ldrh	r3, [r1, #12]
 800e69e:	05db      	lsls	r3, r3, #23
 800e6a0:	4605      	mov	r5, r0
 800e6a2:	460c      	mov	r4, r1
 800e6a4:	4616      	mov	r6, r2
 800e6a6:	d505      	bpl.n	800e6b4 <__swrite+0x1e>
 800e6a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6ac:	2302      	movs	r3, #2
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	f000 f9c8 	bl	800ea44 <_lseek_r>
 800e6b4:	89a3      	ldrh	r3, [r4, #12]
 800e6b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e6ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e6be:	81a3      	strh	r3, [r4, #12]
 800e6c0:	4632      	mov	r2, r6
 800e6c2:	463b      	mov	r3, r7
 800e6c4:	4628      	mov	r0, r5
 800e6c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6ca:	f000 b9ef 	b.w	800eaac <_write_r>

0800e6ce <__sseek>:
 800e6ce:	b510      	push	{r4, lr}
 800e6d0:	460c      	mov	r4, r1
 800e6d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6d6:	f000 f9b5 	bl	800ea44 <_lseek_r>
 800e6da:	1c43      	adds	r3, r0, #1
 800e6dc:	89a3      	ldrh	r3, [r4, #12]
 800e6de:	bf15      	itete	ne
 800e6e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e6e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e6e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e6ea:	81a3      	strheq	r3, [r4, #12]
 800e6ec:	bf18      	it	ne
 800e6ee:	81a3      	strhne	r3, [r4, #12]
 800e6f0:	bd10      	pop	{r4, pc}

0800e6f2 <__sclose>:
 800e6f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6f6:	f000 b973 	b.w	800e9e0 <_close_r>

0800e6fa <_realloc_r>:
 800e6fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6fe:	4680      	mov	r8, r0
 800e700:	4615      	mov	r5, r2
 800e702:	460c      	mov	r4, r1
 800e704:	b921      	cbnz	r1, 800e710 <_realloc_r+0x16>
 800e706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e70a:	4611      	mov	r1, r2
 800e70c:	f7ff bcec 	b.w	800e0e8 <_malloc_r>
 800e710:	b92a      	cbnz	r2, 800e71e <_realloc_r+0x24>
 800e712:	f000 f9dd 	bl	800ead0 <_free_r>
 800e716:	2400      	movs	r4, #0
 800e718:	4620      	mov	r0, r4
 800e71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e71e:	f000 fa21 	bl	800eb64 <_malloc_usable_size_r>
 800e722:	4285      	cmp	r5, r0
 800e724:	4606      	mov	r6, r0
 800e726:	d802      	bhi.n	800e72e <_realloc_r+0x34>
 800e728:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e72c:	d8f4      	bhi.n	800e718 <_realloc_r+0x1e>
 800e72e:	4629      	mov	r1, r5
 800e730:	4640      	mov	r0, r8
 800e732:	f7ff fcd9 	bl	800e0e8 <_malloc_r>
 800e736:	4607      	mov	r7, r0
 800e738:	2800      	cmp	r0, #0
 800e73a:	d0ec      	beq.n	800e716 <_realloc_r+0x1c>
 800e73c:	42b5      	cmp	r5, r6
 800e73e:	462a      	mov	r2, r5
 800e740:	4621      	mov	r1, r4
 800e742:	bf28      	it	cs
 800e744:	4632      	movcs	r2, r6
 800e746:	f7ff fa06 	bl	800db56 <memcpy>
 800e74a:	4621      	mov	r1, r4
 800e74c:	4640      	mov	r0, r8
 800e74e:	f000 f9bf 	bl	800ead0 <_free_r>
 800e752:	463c      	mov	r4, r7
 800e754:	e7e0      	b.n	800e718 <_realloc_r+0x1e>

0800e756 <__swbuf_r>:
 800e756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e758:	460e      	mov	r6, r1
 800e75a:	4614      	mov	r4, r2
 800e75c:	4605      	mov	r5, r0
 800e75e:	b118      	cbz	r0, 800e768 <__swbuf_r+0x12>
 800e760:	6a03      	ldr	r3, [r0, #32]
 800e762:	b90b      	cbnz	r3, 800e768 <__swbuf_r+0x12>
 800e764:	f7ff f914 	bl	800d990 <__sinit>
 800e768:	69a3      	ldr	r3, [r4, #24]
 800e76a:	60a3      	str	r3, [r4, #8]
 800e76c:	89a3      	ldrh	r3, [r4, #12]
 800e76e:	071a      	lsls	r2, r3, #28
 800e770:	d501      	bpl.n	800e776 <__swbuf_r+0x20>
 800e772:	6923      	ldr	r3, [r4, #16]
 800e774:	b943      	cbnz	r3, 800e788 <__swbuf_r+0x32>
 800e776:	4621      	mov	r1, r4
 800e778:	4628      	mov	r0, r5
 800e77a:	f000 f82b 	bl	800e7d4 <__swsetup_r>
 800e77e:	b118      	cbz	r0, 800e788 <__swbuf_r+0x32>
 800e780:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800e784:	4638      	mov	r0, r7
 800e786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e788:	6823      	ldr	r3, [r4, #0]
 800e78a:	6922      	ldr	r2, [r4, #16]
 800e78c:	1a98      	subs	r0, r3, r2
 800e78e:	6963      	ldr	r3, [r4, #20]
 800e790:	b2f6      	uxtb	r6, r6
 800e792:	4283      	cmp	r3, r0
 800e794:	4637      	mov	r7, r6
 800e796:	dc05      	bgt.n	800e7a4 <__swbuf_r+0x4e>
 800e798:	4621      	mov	r1, r4
 800e79a:	4628      	mov	r0, r5
 800e79c:	f7ff ff36 	bl	800e60c <_fflush_r>
 800e7a0:	2800      	cmp	r0, #0
 800e7a2:	d1ed      	bne.n	800e780 <__swbuf_r+0x2a>
 800e7a4:	68a3      	ldr	r3, [r4, #8]
 800e7a6:	3b01      	subs	r3, #1
 800e7a8:	60a3      	str	r3, [r4, #8]
 800e7aa:	6823      	ldr	r3, [r4, #0]
 800e7ac:	1c5a      	adds	r2, r3, #1
 800e7ae:	6022      	str	r2, [r4, #0]
 800e7b0:	701e      	strb	r6, [r3, #0]
 800e7b2:	6962      	ldr	r2, [r4, #20]
 800e7b4:	1c43      	adds	r3, r0, #1
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d004      	beq.n	800e7c4 <__swbuf_r+0x6e>
 800e7ba:	89a3      	ldrh	r3, [r4, #12]
 800e7bc:	07db      	lsls	r3, r3, #31
 800e7be:	d5e1      	bpl.n	800e784 <__swbuf_r+0x2e>
 800e7c0:	2e0a      	cmp	r6, #10
 800e7c2:	d1df      	bne.n	800e784 <__swbuf_r+0x2e>
 800e7c4:	4621      	mov	r1, r4
 800e7c6:	4628      	mov	r0, r5
 800e7c8:	f7ff ff20 	bl	800e60c <_fflush_r>
 800e7cc:	2800      	cmp	r0, #0
 800e7ce:	d0d9      	beq.n	800e784 <__swbuf_r+0x2e>
 800e7d0:	e7d6      	b.n	800e780 <__swbuf_r+0x2a>
	...

0800e7d4 <__swsetup_r>:
 800e7d4:	b538      	push	{r3, r4, r5, lr}
 800e7d6:	4b29      	ldr	r3, [pc, #164]	@ (800e87c <__swsetup_r+0xa8>)
 800e7d8:	4605      	mov	r5, r0
 800e7da:	6818      	ldr	r0, [r3, #0]
 800e7dc:	460c      	mov	r4, r1
 800e7de:	b118      	cbz	r0, 800e7e8 <__swsetup_r+0x14>
 800e7e0:	6a03      	ldr	r3, [r0, #32]
 800e7e2:	b90b      	cbnz	r3, 800e7e8 <__swsetup_r+0x14>
 800e7e4:	f7ff f8d4 	bl	800d990 <__sinit>
 800e7e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7ec:	0719      	lsls	r1, r3, #28
 800e7ee:	d422      	bmi.n	800e836 <__swsetup_r+0x62>
 800e7f0:	06da      	lsls	r2, r3, #27
 800e7f2:	d407      	bmi.n	800e804 <__swsetup_r+0x30>
 800e7f4:	2209      	movs	r2, #9
 800e7f6:	602a      	str	r2, [r5, #0]
 800e7f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7fc:	81a3      	strh	r3, [r4, #12]
 800e7fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e802:	e033      	b.n	800e86c <__swsetup_r+0x98>
 800e804:	0758      	lsls	r0, r3, #29
 800e806:	d512      	bpl.n	800e82e <__swsetup_r+0x5a>
 800e808:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e80a:	b141      	cbz	r1, 800e81e <__swsetup_r+0x4a>
 800e80c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e810:	4299      	cmp	r1, r3
 800e812:	d002      	beq.n	800e81a <__swsetup_r+0x46>
 800e814:	4628      	mov	r0, r5
 800e816:	f000 f95b 	bl	800ead0 <_free_r>
 800e81a:	2300      	movs	r3, #0
 800e81c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e81e:	89a3      	ldrh	r3, [r4, #12]
 800e820:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e824:	81a3      	strh	r3, [r4, #12]
 800e826:	2300      	movs	r3, #0
 800e828:	6063      	str	r3, [r4, #4]
 800e82a:	6923      	ldr	r3, [r4, #16]
 800e82c:	6023      	str	r3, [r4, #0]
 800e82e:	89a3      	ldrh	r3, [r4, #12]
 800e830:	f043 0308 	orr.w	r3, r3, #8
 800e834:	81a3      	strh	r3, [r4, #12]
 800e836:	6923      	ldr	r3, [r4, #16]
 800e838:	b94b      	cbnz	r3, 800e84e <__swsetup_r+0x7a>
 800e83a:	89a3      	ldrh	r3, [r4, #12]
 800e83c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e840:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e844:	d003      	beq.n	800e84e <__swsetup_r+0x7a>
 800e846:	4621      	mov	r1, r4
 800e848:	4628      	mov	r0, r5
 800e84a:	f000 f83f 	bl	800e8cc <__smakebuf_r>
 800e84e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e852:	f013 0201 	ands.w	r2, r3, #1
 800e856:	d00a      	beq.n	800e86e <__swsetup_r+0x9a>
 800e858:	2200      	movs	r2, #0
 800e85a:	60a2      	str	r2, [r4, #8]
 800e85c:	6962      	ldr	r2, [r4, #20]
 800e85e:	4252      	negs	r2, r2
 800e860:	61a2      	str	r2, [r4, #24]
 800e862:	6922      	ldr	r2, [r4, #16]
 800e864:	b942      	cbnz	r2, 800e878 <__swsetup_r+0xa4>
 800e866:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e86a:	d1c5      	bne.n	800e7f8 <__swsetup_r+0x24>
 800e86c:	bd38      	pop	{r3, r4, r5, pc}
 800e86e:	0799      	lsls	r1, r3, #30
 800e870:	bf58      	it	pl
 800e872:	6962      	ldrpl	r2, [r4, #20]
 800e874:	60a2      	str	r2, [r4, #8]
 800e876:	e7f4      	b.n	800e862 <__swsetup_r+0x8e>
 800e878:	2000      	movs	r0, #0
 800e87a:	e7f7      	b.n	800e86c <__swsetup_r+0x98>
 800e87c:	20000040 	.word	0x20000040

0800e880 <__swhatbuf_r>:
 800e880:	b570      	push	{r4, r5, r6, lr}
 800e882:	460c      	mov	r4, r1
 800e884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e888:	2900      	cmp	r1, #0
 800e88a:	b096      	sub	sp, #88	@ 0x58
 800e88c:	4615      	mov	r5, r2
 800e88e:	461e      	mov	r6, r3
 800e890:	da0d      	bge.n	800e8ae <__swhatbuf_r+0x2e>
 800e892:	89a3      	ldrh	r3, [r4, #12]
 800e894:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e898:	f04f 0100 	mov.w	r1, #0
 800e89c:	bf14      	ite	ne
 800e89e:	2340      	movne	r3, #64	@ 0x40
 800e8a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e8a4:	2000      	movs	r0, #0
 800e8a6:	6031      	str	r1, [r6, #0]
 800e8a8:	602b      	str	r3, [r5, #0]
 800e8aa:	b016      	add	sp, #88	@ 0x58
 800e8ac:	bd70      	pop	{r4, r5, r6, pc}
 800e8ae:	466a      	mov	r2, sp
 800e8b0:	f000 f8a6 	bl	800ea00 <_fstat_r>
 800e8b4:	2800      	cmp	r0, #0
 800e8b6:	dbec      	blt.n	800e892 <__swhatbuf_r+0x12>
 800e8b8:	9901      	ldr	r1, [sp, #4]
 800e8ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e8be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e8c2:	4259      	negs	r1, r3
 800e8c4:	4159      	adcs	r1, r3
 800e8c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e8ca:	e7eb      	b.n	800e8a4 <__swhatbuf_r+0x24>

0800e8cc <__smakebuf_r>:
 800e8cc:	898b      	ldrh	r3, [r1, #12]
 800e8ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e8d0:	079d      	lsls	r5, r3, #30
 800e8d2:	4606      	mov	r6, r0
 800e8d4:	460c      	mov	r4, r1
 800e8d6:	d507      	bpl.n	800e8e8 <__smakebuf_r+0x1c>
 800e8d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e8dc:	6023      	str	r3, [r4, #0]
 800e8de:	6123      	str	r3, [r4, #16]
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	6163      	str	r3, [r4, #20]
 800e8e4:	b003      	add	sp, #12
 800e8e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8e8:	ab01      	add	r3, sp, #4
 800e8ea:	466a      	mov	r2, sp
 800e8ec:	f7ff ffc8 	bl	800e880 <__swhatbuf_r>
 800e8f0:	9f00      	ldr	r7, [sp, #0]
 800e8f2:	4605      	mov	r5, r0
 800e8f4:	4639      	mov	r1, r7
 800e8f6:	4630      	mov	r0, r6
 800e8f8:	f7ff fbf6 	bl	800e0e8 <_malloc_r>
 800e8fc:	b948      	cbnz	r0, 800e912 <__smakebuf_r+0x46>
 800e8fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e902:	059a      	lsls	r2, r3, #22
 800e904:	d4ee      	bmi.n	800e8e4 <__smakebuf_r+0x18>
 800e906:	f023 0303 	bic.w	r3, r3, #3
 800e90a:	f043 0302 	orr.w	r3, r3, #2
 800e90e:	81a3      	strh	r3, [r4, #12]
 800e910:	e7e2      	b.n	800e8d8 <__smakebuf_r+0xc>
 800e912:	89a3      	ldrh	r3, [r4, #12]
 800e914:	6020      	str	r0, [r4, #0]
 800e916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e91a:	81a3      	strh	r3, [r4, #12]
 800e91c:	9b01      	ldr	r3, [sp, #4]
 800e91e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e922:	b15b      	cbz	r3, 800e93c <__smakebuf_r+0x70>
 800e924:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e928:	4630      	mov	r0, r6
 800e92a:	f000 f87b 	bl	800ea24 <_isatty_r>
 800e92e:	b128      	cbz	r0, 800e93c <__smakebuf_r+0x70>
 800e930:	89a3      	ldrh	r3, [r4, #12]
 800e932:	f023 0303 	bic.w	r3, r3, #3
 800e936:	f043 0301 	orr.w	r3, r3, #1
 800e93a:	81a3      	strh	r3, [r4, #12]
 800e93c:	89a3      	ldrh	r3, [r4, #12]
 800e93e:	431d      	orrs	r5, r3
 800e940:	81a5      	strh	r5, [r4, #12]
 800e942:	e7cf      	b.n	800e8e4 <__smakebuf_r+0x18>

0800e944 <_putc_r>:
 800e944:	b570      	push	{r4, r5, r6, lr}
 800e946:	460d      	mov	r5, r1
 800e948:	4614      	mov	r4, r2
 800e94a:	4606      	mov	r6, r0
 800e94c:	b118      	cbz	r0, 800e956 <_putc_r+0x12>
 800e94e:	6a03      	ldr	r3, [r0, #32]
 800e950:	b90b      	cbnz	r3, 800e956 <_putc_r+0x12>
 800e952:	f7ff f81d 	bl	800d990 <__sinit>
 800e956:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e958:	07d8      	lsls	r0, r3, #31
 800e95a:	d405      	bmi.n	800e968 <_putc_r+0x24>
 800e95c:	89a3      	ldrh	r3, [r4, #12]
 800e95e:	0599      	lsls	r1, r3, #22
 800e960:	d402      	bmi.n	800e968 <_putc_r+0x24>
 800e962:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e964:	f7ff f8f5 	bl	800db52 <__retarget_lock_acquire_recursive>
 800e968:	68a3      	ldr	r3, [r4, #8]
 800e96a:	3b01      	subs	r3, #1
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	60a3      	str	r3, [r4, #8]
 800e970:	da05      	bge.n	800e97e <_putc_r+0x3a>
 800e972:	69a2      	ldr	r2, [r4, #24]
 800e974:	4293      	cmp	r3, r2
 800e976:	db12      	blt.n	800e99e <_putc_r+0x5a>
 800e978:	b2eb      	uxtb	r3, r5
 800e97a:	2b0a      	cmp	r3, #10
 800e97c:	d00f      	beq.n	800e99e <_putc_r+0x5a>
 800e97e:	6823      	ldr	r3, [r4, #0]
 800e980:	1c5a      	adds	r2, r3, #1
 800e982:	6022      	str	r2, [r4, #0]
 800e984:	701d      	strb	r5, [r3, #0]
 800e986:	b2ed      	uxtb	r5, r5
 800e988:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e98a:	07da      	lsls	r2, r3, #31
 800e98c:	d405      	bmi.n	800e99a <_putc_r+0x56>
 800e98e:	89a3      	ldrh	r3, [r4, #12]
 800e990:	059b      	lsls	r3, r3, #22
 800e992:	d402      	bmi.n	800e99a <_putc_r+0x56>
 800e994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e996:	f7ff f8dd 	bl	800db54 <__retarget_lock_release_recursive>
 800e99a:	4628      	mov	r0, r5
 800e99c:	bd70      	pop	{r4, r5, r6, pc}
 800e99e:	4629      	mov	r1, r5
 800e9a0:	4622      	mov	r2, r4
 800e9a2:	4630      	mov	r0, r6
 800e9a4:	f7ff fed7 	bl	800e756 <__swbuf_r>
 800e9a8:	4605      	mov	r5, r0
 800e9aa:	e7ed      	b.n	800e988 <_putc_r+0x44>

0800e9ac <memmove>:
 800e9ac:	4288      	cmp	r0, r1
 800e9ae:	b510      	push	{r4, lr}
 800e9b0:	eb01 0402 	add.w	r4, r1, r2
 800e9b4:	d902      	bls.n	800e9bc <memmove+0x10>
 800e9b6:	4284      	cmp	r4, r0
 800e9b8:	4623      	mov	r3, r4
 800e9ba:	d807      	bhi.n	800e9cc <memmove+0x20>
 800e9bc:	1e43      	subs	r3, r0, #1
 800e9be:	42a1      	cmp	r1, r4
 800e9c0:	d008      	beq.n	800e9d4 <memmove+0x28>
 800e9c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e9c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e9ca:	e7f8      	b.n	800e9be <memmove+0x12>
 800e9cc:	4402      	add	r2, r0
 800e9ce:	4601      	mov	r1, r0
 800e9d0:	428a      	cmp	r2, r1
 800e9d2:	d100      	bne.n	800e9d6 <memmove+0x2a>
 800e9d4:	bd10      	pop	{r4, pc}
 800e9d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e9da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e9de:	e7f7      	b.n	800e9d0 <memmove+0x24>

0800e9e0 <_close_r>:
 800e9e0:	b538      	push	{r3, r4, r5, lr}
 800e9e2:	4d06      	ldr	r5, [pc, #24]	@ (800e9fc <_close_r+0x1c>)
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	4604      	mov	r4, r0
 800e9e8:	4608      	mov	r0, r1
 800e9ea:	602b      	str	r3, [r5, #0]
 800e9ec:	f7f3 ff05 	bl	80027fa <_close>
 800e9f0:	1c43      	adds	r3, r0, #1
 800e9f2:	d102      	bne.n	800e9fa <_close_r+0x1a>
 800e9f4:	682b      	ldr	r3, [r5, #0]
 800e9f6:	b103      	cbz	r3, 800e9fa <_close_r+0x1a>
 800e9f8:	6023      	str	r3, [r4, #0]
 800e9fa:	bd38      	pop	{r3, r4, r5, pc}
 800e9fc:	20001740 	.word	0x20001740

0800ea00 <_fstat_r>:
 800ea00:	b538      	push	{r3, r4, r5, lr}
 800ea02:	4d07      	ldr	r5, [pc, #28]	@ (800ea20 <_fstat_r+0x20>)
 800ea04:	2300      	movs	r3, #0
 800ea06:	4604      	mov	r4, r0
 800ea08:	4608      	mov	r0, r1
 800ea0a:	4611      	mov	r1, r2
 800ea0c:	602b      	str	r3, [r5, #0]
 800ea0e:	f7f3 ff00 	bl	8002812 <_fstat>
 800ea12:	1c43      	adds	r3, r0, #1
 800ea14:	d102      	bne.n	800ea1c <_fstat_r+0x1c>
 800ea16:	682b      	ldr	r3, [r5, #0]
 800ea18:	b103      	cbz	r3, 800ea1c <_fstat_r+0x1c>
 800ea1a:	6023      	str	r3, [r4, #0]
 800ea1c:	bd38      	pop	{r3, r4, r5, pc}
 800ea1e:	bf00      	nop
 800ea20:	20001740 	.word	0x20001740

0800ea24 <_isatty_r>:
 800ea24:	b538      	push	{r3, r4, r5, lr}
 800ea26:	4d06      	ldr	r5, [pc, #24]	@ (800ea40 <_isatty_r+0x1c>)
 800ea28:	2300      	movs	r3, #0
 800ea2a:	4604      	mov	r4, r0
 800ea2c:	4608      	mov	r0, r1
 800ea2e:	602b      	str	r3, [r5, #0]
 800ea30:	f7f3 feff 	bl	8002832 <_isatty>
 800ea34:	1c43      	adds	r3, r0, #1
 800ea36:	d102      	bne.n	800ea3e <_isatty_r+0x1a>
 800ea38:	682b      	ldr	r3, [r5, #0]
 800ea3a:	b103      	cbz	r3, 800ea3e <_isatty_r+0x1a>
 800ea3c:	6023      	str	r3, [r4, #0]
 800ea3e:	bd38      	pop	{r3, r4, r5, pc}
 800ea40:	20001740 	.word	0x20001740

0800ea44 <_lseek_r>:
 800ea44:	b538      	push	{r3, r4, r5, lr}
 800ea46:	4d07      	ldr	r5, [pc, #28]	@ (800ea64 <_lseek_r+0x20>)
 800ea48:	4604      	mov	r4, r0
 800ea4a:	4608      	mov	r0, r1
 800ea4c:	4611      	mov	r1, r2
 800ea4e:	2200      	movs	r2, #0
 800ea50:	602a      	str	r2, [r5, #0]
 800ea52:	461a      	mov	r2, r3
 800ea54:	f7f3 fef8 	bl	8002848 <_lseek>
 800ea58:	1c43      	adds	r3, r0, #1
 800ea5a:	d102      	bne.n	800ea62 <_lseek_r+0x1e>
 800ea5c:	682b      	ldr	r3, [r5, #0]
 800ea5e:	b103      	cbz	r3, 800ea62 <_lseek_r+0x1e>
 800ea60:	6023      	str	r3, [r4, #0]
 800ea62:	bd38      	pop	{r3, r4, r5, pc}
 800ea64:	20001740 	.word	0x20001740

0800ea68 <_read_r>:
 800ea68:	b538      	push	{r3, r4, r5, lr}
 800ea6a:	4d07      	ldr	r5, [pc, #28]	@ (800ea88 <_read_r+0x20>)
 800ea6c:	4604      	mov	r4, r0
 800ea6e:	4608      	mov	r0, r1
 800ea70:	4611      	mov	r1, r2
 800ea72:	2200      	movs	r2, #0
 800ea74:	602a      	str	r2, [r5, #0]
 800ea76:	461a      	mov	r2, r3
 800ea78:	f7f3 fea2 	bl	80027c0 <_read>
 800ea7c:	1c43      	adds	r3, r0, #1
 800ea7e:	d102      	bne.n	800ea86 <_read_r+0x1e>
 800ea80:	682b      	ldr	r3, [r5, #0]
 800ea82:	b103      	cbz	r3, 800ea86 <_read_r+0x1e>
 800ea84:	6023      	str	r3, [r4, #0]
 800ea86:	bd38      	pop	{r3, r4, r5, pc}
 800ea88:	20001740 	.word	0x20001740

0800ea8c <_sbrk_r>:
 800ea8c:	b538      	push	{r3, r4, r5, lr}
 800ea8e:	4d06      	ldr	r5, [pc, #24]	@ (800eaa8 <_sbrk_r+0x1c>)
 800ea90:	2300      	movs	r3, #0
 800ea92:	4604      	mov	r4, r0
 800ea94:	4608      	mov	r0, r1
 800ea96:	602b      	str	r3, [r5, #0]
 800ea98:	f7f3 fee4 	bl	8002864 <_sbrk>
 800ea9c:	1c43      	adds	r3, r0, #1
 800ea9e:	d102      	bne.n	800eaa6 <_sbrk_r+0x1a>
 800eaa0:	682b      	ldr	r3, [r5, #0]
 800eaa2:	b103      	cbz	r3, 800eaa6 <_sbrk_r+0x1a>
 800eaa4:	6023      	str	r3, [r4, #0]
 800eaa6:	bd38      	pop	{r3, r4, r5, pc}
 800eaa8:	20001740 	.word	0x20001740

0800eaac <_write_r>:
 800eaac:	b538      	push	{r3, r4, r5, lr}
 800eaae:	4d07      	ldr	r5, [pc, #28]	@ (800eacc <_write_r+0x20>)
 800eab0:	4604      	mov	r4, r0
 800eab2:	4608      	mov	r0, r1
 800eab4:	4611      	mov	r1, r2
 800eab6:	2200      	movs	r2, #0
 800eab8:	602a      	str	r2, [r5, #0]
 800eaba:	461a      	mov	r2, r3
 800eabc:	f7fc f84a 	bl	800ab54 <_write>
 800eac0:	1c43      	adds	r3, r0, #1
 800eac2:	d102      	bne.n	800eaca <_write_r+0x1e>
 800eac4:	682b      	ldr	r3, [r5, #0]
 800eac6:	b103      	cbz	r3, 800eaca <_write_r+0x1e>
 800eac8:	6023      	str	r3, [r4, #0]
 800eaca:	bd38      	pop	{r3, r4, r5, pc}
 800eacc:	20001740 	.word	0x20001740

0800ead0 <_free_r>:
 800ead0:	b538      	push	{r3, r4, r5, lr}
 800ead2:	4605      	mov	r5, r0
 800ead4:	2900      	cmp	r1, #0
 800ead6:	d041      	beq.n	800eb5c <_free_r+0x8c>
 800ead8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eadc:	1f0c      	subs	r4, r1, #4
 800eade:	2b00      	cmp	r3, #0
 800eae0:	bfb8      	it	lt
 800eae2:	18e4      	addlt	r4, r4, r3
 800eae4:	f7ff fdba 	bl	800e65c <__malloc_lock>
 800eae8:	4a1d      	ldr	r2, [pc, #116]	@ (800eb60 <_free_r+0x90>)
 800eaea:	6813      	ldr	r3, [r2, #0]
 800eaec:	b933      	cbnz	r3, 800eafc <_free_r+0x2c>
 800eaee:	6063      	str	r3, [r4, #4]
 800eaf0:	6014      	str	r4, [r2, #0]
 800eaf2:	4628      	mov	r0, r5
 800eaf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eaf8:	f7ff bdb6 	b.w	800e668 <__malloc_unlock>
 800eafc:	42a3      	cmp	r3, r4
 800eafe:	d908      	bls.n	800eb12 <_free_r+0x42>
 800eb00:	6820      	ldr	r0, [r4, #0]
 800eb02:	1821      	adds	r1, r4, r0
 800eb04:	428b      	cmp	r3, r1
 800eb06:	bf01      	itttt	eq
 800eb08:	6819      	ldreq	r1, [r3, #0]
 800eb0a:	685b      	ldreq	r3, [r3, #4]
 800eb0c:	1809      	addeq	r1, r1, r0
 800eb0e:	6021      	streq	r1, [r4, #0]
 800eb10:	e7ed      	b.n	800eaee <_free_r+0x1e>
 800eb12:	461a      	mov	r2, r3
 800eb14:	685b      	ldr	r3, [r3, #4]
 800eb16:	b10b      	cbz	r3, 800eb1c <_free_r+0x4c>
 800eb18:	42a3      	cmp	r3, r4
 800eb1a:	d9fa      	bls.n	800eb12 <_free_r+0x42>
 800eb1c:	6811      	ldr	r1, [r2, #0]
 800eb1e:	1850      	adds	r0, r2, r1
 800eb20:	42a0      	cmp	r0, r4
 800eb22:	d10b      	bne.n	800eb3c <_free_r+0x6c>
 800eb24:	6820      	ldr	r0, [r4, #0]
 800eb26:	4401      	add	r1, r0
 800eb28:	1850      	adds	r0, r2, r1
 800eb2a:	4283      	cmp	r3, r0
 800eb2c:	6011      	str	r1, [r2, #0]
 800eb2e:	d1e0      	bne.n	800eaf2 <_free_r+0x22>
 800eb30:	6818      	ldr	r0, [r3, #0]
 800eb32:	685b      	ldr	r3, [r3, #4]
 800eb34:	6053      	str	r3, [r2, #4]
 800eb36:	4408      	add	r0, r1
 800eb38:	6010      	str	r0, [r2, #0]
 800eb3a:	e7da      	b.n	800eaf2 <_free_r+0x22>
 800eb3c:	d902      	bls.n	800eb44 <_free_r+0x74>
 800eb3e:	230c      	movs	r3, #12
 800eb40:	602b      	str	r3, [r5, #0]
 800eb42:	e7d6      	b.n	800eaf2 <_free_r+0x22>
 800eb44:	6820      	ldr	r0, [r4, #0]
 800eb46:	1821      	adds	r1, r4, r0
 800eb48:	428b      	cmp	r3, r1
 800eb4a:	bf04      	itt	eq
 800eb4c:	6819      	ldreq	r1, [r3, #0]
 800eb4e:	685b      	ldreq	r3, [r3, #4]
 800eb50:	6063      	str	r3, [r4, #4]
 800eb52:	bf04      	itt	eq
 800eb54:	1809      	addeq	r1, r1, r0
 800eb56:	6021      	streq	r1, [r4, #0]
 800eb58:	6054      	str	r4, [r2, #4]
 800eb5a:	e7ca      	b.n	800eaf2 <_free_r+0x22>
 800eb5c:	bd38      	pop	{r3, r4, r5, pc}
 800eb5e:	bf00      	nop
 800eb60:	2000173c 	.word	0x2000173c

0800eb64 <_malloc_usable_size_r>:
 800eb64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb68:	1f18      	subs	r0, r3, #4
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	bfbc      	itt	lt
 800eb6e:	580b      	ldrlt	r3, [r1, r0]
 800eb70:	18c0      	addlt	r0, r0, r3
 800eb72:	4770      	bx	lr

0800eb74 <_init>:
 800eb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb76:	bf00      	nop
 800eb78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb7a:	bc08      	pop	{r3}
 800eb7c:	469e      	mov	lr, r3
 800eb7e:	4770      	bx	lr

0800eb80 <_fini>:
 800eb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb82:	bf00      	nop
 800eb84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb86:	bc08      	pop	{r3}
 800eb88:	469e      	mov	lr, r3
 800eb8a:	4770      	bx	lr
